[
  {
    "origin": "OpenCV: cv::GComputationT&lt; typename &gt; Class Template Reference",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "cv::GComputationT&lt; typename &gt; Class Template Reference",
    "local": ""
  },
  {
    "origin": "This class is a typed wrapper over a regular",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "template&lt;typename&gt;",
    "local": ""
  },
  {
    "origin": "class cv::GComputationT&lt; typename &gt;",
    "local": ""
  },
  {
    "origin": "This class is a typed wrapper over a regular",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "-like template parameter specifies the graph signature so methods so the object's constructor, methods like",
    "local": ""
  },
  {
    "origin": "and the derived",
    "local": ""
  },
  {
    "origin": "also become typed.",
    "local": ""
  },
  {
    "origin": "There is no need to use",
    "local": ""
  },
  {
    "origin": "or",
    "local": ""
  },
  {
    "origin": "modifiers with objects of this class. Instead, all input arguments are followed by all output arguments in the order from the template argument signature.",
    "local": ""
  },
  {
    "origin": "Refer to the following example. Regular (untyped) code is written this way:",
    "local": ""
  },
  {
    "origin": "Here:",
    "local": ""
  },
  {
    "origin": "object is created with a lambda constructor where it is defined as a two-input, one-output graph.",
    "local": ""
  },
  {
    "origin": "Its method",
    "local": ""
  },
  {
    "origin": "in fact takes arbitrary number of arguments (as vectors) so user can pass wrong number of inputs/outputs here. C++ compiler wouldn't notice that since the",
    "local": ""
  },
  {
    "origin": "API is polymorphic, and only a run-time error will be generated.",
    "local": ""
  },
  {
    "origin": "Now the same code written with typed API:",
    "local": ""
  },
  {
    "origin": "The key difference is:",
    "local": ""
  },
  {
    "origin": "Now the constructor lambda",
    "local": ""
  },
  {
    "origin": "must take",
    "local": ""
  },
  {
    "origin": "parameters and",
    "local": ""
  },
  {
    "origin": "must return",
    "local": ""
  },
  {
    "origin": "values as defined in the",
    "local": ""
  },
  {
    "origin": "signature.",
    "local": ""
  },
  {
    "origin": "Its method",
    "local": ""
  },
  {
    "origin": "does not require any extra specifiers to separate input arguments from the output ones",
    "local": ""
  },
  {
    "origin": "A",
    "local": ""
  },
  {
    "origin": "(compilation product) takes input/output arguments with no extra specifiers as well.",
    "local": ""
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": ""
  },
  {
    "origin": "opencv2/gapi/",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:43 for OpenCV by &#160;",
    "local": ""
  }
]