[
  {
    "origin": "OpenCV: opencv2/face/facemark_train.hpp File Reference",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Namespaces",
    "local": ""
  },
  {
    "origin": "Typedefs",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "facemark_train.hpp File Reference",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Abstract base class for trainable facemark models.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Namespaces",
    "local": ""
  },
  {
    "origin": "\"black box\" representation of the file storage associated with a file on disk.",
    "local": ""
  },
  {
    "origin": "Typedefs",
    "local": ""
  },
  {
    "origin": "typedef bool(*&#160;",
    "local": ""
  },
  {
    "origin": ") (InputArray, OutputArray, void *userData)",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "(InputOutputArray image, InputArray points, Scalar color=Scalar(255, 0, 0))",
    "local": ""
  },
  {
    "origin": "Utility to draw the detected facial landmark points.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(InputArray image, OutputArray faces, CParams *params)",
    "local": ""
  },
  {
    "origin": "Default face detector This function is mainly utilized by the implementation of a",
    "local": ""
  },
  {
    "origin": ". End users are advised to use function Facemark::getFaces which can be manually defined and circumvented to the algorithm by Facemark::setFaceDetector.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(InputArray image, OutputArray faces, const String &amp;face_cascade_name)",
    "local": ""
  },
  {
    "origin": "(String imageList, String annotationList, std::vector&lt; String &gt; &amp;images, std::vector&lt; String &gt; &amp;annotations)",
    "local": ""
  },
  {
    "origin": "A utility to load list of paths to training image and annotation file.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(String filename, OutputArray points, float offset=0.0f)",
    "local": ""
  },
  {
    "origin": "A utility to load facial landmark information from a given file.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(String filename, std::vector&lt; String &gt; &amp;images, OutputArray facePoints, char delim=' ', float offset=0.0f)",
    "local": ""
  },
  {
    "origin": "A utility to load facial landmark dataset from a single file.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(String imageList, String groundTruth, std::vector&lt; String &gt; &amp;images, OutputArray facePoints, float offset=0.0f)",
    "local": ""
  },
  {
    "origin": "A utility to load facial landmark information from the dataset.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(std::vector&lt; String &gt; filename, std::vector&lt; std::vector&lt; Point2f &gt; &gt; &amp;trainlandmarks, std::vector&lt; String &gt; &amp;trainimages)",
    "local": ""
  },
  {
    "origin": "This function extracts the data for training from .txt files which contains the corresponding image name and landmarks. The first file in each file should give the path of the image whose landmarks are being described in the file. Then in the subsequent lines there should be coordinates of the landmarks in the image i.e each line should be of the form x,y where x represents the x coordinate of the landmark and y represents the y coordinate of the landmark.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:33 for OpenCV by &#160;",
    "local": ""
  }
]