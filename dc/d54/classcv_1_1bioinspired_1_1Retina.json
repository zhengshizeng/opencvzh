[
  {
    "origin": "OpenCV: cv::bioinspired::Retina Class Reference",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions",
    "local": ""
  },
  {
    "origin": "List of all members",
    "local": ""
  },
  {
    "origin": "cv::bioinspired::Retina Class Reference",
    "local": ""
  },
  {
    "origin": "abstract",
    "local": ""
  },
  {
    "origin": "class which allows the Gipsa/Listic Labs model to be used with OpenCV.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Inheritance diagram for cv::bioinspired::Retina:",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "Activate/desactivate the Parvocellular pathway processing (contours information extraction), by default, it is activated.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "Activate/desactivate the Magnocellular pathway processing (motion information extraction), by default, it is activated.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "inputImage,",
    "local": ""
  },
  {
    "origin": "Method which processes an image in the aim to correct its luminance correct backlight problems, enhance details in shadows.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "Clears all retina buffers.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Retreive retina input buffer size.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "Accessor of the motion channel of the retina (models peripheral vision).",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "Accessor of the motion channel of the retina (models peripheral vision).",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual const",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Retreive retina output buffer size that can be different from the input if a spatial log transformation is applied.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "Accessor of the details channel of the retina (models foveal vision).",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "Accessor of the details channel of the retina (models foveal vision).",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual const",
    "local": ""
  },
  {
    "origin": "virtual const",
    "local": ""
  },
  {
    "origin": "Outputs a string showing the used parameters setup.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "Method which allows retina to be applied on an input image,.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "Activate color saturation as the final step of the color demultiplexing process -&gt; this saturation is a sigmoide function applied to each channel of the demultiplexed image.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "Try to open an XML retina parameters file to adjust current retina instance setup.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "Set parameters values for the Inner Plexiform Layer (IPL) magnocellular channel.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "Setup the OPL and IPL parvo channels (see biologocal model)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "Write xml/yml formated parameters information.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;fs) const",
    "local": ""
  },
  {
    "origin": "Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Clears the algorithm state.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual bool",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Returns true if the",
    "local": ""
  },
  {
    "origin": "is empty (e.g. in the very beginning or after unsuccessful read.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;fn)",
    "local": ""
  },
  {
    "origin": "Reads algorithm parameters from a file storage.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename) const",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;fs, const",
    "local": ""
  },
  {
    "origin": "&amp;name=",
    "local": ""
  },
  {
    "origin": "()) const",
    "local": ""
  },
  {
    "origin": "simplified API for language bindings This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "inputSize)",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "inputSize, const bool colorMode, int colorSamplingMethod=",
    "local": ""
  },
  {
    "origin": ", const bool useRetinaLogSampling=false, const float reductionFactor=1.0f, const float samplingStrength=10.0f)",
    "local": ""
  },
  {
    "origin": "Constructors from standardized interfaces : retreive a smart pointer to a",
    "local": ""
  },
  {
    "origin": "instance.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename, const",
    "local": ""
  },
  {
    "origin": "&amp;objname=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Loads algorithm from the file.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;strModel, const",
    "local": ""
  },
  {
    "origin": "&amp;objname=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Loads algorithm from a String.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;fn)",
    "local": ""
  },
  {
    "origin": "Reads algorithm from the file node.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Additional Inherited Members",
    "local": ""
  },
  {
    "origin": "Protected Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;fs) const",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "class which allows the Gipsa/Listic Labs model to be used with OpenCV.",
    "local": ""
  },
  {
    "origin": "This retina model allows spatio-temporal image processing (applied on still images, video sequences). As a summary, these are the retina model properties:",
    "local": ""
  },
  {
    "origin": "It applies a spectral whithening (mid-frequency details enhancement)",
    "local": ""
  },
  {
    "origin": "high frequency spatio-temporal noise reduction",
    "local": ""
  },
  {
    "origin": "low frequency luminance to be reduced (luminance range compression)",
    "local": ""
  },
  {
    "origin": "local logarithmic luminance compression allows details to be enhanced in low light conditions",
    "local": ""
  },
  {
    "origin": "USE : this model can be used basically for spatio-temporal video effects but also for : _using the getParvo method output matrix : texture analysiswith enhanced signal to noise ratio and enhanced details robust against input images luminance ranges _using the getMagno method output matrix : motion analysis also with the previously cited properties",
    "local": ""
  },
  {
    "origin": "for more information, reer to the following papers : Benoit A., Caplier A., Durette B., Herault, J., \"USING HUMAN VISUAL SYSTEM MODELING FOR BIO-INSPIRED LOW LEVEL IMAGE PROCESSING\", Elsevier, Computer Vision and Image Understanding 114 (2010), pp. 758-773, DOI:",
    "local": ""
  },
  {
    "origin": "http://dx.doi.org/10.1016/j.cviu.2010.01.011",
    "local": ""
  },
  {
    "origin": "Vision: Images, Signals and Neural Networks: Models of Neural Processing in Visual Perception (Progress in Neural Processing),By: Jeanny Herault, ISBN: 9814273686. WAPI (Tower ID): 113266891.",
    "local": ""
  },
  {
    "origin": "The retina filter includes the research contributions of phd/research collegues from which code has been redrawn by the author : take a look at the retinacolor.hpp module to discover Brice Chaix de Lavarene color mosaicing/demosaicing and the reference paper: B. Chaix de Lavarene, D. Alleysson, B. Durette, J. Herault (2007). \"Efficient demosaicing through recursive filtering\", IEEE International Conference on Image Processing ICIP 2007 take a look at imagelogpolprojection.hpp to discover retina spatial log sampling which originates from Barthelemy Durette phd with Jeanny Herault. A",
    "local": ""
  },
  {
    "origin": "/ V1 cortex projection is also proposed and originates from Jeanny's discussions. more informations in the above cited Jeanny Heraults's book.",
    "local": ""
  },
  {
    "origin": "Member Function Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "activateContoursProcessing()",
    "local": ""
  },
  {
    "origin": "virtual void cv::bioinspired::Retina::activateContoursProcessing",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const bool",
    "local": ""
  },
  {
    "origin": "activate",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired_Retina.activateContoursProcessing(",
    "local": ""
  },
  {
    "origin": "activate",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Activate/desactivate the Parvocellular pathway processing (contours information extraction), by default, it is activated.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "activate",
    "local": ""
  },
  {
    "origin": "true if Parvocellular (contours information extraction) output should be activated, false if not... if activated, the Parvocellular output can be retrieved using the",
    "local": ""
  },
  {
    "origin": "methods",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "activateMovingContoursProcessing()",
    "local": ""
  },
  {
    "origin": "virtual void cv::bioinspired::Retina::activateMovingContoursProcessing",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const bool",
    "local": ""
  },
  {
    "origin": "activate",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired_Retina.activateMovingContoursProcessing(",
    "local": ""
  },
  {
    "origin": "activate",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Activate/desactivate the Magnocellular pathway processing (motion information extraction), by default, it is activated.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "activate",
    "local": ""
  },
  {
    "origin": "true if Magnocellular output should be activated, false if not... if activated, the Magnocellular output can be retrieved using the",
    "local": ""
  },
  {
    "origin": "getMagno",
    "local": ""
  },
  {
    "origin": "methods",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "applyFastToneMapping()",
    "local": ""
  },
  {
    "origin": "virtual void cv::bioinspired::Retina::applyFastToneMapping",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "inputImage",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "outputToneMappedImage",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "outputToneMappedImage",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired_Retina.applyFastToneMapping(",
    "local": ""
  },
  {
    "origin": "inputImage[, outputToneMappedImage]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Method which processes an image in the aim to correct its luminance correct backlight problems, enhance details in shadows.",
    "local": ""
  },
  {
    "origin": "This method is designed to perform High Dynamic",
    "local": ""
  },
  {
    "origin": "image tone mapping (compress &gt;8bit/pixel images to 8bit/pixel). This is a simplified version of the",
    "local": ""
  },
  {
    "origin": "Parvocellular model (simplified version of the run/getParvo methods call) since it does not include the spatio-temporal filter modelling the Outer Plexiform Layer of the retina that performs spectral whitening and many other stuff. However, it works great for tone mapping and in a faster way.",
    "local": ""
  },
  {
    "origin": "Check the demos and experiments section to see examples and the way to perform tone mapping using the original retina model and the method.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "inputImage",
    "local": ""
  },
  {
    "origin": "the input image to process (should be coded in float format : CV_32F, CV_32FC1, CV_32F_C3, CV_32F_C4, the 4th channel won't be considered).",
    "local": ""
  },
  {
    "origin": "outputToneMappedImage",
    "local": ""
  },
  {
    "origin": "the output 8bit/channel tone mapped image (CV_8U or CV_8UC3 format).",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "clearBuffers()",
    "local": ""
  },
  {
    "origin": "virtual void cv::bioinspired::Retina::clearBuffers",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired_Retina.clearBuffers(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Clears all retina buffers.",
    "local": ""
  },
  {
    "origin": "(equivalent to opening the eyes after a long period of eye close ;o) whatchout the temporal transition occuring just after this method call.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "create()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; cv::bioinspired::Retina::create",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "inputSize",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired.Retina_create(",
    "local": ""
  },
  {
    "origin": "inputSize",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired.Retina_create(",
    "local": ""
  },
  {
    "origin": "inputSize, colorMode[, colorSamplingMethod[, useRetinaLogSampling[, reductionFactor[, samplingStrength]]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "create()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; cv::bioinspired::Retina::create",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "inputSize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const bool",
    "local": ""
  },
  {
    "origin": "colorMode",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "colorSamplingMethod",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const bool",
    "local": ""
  },
  {
    "origin": "useRetinaLogSampling",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const float",
    "local": ""
  },
  {
    "origin": "reductionFactor",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const float",
    "local": ""
  },
  {
    "origin": "samplingStrength",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired.Retina_create(",
    "local": ""
  },
  {
    "origin": "inputSize",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired.Retina_create(",
    "local": ""
  },
  {
    "origin": "inputSize, colorMode[, colorSamplingMethod[, useRetinaLogSampling[, reductionFactor[, samplingStrength]]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Constructors from standardized interfaces : retreive a smart pointer to a",
    "local": ""
  },
  {
    "origin": "instance.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "inputSize",
    "local": ""
  },
  {
    "origin": "the input frame size",
    "local": ""
  },
  {
    "origin": "colorMode",
    "local": ""
  },
  {
    "origin": "the chosen processing mode : with or without color processing",
    "local": ""
  },
  {
    "origin": "colorSamplingMethod",
    "local": ""
  },
  {
    "origin": "specifies which kind of color sampling will be used :",
    "local": ""
  },
  {
    "origin": ": each pixel position is either R, G or B in a random choice",
    "local": ""
  },
  {
    "origin": ": color sampling is RGBRGBRGB..., line 2 BRGBRGBRG..., line 3, GBRGBRGBR...",
    "local": ""
  },
  {
    "origin": ": standard bayer sampling",
    "local": ""
  },
  {
    "origin": "useRetinaLogSampling",
    "local": ""
  },
  {
    "origin": "activate retina log sampling, if true, the 2 following parameters can be used",
    "local": ""
  },
  {
    "origin": "reductionFactor",
    "local": ""
  },
  {
    "origin": "only usefull if param useRetinaLogSampling=true, specifies the reduction factor of the output frame (as the center (fovea) is high resolution and corners can be underscaled, then a reduction of the output is allowed without precision leak",
    "local": ""
  },
  {
    "origin": "samplingStrength",
    "local": ""
  },
  {
    "origin": "only usefull if param useRetinaLogSampling=true, specifies the strength of the log scale that is applied",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getInputSize()",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "cv::bioinspired::Retina::getInputSize",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired_Retina.getInputSize(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Retreive retina input buffer size.",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "the retina input buffer size",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getMagno()",
    "local": ""
  },
  {
    "origin": "virtual void cv::bioinspired::Retina::getMagno",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "retinaOutput_magno",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retinaOutput_magno",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired_Retina.getMagno(",
    "local": ""
  },
  {
    "origin": "[, retinaOutput_magno]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Accessor of the motion channel of the retina (models peripheral vision).",
    "local": ""
  },
  {
    "origin": "Warning, getMagnoRAW methods return buffers that are not rescaled within range [0;255] while the non RAW method allows a normalized matrix to be retrieved.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "retinaOutput_magno",
    "local": ""
  },
  {
    "origin": "the output buffer (reallocated if necessary), format can be :",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ", this output is rescaled for standard 8bits image processing use in OpenCV",
    "local": ""
  },
  {
    "origin": "RAW methods actually return a 1D matrix (encoding is M1, M2,... Mn), this output is the original retina filter model output, without any quantification or rescaling.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getMagnoRAW()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "virtual void cv::bioinspired::Retina::getMagnoRAW",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "retinaOutput_magno",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retinaOutput_magno",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired_Retina.getMagnoRAW(",
    "local": ""
  },
  {
    "origin": "[, retinaOutput_magno]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired_Retina.getMagnoRAW(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Accessor of the motion channel of the retina (models peripheral vision).",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getMagnoRAW()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "virtual const",
    "local": ""
  },
  {
    "origin": "cv::bioinspired::Retina::getMagnoRAW",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retinaOutput_magno",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired_Retina.getMagnoRAW(",
    "local": ""
  },
  {
    "origin": "[, retinaOutput_magno]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired_Retina.getMagnoRAW(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getOutputSize()",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "cv::bioinspired::Retina::getOutputSize",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired_Retina.getOutputSize(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Retreive retina output buffer size that can be different from the input if a spatial log transformation is applied.",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "the retina output buffer size",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getParameters()",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "cv::bioinspired::Retina::getParameters",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "the current parameters setup",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getParvo()",
    "local": ""
  },
  {
    "origin": "virtual void cv::bioinspired::Retina::getParvo",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "retinaOutput_parvo",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retinaOutput_parvo",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired_Retina.getParvo(",
    "local": ""
  },
  {
    "origin": "[, retinaOutput_parvo]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Accessor of the details channel of the retina (models foveal vision).",
    "local": ""
  },
  {
    "origin": "Warning, getParvoRAW methods return buffers that are not rescaled within range [0;255] while the non RAW method allows a normalized matrix to be retrieved.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "retinaOutput_parvo",
    "local": ""
  },
  {
    "origin": "the output buffer (reallocated if necessary), format can be :",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ", this output is rescaled for standard 8bits image processing use in OpenCV",
    "local": ""
  },
  {
    "origin": "RAW methods actually return a 1D matrix (encoding is R1, R2, ... Rn, G1, G2, ..., Gn, B1, B2, ...Bn), this output is the original retina filter model output, without any quantification or rescaling.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getParvoRAW()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "virtual void cv::bioinspired::Retina::getParvoRAW",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "retinaOutput_parvo",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retinaOutput_parvo",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired_Retina.getParvoRAW(",
    "local": ""
  },
  {
    "origin": "[, retinaOutput_parvo]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired_Retina.getParvoRAW(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Accessor of the details channel of the retina (models foveal vision).",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getParvoRAW()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "virtual const",
    "local": ""
  },
  {
    "origin": "cv::bioinspired::Retina::getParvoRAW",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retinaOutput_parvo",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired_Retina.getParvoRAW(",
    "local": ""
  },
  {
    "origin": "[, retinaOutput_parvo]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired_Retina.getParvoRAW(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "printSetup()",
    "local": ""
  },
  {
    "origin": "virtual const",
    "local": ""
  },
  {
    "origin": "cv::bioinspired::Retina::printSetup",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired_Retina.printSetup(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Outputs a string showing the used parameters setup.",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "a string which contains formated parameters information",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "run()",
    "local": ""
  },
  {
    "origin": "virtual void cv::bioinspired::Retina::run",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "inputImage",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired_Retina.run(",
    "local": ""
  },
  {
    "origin": "inputImage",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Method which allows retina to be applied on an input image,.",
    "local": ""
  },
  {
    "origin": "after run, encapsulated retina module is ready to deliver its outputs using dedicated acccessors, see getParvo and getMagno methods",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "inputImage",
    "local": ""
  },
  {
    "origin": "the input",
    "local": ""
  },
  {
    "origin": "image to be processed, can be gray level or BGR coded in any format (from 8bit to 16bits)",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "setColorSaturation()",
    "local": ""
  },
  {
    "origin": "virtual void cv::bioinspired::Retina::setColorSaturation",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const bool",
    "local": ""
  },
  {
    "origin": "saturateColors",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const float",
    "local": ""
  },
  {
    "origin": "colorSaturationValue",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired_Retina.setColorSaturation(",
    "local": ""
  },
  {
    "origin": "[, saturateColors[, colorSaturationValue]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Activate color saturation as the final step of the color demultiplexing process -&gt; this saturation is a sigmoide function applied to each channel of the demultiplexed image.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "saturateColors",
    "local": ""
  },
  {
    "origin": "boolean that activates color saturation (if true) or desactivate (if false)",
    "local": ""
  },
  {
    "origin": "colorSaturationValue",
    "local": ""
  },
  {
    "origin": "the saturation factor : a simple factor applied on the chrominance buffers",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "setup()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "virtual void cv::bioinspired::Retina::setup",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "retinaParameterFile",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const bool",
    "local": ""
  },
  {
    "origin": "applyDefaultSetupOnFailure",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired_Retina.setup(",
    "local": ""
  },
  {
    "origin": "[, retinaParameterFile[, applyDefaultSetupOnFailure]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Try to open an XML retina parameters file to adjust current retina instance setup.",
    "local": ""
  },
  {
    "origin": "if the xml file does not exist, then default setup is applied",
    "local": ""
  },
  {
    "origin": "warning, Exceptions are thrown if read XML file is not valid",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "retinaParameterFile",
    "local": ""
  },
  {
    "origin": "the parameters filename",
    "local": ""
  },
  {
    "origin": "applyDefaultSetupOnFailure",
    "local": ""
  },
  {
    "origin": "set to true if an error must be thrown on error",
    "local": ""
  },
  {
    "origin": "You can retrieve the current parameters structure using the method",
    "local": ""
  },
  {
    "origin": "and update it before running method",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "setup()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "virtual void cv::bioinspired::Retina::setup",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "fs",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const bool",
    "local": ""
  },
  {
    "origin": "applyDefaultSetupOnFailure",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired_Retina.setup(",
    "local": ""
  },
  {
    "origin": "[, retinaParameterFile[, applyDefaultSetupOnFailure]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "fs",
    "local": ""
  },
  {
    "origin": "the open Filestorage which contains retina parameters",
    "local": ""
  },
  {
    "origin": "applyDefaultSetupOnFailure",
    "local": ""
  },
  {
    "origin": "set to true if an error must be thrown on error",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "setup()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "virtual void cv::bioinspired::Retina::setup",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "newParameters",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired_Retina.setup(",
    "local": ""
  },
  {
    "origin": "[, retinaParameterFile[, applyDefaultSetupOnFailure]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "newParameters",
    "local": ""
  },
  {
    "origin": "a parameters structures updated with the new target configuration.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "setupIPLMagnoChannel()",
    "local": ""
  },
  {
    "origin": "virtual void cv::bioinspired::Retina::setupIPLMagnoChannel",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const bool",
    "local": ""
  },
  {
    "origin": "normaliseOutput",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const float",
    "local": ""
  },
  {
    "origin": "parasolCells_beta",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const float",
    "local": ""
  },
  {
    "origin": "parasolCells_tau",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const float",
    "local": ""
  },
  {
    "origin": "parasolCells_k",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const float",
    "local": ""
  },
  {
    "origin": "amacrinCellsTemporalCutFrequency",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const float",
    "local": ""
  },
  {
    "origin": "V0CompressionParameter",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const float",
    "local": ""
  },
  {
    "origin": "localAdaptintegration_tau",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const float",
    "local": ""
  },
  {
    "origin": "localAdaptintegration_k",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired_Retina.setupIPLMagnoChannel(",
    "local": ""
  },
  {
    "origin": "[, normaliseOutput[, parasolCells_beta[, parasolCells_tau[, parasolCells_k[, amacrinCellsTemporalCutFrequency[, V0CompressionParameter[, localAdaptintegration_tau[, localAdaptintegration_k]]]]]]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Set parameters values for the Inner Plexiform Layer (IPL) magnocellular channel.",
    "local": ""
  },
  {
    "origin": "this channel processes signals output from OPL processing stage in peripheral vision, it allows motion information enhancement. It is decorrelated from the details channel. See reference papers for more details.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "normaliseOutput",
    "local": ""
  },
  {
    "origin": "specifies if (true) output is rescaled between 0 and 255 of not (false)",
    "local": ""
  },
  {
    "origin": "parasolCells_beta",
    "local": ""
  },
  {
    "origin": "parasolCells_tau",
    "local": ""
  },
  {
    "origin": "parasolCells_k",
    "local": ""
  },
  {
    "origin": "amacrinCellsTemporalCutFrequency",
    "local": ""
  },
  {
    "origin": "V0CompressionParameter",
    "local": ""
  },
  {
    "origin": "the compression strengh of the ganglion cells local adaptation output, set a value between 0.6 and 1 for best results, a high value increases more the low value sensitivity... and the output saturates faster, recommended value: 0.95",
    "local": ""
  },
  {
    "origin": "localAdaptintegration_tau",
    "local": ""
  },
  {
    "origin": "specifies the temporal constant of the low pas filter involved in the computation of the local \"motion mean\" for the local adaptation computation",
    "local": ""
  },
  {
    "origin": "localAdaptintegration_k",
    "local": ""
  },
  {
    "origin": "specifies the spatial constant of the low pas filter involved in the computation of the local \"motion mean\" for the local adaptation computation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "setupOPLandIPLParvoChannel()",
    "local": ""
  },
  {
    "origin": "virtual void cv::bioinspired::Retina::setupOPLandIPLParvoChannel",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const bool",
    "local": ""
  },
  {
    "origin": "colorMode",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const bool",
    "local": ""
  },
  {
    "origin": "normaliseOutput",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const float",
    "local": ""
  },
  {
    "origin": "photoreceptorsLocalAdaptationSensitivity",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const float",
    "local": ""
  },
  {
    "origin": "photoreceptorsTemporalConstant",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const float",
    "local": ""
  },
  {
    "origin": "photoreceptorsSpatialConstant",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const float",
    "local": ""
  },
  {
    "origin": "horizontalCellsGain",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const float",
    "local": ""
  },
  {
    "origin": "HcellsTemporalConstant",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const float",
    "local": ""
  },
  {
    "origin": "HcellsSpatialConstant",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const float",
    "local": ""
  },
  {
    "origin": "ganglionCellsSensitivity",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired_Retina.setupOPLandIPLParvoChannel(",
    "local": ""
  },
  {
    "origin": "[, colorMode[, normaliseOutput[, photoreceptorsLocalAdaptationSensitivity[, photoreceptorsTemporalConstant[, photoreceptorsSpatialConstant[, horizontalCellsGain[, HcellsTemporalConstant[, HcellsSpatialConstant[, ganglionCellsSensitivity]]]]]]]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Setup the OPL and IPL parvo channels (see biologocal model)",
    "local": ""
  },
  {
    "origin": "OPL is referred as Outer Plexiform Layer of the retina, it allows the spatio-temporal filtering which withens the spectrum and reduces spatio-temporal noise while attenuating global luminance (low frequency energy) IPL parvo is the OPL next processing stage, it refers to a part of the Inner Plexiform layer of the retina, it allows high contours sensitivity in foveal vision. See reference papers for more informations. for more informations, please have a look at the paper Benoit A., Caplier A., Durette B., Herault, J., \"USING HUMAN VISUAL SYSTEM MODELING FOR BIO-INSPIRED LOW LEVEL IMAGE PROCESSING\", Elsevier, Computer Vision and Image Understanding 114 (2010), pp. 758-773, DOI:",
    "local": ""
  },
  {
    "origin": "http://dx.doi.org/10.1016/j.cviu.2010.01.011",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "colorMode",
    "local": ""
  },
  {
    "origin": "specifies if (true) color is processed of not (false) to then processing gray level image",
    "local": ""
  },
  {
    "origin": "normaliseOutput",
    "local": ""
  },
  {
    "origin": "specifies if (true) output is rescaled between 0 and 255 of not (false)",
    "local": ""
  },
  {
    "origin": "photoreceptorsLocalAdaptationSensitivity",
    "local": ""
  },
  {
    "origin": "photoreceptorsTemporalConstant",
    "local": ""
  },
  {
    "origin": "the time constant of the first order low pass filter of the photoreceptors, use it to cut high temporal frequencies (noise or fast motion), unit is frames, typical value is 1 frame",
    "local": ""
  },
  {
    "origin": "photoreceptorsSpatialConstant",
    "local": ""
  },
  {
    "origin": "the spatial constant of the first order low pass filter of the photoreceptors, use it to cut high spatial frequencies (noise or thick contours), unit is pixels, typical value is 1 pixel",
    "local": ""
  },
  {
    "origin": "horizontalCellsGain",
    "local": ""
  },
  {
    "origin": "gain of the horizontal cells network, if 0, then the mean value of the output is zero, if the parameter is near 1, then, the luminance is not filtered and is still reachable at the output, typicall value is 0",
    "local": ""
  },
  {
    "origin": "HcellsTemporalConstant",
    "local": ""
  },
  {
    "origin": "the time constant of the first order low pass filter of the horizontal cells, use it to cut low temporal frequencies (local luminance variations), unit is frames, typical value is 1 frame, as the photoreceptors",
    "local": ""
  },
  {
    "origin": "HcellsSpatialConstant",
    "local": ""
  },
  {
    "origin": "the spatial constant of the first order low pass filter of the horizontal cells, use it to cut low spatial frequencies (local luminance), unit is pixels, typical value is 5 pixel, this value is also used for local contrast computing when computing the local contrast adaptation at the ganglion cells level (Inner Plexiform Layer parvocellular channel model)",
    "local": ""
  },
  {
    "origin": "ganglionCellsSensitivity",
    "local": ""
  },
  {
    "origin": "the compression strengh of the ganglion cells local adaptation output, set a value between 0.6 and 1 for best results, a high value increases more the low value sensitivity... and the output saturates faster, recommended value: 0.7",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "write()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "virtual void cv::bioinspired::Retina::write",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "fs",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired_Retina.write(",
    "local": ""
  },
  {
    "origin": "fs",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Write xml/yml formated parameters information.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "fs",
    "local": ""
  },
  {
    "origin": "the filename of the xml file that will be open and writen with formatted parameters information",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "write()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "virtual void cv::bioinspired::Retina::write",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "fs",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.bioinspired_Retina.write(",
    "local": ""
  },
  {
    "origin": "fs",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Reimplemented from",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": ""
  },
  {
    "origin": "opencv2/bioinspired/",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:44 for OpenCV by",
    "local": ""
  }
]