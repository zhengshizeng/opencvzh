[
  {
    "origin": "OpenCV: Real Time pose estimation of a textured object",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Real Time pose estimation of a textured object",
    "local": ""
  },
  {
    "origin": "Prev Tutorial:",
    "local": ""
  },
  {
    "origin": "Next Tutorial:",
    "local": ""
  },
  {
    "origin": "Original author",
    "local": ""
  },
  {
    "origin": "Edgar Riba",
    "local": ""
  },
  {
    "origin": "Compatibility",
    "local": ""
  },
  {
    "origin": "OpenCV &gt;= 3.0",
    "local": ""
  },
  {
    "origin": "Nowadays, augmented reality is one of the top research topic in computer vision and robotics fields. The most elemental problem in augmented reality is the estimation of the camera pose respect of an object in the case of computer vision area to do later some 3D rendering or in the case of robotics obtain an object pose in order to grasp it and do some manipulation. However, this is not a trivial problem to solve due to the fact that the most common issue in image processing is the computational cost of applying a lot of algorithms or mathematical operations for solving a problem which is basic and immediately for humans.",
    "local": ""
  },
  {
    "origin": "Goal",
    "local": ""
  },
  {
    "origin": "In this tutorial is explained how to build a real time application to estimate the camera pose in order to track a textured object with six degrees of freedom given a 2D image and its 3D textured model.",
    "local": ""
  },
  {
    "origin": "The application will have the following parts:",
    "local": ""
  },
  {
    "origin": "Read 3D textured object model and object mesh.",
    "local": ""
  },
  {
    "origin": "Take input from Camera or Video.",
    "local": ""
  },
  {
    "origin": "Extract ORB features and descriptors from the scene.",
    "local": ""
  },
  {
    "origin": "Match scene descriptors with model descriptors using Flann matcher.",
    "local": ""
  },
  {
    "origin": "Pose estimation using PnP + Ransac.",
    "local": ""
  },
  {
    "origin": "Linear Kalman Filter for bad poses rejection.",
    "local": ""
  },
  {
    "origin": "Theory",
    "local": ""
  },
  {
    "origin": "In computer vision estimate the camera pose from",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": "3D-to-2D point correspondences is a fundamental and well understood problem. The most general version of the problem requires estimating the six degrees of freedom of the pose and five calibration parameters: focal length, principal point, aspect ratio and skew. It could be established with a minimum of 6 correspondences, using the well known Direct Linear Transform (DLT) algorithm. There are, though, several simplifications to the problem which turn into an extensive list of different algorithms that improve the accuracy of the DLT.",
    "local": ""
  },
  {
    "origin": "The most common simplification is to assume known calibration parameters which is the so-called Perspective-*n*-Point problem:",
    "local": ""
  },
  {
    "origin": "Problem Formulation:",
    "local": ""
  },
  {
    "origin": "Given a set of correspondences between 3D points \\(p_i\\) expressed in a world reference frame, and their 2D projections \\(u_i\\) onto the image, we seek to retrieve the pose ( \\(R\\) and \\(t\\)) of the camera w.r.t. the world and the focal length \\(f\\).",
    "local": ""
  },
  {
    "origin": "OpenCV provides four different approaches to solve the Perspective-*n*-Point problem which return \\(R\\) and \\(t\\). Then, using the following formula it's possible to project 3D points into the image plane:",
    "local": ""
  },
  {
    "origin": "\\[s\\ \\left [ \\begin{matrix} u \\\\ v \\\\ 1 \\end{matrix} \\right ] = \\left [ \\begin{matrix} f_x &amp; 0 &amp; c_x \\\\ 0 &amp; f_y &amp; c_y \\\\ 0 &amp; 0 &amp; 1 \\end{matrix} \\right ] \\left [ \\begin{matrix} r_{11} &amp; r_{12} &amp; r_{13} &amp; t_1 \\\\ r_{21} &amp; r_{22} &amp; r_{23} &amp; t_2 \\\\ r_{31} &amp; r_{32} &amp; r_{33} &amp; t_3 \\end{matrix} \\right ] \\left [ \\begin{matrix} X \\\\ Y \\\\ Z\\\\ 1 \\end{matrix} \\right ]\\]",
    "local": ""
  },
  {
    "origin": "The complete documentation of how to manage with this equations is in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Source code",
    "local": ""
  },
  {
    "origin": "You can find the source code of this tutorial in the",
    "local": ""
  },
  {
    "origin": "folder of the OpenCV source library.",
    "local": ""
  },
  {
    "origin": "The tutorial consists of two main programs:",
    "local": ""
  },
  {
    "origin": "Model registration",
    "local": ""
  },
  {
    "origin": "This application is exclusive to whom don't have a 3D textured model of the object to be detected. You can use this program to create your own textured 3D model. This program only works for planar objects, then if you want to model an object with complex shape you should use a sophisticated software to create it.",
    "local": ""
  },
  {
    "origin": "The application needs an input image of the object to be registered and its 3D mesh. We have also to provide the intrinsic parameters of the camera with which the input image was taken. All the files need to be specified using the absolute path or the relative one from your application’s working directory. If none files are specified the program will try to open the provided default parameters.",
    "local": ""
  },
  {
    "origin": "The application starts up extracting the ORB features and descriptors from the input image and then uses the mesh along with the",
    "local": ""
  },
  {
    "origin": "Möller–Trumbore intersection algorithm",
    "local": ""
  },
  {
    "origin": "to compute the 3D coordinates of the found features. Finally, the 3D points and the descriptors are stored in different lists in a file with YAML format which each row is a different point. The technical background on how to store the files can be found in the",
    "local": ""
  },
  {
    "origin": "tutorial.",
    "local": ""
  },
  {
    "origin": "Model detection",
    "local": ""
  },
  {
    "origin": "The aim of this application is estimate in real time the object pose given its 3D textured model.",
    "local": ""
  },
  {
    "origin": "The application starts up loading the 3D textured model in YAML file format with the same structure explained in the model registration program. From the scene, the ORB features and descriptors are detected and extracted. Then, is used",
    "local": ""
  },
  {
    "origin": "with",
    "local": ""
  },
  {
    "origin": "to do the matching between the scene descriptors and the model descriptors. Using the found matches along with",
    "local": ""
  },
  {
    "origin": "function the",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "of the camera are computed. Finally, a KalmanFilter is applied in order to reject bad poses.",
    "local": ""
  },
  {
    "origin": "In the case that you compiled OpenCV with the samples, you can find it in opencv/build/bin/cpp-tutorial-pnp_detection`. Then you can run the application and change some parameters:",
    "local": ""
  },
  {
    "origin": "For example, you can run the application changing the pnp method:",
    "local": ""
  },
  {
    "origin": "Explanation",
    "local": ""
  },
  {
    "origin": "Here is explained in detail the code for the real time application:",
    "local": ""
  },
  {
    "origin": "Read 3D textured object model and object mesh.",
    "local": ""
  },
  {
    "origin": "In order to load the textured model I implemented the",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Model",
    "local": ""
  },
  {
    "origin": "which has the function",
    "local": ""
  },
  {
    "origin": "load()",
    "local": ""
  },
  {
    "origin": "that opens a YAML file and take the stored 3D points with its corresponding descriptors. You can find an example of a 3D textured model in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "In the main program the model is loaded as follows:",
    "local": ""
  },
  {
    "origin": "In order to read the model mesh I implemented a",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Mesh",
    "local": ""
  },
  {
    "origin": "which has a function",
    "local": ""
  },
  {
    "origin": "load()",
    "local": ""
  },
  {
    "origin": "that opens a \\(*\\).ply file and store the 3D points of the object and also the composed triangles. You can find an example of a model mesh in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "In the main program the mesh is loaded as follows:",
    "local": ""
  },
  {
    "origin": "You can also load different model and mesh:",
    "local": ""
  },
  {
    "origin": "Take input from Camera or Video",
    "local": ""
  },
  {
    "origin": "To detect is necessary capture video. It's done loading a recorded video by passing the absolute path where it is located in your machine. In order to test the application you can find a recorded video in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Then the algorithm is computed frame per frame:",
    "local": ""
  },
  {
    "origin": "You can also load different recorded video:",
    "local": ""
  },
  {
    "origin": "Extract ORB features and descriptors from the scene",
    "local": ""
  },
  {
    "origin": "The next step is to detect the scene features and extract it descriptors. For this task I implemented a",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "RobustMatcher",
    "local": ""
  },
  {
    "origin": "which has a function for keypoints detection and features extraction. You can find it in",
    "local": ""
  },
  {
    "origin": ". In your",
    "local": ""
  },
  {
    "origin": "RobusMatch",
    "local": ""
  },
  {
    "origin": "object you can use any of the 2D features detectors of OpenCV. In this case I used",
    "local": ""
  },
  {
    "origin": "features because is based on",
    "local": ""
  },
  {
    "origin": "to detect the keypoints and",
    "local": ""
  },
  {
    "origin": "to extract the descriptors which means that is fast and robust to rotations. You can find more detailed information about",
    "local": ""
  },
  {
    "origin": "ORB",
    "local": ""
  },
  {
    "origin": "in the documentation.",
    "local": ""
  },
  {
    "origin": "The following code is how to instantiate and set the features detector and the descriptors extractor:",
    "local": ""
  },
  {
    "origin": "The features and descriptors will be computed by the",
    "local": ""
  },
  {
    "origin": "RobustMatcher",
    "local": ""
  },
  {
    "origin": "inside the matching function.",
    "local": ""
  },
  {
    "origin": "Match scene descriptors with model descriptors using Flann matcher",
    "local": ""
  },
  {
    "origin": "It is the first step in our detection algorithm. The main idea is to match the scene descriptors with our model descriptors in order to know the 3D coordinates of the found features into the current scene.",
    "local": ""
  },
  {
    "origin": "Firstly, we have to set which matcher we want to use. In this case is used",
    "local": ""
  },
  {
    "origin": "matcher which in terms of computational cost is faster than the",
    "local": ""
  },
  {
    "origin": "matcher as we increase the trained collection of features. Then, for FlannBased matcher the index created is",
    "local": ""
  },
  {
    "origin": "Multi-Probe LSH: Efficient Indexing for High-Dimensional Similarity Search",
    "local": ""
  },
  {
    "origin": "due to",
    "local": ""
  },
  {
    "origin": "ORB",
    "local": ""
  },
  {
    "origin": "descriptors are binary.",
    "local": ""
  },
  {
    "origin": "You can tune the",
    "local": ""
  },
  {
    "origin": "LSH",
    "local": ""
  },
  {
    "origin": "and search parameters to improve the matching efficiency:",
    "local": ""
  },
  {
    "origin": "Secondly, we have to call the matcher by using",
    "local": ""
  },
  {
    "origin": "robustMatch()",
    "local": ""
  },
  {
    "origin": "or",
    "local": ""
  },
  {
    "origin": "fastRobustMatch()",
    "local": ""
  },
  {
    "origin": "function. The difference of using this two functions is its computational cost. The first method is slower but more robust at filtering good matches because uses two ratio test and a symmetry test. In contrast, the second method is faster but less robust because only applies a single ratio test to the matches.",
    "local": ""
  },
  {
    "origin": "The following code is to get the model 3D points and its descriptors and then call the matcher in the main program:",
    "local": ""
  },
  {
    "origin": "The following code corresponds to the",
    "local": ""
  },
  {
    "origin": "robustMatch()",
    "local": ""
  },
  {
    "origin": "function which belongs to the",
    "local": ""
  },
  {
    "origin": "RobustMatcher",
    "local": ""
  },
  {
    "origin": "class. This function uses the given image to detect the keypoints and extract the descriptors, match using",
    "local": ""
  },
  {
    "origin": "two Nearest Neighbour",
    "local": ""
  },
  {
    "origin": "the extracted descriptors with the given model descriptors and vice versa. Then, a ratio test is applied to the two direction matches in order to remove these matches which its distance ratio between the first and second best match is larger than a given threshold. Finally, a symmetry test is applied in order the remove non symmetrical matches.",
    "local": ""
  },
  {
    "origin": "After the matches filtering we have to subtract the 2D and 3D correspondences from the found scene keypoints and our 3D model using the obtained",
    "local": ""
  },
  {
    "origin": "DMatches",
    "local": ""
  },
  {
    "origin": "vector. For more information about",
    "local": ""
  },
  {
    "origin": "check the documentation.",
    "local": ""
  },
  {
    "origin": "You can also change the ratio test threshold, the number of keypoints to detect as well as use or not the robust matcher:",
    "local": ""
  },
  {
    "origin": "Pose estimation using PnP + Ransac",
    "local": ""
  },
  {
    "origin": "Once with the 2D and 3D correspondences we have to apply a PnP algorithm in order to estimate the camera pose. The reason why we have to use",
    "local": ""
  },
  {
    "origin": "instead of",
    "local": ""
  },
  {
    "origin": "is due to the fact that after the matching not all the found correspondences are correct and, as like as not, there are false correspondences or also called",
    "local": ""
  },
  {
    "origin": "outliers",
    "local": ""
  },
  {
    "origin": ". The",
    "local": ""
  },
  {
    "origin": "Random Sample Consensus",
    "local": ""
  },
  {
    "origin": "or",
    "local": ""
  },
  {
    "origin": "Ransac",
    "local": ""
  },
  {
    "origin": "is a non-deterministic iterative method which estimate parameters of a mathematical model from observed data producing an approximate result as the number of iterations increase. After applying",
    "local": ""
  },
  {
    "origin": "Ransac",
    "local": ""
  },
  {
    "origin": "all the",
    "local": ""
  },
  {
    "origin": "outliers",
    "local": ""
  },
  {
    "origin": "will be eliminated to then estimate the camera pose with a certain probability to obtain a good solution.",
    "local": ""
  },
  {
    "origin": "For the camera pose estimation I have implemented a",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "PnPProblem",
    "local": ""
  },
  {
    "origin": ". This",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "has 4 attributes: a given calibration matrix, the rotation matrix, the translation matrix and the rotation-translation matrix. The intrinsic calibration parameters of the camera which you are using to estimate the pose are necessary. In order to obtain the parameters you can check",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "tutorials.",
    "local": ""
  },
  {
    "origin": "The following code is how to declare the",
    "local": ""
  },
  {
    "origin": "PnPProblem class",
    "local": ""
  },
  {
    "origin": "in the main program:",
    "local": ""
  },
  {
    "origin": "The following code is how the",
    "local": ""
  },
  {
    "origin": "PnPProblem class",
    "local": ""
  },
  {
    "origin": "initialises its attributes:",
    "local": ""
  },
  {
    "origin": "OpenCV provides four PnP methods: ITERATIVE, EPNP, P3P and DLS. Depending on the application type, the estimation method will be different. In the case that we want to make a real time application, the more suitable methods are EPNP and P3P since they are faster than ITERATIVE and DLS at finding an optimal solution. However, EPNP and P3P are not especially robust in front of planar surfaces and sometimes the pose estimation seems to have a mirror effect. Therefore, in this tutorial an ITERATIVE method is used due to the object to be detected has planar surfaces.",
    "local": ""
  },
  {
    "origin": "The OpenCV RANSAC implementation wants you to provide three parameters: 1) the maximum number of iterations until the algorithm stops, 2) the maximum allowed distance between the observed and computed point projections to consider it an inlier and 3) the confidence to obtain a good result. You can tune these parameters in order to improve your algorithm performance. Increasing the number of iterations will have a more accurate solution, but will take more time to find a solution. Increasing the reprojection error will reduce the computation time, but your solution will be unaccurate. Decreasing the confidence your algorithm will be faster, but the obtained solution will be unaccurate.",
    "local": ""
  },
  {
    "origin": "The following parameters work for this application:",
    "local": ""
  },
  {
    "origin": "The following code corresponds to the",
    "local": ""
  },
  {
    "origin": "estimatePoseRANSAC()",
    "local": ""
  },
  {
    "origin": "function which belongs to the",
    "local": ""
  },
  {
    "origin": "PnPProblem class",
    "local": ""
  },
  {
    "origin": ". This function estimates the rotation and translation matrix given a set of 2D/3D correspondences, the desired PnP method to use, the output inliers container and the Ransac parameters:",
    "local": ""
  },
  {
    "origin": "In the following code are the 3th and 4th steps of the main algorithm. The first, calling the above function and the second taking the output inliers vector from RANSAC to get the 2D scene points for drawing purpose. As seen in the code we must be sure to apply RANSAC if we have matches, in the other case, the function",
    "local": ""
  },
  {
    "origin": "crashes due to any OpenCV",
    "local": ""
  },
  {
    "origin": "bug",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Finally, once the camera pose has been estimated we can use the \\(R\\) and \\(t\\) in order to compute the 2D projection onto the image of a given 3D point expressed in a world reference frame using the showed formula on",
    "local": ""
  },
  {
    "origin": "Theory",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "The following code corresponds to the",
    "local": ""
  },
  {
    "origin": "backproject3DPoint()",
    "local": ""
  },
  {
    "origin": "function which belongs to the",
    "local": ""
  },
  {
    "origin": "PnPProblem class",
    "local": ""
  },
  {
    "origin": ". The function backproject a given 3D point expressed in a world reference frame onto a 2D image:",
    "local": ""
  },
  {
    "origin": "The above function is used to compute all the 3D points of the object",
    "local": ""
  },
  {
    "origin": "Mesh",
    "local": ""
  },
  {
    "origin": "to show the pose of the object.",
    "local": ""
  },
  {
    "origin": "You can also change RANSAC parameters and PnP method:",
    "local": ""
  },
  {
    "origin": "Linear Kalman Filter for bad poses rejection",
    "local": ""
  },
  {
    "origin": "Is it common in computer vision or robotics fields that after applying detection or tracking techniques, bad results are obtained due to some sensor errors. In order to avoid these bad detections in this tutorial is explained how to implement a Linear Kalman Filter. The Kalman Filter will be applied after detected a given number of inliers.",
    "local": ""
  },
  {
    "origin": "You can find more information about what",
    "local": ""
  },
  {
    "origin": "Kalman Filter",
    "local": ""
  },
  {
    "origin": "is. In this tutorial it's used the OpenCV implementation of the",
    "local": ""
  },
  {
    "origin": "based on",
    "local": ""
  },
  {
    "origin": "Linear Kalman Filter for position and orientation tracking",
    "local": ""
  },
  {
    "origin": "to set the dynamics and measurement models.",
    "local": ""
  },
  {
    "origin": "Firstly, we have to define our state vector which will have 18 states: the positional data (x,y,z) with its first and second derivatives (velocity and acceleration), then rotation is added in form of three euler angles (roll, pitch, jaw) together with their first and second derivatives (angular velocity and acceleration)",
    "local": ""
  },
  {
    "origin": "\\[X = (x,y,z,\\dot x,\\dot y,\\dot z,\\ddot x,\\ddot y,\\ddot z,\\psi,\\theta,\\phi,\\dot \\psi,\\dot \\theta,\\dot \\phi,\\ddot \\psi,\\ddot \\theta,\\ddot \\phi)^T\\]",
    "local": ""
  },
  {
    "origin": "Secondly, we have to define the number of measurements which will be 6: from \\(R\\) and \\(t\\) we can extract \\((x,y,z)\\) and \\((\\psi,\\theta,\\phi)\\). In addition, we have to define the number of control actions to apply to the system which in this case will be",
    "local": ""
  },
  {
    "origin": "zero",
    "local": ""
  },
  {
    "origin": ". Finally, we have to define the differential time between measurements which in this case is \\(1/T\\), where",
    "local": ""
  },
  {
    "origin": "T",
    "local": ""
  },
  {
    "origin": "is the frame rate of the video.",
    "local": ""
  },
  {
    "origin": "The following code corresponds to the",
    "local": ""
  },
  {
    "origin": "Kalman Filter",
    "local": ""
  },
  {
    "origin": "initialisation. Firstly, is set the process noise, the measurement noise and the error covariance matrix. Secondly, are set the transition matrix which is the dynamic model and finally the measurement matrix, which is the measurement model.",
    "local": ""
  },
  {
    "origin": "You can tune the process and measurement noise to improve the",
    "local": ""
  },
  {
    "origin": "Kalman Filter",
    "local": ""
  },
  {
    "origin": "performance. As the measurement noise is reduced the faster will converge doing the algorithm sensitive in front of bad measurements.",
    "local": ""
  },
  {
    "origin": "In the following code is the 5th step of the main algorithm. When the obtained number of inliers after",
    "local": ""
  },
  {
    "origin": "Ransac",
    "local": ""
  },
  {
    "origin": "is over the threshold, the measurements matrix is filled and then the",
    "local": ""
  },
  {
    "origin": "Kalman Filter",
    "local": ""
  },
  {
    "origin": "is updated:",
    "local": ""
  },
  {
    "origin": "The following code corresponds to the",
    "local": ""
  },
  {
    "origin": "fillMeasurements()",
    "local": ""
  },
  {
    "origin": "function which converts the measured",
    "local": ""
  },
  {
    "origin": "Rotation Matrix to Eulers angles",
    "local": ""
  },
  {
    "origin": "and fill the measurements matrix along with the measured translation vector:",
    "local": ""
  },
  {
    "origin": "The following code corresponds to the",
    "local": ""
  },
  {
    "origin": "updateKalmanFilter()",
    "local": ""
  },
  {
    "origin": "function which update the Kalman Filter and set the estimated Rotation Matrix and translation vector. The estimated Rotation Matrix comes from the estimated",
    "local": ""
  },
  {
    "origin": "Euler angles to Rotation Matrix",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "The 6th step is set the estimated rotation-translation matrix:",
    "local": ""
  },
  {
    "origin": "The last and optional step is draw the found pose. To do it I implemented a function to draw all the mesh 3D points and an extra reference axis:",
    "local": ""
  },
  {
    "origin": "You can also modify the minimum inliers to update Kalman Filter:",
    "local": ""
  },
  {
    "origin": "Results",
    "local": ""
  },
  {
    "origin": "The following videos are the results of pose estimation in real time using the explained detection algorithm using the following parameters:",
    "local": ""
  },
  {
    "origin": "You can watch the real time pose estimation on the",
    "local": ""
  },
  {
    "origin": "YouTube here",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:34 for OpenCV by &#160;",
    "local": ""
  }
]