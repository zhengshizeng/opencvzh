[
  {
    "origin": "OpenCV: Machine Learning Overview",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Machine Learning Overview",
    "local": ""
  },
  {
    "origin": "Table of Contents",
    "local": ""
  },
  {
    "origin": "Training Data",
    "local": ""
  },
  {
    "origin": "Normal Bayes Classifier",
    "local": ""
  },
  {
    "origin": "K-Nearest Neighbors",
    "local": ""
  },
  {
    "origin": "Support Vector Machines",
    "local": ""
  },
  {
    "origin": "Prediction with SVM",
    "local": ""
  },
  {
    "origin": "Decision Trees",
    "local": ""
  },
  {
    "origin": "Predicting with Decision Trees",
    "local": ""
  },
  {
    "origin": "Training Decision Trees",
    "local": ""
  },
  {
    "origin": "Variable Importance",
    "local": ""
  },
  {
    "origin": "Boosting",
    "local": ""
  },
  {
    "origin": "Prediction with Boost",
    "local": ""
  },
  {
    "origin": "Random Trees",
    "local": ""
  },
  {
    "origin": "Expectation Maximization",
    "local": ""
  },
  {
    "origin": "Neural Networks",
    "local": ""
  },
  {
    "origin": "Logistic Regression",
    "local": ""
  },
  {
    "origin": "Training Data",
    "local": ""
  },
  {
    "origin": "In machine learning algorithms there is notion of training data. Training data includes several components:",
    "local": ""
  },
  {
    "origin": "A set of training samples. Each training sample is a vector of values (in Computer Vision it's sometimes referred to as feature vector). Usually all the vectors have the same number of components (features); OpenCV ml module assumes that. Each feature can be ordered (i.e. its values are floating-point numbers that can be compared with each other and strictly ordered, i.e. sorted) or categorical (i.e. its value belongs to a fixed set of values that can be integers, strings etc.).",
    "local": ""
  },
  {
    "origin": "Optional set of responses corresponding to the samples. Training data with no responses is used in unsupervised learning algorithms that learn structure of the supplied data based on distances between different samples. Training data with responses is used in supervised learning algorithms, which learn the function mapping samples to responses. Usually the responses are scalar values, ordered (when we deal with regression problem) or categorical (when we deal with classification problem; in this case the responses are often called \"labels\"). Some algorithms, most noticeably Neural networks, can handle not only scalar, but also multi-dimensional or vector responses.",
    "local": ""
  },
  {
    "origin": "Another optional component is the mask of missing measurements. Most algorithms require all the components in all the training samples be valid, but some other algorithms, such as decision trees, can handle the cases of missing measurements.",
    "local": ""
  },
  {
    "origin": "In the case of classification problem user may want to give different weights to different classes. This is useful, for example, when:",
    "local": ""
  },
  {
    "origin": "user wants to shift prediction accuracy towards lower false-alarm rate or higher hit-rate.",
    "local": ""
  },
  {
    "origin": "user wants to compensate for significantly different amounts of training samples from different classes.",
    "local": ""
  },
  {
    "origin": "In addition to that, each training sample may be given a weight, if user wants the algorithm to pay special attention to certain training samples and adjust the training model accordingly.",
    "local": ""
  },
  {
    "origin": "Also, user may wish not to use the whole training data at once, but rather use parts of it, e.g. to do parameter optimization via cross-validation procedure.",
    "local": ""
  },
  {
    "origin": "As you can see, training data can have rather complex structure; besides, it may be very big and/or not entirely available, so there is need to make abstraction for this concept. In OpenCV ml there is",
    "local": ""
  },
  {
    "origin": "class for that.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "Normal Bayes Classifier",
    "local": ""
  },
  {
    "origin": "This simple classification model assumes that feature vectors from each class are normally distributed (though, not necessarily independently distributed). So, the whole data distribution function is assumed to be a Gaussian mixture, one component per class. Using the training data the algorithm estimates mean vectors and covariance matrices for every class, and then it uses them for prediction.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "K-Nearest Neighbors",
    "local": ""
  },
  {
    "origin": "The algorithm caches all training samples and predicts the response for a new sample by analyzing a certain number (",
    "local": ""
  },
  {
    "origin": "K",
    "local": ""
  },
  {
    "origin": ") of the nearest neighbors of the sample using voting, calculating weighted sum, and so on. The method is sometimes referred to as \"learning by example\" because for prediction it looks for the feature vector with a known response that is closest to the given vector.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "Support Vector Machines",
    "local": ""
  },
  {
    "origin": "Originally, support vector machines (SVM) was a technique for building an optimal binary (2-class) classifier. Later the technique was extended to regression and clustering problems. SVM is a partial case of kernel-based methods. It maps feature vectors into a higher-dimensional space using a kernel function and builds an optimal linear discriminating function in this space or an optimal hyper- plane that fits into the training data. In case of SVM, the kernel is not defined explicitly. Instead, a distance between any 2 points in the hyper-space needs to be defined.",
    "local": ""
  },
  {
    "origin": "The solution is optimal, which means that the margin between the separating hyper-plane and the nearest feature vectors from both classes (in case of 2-class classifier) is maximal. The feature vectors that are the closest to the hyper-plane are called",
    "local": ""
  },
  {
    "origin": "support vectors",
    "local": ""
  },
  {
    "origin": ", which means that the position of other vectors does not affect the hyper-plane (the decision function).",
    "local": ""
  },
  {
    "origin": "SVM implementation in OpenCV is based on",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "Prediction with SVM",
    "local": ""
  },
  {
    "origin": "StatModel::predict(samples, results, flags) should be used. Pass flags=StatModel::RAW_OUTPUT to get the raw response from SVM (in the case of regression, 1-class or 2-class classification problem).",
    "local": ""
  },
  {
    "origin": "Decision Trees",
    "local": ""
  },
  {
    "origin": "The ML classes discussed in this section implement Classification and Regression Tree algorithms described in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "The class",
    "local": ""
  },
  {
    "origin": "represents a single decision tree or a collection of decision trees. It's also a base class for RTrees and Boost.",
    "local": ""
  },
  {
    "origin": "A decision tree is a binary tree (tree where each non-leaf node has two child nodes). It can be used either for classification or for regression. For classification, each tree leaf is marked with a class label; multiple leaves may have the same label. For regression, a constant is also assigned to each tree leaf, so the approximation function is piecewise constant.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "Predicting with Decision Trees",
    "local": ""
  },
  {
    "origin": "To reach a leaf node and to obtain a response for the input feature vector, the prediction procedure starts with the root node. From each non-leaf node the procedure goes to the left (selects the left child node as the next observed node) or to the right based on the value of a certain variable whose index is stored in the observed node. The following variables are possible:",
    "local": ""
  },
  {
    "origin": "Ordered variables.",
    "local": ""
  },
  {
    "origin": "The variable value is compared with a threshold that is also stored in the node. If the value is less than the threshold, the procedure goes to the left. Otherwise, it goes to the right. For example, if the weight is less than 1 kilogram, the procedure goes to the left, else to the right.",
    "local": ""
  },
  {
    "origin": "Categorical variables.",
    "local": ""
  },
  {
    "origin": "A discrete variable value is tested to see whether it belongs to a certain subset of values (also stored in the node) from a limited set of values the variable could take. If it does, the procedure goes to the left. Otherwise, it goes to the right. For example, if the color is green or red, go to the left, else to the right.",
    "local": ""
  },
  {
    "origin": "So, in each node, a pair of entities (variable_index ,",
    "local": ""
  },
  {
    "origin": ") is used. This pair is called a",
    "local": ""
  },
  {
    "origin": "split",
    "local": ""
  },
  {
    "origin": "(split on the variable variable_index ). Once a leaf node is reached, the value assigned to this node is used as the output of the prediction procedure.",
    "local": ""
  },
  {
    "origin": "Sometimes, certain features of the input vector are missed (for example, in the darkness it is difficult to determine the object color), and the prediction procedure may get stuck in the certain node (in the mentioned example, if the node is split by color). To avoid such situations, decision trees use so-called",
    "local": ""
  },
  {
    "origin": "surrogate splits",
    "local": ""
  },
  {
    "origin": ". That is, in addition to the best \"primary\" split, every tree node may also be split to one or more other variables with nearly the same results.",
    "local": ""
  },
  {
    "origin": "Training Decision Trees",
    "local": ""
  },
  {
    "origin": "The tree is built recursively, starting from the root node. All training data (feature vectors and responses) is used to split the root node. In each node the optimum decision rule (the best \"primary\" split) is found based on some criteria. In machine learning, gini \"purity\" criteria are used for classification, and sum of squared errors is used for regression. Then, if necessary, the surrogate splits are found. They resemble the results of the primary split on the training data. All the data is divided using the primary and the surrogate splits (like it is done in the prediction procedure) between the left and the right child node. Then, the procedure recursively splits both left and right nodes. At each node the recursive procedure may stop (that is, stop splitting the node further) in one of the following cases:",
    "local": ""
  },
  {
    "origin": "Depth of the constructed tree branch has reached the specified maximum value.",
    "local": ""
  },
  {
    "origin": "Number of training samples in the node is less than the specified threshold when it is not statistically representative to split the node further.",
    "local": ""
  },
  {
    "origin": "All the samples in the node belong to the same class or, in case of regression, the variation is too small.",
    "local": ""
  },
  {
    "origin": "The best found split does not give any noticeable improvement compared to a random choice.",
    "local": ""
  },
  {
    "origin": "When the tree is built, it may be pruned using a cross-validation procedure, if necessary. That is, some branches of the tree that may lead to the model overfitting are cut off. Normally, this procedure is only applied to standalone decision trees. Usually tree ensembles build trees that are small enough and use their own protection schemes against overfitting.",
    "local": ""
  },
  {
    "origin": "Variable Importance",
    "local": ""
  },
  {
    "origin": "Besides the prediction that is an obvious use of decision trees, the tree can be also used for various data analyses. One of the key properties of the constructed decision tree algorithms is an ability to compute the importance (relative decisive power) of each variable. For example, in a spam filter that uses a set of words occurred in the message as a feature vector, the variable importance rating can be used to determine the most \"spam-indicating\" words and thus help keep the dictionary size reasonable.",
    "local": ""
  },
  {
    "origin": "Importance of each variable is computed over all the splits on this variable in the tree, primary and surrogate ones. Thus, to compute variable importance correctly, the surrogate splits must be enabled in the training parameters, even if there is no missing data.",
    "local": ""
  },
  {
    "origin": "Boosting",
    "local": ""
  },
  {
    "origin": "A common machine learning task is supervised learning. In supervised learning, the goal is to learn the functional relationship \\(F: y = F(x)\\) between the input \\(x\\) and the output \\(y\\) . Predicting the qualitative output is called",
    "local": ""
  },
  {
    "origin": "classification",
    "local": ""
  },
  {
    "origin": ", while predicting the quantitative output is called",
    "local": ""
  },
  {
    "origin": "regression",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Boosting is a powerful learning concept that provides a solution to the supervised classification learning task. It combines the performance of many \"weak\" classifiers to produce a powerful committee",
    "local": ""
  },
  {
    "origin": ". A weak classifier is only required to be better than chance, and thus can be very simple and computationally inexpensive. However, many of them smartly combine results to a strong classifier that often outperforms most \"monolithic\" strong classifiers such as SVMs and Neural Networks.",
    "local": ""
  },
  {
    "origin": "Decision trees are the most popular weak classifiers used in boosting schemes. Often the simplest decision trees with only a single split node per tree (called stumps ) are sufficient.",
    "local": ""
  },
  {
    "origin": "The boosted model is based on \\(N\\) training examples \\({(x_i,y_i)}1N\\) with \\(x_i \\in{R^K}\\) and \\(y_i \\in{-1, +1}\\) . \\(x_i\\) is a \\(K\\) -component vector. Each component encodes a feature relevant to the learning task at hand. The desired two-class output is encoded as -1 and +1.",
    "local": ""
  },
  {
    "origin": "Different variants of boosting are known as Discrete Adaboost, Real AdaBoost, LogitBoost, and Gentle AdaBoost",
    "local": ""
  },
  {
    "origin": ". All of them are very similar in their overall structure. Therefore, this chapter focuses only on the standard two-class Discrete AdaBoost algorithm, outlined below. Initially the same weight is assigned to each sample (step 2). Then, a weak classifier \\(f_{m(x)}\\) is trained on the weighted training data (step 3a). Its weighted training error and scaling factor \\(c_m\\) is computed (step 3b). The weights are increased for training samples that have been misclassified (step 3c). All weights are then normalized, and the process of finding the next weak classifier continues for another \\(M\\) -1 times. The final classifier \\(F(x)\\) is the sign of the weighted sum over the individual weak classifiers (step 4).",
    "local": ""
  },
  {
    "origin": "Two-class Discrete AdaBoost Algorithm",
    "local": ""
  },
  {
    "origin": "Set \\(N\\) examples \\({(x_i,y_i)}1N\\) with \\(x_i \\in{R^K}, y_i \\in{-1, +1}\\) .",
    "local": ""
  },
  {
    "origin": "Assign weights as \\(w_i = 1/N, i = 1,...,N\\) .",
    "local": ""
  },
  {
    "origin": "Repeat for \\(m = 1,2,...,M\\) :",
    "local": ""
  },
  {
    "origin": "Fit the classifier \\(f_m(x) \\in{-1,1}\\), using weights \\(w_i\\) on the training data.",
    "local": ""
  },
  {
    "origin": "Compute \\(err_m = E_w [1_{(y \\neq f_m(x))}], c_m = log((1 - err_m)/err_m)\\) .",
    "local": ""
  },
  {
    "origin": "Set \\(w_i \\Leftarrow w_i exp[c_m 1_{(y_i \\neq f_m(x_i))}], i = 1,2,...,N,\\) and renormalize so that \\(\\Sigma i w_i = 1\\) .",
    "local": ""
  },
  {
    "origin": "Classify new samples",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "using the formula: \\(\\textrm{sign} (\\Sigma m = 1M c_m f_m(x))\\) .",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Similar to the classical boosting methods, the current implementation supports two-class classifiers only. For M &gt; 2 classes, there is the",
    "local": ""
  },
  {
    "origin": "AdaBoost.MH",
    "local": ""
  },
  {
    "origin": "algorithm (described in",
    "local": ""
  },
  {
    "origin": ") that reduces the problem to the two-class problem, yet with a much larger training set.",
    "local": ""
  },
  {
    "origin": "To reduce computation time for boosted models without substantially losing accuracy, the influence trimming technique can be employed. As the training algorithm proceeds and the number of trees in the ensemble is increased, a larger number of the training samples are classified correctly and with increasing confidence, thereby those samples receive smaller weights on the subsequent iterations. Examples with a very low relative weight have a small impact on the weak classifier training. Thus, such examples may be excluded during the weak classifier training without having much effect on the induced classifier. This process is controlled with the weight_trim_rate parameter. Only examples with the summary fraction weight_trim_rate of the total weight mass are used in the weak classifier training. Note that the weights for",
    "local": ""
  },
  {
    "origin": "all",
    "local": ""
  },
  {
    "origin": "training examples are recomputed at each training iteration. Examples deleted at a particular iteration may be used again for learning some of the weak classifiers further",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "Prediction with Boost",
    "local": ""
  },
  {
    "origin": "StatModel::predict(samples, results, flags) should be used. Pass flags=StatModel::RAW_OUTPUT to get the raw sum from Boost classifier.",
    "local": ""
  },
  {
    "origin": "Random Trees",
    "local": ""
  },
  {
    "origin": "Random trees have been introduced by Leo Breiman and Adele Cutler:",
    "local": ""
  },
  {
    "origin": "http://www.stat.berkeley.edu/users/breiman/RandomForests/",
    "local": ""
  },
  {
    "origin": ". The algorithm can deal with both classification and regression problems. Random trees is a collection (ensemble) of tree predictors that is called",
    "local": ""
  },
  {
    "origin": "forest",
    "local": ""
  },
  {
    "origin": "further in this section (the term has been also introduced by L. Breiman). The classification works as follows: the random trees classifier takes the input feature vector, classifies it with every tree in the forest, and outputs the class label that received the majority of \"votes\". In case of a regression, the classifier response is the average of the responses over all the trees in the forest.",
    "local": ""
  },
  {
    "origin": "All the trees are trained with the same parameters but on different training sets. These sets are generated from the original training set using the bootstrap procedure: for each training set, you randomly select the same number of vectors as in the original set ( =N ). The vectors are chosen with replacement. That is, some vectors will occur more than once and some will be absent. At each node of each trained tree, not all the variables are used to find the best split, but a random subset of them. With each node a new subset is generated. However, its size is fixed for all the nodes and all the trees. It is a training parameter set to \\(\\sqrt{number\\_of\\_variables}\\) by default. None of the built trees are pruned.",
    "local": ""
  },
  {
    "origin": "In random trees there is no need for any accuracy estimation procedures, such as cross-validation or bootstrap, or a separate test set to get an estimate of the training error. The error is estimated internally during the training. When the training set for the current tree is drawn by sampling with replacement, some vectors are left out (so-called",
    "local": ""
  },
  {
    "origin": "oob (out-of-bag) data",
    "local": ""
  },
  {
    "origin": "). The size of oob data is about N/3 . The classification error is estimated by using this oob-data as follows:",
    "local": ""
  },
  {
    "origin": "Get a prediction for each vector, which is oob relative to the i-th tree, using the very i-th tree.",
    "local": ""
  },
  {
    "origin": "After all the trees have been trained, for each vector that has ever been oob, find the class-",
    "local": ""
  },
  {
    "origin": "winner",
    "local": ""
  },
  {
    "origin": "for it (the class that has got the majority of votes in the trees where the vector was oob) and compare it to the ground-truth response.",
    "local": ""
  },
  {
    "origin": "Compute the classification error estimate as a ratio of the number of misclassified oob vectors to all the vectors in the original data. In case of regression, the oob-error is computed as the squared error for oob vectors difference divided by the total number of vectors.",
    "local": ""
  },
  {
    "origin": "For the random trees usage example, please, see letter_recog.cpp sample in OpenCV distribution.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "References:",
    "local": ""
  },
  {
    "origin": "Machine Learning",
    "local": ""
  },
  {
    "origin": "http://stat-www.berkeley.edu/users/breiman/wald2002-1.pdf",
    "local": ""
  },
  {
    "origin": "Looking Inside the Black Box",
    "local": ""
  },
  {
    "origin": "http://stat-www.berkeley.edu/users/breiman/wald2002-2.pdf",
    "local": ""
  },
  {
    "origin": "Software for the Masses",
    "local": ""
  },
  {
    "origin": "http://stat-www.berkeley.edu/users/breiman/wald2002-3.pdf",
    "local": ""
  },
  {
    "origin": "And other articles from the web site",
    "local": ""
  },
  {
    "origin": "http://www.stat.berkeley.edu/users/breiman/RandomForests/cc_home.htm",
    "local": ""
  },
  {
    "origin": "Expectation Maximization",
    "local": ""
  },
  {
    "origin": "The Expectation Maximization(EM) algorithm estimates the parameters of the multivariate probability density function in the form of a Gaussian mixture distribution with a specified number of mixtures.",
    "local": ""
  },
  {
    "origin": "Consider the set of the N feature vectors { \\(x_1, x_2,...,x_{N}\\) } from a d-dimensional Euclidean space drawn from a Gaussian mixture:",
    "local": ""
  },
  {
    "origin": "\\[p(x;a_k,S_k, \\pi _k) = \\sum _{k=1}^{m} \\pi _kp_k(x), \\quad \\pi _k \\geq 0, \\quad \\sum _{k=1}^{m} \\pi _k=1,\\]",
    "local": ""
  },
  {
    "origin": "\\[p_k(x)= \\varphi (x;a_k,S_k)= \\frac{1}{(2\\pi)^{d/2}\\mid{S_k}\\mid^{1/2}} exp \\left \\{ - \\frac{1}{2} (x-a_k)^TS_k^{-1}(x-a_k) \\right \\} ,\\]",
    "local": ""
  },
  {
    "origin": "where \\(m\\) is the number of mixtures, \\(p_k\\) is the normal distribution density with the mean \\(a_k\\) and covariance matrix \\(S_k\\), \\(\\pi_k\\) is the weight of the k-th mixture. Given the number of mixtures \\(M\\) and the samples \\(x_i\\), \\(i=1..N\\) the algorithm finds the maximum- likelihood estimates (MLE) of all the mixture parameters, that is, \\(a_k\\), \\(S_k\\) and \\(\\pi_k\\) :",
    "local": ""
  },
  {
    "origin": "\\[L(x, \\theta )=logp(x, \\theta )= \\sum _{i=1}^{N}log \\left ( \\sum _{k=1}^{m} \\pi _kp_k(x) \\right ) \\to \\max _{ \\theta \\in \\Theta },\\]",
    "local": ""
  },
  {
    "origin": "\\[\\Theta = \\left \\{ (a_k,S_k, \\pi _k): a_k \\in \\mathbbm{R} ^d,S_k=S_k^T&gt;0,S_k \\in \\mathbbm{R} ^{d \\times d}, \\pi _k \\geq 0, \\sum _{k=1}^{m} \\pi _k=1 \\right \\} .\\]",
    "local": ""
  },
  {
    "origin": "The EM algorithm is an iterative procedure. Each iteration includes two steps. At the first step (Expectation step or E-step), you find a probability \\(p_{i,k}\\) (denoted \\(\\alpha_{i,k}\\) in the formula below) of sample i to belong to mixture k using the currently available mixture parameter estimates:",
    "local": ""
  },
  {
    "origin": "\\[\\alpha _{ki} = \\frac{\\pi_k\\varphi(x;a_k,S_k)}{\\sum\\limits_{j=1}^{m}\\pi_j\\varphi(x;a_j,S_j)} .\\]",
    "local": ""
  },
  {
    "origin": "At the second step (Maximization step or M-step), the mixture parameter estimates are refined using the computed probabilities:",
    "local": ""
  },
  {
    "origin": "\\[\\pi _k= \\frac{1}{N} \\sum _{i=1}^{N} \\alpha _{ki}, \\quad a_k= \\frac{\\sum\\limits_{i=1}^{N}\\alpha_{ki}x_i}{\\sum\\limits_{i=1}^{N}\\alpha_{ki}} , \\quad S_k= \\frac{\\sum\\limits_{i=1}^{N}\\alpha_{ki}(x_i-a_k)(x_i-a_k)^T}{\\sum\\limits_{i=1}^{N}\\alpha_{ki}}\\]",
    "local": ""
  },
  {
    "origin": "Alternatively, the algorithm may start with the M-step when the initial values for \\(p_{i,k}\\) can be provided. Another alternative when \\(p_{i,k}\\) are unknown is to use a simpler clustering algorithm to pre-cluster the input samples and thus obtain initial \\(p_{i,k}\\) . Often (including machine learning) the k-means algorithm is used for that purpose.",
    "local": ""
  },
  {
    "origin": "One of the main problems of the EM algorithm is a large number of parameters to estimate. The majority of the parameters reside in covariance matrices, which are \\(d \\times d\\) elements each where \\(d\\) is the feature space dimensionality. However, in many practical problems, the covariance matrices are close to diagonal or even to \\(\\mu_k*I\\) , where \\(I\\) is an identity matrix and \\(\\mu_k\\) is a mixture-dependent \"scale\" parameter. So, a robust computation scheme could start with harder constraints on the covariance matrices and then use the estimated parameters as an input for a less constrained optimization problem (often a diagonal covariance matrix is already a good enough approximation).",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "References:",
    "local": ""
  },
  {
    "origin": "Bilmes98 J. A. Bilmes.",
    "local": ""
  },
  {
    "origin": "A Gentle Tutorial of the EM Algorithm and its Application to Parameter Estimation for Gaussian Mixture and Hidden Markov Models",
    "local": ""
  },
  {
    "origin": ". Technical Report TR-97-021, International Computer Science Institute and Computer Science Division, University of California at Berkeley, April 1998.",
    "local": ""
  },
  {
    "origin": "Neural Networks",
    "local": ""
  },
  {
    "origin": "ML implements feed-forward artificial neural networks or, more particularly, multi-layer perceptrons (MLP), the most commonly used type of neural networks. MLP consists of the input layer, output layer, and one or more hidden layers. Each layer of MLP includes one or more neurons directionally linked with the neurons from the previous and the next layer. The example below represents a 3-layer perceptron with three inputs, two outputs, and the hidden layer including five neurons:",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "All the neurons in MLP are similar. Each of them has several input links (it takes the output values from several neurons in the previous layer as input) and several output links (it passes the response to several neurons in the next layer). The values retrieved from the previous layer are summed up with certain weights, individual for each neuron, plus the bias term. The sum is transformed using the activation function \\(f\\) that may be also different for different neurons.",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "In other words, given the outputs \\(x_j\\) of the layer \\(n\\) , the outputs \\(y_i\\) of the layer \\(n+1\\) are computed as:",
    "local": ""
  },
  {
    "origin": "\\[u_i = \\sum _j (w^{n+1}_{i,j}*x_j) + w^{n+1}_{i,bias}\\]",
    "local": ""
  },
  {
    "origin": "\\[y_i = f(u_i)\\]",
    "local": ""
  },
  {
    "origin": "Different activation functions may be used. ML implements three standard functions:",
    "local": ""
  },
  {
    "origin": "Identity function (",
    "local": ""
  },
  {
    "origin": "): \\(f(x)=x\\)",
    "local": ""
  },
  {
    "origin": "Symmetrical sigmoid (",
    "local": ""
  },
  {
    "origin": "): \\(f(x)=\\beta*(1-e^{-\\alpha x})/(1+e^{-\\alpha x}\\) ), which is the default choice for MLP. The standard sigmoid with \\(\\beta =1, \\alpha =1\\) is shown below:",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "Gaussian function (",
    "local": ""
  },
  {
    "origin": "): \\(f(x)=\\beta e^{-\\alpha x*x}\\) , which is not completely supported at the moment.",
    "local": ""
  },
  {
    "origin": "In ML, all the neurons have the same activation functions, with the same free parameters ( \\(\\alpha, \\beta\\) ) that are specified by user and are not altered by the training algorithms.",
    "local": ""
  },
  {
    "origin": "So, the whole trained network works as follows:",
    "local": ""
  },
  {
    "origin": "Take the feature vector as input. The vector size is equal to the size of the input layer.",
    "local": ""
  },
  {
    "origin": "Pass values as input to the first hidden layer.",
    "local": ""
  },
  {
    "origin": "Compute outputs of the hidden layer using the weights and the activation functions.",
    "local": ""
  },
  {
    "origin": "Pass outputs further downstream until you compute the output layer.",
    "local": ""
  },
  {
    "origin": "So, to compute the network, you need to know all the weights \\(w^{n+1)}_{i,j}\\) . The weights are computed by the training algorithm. The algorithm takes a training set, multiple input vectors with the corresponding output vectors, and iteratively adjusts the weights to enable the network to give the desired response to the provided input vectors.",
    "local": ""
  },
  {
    "origin": "The larger the network size (the number of hidden layers and their sizes) is, the more the potential network flexibility is. The error on the training set could be made arbitrarily small. But at the same time the learned network also \"learns\" the noise present in the training set, so the error on the test set usually starts increasing after the network size reaches a limit. Besides, the larger networks are trained much longer than the smaller ones, so it is reasonable to pre-process the data, using",
    "local": ""
  },
  {
    "origin": "or similar technique, and train a smaller network on only essential features.",
    "local": ""
  },
  {
    "origin": "Another MLP feature is an inability to handle categorical data as is. However, there is a workaround. If a certain feature in the input or output (in case of n -class classifier for \\(n&gt;2\\) ) layer is categorical and can take \\(M&gt;2\\) different values, it makes sense to represent it as a binary tuple of M elements, where the i -th element is 1 if and only if the feature is equal to the i -th value out of M possible. It increases the size of the input/output layer but speeds up the training algorithm convergence and at the same time enables \"fuzzy\" values of such variables, that is, a tuple of probabilities instead of a fixed value.",
    "local": ""
  },
  {
    "origin": "ML implements two algorithms for training MLP's. The first algorithm is a classical random sequential back-propagation algorithm. The second (default) one is a batch RPROP algorithm.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "Logistic Regression",
    "local": ""
  },
  {
    "origin": "ML implements logistic regression, which is a probabilistic classification technique. Logistic Regression is a binary classification algorithm which is closely related to Support Vector Machines (SVM). Like SVM, Logistic Regression can be extended to work on multi-class classification problems like digit recognition (i.e. recognizing digits like 0,1 2, 3,... from the given images). This version of Logistic Regression supports both binary and multi-class classifications (for multi-class it creates a multiple 2-class classifiers). In order to train the logistic regression classifier, Batch Gradient Descent and Mini-Batch Gradient Descent algorithms are used (see",
    "local": ""
  },
  {
    "origin": "http://en.wikipedia.org/wiki/Gradient_descent_optimization",
    "local": ""
  },
  {
    "origin": "). Logistic Regression is a discriminative classifier (see",
    "local": ""
  },
  {
    "origin": "http://www.cs.cmu.edu/~tom/NewChapters.html",
    "local": ""
  },
  {
    "origin": "for more details). Logistic Regression is implemented as a C++ class in LogisticRegression.",
    "local": ""
  },
  {
    "origin": "In Logistic Regression, we try to optimize the training parameter \\(\\theta\\) such that the hypothesis \\(0 \\leq h_\\theta(x) \\leq 1\\) is achieved. We have \\(h_\\theta(x) = g(h_\\theta(x))\\) and \\(g(z) = \\frac{1}{1+e^{-z}}\\) as the logistic or sigmoid function. The term \"Logistic\" in Logistic Regression refers to this function. For given data of a binary classification problem of classes 0 and 1, one can determine that the given data instance belongs to class 1 if \\(h_\\theta(x) \\geq 0.5\\) or class 0 if \\(h_\\theta(x) &lt; 0.5\\) .",
    "local": ""
  },
  {
    "origin": "In Logistic Regression, choosing the right parameters is of utmost importance for reducing the training error and ensuring high training accuracy:",
    "local": ""
  },
  {
    "origin": "The learning rate can be set with",
    "local": ""
  },
  {
    "origin": "method. It determines how fast we approach the solution. It is a positive real number.",
    "local": ""
  },
  {
    "origin": "Optimization algorithms like Batch Gradient Descent and Mini-Batch Gradient Descent are supported in LogisticRegression. It is important that we mention the number of iterations these optimization algorithms have to run. The number of iterations can be set with",
    "local": ""
  },
  {
    "origin": ". This parameter can be thought as number of steps taken and learning rate specifies if it is a long step or a short step. This and previous parameter define how fast we arrive at a possible solution.",
    "local": ""
  },
  {
    "origin": "In order to compensate for overfitting regularization is performed, which can be enabled with",
    "local": ""
  },
  {
    "origin": ". One can specify what kind of regularization has to be performed by passing one of",
    "local": ""
  },
  {
    "origin": "to this method.",
    "local": ""
  },
  {
    "origin": "Logistic regression implementation provides a choice of 2 training methods with Batch Gradient Descent or the MiniBatch Gradient Descent. To specify this, call",
    "local": ""
  },
  {
    "origin": "with either",
    "local": ""
  },
  {
    "origin": "or",
    "local": ""
  },
  {
    "origin": ". If training method is set to",
    "local": ""
  },
  {
    "origin": ", the size of the mini batch has to be to a positive integer set with",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "A sample set of training parameters for the Logistic Regression classifier can be initialized as follows:",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:33 for OpenCV by &#160;",
    "local": ""
  }
]