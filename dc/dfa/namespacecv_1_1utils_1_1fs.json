[
  {
    "origin": "OpenCV: cv::utils::fs Namespace Reference",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "cv::utils::fs Namespace Reference",
    "local": ""
  },
  {
    "origin": "»",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;path)",
    "local": ""
  },
  {
    "origin": "Converts path p to a canonical absolute path Symlinks are processed if there is support for them on running platform.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;path)",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;path)",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;path)",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;path)",
    "local": ""
  },
  {
    "origin": "std::wstring",
    "local": ""
  },
  {
    "origin": "(const std::wstring &amp;path)",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;directory, const",
    "local": ""
  },
  {
    "origin": "&amp;pattern, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;result, bool recursive=false, bool includeDirectories=false)",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;directory, const",
    "local": ""
  },
  {
    "origin": "&amp;pattern, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;result, bool recursive=false, bool includeDirectories=false)",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;path)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;base, const",
    "local": ""
  },
  {
    "origin": "&amp;path)",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;path)",
    "local": ""
  },
  {
    "origin": "Function Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "canonical()",
    "local": ""
  },
  {
    "origin": "cv::utils::fs::canonical",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "path",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Converts path p to a canonical absolute path Symlinks are processed if there is support for them on running platform.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "path",
    "local": ""
  },
  {
    "origin": "input path. Target file/directory should exist.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "createDirectories()",
    "local": ""
  },
  {
    "origin": "bool cv::utils::fs::createDirectories",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "path",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "createDirectory()",
    "local": ""
  },
  {
    "origin": "bool cv::utils::fs::createDirectory",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "path",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "exists()",
    "local": ""
  },
  {
    "origin": "bool cv::utils::fs::exists",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "path",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getCacheDirectoryForDownloads()",
    "local": ""
  },
  {
    "origin": "cv::utils::fs::getCacheDirectoryForDownloads",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.utils.fs.getCacheDirectoryForDownloads(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getcwd()",
    "local": ""
  },
  {
    "origin": "cv::utils::fs::getcwd",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getParent()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "cv::utils::fs::getParent",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "path",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Get parent directory",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getParent()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "std::wstring cv::utils::fs::getParent",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const std::wstring &amp;",
    "local": ""
  },
  {
    "origin": "path",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "glob()",
    "local": ""
  },
  {
    "origin": "void cv::utils::fs::glob",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "directory",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "pattern",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "result",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "recursive",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "includeDirectories",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Generate a list of all files that match the globbing pattern.",
    "local": ""
  },
  {
    "origin": "Result entries are prefixed by base directory path.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "directory",
    "local": ""
  },
  {
    "origin": "base directory",
    "local": ""
  },
  {
    "origin": "pattern",
    "local": ""
  },
  {
    "origin": "filter pattern (based on '*'/'?' symbols). Use empty string to disable filtering and return all results",
    "local": ""
  },
  {
    "origin": "[out]",
    "local": ""
  },
  {
    "origin": "result",
    "local": ""
  },
  {
    "origin": "result of globing.",
    "local": ""
  },
  {
    "origin": "recursive",
    "local": ""
  },
  {
    "origin": "scan nested directories too",
    "local": ""
  },
  {
    "origin": "includeDirectories",
    "local": ""
  },
  {
    "origin": "include directories into results list",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "glob_relative()",
    "local": ""
  },
  {
    "origin": "void cv::utils::fs::glob_relative",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "directory",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "pattern",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "result",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "recursive",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "includeDirectories",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Generate a list of all files that match the globbing pattern.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "directory",
    "local": ""
  },
  {
    "origin": "base directory",
    "local": ""
  },
  {
    "origin": "pattern",
    "local": ""
  },
  {
    "origin": "filter pattern (based on '*'/'?' symbols). Use empty string to disable filtering and return all results",
    "local": ""
  },
  {
    "origin": "[out]",
    "local": ""
  },
  {
    "origin": "result",
    "local": ""
  },
  {
    "origin": "globbing result with relative paths from base directory",
    "local": ""
  },
  {
    "origin": "recursive",
    "local": ""
  },
  {
    "origin": "scan nested directories too",
    "local": ""
  },
  {
    "origin": "includeDirectories",
    "local": ""
  },
  {
    "origin": "include directories into results list",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "isDirectory()",
    "local": ""
  },
  {
    "origin": "bool cv::utils::fs::isDirectory",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "path",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "join()",
    "local": ""
  },
  {
    "origin": "cv::utils::fs::join",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "base",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "path",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Join path components",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "remove_all()",
    "local": ""
  },
  {
    "origin": "void cv::utils::fs::remove_all",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "path",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:48 for OpenCV by",
    "local": ""
  }
]