[
  {
    "origin": "OpenCV: cv::viz::Camera Class Reference",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions",
    "local": ""
  },
  {
    "origin": "List of all members",
    "local": ""
  },
  {
    "origin": "cv::viz::Camera Class Reference",
    "local": ""
  },
  {
    "origin": "This class wraps intrinsic parameters of a camera.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "(double fx, double fy, double cx, double cy, const",
    "local": ""
  },
  {
    "origin": "&amp;window_size)",
    "local": ""
  },
  {
    "origin": "Constructs a",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;fov, const",
    "local": ""
  },
  {
    "origin": "&amp;window_size)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;K, const",
    "local": ""
  },
  {
    "origin": "&amp;window_size)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;proj, const",
    "local": ""
  },
  {
    "origin": "&amp;window_size)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;proj) const",
    "local": ""
  },
  {
    "origin": "Computes projection matrix using intrinsic parameters of the camera.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;clip)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;fov)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;window_size)",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;window_size)",
    "local": ""
  },
  {
    "origin": "Creates a Kinect",
    "local": ""
  },
  {
    "origin": "with.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "This class wraps intrinsic parameters of a camera.",
    "local": ""
  },
  {
    "origin": "It provides several constructors that can extract the intrinsic parameters from field of view, intrinsic matrix and projection matrix. :",
    "local": ""
  },
  {
    "origin": "Constructor &amp; Destructor Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Camera()",
    "local": ""
  },
  {
    "origin": "[1/4]",
    "local": ""
  },
  {
    "origin": "cv::viz::Camera::Camera",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "fx",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "fy",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "cx",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "cy",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "window_size",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Constructs a",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "fx",
    "local": ""
  },
  {
    "origin": "Horizontal focal length.",
    "local": ""
  },
  {
    "origin": "fy",
    "local": ""
  },
  {
    "origin": "Vertical focal length.",
    "local": ""
  },
  {
    "origin": "cx",
    "local": ""
  },
  {
    "origin": "x coordinate of the principal point.",
    "local": ""
  },
  {
    "origin": "cy",
    "local": ""
  },
  {
    "origin": "y coordinate of the principal point.",
    "local": ""
  },
  {
    "origin": "window_size",
    "local": ""
  },
  {
    "origin": "Size of the window. This together with focal length and principal point determines the field of view.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Camera()",
    "local": ""
  },
  {
    "origin": "[2/4]",
    "local": ""
  },
  {
    "origin": "cv::viz::Camera::Camera",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "fov",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "window_size",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "fov",
    "local": ""
  },
  {
    "origin": "Field of view (horizontal, vertical) in radians",
    "local": ""
  },
  {
    "origin": "window_size",
    "local": ""
  },
  {
    "origin": "Size of the window. Principal point is at the center of the window by default.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Camera()",
    "local": ""
  },
  {
    "origin": "[3/4]",
    "local": ""
  },
  {
    "origin": "cv::viz::Camera::Camera",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "K",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "window_size",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "K",
    "local": ""
  },
  {
    "origin": "Intrinsic matrix of the camera with the following form",
    "local": ""
  },
  {
    "origin": "\\[ \\begin{bmatrix} f_x &amp; 0 &amp; c_x\\\\ 0 &amp; f_y &amp; c_y\\\\ 0 &amp; 0 &amp; 1\\\\ \\end{bmatrix} \\]",
    "local": ""
  },
  {
    "origin": "window_size",
    "local": ""
  },
  {
    "origin": "Size of the window. This together with intrinsic matrix determines the field of view.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Camera()",
    "local": ""
  },
  {
    "origin": "[4/4]",
    "local": ""
  },
  {
    "origin": "cv::viz::Camera::Camera",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "proj",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "window_size",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "explicit",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "proj",
    "local": ""
  },
  {
    "origin": "Projection matrix of the camera with the following form",
    "local": ""
  },
  {
    "origin": "\\[ \\begin{bmatrix} \\frac{2n}{r-l} &amp; 0 &amp; \\frac{r+l}{r-l} &amp; 0\\\\ 0 &amp; \\frac{2n}{t-b} &amp; \\frac{t+b}{t-b} &amp; 0\\\\ 0 &amp; 0 &amp; -\\frac{f+n}{f-n} &amp; -\\frac{2fn}{f-n}\\\\ 0 &amp; 0 &amp; -1 &amp; 0\\\\ \\end{bmatrix} \\]",
    "local": ""
  },
  {
    "origin": "window_size",
    "local": ""
  },
  {
    "origin": "Size of the window. This together with projection matrix determines the field of view.",
    "local": ""
  },
  {
    "origin": "Member Function Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "computeProjectionMatrix()",
    "local": ""
  },
  {
    "origin": "void cv::viz::Camera::computeProjectionMatrix",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "proj",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Computes projection matrix using intrinsic parameters of the camera.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "proj",
    "local": ""
  },
  {
    "origin": "Output projection matrix with the following form",
    "local": ""
  },
  {
    "origin": "\\[ \\begin{bmatrix} \\frac{2n}{r-l} &amp; 0 &amp; \\frac{r+l}{r-l} &amp; 0\\\\ 0 &amp; \\frac{2n}{t-b} &amp; \\frac{t+b}{t-b} &amp; 0\\\\ 0 &amp; 0 &amp; -\\frac{f+n}{f-n} &amp; -\\frac{2fn}{f-n}\\\\ 0 &amp; 0 &amp; -1 &amp; 0\\\\ \\end{bmatrix} \\]",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "getClip()",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp; cv::viz::Camera::getClip",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "getFocalLength()",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp; cv::viz::Camera::getFocalLength",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "getFov()",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp; cv::viz::Camera::getFov",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "getPrincipalPoint()",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp; cv::viz::Camera::getPrincipalPoint",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "getWindowSize()",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp; cv::viz::Camera::getWindowSize",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "KinectCamera()",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::viz::Camera::KinectCamera",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "window_size",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Creates a Kinect",
    "local": ""
  },
  {
    "origin": "with.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "window_size",
    "local": ""
  },
  {
    "origin": "Size of the window. This together with intrinsic matrix of a Kinect",
    "local": ""
  },
  {
    "origin": "determines the field of view.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "setClip()",
    "local": ""
  },
  {
    "origin": "void cv::viz::Camera::setClip",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "clip",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "setFov()",
    "local": ""
  },
  {
    "origin": "void cv::viz::Camera::setFov",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "fov",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "setWindowSize()",
    "local": ""
  },
  {
    "origin": "void cv::viz::Camera::setWindowSize",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "window_size",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": ""
  },
  {
    "origin": "opencv2/viz/",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:49 for OpenCV by &#160;",
    "local": ""
  }
]