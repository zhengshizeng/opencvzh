[
  {
    "origin": "OpenCV: cv::cuda Namespace Reference",
    "local": "OpenCV:cv:：cuda命名空间引用"
  },
  {
    "origin": "Open Source Computer Vision",
    "local": "开源计算机视觉"
  },
  {
    "origin": "Classes",
    "local": "班级"
  },
  {
    "origin": "Enumerations",
    "local": "枚举"
  },
  {
    "origin": "Functions",
    "local": "功能"
  },
  {
    "origin": "cv::cuda Namespace Reference",
    "local": "cv:：cuda命名空间引用"
  },
  {
    "origin": "Classes",
    "local": "班级"
  },
  {
    "origin": "The class discriminates between foreground and background pixels by building and maintaining a model of the background.",
    "local": "该类通过建立和维护背景模型来区分前景和背景像素。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Background/Foreground Segmentation",
    "local": "背景/前景分割"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Gaussian Mixture-based Background/Foreground Segmentation",
    "local": "基于高斯混合的背景/前景分割"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Gaussian Mixture-based Background/Foreground Segmentation",
    "local": "基于高斯混合的背景/前景分割"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Class computing the optical flow for two images using Brox et al Optical Flow algorithm (",
    "local": "用Brox等人的光流算法计算两幅图像的光流("
  },
  {
    "origin": ").",
    "local": ")."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "for use with CUDA streams.",
    "local": "用于CUDA流。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Base class for Canny Edge Detector. :",
    "local": "Canny边缘检测器的基类："
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Cascade classifier class used for object detection. Supports HAAR and LBP cascades. :",
    "local": "用于目标检测的级联分类器类。支持HAAR和LBP级联："
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Base class for Contrast Limited Adaptive Histogram Equalization. :",
    "local": "对比度受限自适应直方图均衡化基类："
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Base class for convolution (or cross-correlation) operator. :",
    "local": "卷积（或互相关）运算符的基类："
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Base class for Cornerness Criteria computation. :",
    "local": "用于角度标准计算的基类："
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Base class for Corners Detector. :",
    "local": "角点检测器的基类："
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Base interface for dense optical flow algorithms.",
    "local": "密集光流算法的基本接口。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Class used for calculating a dense optical flow.",
    "local": "用于计算密集光流的类。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Abstract base class for matching keypoint descriptors.",
    "local": "用于匹配关键点描述符的抽象基类。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Class providing functionality for querying the specified GPU properties.",
    "local": "类提供查询指定GPU属性的功能。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Base class for",
    "local": "的基类"
  },
  {
    "origin": "operator as a",
    "local": "操作员作为"
  },
  {
    "origin": ". :",
    "local": ". :"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Class refining a disparity map using joint bilateral filtering. :",
    "local": "使用联合双边滤波对视差图进行类细化："
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Class that enables getting cudaEvent_t from",
    "local": "类，该类允许从"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Class computing a dense optical flow using the Gunnar Farneback's algorithm.",
    "local": "类使用Gunnar-Farneback算法计算密集光流。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Wrapping class for feature detection using the FAST method.",
    "local": "使用快速方法进行特征检测的包装类。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Abstract base class for CUDA asynchronous 2D image feature detectors and descriptor extractors.",
    "local": "CUDA异步2D图像特征检测器和描述符提取器的抽象基类。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Common interface for all CUDA filters :",
    "local": "所有CUDA过滤器的通用接口："
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Base storage class for GPU memory with reference counting.",
    "local": "具有引用计数的GPU内存的基本存储类。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "The class implements Histogram of Oriented Gradients (",
    "local": "类实现了有向梯度的直方图("
  },
  {
    "origin": ") object detector.",
    "local": ")物体探测器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Class with reference counting wrapping special memory type allocation functions from CUDA.",
    "local": "用引用计数包装CUDA中的特殊内存类型分配函数来初始化。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Base class for circles detector algorithm. :",
    "local": "圆检测器算法的基类："
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Base class for lines detector algorithm. :",
    "local": "行检测器算法的基类："
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Base class for line segments detector algorithm. :",
    "local": "线段检测器算法的基类："
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Base class for transform using lookup table.",
    "local": "使用查找表进行转换的基类。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Base Interface for optical flow algorithms using NVIDIA Optical Flow SDK.",
    "local": "基本接口光流算法使用NVIDIA光流SDK。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Class for computing the optical flow vectors between two images using NVIDIA Optical Flow hardware and Optical Flow SDK 1.0.",
    "local": "类，用于使用NVIDIA光流硬件和光流SDK 1.0计算两幅图像之间的光流矢量。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Class for computing the optical flow vectors between two images using NVIDIA Optical Flow hardware and Optical Flow SDK 2.0.",
    "local": "类，用于使用NVIDIA光流硬件和光流sdk2.0计算两幅图像之间的光流矢量。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Implementation of the Zach, Pock and Bischof Dual TV-L1 Optical Flow method.",
    "local": "Zach、Pock和Bischof双TV-L1光流方法的实现。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Class implementing the",
    "local": "类实现"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "oriented BRIEF",
    "local": "定向简报"
  },
  {
    "origin": ") keypoint detector and descriptor extractor.",
    "local": ")关键点检测器和描述符提取器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Base interface for sparse optical flow algorithms.",
    "local": "稀疏光流算法的基本接口。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Class used for calculating a sparse optical flow.",
    "local": "用于计算稀疏光流的类。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Class computing stereo correspondence using the belief propagation algorithm. :",
    "local": "使用信念传播算法计算立体对应的类："
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Class computing stereo correspondence (disparity map) using the block matching algorithm. :",
    "local": "类使用块匹配算法计算立体对应（视差图）："
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Class computing stereo correspondence using the constant space belief propagation algorithm. :",
    "local": "使用恒定空间信念传播算法计算立体对应："
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "The class implements the modified H. Hirschmuller algorithm",
    "local": "类实现了修改后的H。赫氏算法"
  },
  {
    "origin": ". Limitation and difference are as follows:",
    "local": ". 限制和区别如下："
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "This class encapsulates a queue of asynchronous calls.",
    "local": "这个类封装了一个异步调用队列。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Class that enables getting cudaStream_t from",
    "local": "类，该类允许从"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Class used for extracting Speeded Up Robust Features (SURF) from an image. :",
    "local": "用于从图像中提取加速鲁棒特征（SURF）的类："
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Class providing a set of static methods to check what NVIDIA* card architecture the CUDA module was built for.",
    "local": "类提供了一组静态方法来检查构建CUDA模块的NVIDIA*卡体系结构。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Base class for Template Matching. :",
    "local": "模板匹配的基类："
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Enumerations",
    "local": "枚举"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_BayerRG2BGR_MHT,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_BayerGR2BGR_MHT,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_BayerBG2BGR_MHT,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_BayerGB2BGR_MHT,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 13,",
    "local": "= 13,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 20,",
    "local": "= 20,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 21,",
    "local": "= 21,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 30,",
    "local": "= 30,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= FEATURE_SET_COMPUTE_11,",
    "local": "=特征集计算11，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= FEATURE_SET_COMPUTE_12,",
    "local": "=特征集计算12，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= FEATURE_SET_COMPUTE_13,",
    "local": "=特征集计算13，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= FEATURE_SET_COMPUTE_30,",
    "local": "=特征集计算30，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= FEATURE_SET_COMPUTE_35",
    "local": "=特征集计算35"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "Enumeration providing CUDA computing features.",
    "local": "枚举提供CUDA计算功能。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Functions",
    "local": "功能"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Computes an absolute value of each matrix element.",
    "local": "计算每个矩阵元素的绝对值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Computes per-element absolute difference of two matrices (or of a matrix and scalar).",
    "local": "计算两个矩阵（或矩阵和标量）的每元素绝对差。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Returns the sum of absolute values for matrix elements.",
    "local": "返回矩阵元素的绝对值之和。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Computes a matrix-matrix or matrix-scalar sum.",
    "local": "计算矩阵或矩阵标量和。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1, double alpha,",
    "local": "src1，双α，"
  },
  {
    "origin": "src2, double beta, double gamma,",
    "local": "src2，双β，双γ，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Computes the weighted sum of two arrays.",
    "local": "计算两个数组的加权和。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "img1,",
    "local": "图像1，"
  },
  {
    "origin": "img2,",
    "local": "img2公司，"
  },
  {
    "origin": "dst, int alpha_op,",
    "local": "dst，内部阿尔法运算，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Composites two images using alpha opacity values contained in each image.",
    "local": "使用每个图像中包含的alpha不透明度值合成两个图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int kernel_size, float sigma_color, float sigma_spatial, int borderMode=",
    "local": "dst，int kernel\\u size，float sigma\\u color，float sigma\\u spatial，int borderMode="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Performs bilateral filtering of passed image.",
    "local": "对传递的图像执行双边滤波。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "(),",
    "local": "(),"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Performs a per-element bitwise conjunction of two matrices (or of matrix and scalar).",
    "local": "执行两个矩阵（或矩阵和标量）的逐元素逐位合并。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "(),",
    "local": "(),"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Performs a per-element bitwise inversion.",
    "local": "执行逐元素逐位反转。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "(),",
    "local": "(),"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Performs a per-element bitwise disjunction of two matrices (or of matrix and scalar).",
    "local": "对两个矩阵（或矩阵和标量）执行逐元素逐位析取。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "(),",
    "local": "(),"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Performs a per-element bitwise exclusive or operation of two matrices (or of matrix and scalar).",
    "local": "对两个矩阵（或矩阵和标量）执行逐元素逐位异或运算。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "img1,",
    "local": "图像1，"
  },
  {
    "origin": "img2,",
    "local": "img2公司，"
  },
  {
    "origin": "weights1,",
    "local": "权重1，"
  },
  {
    "origin": "weights2,",
    "local": "权重2，"
  },
  {
    "origin": "result,",
    "local": "结果，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Performs linear blending of two images.",
    "local": "执行两个图像的线性混合。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "M, bool inverse,",
    "local": "M、 布尔倒数，"
  },
  {
    "origin": "dsize,",
    "local": "使变大，"
  },
  {
    "origin": "xmap,",
    "local": "xmap公司，"
  },
  {
    "origin": "ymap,",
    "local": "在这里，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Builds transformation maps for affine transformation.",
    "local": "为仿射变换构建变换映射。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "M, bool inverse,",
    "local": "M、 布尔倒数，"
  },
  {
    "origin": "dsize,",
    "local": "使变大，"
  },
  {
    "origin": "&amp;xmap,",
    "local": "&amp；xmap公司，"
  },
  {
    "origin": "&amp;ymap,",
    "local": "&amp；是的，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "M, bool inverse,",
    "local": "M、 布尔倒数，"
  },
  {
    "origin": "dsize,",
    "local": "使变大，"
  },
  {
    "origin": "&amp;xmap,",
    "local": "&amp；xmap公司，"
  },
  {
    "origin": "&amp;ymap,",
    "local": "&amp；是的，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "M, bool inverse,",
    "local": "M、 布尔倒数，"
  },
  {
    "origin": "dsize,",
    "local": "使变大，"
  },
  {
    "origin": "xmap,",
    "local": "xmap公司，"
  },
  {
    "origin": "ymap,",
    "local": "在这里，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Builds transformation maps for perspective transformation.",
    "local": "为透视变换构建变换贴图。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "M, bool inverse,",
    "local": "M、 布尔倒数，"
  },
  {
    "origin": "dsize,",
    "local": "使变大，"
  },
  {
    "origin": "&amp;xmap,",
    "local": "&amp；xmap公司，"
  },
  {
    "origin": "&amp;ymap,",
    "local": "&amp；是的，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "M, bool inverse,",
    "local": "M、 布尔倒数，"
  },
  {
    "origin": "dsize,",
    "local": "使变大，"
  },
  {
    "origin": "&amp;xmap,",
    "local": "&amp；xmap公司，"
  },
  {
    "origin": "&amp;ymap,",
    "local": "&amp；是的，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "(),",
    "local": "(),"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "hist,",
    "local": "历史，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Calculates histogram for one channel 8-bit image.",
    "local": "计算一通道8位图像的直方图。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "mask,",
    "local": "面具，"
  },
  {
    "origin": "hist,",
    "local": "历史，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Calculates histogram for one channel 8-bit image confined in given mask.",
    "local": "计算限制在给定掩码中的一通道8位图像的直方图。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int normType,",
    "local": "dst，整型，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "(),",
    "local": "(),"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst, int normType=",
    "local": "dst，整型="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;prev, const",
    "local": "&amp；上一个，常量"
  },
  {
    "origin": "&amp;curr,",
    "local": "&amp；货币，"
  },
  {
    "origin": "block_size,",
    "local": "块大小，"
  },
  {
    "origin": "shift_size,",
    "local": "移位大小，"
  },
  {
    "origin": "max_range, bool use_previous,",
    "local": "最大\\u范围，bool use \\u previous，"
  },
  {
    "origin": "&amp;velx,",
    "local": "&amp；维克斯，"
  },
  {
    "origin": "&amp;vely,",
    "local": "&amp；很明显，"
  },
  {
    "origin": "&amp;buf,",
    "local": "&amp；缓冲器，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Calculates optical flow for 2 images using block matching algorithm */.",
    "local": "使用块匹配算法*/计算两幅图像的光流。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "(),",
    "local": "(),"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "(),",
    "local": "(),"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "x,",
    "local": "x号，"
  },
  {
    "origin": "y,",
    "local": "是的，"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "angle, bool angleInDegrees=false,",
    "local": "角度，bool angleInDegrees=假，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Converts Cartesian coordinates into polar.",
    "local": "将笛卡尔坐标转换为极坐标。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst, int cmpop,",
    "local": "dst、int cmpop、，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Compares elements of two matrices (or of a matrix and scalar).",
    "local": "比较两个矩阵（或矩阵和标量）的元素。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;image,",
    "local": "&amp；图像，"
  },
  {
    "origin": "&amp;mask, const",
    "local": "&amp；面罩，常数"
  },
  {
    "origin": "&amp;lo, const",
    "local": "&amp；常量"
  },
  {
    "origin": "&amp;hi,",
    "local": "&amp；你好，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "compute mask for Generalized Flood fill componetns labeling.",
    "local": "广义泛光填充组件标记的计算掩码。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "_src,",
    "local": "_src公司，"
  },
  {
    "origin": "_dst,",
    "local": "_夏令时，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Converts an array to half precision floating number.",
    "local": "将数组转换为半精度浮点数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int top, int bottom, int left, int right, int borderType,",
    "local": "dst，int top，int bottom，int left，int right，int borderType，"
  },
  {
    "origin": "value=",
    "local": "价值="
  },
  {
    "origin": "(),",
    "local": "(),"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Forms a border around an image.",
    "local": "在图像周围形成边框。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src)",
    "local": "（src）"
  },
  {
    "origin": "Counts non-zero matrix elements.",
    "local": "计算非零矩阵元素。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;params=",
    "local": "&amp；参数="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Creates FGD Background Subtractor.",
    "local": "创建背景减法器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(int initializationFrames=120, double decisionThreshold=0.8)",
    "local": "（int initializationFrames=120，double decisionThreshold=0.8）"
  },
  {
    "origin": "Creates GMG Background Subtractor.",
    "local": "创建GMG背景减法器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(int history=200, int nmixtures=5, double backgroundRatio=0.7, double noiseSigma=0)",
    "local": "（int history=200，int nmixtures=5，双背景比=0.7，双噪声西格玛=0）"
  },
  {
    "origin": "Creates mixture-of-gaussian background subtractor.",
    "local": "创建高斯背景减法器的混合。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(int history=500, double varThreshold=16, bool detectShadows=true)",
    "local": "（int history=500，double varThreshold=16，bool detectShadows=true）"
  },
  {
    "origin": "Creates MOG2 Background Subtractor.",
    "local": "创建MOG2背景减法器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(int srcType, int dstType,",
    "local": "（int srcType，int dstType，"
  },
  {
    "origin": "ksize,",
    "local": "氧气，"
  },
  {
    "origin": "anchor=",
    "local": "锚="
  },
  {
    "origin": "(-1, -1), int borderMode=",
    "local": "（-1，-1），整数模式="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "borderVal=",
    "local": "边界值="
  },
  {
    "origin": "(0))",
    "local": "(0))"
  },
  {
    "origin": "Creates a normalized 2D box filter.",
    "local": "创建规范化的二维长方体过滤器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(int srcType,",
    "local": "（int srctype，"
  },
  {
    "origin": "ksize,",
    "local": "氧气，"
  },
  {
    "origin": "anchor=",
    "local": "锚="
  },
  {
    "origin": "(-1, -1), int borderMode=",
    "local": "（-1，-1），整数模式="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "borderVal=",
    "local": "边界值="
  },
  {
    "origin": "(0))",
    "local": "(0))"
  },
  {
    "origin": "Creates the maximum filter.",
    "local": "创建最大筛选器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(int srcType,",
    "local": "（int srctype，"
  },
  {
    "origin": "ksize,",
    "local": "氧气，"
  },
  {
    "origin": "anchor=",
    "local": "锚="
  },
  {
    "origin": "(-1, -1), int borderMode=",
    "local": "（-1，-1），整数模式="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "borderVal=",
    "local": "边界值="
  },
  {
    "origin": "(0))",
    "local": "(0))"
  },
  {
    "origin": "Creates the minimum filter.",
    "local": "创建最小筛选器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(double low_thresh, double high_thresh, int apperture_size=3, bool L2gradient=false)",
    "local": "（双低阈值，双高阈值，int apperture\\u size=3，bool L2gradient=false）"
  },
  {
    "origin": "Creates implementation for",
    "local": "为创建实现"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(double clipLimit=40.0,",
    "local": "（双夹限=40.0，"
  },
  {
    "origin": "tileGridSize=",
    "local": "平铺网格化="
  },
  {
    "origin": "(8, 8))",
    "local": "(8, 8))"
  },
  {
    "origin": "Creates implementation for",
    "local": "为创建实现"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(int srcType, int dstType, int ksize, int anchor=-1, int borderMode=",
    "local": "（int srcType，int dstType，int ksize，int anchor=-1，int borderMode）="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "borderVal=",
    "local": "边界值="
  },
  {
    "origin": "(0))",
    "local": "(0))"
  },
  {
    "origin": "Creates a vertical 1D box filter.",
    "local": "创建垂直1D长方体过滤器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(int rows, int cols, int type,",
    "local": "（int行，int列，int类型，"
  },
  {
    "origin": "arr)",
    "local": "阿里尔）"
  },
  {
    "origin": "Creates a continuous matrix.",
    "local": "创建连续矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "user_block_size=",
    "local": "用户块大小="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Creates implementation for",
    "local": "为创建实现"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(int srcType, int dstType, int dx, int dy, int ksize, bool",
    "local": "（int srcType，int dstType，int dx，int dy，int ksize，bool）"
  },
  {
    "origin": "=false, double scale=1, int rowBorderMode=",
    "local": "=false，双刻度=1，int rowBorderMode="
  },
  {
    "origin": ", int columnBorderMode=-1)",
    "local": "，int columnBorderMode=-1）"
  },
  {
    "origin": "Creates a generalized Deriv operator.",
    "local": "创建广义Deriv运算符。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "dft_size, int flags)",
    "local": "dft（大小，int标志）"
  },
  {
    "origin": "Creates implementation for",
    "local": "为创建实现"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(int ndisp=64, int radius=3, int iters=1)",
    "local": "（int ndisp=64，int radius=3，int iters=1）"
  },
  {
    "origin": "Creates",
    "local": "创建"
  },
  {
    "origin": "object.",
    "local": "对象。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(int srcType, int dstType,",
    "local": "（int srcType，int dstType，"
  },
  {
    "origin": "ksize, double sigma1, double sigma2=0, int rowBorderMode=",
    "local": "ksize，double sigma1，double sigma2=0，int rowBorderMode="
  },
  {
    "origin": ", int columnBorderMode=-1)",
    "local": "，int columnBorderMode=-1）"
  },
  {
    "origin": "Creates a Gaussian filter.",
    "local": "创建高斯滤波器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Creates implementation for generalized hough transform from",
    "local": "创建广义hough变换的实现"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Creates implementation for generalized hough transform from",
    "local": "创建广义hough变换的实现"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(int srcType, int maxCorners=1000, double qualityLevel=0.01, double minDistance=0.0, int blockSize=3, bool useHarrisDetector=false, double harrisK=0.04)",
    "local": "（int srcType，int maxCorners=1000，double qualityvel=0.01，double minDistance=0.0，int blockSize=3，bool usehrisdetector=false，double harrisK=0.04）"
  },
  {
    "origin": "Creates implementation for",
    "local": "为创建实现"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(int srcType, int blockSize, int ksize, double k, int borderType=",
    "local": "（int srcType，int blockSize，int ksize，double k，int borderType）="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Creates implementation for Harris cornerness criteria.",
    "local": "为Harris转角标准创建实现。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(float dp, float minDist, int cannyThreshold, int votesThreshold, int minRadius, int maxRadius, int maxCircles=4096)",
    "local": "（float dp，float minDist，int cannyThreshold，int votesThreshold，int minRadius，int maxRadius，int maxCircles=4096）"
  },
  {
    "origin": "Creates implementation for",
    "local": "为创建实现"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(float rho, float theta, int",
    "local": "（浮点ρ，浮点θ，int）"
  },
  {
    "origin": ", bool doSort=false, int maxLines=4096)",
    "local": "，bool doSort=false，int maxLines=4096）"
  },
  {
    "origin": "Creates implementation for",
    "local": "为创建实现"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(float rho, float theta, int minLineLength, int maxLineGap, int maxLines=4096)",
    "local": "（浮点rho，浮点θ，int minLineLength，int maxLineGap，int maxLines=4096）"
  },
  {
    "origin": "Creates implementation for",
    "local": "为创建实现"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(int srcType, int dstType, int ksize=1, double scale=1, int borderMode=",
    "local": "（int srcType，int dstType，int ksize=1，double scale=1，int borderMode）="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "borderVal=",
    "local": "边界值="
  },
  {
    "origin": "(0))",
    "local": "(0))"
  },
  {
    "origin": "Creates a Laplacian operator.",
    "local": "创建拉普拉斯运算符。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(int srcType, int dstType,",
    "local": "（int srcType，int dstType，"
  },
  {
    "origin": "kernel,",
    "local": "内核，"
  },
  {
    "origin": "anchor=",
    "local": "锚="
  },
  {
    "origin": "(-1, -1), int borderMode=",
    "local": "（-1，-1），整数模式="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "borderVal=",
    "local": "边界值="
  },
  {
    "origin": "(0))",
    "local": "(0))"
  },
  {
    "origin": "Creates a non-separable linear 2D filter.",
    "local": "创建不可分离的线性2D过滤器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "lut)",
    "local": "（琵琶）"
  },
  {
    "origin": "Creates implementation for",
    "local": "为创建实现"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(int srcType, int windowSize, int",
    "local": "（int srcType，int windowSize，int）"
  },
  {
    "origin": "=128)",
    "local": "=128)"
  },
  {
    "origin": "Performs median filtering for each point of the source image.",
    "local": "对源图像的每个点执行中值滤波。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(int srcType, int blockSize, int ksize, int borderType=",
    "local": "（int srcType，int blockSize，int ksize，int borderType）="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Creates implementation for the minimum eigen value of a 2x2 derivative covariation matrix (the cornerness criteria).",
    "local": "创建2x2导数协变矩阵的最小特征值的实现（拐角度标准）。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(int op, int srcType,",
    "local": "（int op，int srcType，"
  },
  {
    "origin": "kernel,",
    "local": "内核，"
  },
  {
    "origin": "anchor=",
    "local": "锚="
  },
  {
    "origin": "(-1, -1), int iterations=1)",
    "local": "（-1，-1），int迭代次数=1）"
  },
  {
    "origin": "Creates a 2D morphological filter.",
    "local": "创建二维形态过滤器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;u, const",
    "local": "&amp；u、 常数"
  },
  {
    "origin": "&amp;v,",
    "local": "&amp；五、，"
  },
  {
    "origin": "&amp;vertex,",
    "local": "&amp；顶点，"
  },
  {
    "origin": "&amp;colors)",
    "local": "&amp；颜色）"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(int srcType, int dstType, int ksize, int anchor=-1, int borderMode=",
    "local": "（int srcType，int dstType，int ksize，int anchor=-1，int borderMode）="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "borderVal=",
    "local": "边界值="
  },
  {
    "origin": "(0))",
    "local": "(0))"
  },
  {
    "origin": "Creates a horizontal 1D box filter.",
    "local": "创建水平一维长方体过滤器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(int srcType, int dstType, int dx, int dy, double scale=1, int rowBorderMode=",
    "local": "（int srcType，int dstType，int dx，int dy，双刻度=1，int rowBorderMode）="
  },
  {
    "origin": ", int columnBorderMode=-1)",
    "local": "，int columnBorderMode=-1）"
  },
  {
    "origin": "Creates a vertical or horizontal Scharr operator.",
    "local": "创建垂直或水平Scharr运算符。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(int srcType, int dstType,",
    "local": "（int srcType，int dstType，"
  },
  {
    "origin": "rowKernel,",
    "local": "行内核，"
  },
  {
    "origin": "columnKernel,",
    "local": "柱状核，"
  },
  {
    "origin": "anchor=",
    "local": "锚="
  },
  {
    "origin": "(-1,-1), int rowBorderMode=",
    "local": "（-1，-1），整数行边界模式="
  },
  {
    "origin": ", int columnBorderMode=-1)",
    "local": "，int columnBorderMode=-1）"
  },
  {
    "origin": "Creates a separable linear filter.",
    "local": "创建可分离的线性过滤器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(int srcType, int dstType, int dx, int dy, int ksize=3, double scale=1, int rowBorderMode=",
    "local": "（int srcType，int dstType，int dx，int dy，int ksize=3，double scale=1，int rowBorderMode）="
  },
  {
    "origin": ", int columnBorderMode=-1)",
    "local": "，int columnBorderMode=-1）"
  },
  {
    "origin": "Creates a Sobel operator.",
    "local": "创建Sobel运算符。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(int ndisp=64, int iters=5, int levels=5, int msg_type=",
    "local": "（int ndisp=64，int iters=5，int levels=5，int msg\\u类型）="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Creates",
    "local": "创建"
  },
  {
    "origin": "object.",
    "local": "对象。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(int numDisparities=64, int blockSize=19)",
    "local": "（int numDisparities=64，int blockSize=19）"
  },
  {
    "origin": "Creates",
    "local": "创建"
  },
  {
    "origin": "object.",
    "local": "对象。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(int ndisp=128, int iters=8, int levels=4, int nr_plane=4, int msg_type=",
    "local": "（int ndisp=128，int iters=8，int levels=4，int nr\\u plane=4，int msg\\u type）="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Creates",
    "local": "创建"
  },
  {
    "origin": "object.",
    "local": "对象。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(int minDisparity=0, int numDisparities=128, int P1=10, int P2=120, int uniquenessRatio=5, int mode=",
    "local": "（int minDisparity=0，int numDisparities=128，int P1=10，int P2=120，int uniquenessRatio=5，int mode）="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Creates",
    "local": "创建"
  },
  {
    "origin": "object.",
    "local": "对象。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(int srcType, int method,",
    "local": "（int srctype，int method，"
  },
  {
    "origin": "user_block_size=",
    "local": "用户块大小="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Creates implementation for",
    "local": "为创建实现"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Converts an image from one color space to another.",
    "local": "将图像从一个颜色空间转换为另一个颜色空间。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Converts an image from Bayer pattern to RGB or grayscale.",
    "local": "将图像从拜耳模式转换为RGB或灰度。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "feature_set)",
    "local": "特征（U集）"
  },
  {
    "origin": "checks whether current device supports the given feature",
    "local": "检查当前设备是否支持给定的功能"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Performs a forward or inverse discrete Fourier transform (1D or 2D) of the floating point matrix.",
    "local": "执行浮点矩阵的正向或反向离散傅里叶变换（1D或2D）。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst, double scale=1, int dtype=-1,",
    "local": "dst，双刻度=1，int dtype=-1，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Computes a matrix-matrix or matrix-scalar division.",
    "local": "计算矩阵或矩阵标量除法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src_disp,",
    "local": "SRC Disp"
  },
  {
    "origin": "dst_disp, int ndisp,",
    "local": "dst-u显示，int ndisp；"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Colors a disparity image.",
    "local": "为视差图像着色。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(int rows, int cols, int type,",
    "local": "（int行，int列，int类型，"
  },
  {
    "origin": "arr)",
    "local": "阿里尔）"
  },
  {
    "origin": "Ensures that the size of a matrix is big enough and the matrix has a proper type.",
    "local": "确保矩阵的大小足够大，并且矩阵具有适当的类型。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Equalizes the histogram of a grayscale image.",
    "local": "均衡灰度图像的直方图。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "levels, int nLevels, int lowerLevel, int upperLevel,",
    "local": "级别，int nLevels，int lowerLevel，int upperLevel，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Computes levels with even distribution.",
    "local": "计算均匀分布的级别。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Computes an exponent of each matrix element.",
    "local": "计算每个矩阵元素的指数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, float h, int search_window=21, int block_size=7,",
    "local": "dst，float h，int search_window=21，int block_size=7，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Perform image denoising using Non-local Means Denoising algorithm",
    "local": "使用非局部均值去噪算法进行图像去噪"
  },
  {
    "origin": "http://www.ipol.im/pub/algo/bcm_non_local_means_denoising",
    "local": "http://www.ipol.im/pub/algo/bcm_non_local_means_denoising"
  },
  {
    "origin": "with several computational optimizations. Noise expected to be a gaussian white noise.",
    "local": "进行了多次计算优化。噪声应为高斯白噪声。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, float h_luminance, float photo_render, int search_window=21, int block_size=7,",
    "local": "dst，float h\\u luminance，float photo\\u render，int search\\u window=21，int block\\u size=7，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Modification of fastNlMeansDenoising function for colored images.",
    "local": "彩色图像去噪函数的改进。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "(),",
    "local": "(),"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "minMaxVals,",
    "local": "最小最大值，"
  },
  {
    "origin": "loc,",
    "local": "地点：，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "(),",
    "local": "(),"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int flipCode,",
    "local": "dst，int flipCode，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Flips a 2D matrix around vertical, horizontal, or both axes.",
    "local": "围绕垂直、水平或两个轴翻转二维矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, bool forward=true,",
    "local": "dst，bool forward=真，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Routines for correcting image color gamma.",
    "local": "校正图像颜色gamma的例程。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2, double alpha,",
    "local": "src2，双α，"
  },
  {
    "origin": "src3, double beta,",
    "local": "src3，双β，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Performs generalized matrix multiplication.",
    "local": "执行广义矩阵乘法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Returns the number of installed CUDA-enabled devices.",
    "local": "返回已安装的启用CUDA的设备数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Returns the current device index set by",
    "local": "返回由设置的当前设备索引"
  },
  {
    "origin": "or initialized by default.",
    "local": "或默认初始化。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;terminals,",
    "local": "&amp；终端，"
  },
  {
    "origin": "&amp;leftTransp,",
    "local": "&amp；左运输，"
  },
  {
    "origin": "&amp;rightTransp,",
    "local": "&amp；ARightTransp，"
  },
  {
    "origin": "&amp;top,",
    "local": "&amp；顶部，"
  },
  {
    "origin": "&amp;bottom,",
    "local": "&amp；底部，"
  },
  {
    "origin": "&amp;labels,",
    "local": "&amp；标签，"
  },
  {
    "origin": "&amp;buf,",
    "local": "&amp；缓冲器，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "performs labeling via graph cuts of a 2D regular 4-connected graph.",
    "local": "通过二维正则四连通图的图割进行标记。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;terminals,",
    "local": "&amp；终端，"
  },
  {
    "origin": "&amp;leftTransp,",
    "local": "&amp；左运输，"
  },
  {
    "origin": "&amp;rightTransp,",
    "local": "&amp；ARightTransp，"
  },
  {
    "origin": "&amp;top,",
    "local": "&amp；顶部，"
  },
  {
    "origin": "&amp;topLeft,",
    "local": "&amp；左上角，"
  },
  {
    "origin": "&amp;topRight,",
    "local": "&amp；A右上角，"
  },
  {
    "origin": "&amp;bottom,",
    "local": "&amp；底部，"
  },
  {
    "origin": "&amp;bottomLeft,",
    "local": "&amp；底部"
  },
  {
    "origin": "&amp;bottomRight,",
    "local": "&amp；右下角，"
  },
  {
    "origin": "&amp;labels,",
    "local": "&amp；标签，"
  },
  {
    "origin": "&amp;buf,",
    "local": "&amp；缓冲器，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "performs labeling via graph cuts of a 2D regular 8-connected graph.",
    "local": "通过二维正则8连通图的图割来执行标记。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "hist, int histSize, int lowerLevel, int upperLevel,",
    "local": "hist，int histSize，int lowerLevel，int upperLevel，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Calculates a histogram with evenly distributed bins.",
    "local": "使用均匀分布的容器计算直方图。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "hist[4], int histSize[4], int lowerLevel[4], int upperLevel[4],",
    "local": "hist[4]，int histSize[4]，int lowerLevel[4]，int upperLevel[4]，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "hist,",
    "local": "历史，"
  },
  {
    "origin": "levels,",
    "local": "水平，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Calculates a histogram with bins determined by the levels array.",
    "local": "使用由levels数组确定的bin计算直方图。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "hist[4], const",
    "local": "历史[4]，常量"
  },
  {
    "origin": "levels[4],",
    "local": "级别[4]，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src, const",
    "local": "src，const"
  },
  {
    "origin": "&amp;lowerb, const",
    "local": "&amp；lowerb，常数"
  },
  {
    "origin": "&amp;upperb,",
    "local": "&amp；上B，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Checks if array elements lie between two scalars.",
    "local": "检查数组元素是否位于两个标量之间。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Computes an integral image.",
    "local": "计算积分图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;frame0, const",
    "local": "&amp；第0帧，常量"
  },
  {
    "origin": "&amp;frame1, const",
    "local": "&amp；框架1，const"
  },
  {
    "origin": "&amp;fu, const",
    "local": "&amp；傅，康斯特"
  },
  {
    "origin": "&amp;fv, const",
    "local": "&amp；fv，常数"
  },
  {
    "origin": "&amp;bu, const",
    "local": "&amp；B、 常数"
  },
  {
    "origin": "&amp;bv, float pos,",
    "local": "&amp；bv，浮动位置，"
  },
  {
    "origin": "&amp;newFrame,",
    "local": "&amp；新框架，"
  },
  {
    "origin": "&amp;buf,",
    "local": "&amp；缓冲器，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Interpolates frames (images) using provided optical flow (displacement field).",
    "local": "使用提供的光流（位移场）插值帧（图像）。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;mask,",
    "local": "&amp；面具，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "performs connected componnents labeling.",
    "local": "执行连接的组件标记。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Computes a natural logarithm of absolute value of each matrix element.",
    "local": "计算每个矩阵元素绝对值的自然对数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "&lt; int &gt; val,",
    "local": "&lt；内部&gt；之前，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Performs pixel by pixel right left of an image by a constant value.",
    "local": "按常量值逐像素执行图像的左、右。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "val,",
    "local": "瓦尔，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "xy,",
    "local": "xy公司，"
  },
  {
    "origin": "magnitude,",
    "local": "震级，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Computes magnitudes of complex matrix elements.",
    "local": "计算复矩阵元素的大小。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "x,",
    "local": "x号，"
  },
  {
    "origin": "y,",
    "local": "是的，"
  },
  {
    "origin": "magnitude,",
    "local": "震级，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "xy,",
    "local": "xy公司，"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Computes squared magnitudes of complex matrix elements.",
    "local": "计算复矩阵元素的平方大小。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "x,",
    "local": "x号，"
  },
  {
    "origin": "y,",
    "local": "是的，"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Computes the per-element maximum of two matrices (or a matrix and a scalar).",
    "local": "计算两个矩阵（或一个矩阵和一个标量）的每元素最大值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int sp, int sr,",
    "local": "dst、int sp、int sr、，"
  },
  {
    "origin": "criteria=",
    "local": "标准="
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "+",
    "local": "+"
  },
  {
    "origin": ", 5, 1),",
    "local": ", 5, 1),"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Performs mean-shift filtering for each point of the source image.",
    "local": "对源图像的每个点执行均值漂移滤波。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dstr,",
    "local": "sstr公司，"
  },
  {
    "origin": "dstsp, int sp, int sr,",
    "local": "dstsp，int sp，int sr，"
  },
  {
    "origin": "criteria=",
    "local": "标准="
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "+",
    "local": "+"
  },
  {
    "origin": ", 5, 1),",
    "local": ", 5, 1),"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Performs a mean-shift procedure and stores information about processed points (their colors and positions) in two images.",
    "local": "执行mean-shift过程，并在两个图像中存储有关处理点（其颜色和位置）的信息。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int sp, int sr, int minsize,",
    "local": "dst、int sp、int sr、int minsize、，"
  },
  {
    "origin": "criteria=",
    "local": "标准="
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "+",
    "local": "+"
  },
  {
    "origin": ", 5, 1),",
    "local": ", 5, 1),"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Performs a mean-shift segmentation of the source image and eliminates small segments.",
    "local": "对源图像执行mean-shift分割并消除小片段。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "mtx,",
    "local": "mtx公司，"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&amp;stddev)",
    "local": "&amp；标准偏差）"
  },
  {
    "origin": "Computes a mean value and a standard deviation of matrix elements.",
    "local": "计算矩阵元素的平均值和标准偏差。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "mtx,",
    "local": "mtx公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "*src, size_t n,",
    "local": "*src，尺寸，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Makes a multi-channel matrix out of several single-channel matrices.",
    "local": "从几个单通道矩阵中生成多通道矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const std::vector&lt;",
    "local": "（const std：：向量&lt；"
  },
  {
    "origin": "&gt; &amp;src,",
    "local": "&燃气轮机&amp；src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Computes the per-element minimum of two matrices (or a matrix and a scalar).",
    "local": "计算两个矩阵（或一个矩阵和一个标量）的每元素最小值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src, double *minVal, double *maxVal,",
    "local": "src，双*最小值，双*最大值，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Finds global minimum and maximum matrix elements and returns their values.",
    "local": "查找全局最小和最大矩阵元素并返回它们的值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src, double *minVal, double *maxVal,",
    "local": "src，双*最小值，双*最大值，"
  },
  {
    "origin": "*minLoc,",
    "local": "*明洛克，"
  },
  {
    "origin": "*maxLoc,",
    "local": "*最大位置，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Finds global minimum and maximum matrix elements and returns their values with locations.",
    "local": "查找全局最小和最大矩阵元素，并返回它们的值和位置。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst, int flags, float scale, bool conjB=false,",
    "local": "dst，int flags，float scale，bool conjB=false，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Performs a per-element multiplication of two Fourier spectrums and scales the result.",
    "local": "对两个傅里叶光谱执行每元素乘法并缩放结果。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst, int flags, bool conjB=false,",
    "local": "dst，int flags，bool concjb=false，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Performs a per-element multiplication of two Fourier spectrums.",
    "local": "对两个傅里叶谱执行每元素乘法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst, double scale=1, int dtype=-1,",
    "local": "dst，双刻度=1，int dtype=-1，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Computes a matrix-matrix or matrix-scalar per-element product.",
    "local": "计算每元素的矩阵或矩阵标量积。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, float h, int search_window=21, int block_size=7, int borderMode=",
    "local": "dst，float h，int search_window=21，int block_size=7，int borderMode="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Performs pure non local means denoising without any simplification, and thus it is not fast.",
    "local": "在没有任何简化的情况下执行纯非局部均值去噪，因此速度不快。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1, int normType,",
    "local": "SRC1，int normtype，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Returns the norm of a matrix (or difference of two matrices).",
    "local": "返回矩阵的范数（或两个矩阵的差）。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2, int normType=",
    "local": "src2，int normtype="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Returns the difference of two matrices.",
    "local": "返回两个矩阵的差。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, double alpha, double beta, int norm_type, int dtype,",
    "local": "dst，双alpha，双beta，int norm\\u type，int dtype，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "(),",
    "local": "(),"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Normalizes the norm or value range of an array.",
    "local": "规范化数组的范数或值范围。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "x,",
    "local": "x号，"
  },
  {
    "origin": "y,",
    "local": "是的，"
  },
  {
    "origin": "angle, bool angleInDegrees=false,",
    "local": "角度，bool angleInDegrees=假，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Computes polar angles of complex matrix elements.",
    "local": "计算复矩阵元素的极角。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "angle,",
    "local": "角度，"
  },
  {
    "origin": "x,",
    "local": "x号，"
  },
  {
    "origin": "y, bool angleInDegrees=false,",
    "local": "布尔角=假，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Converts polar coordinates into Cartesian.",
    "local": "将极坐标转换为笛卡尔坐标。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src, double",
    "local": "src，双"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Raises every matrix element to a power.",
    "local": "将每个矩阵元素提升到一个幂。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(int device)",
    "local": "（int设备）"
  },
  {
    "origin": "(int device)",
    "local": "（int设备）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, const",
    "local": "&amp；src，const"
  },
  {
    "origin": "&amp;rvec, const",
    "local": "&amp；rvec，常数"
  },
  {
    "origin": "&amp;tvec, const",
    "local": "&安培tvec，施工。"
  },
  {
    "origin": "&amp;camera_mat, const",
    "local": "&amp；摄像机垫，常数"
  },
  {
    "origin": "&amp;dist_coef,",
    "local": "&amp；分布系数，"
  },
  {
    "origin": "&amp;dst,",
    "local": "&amp；夏令时，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Smoothes an image and downsamples it.",
    "local": "平滑图像并对其进行下采样。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Upsamples an image and then smoothes it.",
    "local": "对图像进行上采样，然后对其进行平滑处理。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "rect,",
    "local": "矩形，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Computes a standard deviation of integral images.",
    "local": "计算积分图像的标准差。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "mtx,",
    "local": "mtx公司，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Reduces a matrix to a vector.",
    "local": "把矩阵化为向量。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;m)",
    "local": "&amp；米）"
  },
  {
    "origin": "Page-locks the memory of matrix and maps it for the device(s).",
    "local": "页锁定矩阵的内存并将其映射到设备。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "xmap,",
    "local": "xmap公司，"
  },
  {
    "origin": "ymap, int interpolation, int borderMode=",
    "local": "ymap，int插值，int边界模式="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "borderValue=",
    "local": "边界值="
  },
  {
    "origin": "(),",
    "local": "(),"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Applies a generic geometrical transformation to an image.",
    "local": "对图像应用常规几何变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "disp,",
    "local": "呼吸困难，"
  },
  {
    "origin": "xyzw,",
    "local": "xyzw公司，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Reprojects a disparity image to 3D space.",
    "local": "将视差图像重新投影到三维空间。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Explicitly destroys and cleans up all resources associated with the current device in the current process.",
    "local": "显式销毁和清除当前进程中与当前设备关联的所有资源。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "dsize, double fx=0, double fy=0, int interpolation=",
    "local": "dsize，double fx=0，double fy=0，int插值="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Resizes an image.",
    "local": "调整图像大小。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "dsize, double angle, double xShift=0, double yShift=0, int interpolation=",
    "local": "dsize，双角度，双xShift=0，双yShift=0，int插值="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Rotates an image around the origin (0,0) and then shifts it.",
    "local": "围绕原点（0,0）旋转图像，然后将其移动。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "&lt; int &gt; val,",
    "local": "&lt；内部&gt；之前，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Performs pixel by pixel right shift of an image by a constant value.",
    "local": "按常量值逐像素右移图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "val,",
    "local": "瓦尔，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1, double alpha,",
    "local": "src1，双α，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "adds scaled array to another one (dst = alpha*src1 + src2)",
    "local": "将缩放数组添加到另一个数组（dst=alpha*src1+src2）"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(int deviceId, size_t stackSize, int stackCount)",
    "local": "（int deviceId，size\\u t stackSize，int stackCount）"
  },
  {
    "origin": "(bool on)",
    "local": "（嘘声）"
  },
  {
    "origin": "management (must be called before",
    "local": "管理层（必须在"
  },
  {
    "origin": "creation)",
    "local": "（创建）"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(int device)",
    "local": "（int设备）"
  },
  {
    "origin": "Sets a device and initializes it for the current thread.",
    "local": "设置设备并为当前线程初始化它。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(int device=0)",
    "local": "（int设备=0）"
  },
  {
    "origin": "Sets a CUDA device and initializes it for the current thread with OpenGL interoperability.",
    "local": "设置CUDA设备并使用OpenGL互操作性为当前线程初始化它。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;object, const",
    "local": "&amp；对象，常量"
  },
  {
    "origin": "&amp;image, const",
    "local": "&amp；A图像，常量"
  },
  {
    "origin": "&amp;camera_mat, const",
    "local": "&amp；摄像机垫，常数"
  },
  {
    "origin": "&amp;dist_coef,",
    "local": "&amp；分布系数，"
  },
  {
    "origin": "&amp;rvec,",
    "local": "&amp；rvec公司，"
  },
  {
    "origin": "&amp;tvec, bool use_extrinsic_guess=false, int num_iters=100, float max_dist=8.0, int min_inlier_count=100, std::vector&lt; int &gt; *inliers=NULL)",
    "local": "&amp；tvec，bool use \\u extrinsic \\u guess=false，int num \\u iters=100，float max \\u dist=8.0，int min \\u inlier \\u count=100，std:：vector&lt；内部&gt*inliers=空）"
  },
  {
    "origin": "Finds the object pose from 3D-2D point correspondences.",
    "local": "从3D-2D点对应中查找对象姿势。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "*dst,",
    "local": "*夏令时，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Copies each plane of a multi-channel matrix into an array.",
    "local": "将多通道矩阵的每个平面复制到一个数组中。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src, std::vector&lt;",
    "local": "src，std：：向量&lt；"
  },
  {
    "origin": "&gt; &amp;dst,",
    "local": "&燃气轮机&amp；夏令时，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Computes a square value of each matrix element.",
    "local": "计算每个矩阵元素的平方值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "sqsum,",
    "local": "平方和，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Computes a squared integral image.",
    "local": "计算平方积分图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Returns the squared sum of matrix elements.",
    "local": "返回矩阵元素的平方和。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Computes a square root of each matrix element.",
    "local": "计算每个矩阵元素的平方根。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Computes a matrix-matrix or matrix-scalar difference.",
    "local": "计算矩阵或矩阵标量差。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Returns the sum of matrix elements.",
    "local": "返回矩阵元素的和。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "image, const int dstOrder[4],",
    "local": "图像，const int dstOrder[4]，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Exchanges the color channels of an image in-place.",
    "local": "就地交换图像的颜色通道。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, double thresh, double maxval, int type,",
    "local": "dst，双阈值，双最大值，int类型，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Applies a fixed-level threshold to each array element.",
    "local": "对每个数组元素应用固定级别的阈值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, const",
    "local": "&amp；src，const"
  },
  {
    "origin": "&amp;rvec, const",
    "local": "&amp；rvec，常数"
  },
  {
    "origin": "&amp;tvec,",
    "local": "&amp；风险，"
  },
  {
    "origin": "&amp;dst,",
    "local": "&amp；夏令时，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Transposes a matrix.",
    "local": "变换矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;m)",
    "local": "&amp；米）"
  },
  {
    "origin": "Unmaps the memory of matrix and makes it pageable again.",
    "local": "取消映射矩阵的内存并使其再次可分页。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "M,",
    "local": "嗯，"
  },
  {
    "origin": "dsize, int flags=",
    "local": "dsize，int标志="
  },
  {
    "origin": ", int borderMode=",
    "local": "，int边界模式="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "borderValue=",
    "local": "边界值="
  },
  {
    "origin": "(),",
    "local": "(),"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Applies an affine transformation to an image.",
    "local": "对图像应用仿射变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "M,",
    "local": "嗯，"
  },
  {
    "origin": "dsize, int flags=",
    "local": "dsize，int标志="
  },
  {
    "origin": ", int borderMode=",
    "local": "，int边界模式="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "borderValue=",
    "local": "边界值="
  },
  {
    "origin": "(),",
    "local": "(),"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "M,",
    "local": "嗯，"
  },
  {
    "origin": "dsize, int flags=",
    "local": "dsize，int标志="
  },
  {
    "origin": ", int borderMode=",
    "local": "，int边界模式="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "borderValue=",
    "local": "边界值="
  },
  {
    "origin": "(),",
    "local": "(),"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "M,",
    "local": "嗯，"
  },
  {
    "origin": "dsize, int flags=",
    "local": "dsize，int标志="
  },
  {
    "origin": ", int borderMode=",
    "local": "，int边界模式="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "borderValue=",
    "local": "边界值="
  },
  {
    "origin": "(),",
    "local": "(),"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Applies a perspective transformation to an image.",
    "local": "对图像应用透视变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "M,",
    "local": "嗯，"
  },
  {
    "origin": "dsize, int flags=",
    "local": "dsize，int标志="
  },
  {
    "origin": ", int borderMode=",
    "local": "，int边界模式="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "borderValue=",
    "local": "边界值="
  },
  {
    "origin": "(),",
    "local": "(),"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "M,",
    "local": "嗯，"
  },
  {
    "origin": "dsize, int flags=",
    "local": "dsize，int标志="
  },
  {
    "origin": ", int borderMode=",
    "local": "，int边界模式="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "borderValue=",
    "local": "边界值="
  },
  {
    "origin": "(),",
    "local": "(),"
  },
  {
    "origin": "&amp;stream=",
    "local": "&amp；溪流="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Function Documentation",
    "local": "功能文档"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "createMedianFilter()",
    "local": "CreateMedianFilter（）"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; cv::cuda::createMedianFilter",
    "local": "&燃气轮机；cv:：cuda:：createMedianFilter"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "srcType",
    "local": "SRC类型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "windowSize",
    "local": "窗口"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "partition",
    "local": "隔板"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Performs median filtering for each point of the source image.",
    "local": "对源图像的每个点执行中值滤波。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "srcType",
    "local": "SRC类型"
  },
  {
    "origin": "type of of source image. Only CV_8UC1 images are supported for now.",
    "local": "源图像的类型。目前只支持cv8uc1图像。"
  },
  {
    "origin": "windowSize",
    "local": "窗口"
  },
  {
    "origin": "Size of the kernerl used for the filtering. Uses a (windowSize x windowSize) filter.",
    "local": "用于筛选的内核的大小。使用（windowSize x windowSize）筛选器。"
  },
  {
    "origin": "partition",
    "local": "隔板"
  },
  {
    "origin": "Specifies the parallel granularity of the workload. This parameter should be used GPU experts when optimizing performance.",
    "local": "指定工作负载的并行粒度。GPU专家在优化性能时应使用此参数。"
  },
  {
    "origin": "Outputs an image that has been filtered using a median-filtering formulation.",
    "local": "输出已使用中值滤波公式进行滤波的图像。"
  },
  {
    "origin": "Details on this algorithm can be found in: Green, O., 2017. \"Efficient scalable median filtering using histogram-based operations\", IEEE Transactions on Image Processing, 27(5), pp.2217-2228.",
    "local": "有关该算法的详细信息，请参阅：Green，O.，2017年，“使用直方图运算的高效可伸缩中值滤波”，IEEE图像处理学报，27（5），第2217-2228页。"
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:44 for OpenCV by &#160;",
    "local": "2021年4月2日星期五11:36:44为OpenCV生成，&#160；"
  }
]