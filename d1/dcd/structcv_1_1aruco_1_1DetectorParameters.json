[
  {
    "origin": "OpenCV: cv::aruco::DetectorParameters Struct Reference",
    "local": "OpenCV:cv:：aruco:：DetectorParameters结构引用"
  },
  {
    "origin": "Open Source Computer Vision",
    "local": "开源计算机视觉"
  },
  {
    "origin": "Public Member Functions",
    "local": "公共成员职能"
  },
  {
    "origin": "Static Public Member Functions",
    "local": "静态公共成员函数"
  },
  {
    "origin": "Public Attributes",
    "local": "公共属性"
  },
  {
    "origin": "List of all members",
    "local": "所有成员的列表"
  },
  {
    "origin": "cv::aruco::DetectorParameters Struct Reference",
    "local": "cv:：aruco:：DetectorParameters结构参考"
  },
  {
    "origin": "Parameters for the detectMarker process:",
    "local": "detectMarker进程的参数："
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Public Member Functions",
    "local": "公共成员职能"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Static Public Member Functions",
    "local": "静态公共成员函数"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Public Attributes",
    "local": "公共属性"
  },
  {
    "origin": "Detailed Description",
    "local": "详细说明"
  },
  {
    "origin": "Parameters for the detectMarker process:",
    "local": "detectMarker进程的参数："
  },
  {
    "origin": "adaptiveThreshWinSizeMin: minimum window size for adaptive thresholding before finding contours (default 3).",
    "local": "adaptiveThreshWinSizeMin：在找到轮廓之前自适应阈值的最小窗口大小（默认值3）。"
  },
  {
    "origin": "adaptiveThreshWinSizeMax: maximum window size for adaptive thresholding before finding contours (default 23).",
    "local": "adaptiveThreshWinSizeMax：在查找轮廓之前自适应阈值的最大窗口大小（默认值23）。"
  },
  {
    "origin": "adaptiveThreshWinSizeStep: increments from adaptiveThreshWinSizeMin to adaptiveThreshWinSizeMax during the thresholding (default 10).",
    "local": "adaptiveThreshWinSizeStep：在阈值期间从adaptiveThreshWinSizeMin到adaptiveThreshWinSizeMax的增量（默认值10）。"
  },
  {
    "origin": "adaptiveThreshConstant: constant for adaptive thresholding before finding contours (default 7)",
    "local": "adaptiveThreshConstant：在查找轮廓之前进行自适应阈值处理的常量（默认值7）"
  },
  {
    "origin": "minMarkerPerimeterRate: determine minimum perimeter for marker contour to be detected. This is defined as a rate respect to the maximum dimension of the input image (default 0.03).",
    "local": "minMarkerPerimeterRate：确定要检测的标记轮廓的最小周长。这被定义为相对于输入图像的最大尺寸的速率（默认值为0.03）。"
  },
  {
    "origin": "maxMarkerPerimeterRate: determine maximum perimeter for marker contour to be detected. This is defined as a rate respect to the maximum dimension of the input image (default 4.0).",
    "local": "maxMarkerPerimeterRate：确定要检测的标记轮廓的最大周长。这被定义为相对于输入图像的最大尺寸的速率（默认值为4.0）。"
  },
  {
    "origin": "polygonalApproxAccuracyRate: minimum accuracy during the polygonal approximation process to determine which contours are squares. (default 0.03)",
    "local": "多边形精度：在多边形近似过程中确定哪些轮廓是正方形的最小精度(默认值（0.03）"
  },
  {
    "origin": "minCornerDistanceRate: minimum distance between corners for detected markers relative to its perimeter (default 0.05)",
    "local": "minCornerDistanceRate：检测到的标记相对于其周长的最小角点距离（默认值为0.05）"
  },
  {
    "origin": "minDistanceToBorder: minimum distance of any corner to the image border for detected markers (in pixels) (default 3)",
    "local": "minDistanceToBorder：检测到的标记的任何角点到图像边界的最小距离（以像素为单位）（默认值3）"
  },
  {
    "origin": "minMarkerDistanceRate: minimum mean distance beetween two marker corners to be considered similar, so that the smaller one is removed. The rate is relative to the smaller perimeter of the two markers (default 0.05).",
    "local": "最小标记距离：两个被认为相似的标记角之间的最小平均距离，这样较小的一个就被删除了。速率相对于两个标记的较小周长（默认值为0.05）。"
  },
  {
    "origin": "cornerRefinementMethod: corner refinement method. (CORNER_REFINE_NONE, no refinement. CORNER_REFINE_SUBPIX, do subpixel refinement. CORNER_REFINE_CONTOUR use contour-Points, CORNER_REFINE_APRILTAG use the AprilTag2 approach). (default CORNER_REFINE_NONE)",
    "local": "拐角细化方法：拐角细化方法(没有，没有。角点细化子像素，进行子像素细化。角点细化（轮廓使用轮廓点，角点细化（APRILTAG使用AprilTag2方法）(默认角点（无）"
  },
  {
    "origin": "cornerRefinementWinSize: window size for the corner refinement process (in pixels) (default 5).",
    "local": "cornerRefinementWinSize：角点优化过程的窗口大小（以像素为单位）（默认值为5）。"
  },
  {
    "origin": "cornerRefinementMaxIterations: maximum number of iterations for stop criteria of the corner refinement process (default 30).",
    "local": "cornerRefinementMaxIterations：角点优化过程的停止条件的最大迭代次数（默认为30）。"
  },
  {
    "origin": "cornerRefinementMinAccuracy: minimum error for the stop cristeria of the corner refinement process (default: 0.1)",
    "local": "cornerRefinementMinAccuracy：角点优化过程的停止周期的最小错误（默认值：0.1）"
  },
  {
    "origin": "markerBorderBits: number of bits of the marker border, i.e. marker border width (default 1).",
    "local": "markerBorderBits：标记边框的位数，即标记边框宽度（默认为1）。"
  },
  {
    "origin": "perspectiveRemovePixelPerCell: number of bits (per dimension) for each cell of the marker when removing the perspective (default 4).",
    "local": "perspectiveRemovePixelPerCell：移除透视图时标记的每个单元格的位数（每个维度）（默认值4）。"
  },
  {
    "origin": "perspectiveRemoveIgnoredMarginPerCell: width of the margin of pixels on each cell not considered for the determination of the cell bit. Represents the rate respect to the total size of the cell, i.e. perspectiveRemovePixelPerCell (default 0.13)",
    "local": "透视图：在确定单元位时，不考虑每个单元上像素的边距宽度。表示相对于单元格总大小的速率，即perspectiveRemovePixelPerCell（默认值为0.13）"
  },
  {
    "origin": "maxErroneousBitsInBorderRate: maximum number of accepted erroneous bits in the border (i.e. number of allowed white bits in the border). Represented as a rate respect to the total number of bits per marker (default 0.35).",
    "local": "MaxErrorBitsInBorderRate：边框中可接受的最大错误位数（即边框中允许的白色位数）。表示为相对于每个标记的总位数的速率（默认值为0.35）。"
  },
  {
    "origin": "minOtsuStdDev: minimun standard deviation in pixels values during the decodification step to apply Otsu thresholding (otherwise, all the bits are set to 0 or 1 depending on mean higher than 128 or not) (default 5.0)",
    "local": "minOtsuStdDev：在应用Otsu阈值的去编码步骤中，像素值的最小标准偏差（否则，根据是否高于128的平均值，所有位都设置为0或1）（默认值5.0）"
  },
  {
    "origin": "errorCorrectionRate error correction rate respect to the maximun error correction capability for each dictionary. (default 0.6).",
    "local": "errorCorrectionRate相对于每个字典的最大纠错能力的纠错率(默认值为0.6）。"
  },
  {
    "origin": "aprilTagMinClusterPixels: reject quads containing too few pixels. (default 5)",
    "local": "aprilTagMinClusterPixels：拒绝包含太少像素的四边形(默认值（5）"
  },
  {
    "origin": "aprilTagMaxNmaxima: how many corner candidates to consider when segmenting a group of pixels into a quad. (default 10)",
    "local": "aprilTagMaxNmaxima：当把一组像素分割成一个四边形时，需要考虑多少个候选角点(默认值（10）"
  },
  {
    "origin": "aprilTagCriticalRad: Reject quads where pairs of edges have angles that are close to straight or close to 180 degrees. Zero means that no quads are rejected. (In radians) (default 10*PI/180)",
    "local": "aprilTagCriticalRad：拒绝边对的角度接近直线或接近180度的四边形。零表示不拒绝任何四边形(弧度）（默认值为10*PI/180）"
  },
  {
    "origin": "aprilTagMaxLineFitMse: When fitting lines to the contours, what is the maximum mean squared error allowed? This is useful in rejecting contours that are far from being quad shaped; rejecting these quads \"early\" saves expensive decoding processing. (default 10.0)",
    "local": "aprilTagMaxLineFitMse：当拟合轮廓线时，允许的最大均方误差是多少？这对于拒绝远离四边形的轮廓很有用；拒绝这些四边形“早”节省昂贵的解码处理(默认值（10.0）"
  },
  {
    "origin": "aprilTagMinWhiteBlackDiff: When we build our model of black &amp; white pixels, we add an extra check that the white model must be (overall) brighter than the black model. How much brighter? (in pixel values, [0,255]). (default 5)",
    "local": "aprilTagMinWhiteBlackDiff：当我们建立我们的黑与黑模型时；白色像素，我们添加了一个额外的检查，白色模型必须（整体）比黑色模型更亮。有多亮(像素值，[0255]）(默认值（5）"
  },
  {
    "origin": "aprilTagDeglitch: should the thresholded image be deglitched? Only useful for very noisy images. (default 0)",
    "local": "aprilTagDeglitch：阈值化的图像应该被去除吗？仅适用于非常嘈杂的图像(默认值（0）"
  },
  {
    "origin": "aprilTagQuadDecimate: Detection of quads can be done on a lower-resolution image, improving speed at a cost of pose accuracy and a slight decrease in detection rate. Decoding the binary payload is still done at full resolution. (default 0.0)",
    "local": "aprilTagQuadDecimate：在较低分辨率的图像上检测四边形，以牺牲姿态精度和略微降低检测率为代价提高速度。二进制有效负载的解码仍然以完全分辨率完成(默认值（0.0）"
  },
  {
    "origin": "aprilTagQuadSigma: What Gaussian blur should be applied to the segmented image (used for quad detection?) Parameter is the standard deviation in pixels. Very noisy images benefit from non-zero values (e.g. 0.8). (default 0.0)",
    "local": "apriltagquadsgma：什么高斯模糊应该应用于分割图像（用于四元检测？）参数是以像素为单位的标准偏差。非常嘈杂的图像受益于非零值（例如0.8）(默认值（0.0）"
  },
  {
    "origin": "detectInvertedMarker: to check if there is a white marker. In order to generate a \"white\" marker just invert a normal marker by using a tilde, ~markerImage. (default false)",
    "local": "detectInvertedMarker：检查是否有白色标记。为了生成一个“白色”标记，只需使用一个颚化符~markerImage反转一个普通标记(默认值（false）"
  },
  {
    "origin": "Constructor &amp; Destructor Documentation",
    "local": "建造商和；析构函数文档"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "DetectorParameters()",
    "local": "检测器参数（）"
  },
  {
    "origin": "cv::aruco::DetectorParameters::DetectorParameters",
    "local": "cv:：aruco:：Detector参数：：Detector参数"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Member Function Documentation",
    "local": "成员功能文档"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "create()",
    "local": "创建（）"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; cv::aruco::DetectorParameters::create",
    "local": "&燃气轮机；cv:：aruco:：DetectorParameters:：创建"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "Member Data Documentation",
    "local": "成员数据文档"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "adaptiveThreshConstant",
    "local": "适应的"
  },
  {
    "origin": "double cv::aruco::DetectorParameters::adaptiveThreshConstant",
    "local": "双cv:：aruco:：DetectorParameters:：adaptiveThreshConstant"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "adaptiveThreshWinSizeMax",
    "local": "阈值WinSizeMax自适应"
  },
  {
    "origin": "int cv::aruco::DetectorParameters::adaptiveThreshWinSizeMax",
    "local": "int cv：：aruco：：DetectorParameters：：adaptiveThreshWinSizeMax"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "adaptiveThreshWinSizeMin",
    "local": "自适应threshwinsizemin"
  },
  {
    "origin": "int cv::aruco::DetectorParameters::adaptiveThreshWinSizeMin",
    "local": "int cv:：aruco:：DetectorParameters:：adaptiveThreshWinSizeMin"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "adaptiveThreshWinSizeStep",
    "local": "阈值WinSizeStep自适应"
  },
  {
    "origin": "int cv::aruco::DetectorParameters::adaptiveThreshWinSizeStep",
    "local": "int cv:：aruc:：参数检测器：：adaptiveThreshWinSizeStep"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "aprilTagCriticalRad",
    "local": "四月"
  },
  {
    "origin": "float cv::aruco::DetectorParameters::aprilTagCriticalRad",
    "local": "浮点cv:：aruco:：DetectorParameters:：aprilTagCriticalRad"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "aprilTagDeglitch",
    "local": "四月"
  },
  {
    "origin": "int cv::aruco::DetectorParameters::aprilTagDeglitch",
    "local": "int cv:：aruco:：DetectorParameters:：aprilTagDeglitch"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "aprilTagMaxLineFitMse",
    "local": "四月"
  },
  {
    "origin": "float cv::aruco::DetectorParameters::aprilTagMaxLineFitMse",
    "local": "浮点cv:：aruco:：DetectorParameters:：aprilTagMaxLineFitMse"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "aprilTagMaxNmaxima",
    "local": "四月"
  },
  {
    "origin": "int cv::aruco::DetectorParameters::aprilTagMaxNmaxima",
    "local": "int cv：：aruco：：DetectorParameters：：aprilTagMaxNmaxima"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "aprilTagMinClusterPixels",
    "local": "四月"
  },
  {
    "origin": "int cv::aruco::DetectorParameters::aprilTagMinClusterPixels",
    "local": "int cv:：aruco:：DetectorParameters:：aprilTagMinClusterPixels"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "aprilTagMinWhiteBlackDiff",
    "local": "四月"
  },
  {
    "origin": "int cv::aruco::DetectorParameters::aprilTagMinWhiteBlackDiff",
    "local": "int cv：：aruco：：DetectorParameters：：aprilTagMinWhiteBlackDiff"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "aprilTagQuadDecimate",
    "local": "四月"
  },
  {
    "origin": "float cv::aruco::DetectorParameters::aprilTagQuadDecimate",
    "local": "浮点cv:：aruco:：DetectorParameters:：aprilTagQuadDecimate"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "aprilTagQuadSigma",
    "local": "四月"
  },
  {
    "origin": "float cv::aruco::DetectorParameters::aprilTagQuadSigma",
    "local": "浮点cv:：aruco:：DetectorParameters:：aprilTagQuadSigma"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "cornerRefinementMaxIterations",
    "local": "转角最大值"
  },
  {
    "origin": "int cv::aruco::DetectorParameters::cornerRefinementMaxIterations",
    "local": "int cv：：aruco：：DetectorParameters：：cornerRefinementMaxIterations"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "cornerRefinementMethod",
    "local": "角校正方法"
  },
  {
    "origin": "int cv::aruco::DetectorParameters::cornerRefinementMethod",
    "local": "int cv:：aruco:：DetectorParameters:：cornerRefinementMethod"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "cornerRefinementMinAccuracy",
    "local": "转角精度，"
  },
  {
    "origin": "double cv::aruco::DetectorParameters::cornerRefinementMinAccuracy",
    "local": "双cv:：aruco:：DetectorParameters:：cornerRefinementMinAccuracy"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "cornerRefinementWinSize",
    "local": "角点优化WinSize"
  },
  {
    "origin": "int cv::aruco::DetectorParameters::cornerRefinementWinSize",
    "local": "int cv:：aruco:：DetectorParameters:：cornerRefinementWinSize"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "detectInvertedMarker",
    "local": "detectInvertedMarker探员"
  },
  {
    "origin": "bool cv::aruco::DetectorParameters::detectInvertedMarker",
    "local": "bool cv：：aruco：：DetectorParameters：：detectInvertedMarker"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "errorCorrectionRate",
    "local": "误差修正率"
  },
  {
    "origin": "double cv::aruco::DetectorParameters::errorCorrectionRate",
    "local": "双CV：：aruco：：detectorparameters：：errorcorrectionrate"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "markerBorderBits",
    "local": "标记有序位"
  },
  {
    "origin": "int cv::aruco::DetectorParameters::markerBorderBits",
    "local": "int cv：：aruc：：参数检测器：：markerBorderBits"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "maxErroneousBitsInBorderRate",
    "local": "最大订单率"
  },
  {
    "origin": "double cv::aruco::DetectorParameters::maxErroneousBitsInBorderRate",
    "local": "双CV：：aruco：：detectorparameters：：maxerrorneousbitsinborderrate"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "maxMarkerPerimeterRate",
    "local": "maxMarkerPerimeterRate公司"
  },
  {
    "origin": "double cv::aruco::DetectorParameters::maxMarkerPerimeterRate",
    "local": "双cv:：aruco:：DetectorParameters:：maxMarkerPerimeterRate"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "minCornerDistanceRate",
    "local": "最小转角距离率"
  },
  {
    "origin": "double cv::aruco::DetectorParameters::minCornerDistanceRate",
    "local": "双cv:：aruco:：DetectorParameters:：minCornerDistanceRate"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "minDistanceToBorder",
    "local": "对订单的距离"
  },
  {
    "origin": "int cv::aruco::DetectorParameters::minDistanceToBorder",
    "local": "int cv:：aruco:：DetectorParameters:：minDistanceToBorder"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "minMarkerDistanceRate",
    "local": "minMarkerDistanceRate公司"
  },
  {
    "origin": "double cv::aruco::DetectorParameters::minMarkerDistanceRate",
    "local": "双cv:：aruco:：DetectorParameters:：minMarkerDistanceRate"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "minMarkerPerimeterRate",
    "local": "minMarkerPerimeterRate公司"
  },
  {
    "origin": "double cv::aruco::DetectorParameters::minMarkerPerimeterRate",
    "local": "双cv:：aruco:：DetectorParameters:：minMarkerPerimeterRate"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "minOtsuStdDev",
    "local": "minOtsuStdDev公司"
  },
  {
    "origin": "double cv::aruco::DetectorParameters::minOtsuStdDev",
    "local": "双CV：：aruco：：detectorparameters：：minotsustddev"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "perspectiveRemoveIgnoredMarginPerCell",
    "local": "透视图删除忽略MarginPercell"
  },
  {
    "origin": "double cv::aruco::DetectorParameters::perspectiveRemoveIgnoredMarginPerCell",
    "local": "双cv:：aruco:：DetectorParameters:：perspectiveRemoveIgnoredMarginPerCell"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "perspectiveRemovePixelPerCell",
    "local": "透视移除像素细胞"
  },
  {
    "origin": "int cv::aruco::DetectorParameters::perspectiveRemovePixelPerCell",
    "local": "int cv:：aruc:：Parameters Detector:：透视移除像素percell"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "polygonalApproxAccuracyRate",
    "local": "丙酸聚己酯"
  },
  {
    "origin": "double cv::aruco::DetectorParameters::polygonalApproxAccuracyRate",
    "local": "双cv:：aruco:：DetectorParameters:：Polygonalaproxaccuracyrate"
  },
  {
    "origin": "The documentation for this struct was generated from the following file:",
    "local": "此结构的文档是从以下文件生成的："
  },
  {
    "origin": "opencv2/",
    "local": "打开CV2/"
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:43 for OpenCV by &#160;",
    "local": "2021年4月2日星期五11:36:43为OpenCV生成，&#160；"
  }
]