[
  {
    "origin": "OpenCV: opencv2/imgproc.hpp File Reference",
    "local": "OpenCV:opencv2/imgproc.hpp文件参考"
  },
  {
    "origin": "Open Source Computer Vision",
    "local": "开源计算机视觉"
  },
  {
    "origin": "Classes",
    "local": "班级"
  },
  {
    "origin": "Namespaces",
    "local": "名称空间"
  },
  {
    "origin": "Macros",
    "local": "宏"
  },
  {
    "origin": "Enumerations",
    "local": "枚举"
  },
  {
    "origin": "Functions",
    "local": "功能"
  },
  {
    "origin": "imgproc.hpp File Reference",
    "local": "imgproc.hpp文件参考"
  },
  {
    "origin": "Classes",
    "local": "班级"
  },
  {
    "origin": "Base class for Contrast Limited Adaptive Histogram Equalization.",
    "local": "用于对比度受限自适应直方图均衡化的基类。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "finds arbitrary template in the grayscale image using Generalized Hough Transform",
    "local": "利用广义Hough变换在灰度图像中寻找任意模板"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "finds arbitrary template in the grayscale image using Generalized Hough Transform",
    "local": "利用广义Hough变换在灰度图像中寻找任意模板"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "finds arbitrary template in the grayscale image using Generalized Hough Transform",
    "local": "利用广义Hough变换在灰度图像中寻找任意模板"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Line iterator.",
    "local": "行迭代器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Line segment detector class.",
    "local": "线段检测器类。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Namespaces",
    "local": "名称空间"
  },
  {
    "origin": "\"black box\" representation of the file storage associated with a file on disk.",
    "local": "“黑盒”表示与磁盘上的文件相关联的文件存储。"
  },
  {
    "origin": "Macros",
    "local": "宏"
  },
  {
    "origin": "(r, g, b)&#160;&#160;&#160;",
    "local": "（r、g、b）和#160&#160;&#160;"
  },
  {
    "origin": "((b), (g), (r), 0)",
    "local": "（（b），（g），（r），0）"
  },
  {
    "origin": "Enumerations",
    "local": "枚举"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_BGR2BGRA,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_BGRA2BGR,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_BGR2RGBA,",
    "local": "=颜色\\u BGR2RGBA，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_RGBA2BGR,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_BGR2RGB,",
    "local": "=颜色\\u BGR2RGB，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_BGRA2RGBA,",
    "local": "=颜色\\u BGRA2RGBA，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_GRAY2BGR,",
    "local": "=颜色为灰色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_GRAY2BGRA,",
    "local": "=颜色为灰色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 13,",
    "local": "= 13,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 14,",
    "local": "= 14,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 15,",
    "local": "= 15,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 16,",
    "local": "= 16,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 17,",
    "local": "= 17,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 18,",
    "local": "= 18,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 19,",
    "local": "= 19,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 20,",
    "local": "= 20,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 21,",
    "local": "= 21,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 22,",
    "local": "= 22,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 23,",
    "local": "= 23,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 24,",
    "local": "= 24,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 25,",
    "local": "= 25,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 26,",
    "local": "= 26,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 27,",
    "local": "= 27,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 28,",
    "local": "= 28,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 29,",
    "local": "= 29,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 30,",
    "local": "= 30,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 31,",
    "local": "= 31,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2RGB_NV21,",
    "local": "=颜色\\u YUV2RGB \\u NV21，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2BGR_NV21,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2RGBA_NV21,",
    "local": "=颜色\\u YUV2RGBA \\u NV21，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2BGRA_NV21,",
    "local": "=YUV2BGRA\\u NV21颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2RGB_IYUV,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2BGR_IYUV,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2RGB_YV12,",
    "local": "=颜色\\u YUV2RGB \\u YV12，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2BGR_YV12,",
    "local": "=颜色YUV2BGR YV12，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2RGBA_IYUV,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2BGRA_IYUV,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2RGBA_YV12,",
    "local": "=颜色YUV2RGBA YV12，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2BGRA_YV12,",
    "local": "=颜色YUV2BGRA YV12，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2GRAY_420,",
    "local": "=颜色\\u YUV2GRAY \\u 420，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2GRAY_420,",
    "local": "=颜色\\u YUV2GRAY \\u 420，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2GRAY_420,",
    "local": "=颜色\\u YUV2GRAY \\u 420，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2GRAY_420,",
    "local": "=颜色\\u YUV2GRAY \\u 420，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2GRAY_420,",
    "local": "=颜色\\u YUV2GRAY \\u 420，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2GRAY_420,",
    "local": "=颜色\\u YUV2GRAY \\u 420，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2GRAY_420,",
    "local": "=颜色\\u YUV2GRAY \\u 420，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2RGB_UYVY,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2BGR_UYVY,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2RGB_UYVY,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2BGR_UYVY,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2RGBA_UYVY,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2BGRA_UYVY,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2RGBA_UYVY,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2BGRA_UYVY,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2RGB_YUY2,",
    "local": "=颜色\\u YUV2RGB \\u YUY2，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2BGR_YUY2,",
    "local": "=COLOR_YUV2BGR_YUY2，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2RGB_YUY2,",
    "local": "=颜色\\u YUV2RGB \\u YUY2，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2BGR_YUY2,",
    "local": "=COLOR_YUV2BGR_YUY2，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2RGBA_YUY2,",
    "local": "=颜色\\u YUV2RGBA \\u YUY2，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2BGRA_YUY2,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2RGBA_YUY2,",
    "local": "=颜色\\u YUV2RGBA \\u YUY2，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2BGRA_YUY2,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2GRAY_UYVY,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2GRAY_UYVY,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2GRAY_YUY2,",
    "local": "=颜色2灰色2，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2GRAY_YUY2,",
    "local": "=颜色2灰色2，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_YUV2GRAY_YUY2,",
    "local": "=颜色2灰色2，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_RGB2YUV_I420,",
    "local": "=颜色\\u RGB2YUV\\u I420，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_BGR2YUV_I420,",
    "local": "=颜色\\u BGR2YUV \\u I420，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_RGBA2YUV_I420,",
    "local": "=颜色\\u RGBA2YUV\\u I420，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_BGRA2YUV_I420,",
    "local": "=颜色\\u BGRA2YUV \\u I420，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_BayerRG2BGR,",
    "local": "=RG2BGR颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_BayerGR2BGR,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_BayerBG2BGR,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_BayerGB2BGR,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_BayerRG2BGR_VNG,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_BayerGR2BGR_VNG,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_BayerBG2BGR_VNG,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_BayerGB2BGR_VNG,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_BayerRG2BGR_EA,",
    "local": "=RG2BGR EA颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_BayerGR2BGR_EA,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_BayerBG2BGR_EA,",
    "local": "=BG2BGR EA颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_BayerGB2BGR_EA,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_BayerRG2BGRA,",
    "local": "=RG2BGRA颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_BayerGR2BGRA,",
    "local": "=GR2BGRA颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_BayerBG2BGRA,",
    "local": "=颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= COLOR_BayerGB2BGRA,",
    "local": "=GB2BGRA颜色，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 13,",
    "local": "= 13,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 14,",
    "local": "= 14,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 15,",
    "local": "= 15,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 16,",
    "local": "= 16,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 17,",
    "local": "= 17,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 18,",
    "local": "= 18,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 19,",
    "local": "= 19,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 20,",
    "local": "= 20,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 21",
    "local": "= 21"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "GNU Octave/MATLAB equivalent colormaps.",
    "local": "GNU倍频程/MATLAB等效色映射。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "connected components algorithm",
    "local": "连通分量算法"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "connected components statistics",
    "local": "连接组件统计"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "the contour approximation algorithm",
    "local": "轮廓逼近算法"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "distanceTransform algorithm flags",
    "local": "距离变换算法标志"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "Mask size for distance transform.",
    "local": "距离变换的遮罩大小。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 1 &lt;&lt; 16,",
    "local": "=1&lt；&lt；书信电报；16,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 1 &lt;&lt; 17",
    "local": "=1&lt；&lt；书信电报；17"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "floodfill algorithm flags",
    "local": "泛洪填充算法标志"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "class of the pixel in GrabCut algorithm",
    "local": "GrabCut算法中的像素类"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "GrabCut algorithm flags.",
    "local": "GrabCut算法标志。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 16",
    "local": "= 16"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= HISTCMP_BHATTACHARYYA,",
    "local": "=Histcmpu BHATTACHARYYA先生，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "Variants of a Hough transform.",
    "local": "霍夫变换的变体。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 16",
    "local": "= 16"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "interpolation algorithm",
    "local": "插值算法"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 1 &lt;&lt; INTER_BITS,",
    "local": "=1（&lt；&I）LT公司；位间，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= INTER_TAB_SIZE * INTER_TAB_SIZE",
    "local": "=内部选项卡大小*内部选项卡大小"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "Variants of Line Segment Detector.",
    "local": "线段检测器的变体。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 16",
    "local": "= 16"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "shape of the structuring element",
    "local": "结构元素的形状"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "type of morphological operation",
    "local": "形态操作类型"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "types of intersection between rectangles",
    "local": "矩形之间的相交类型"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "mode of the contour retrieval algorithm",
    "local": "轮廓检索算法的模式"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "Shape matching methods.",
    "local": "形状匹配方法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "= -1 }",
    "local": "= -1 }"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "type of the template matching operation",
    "local": "模板匹配操作的类型"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 16",
    "local": "= 16"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "Specify the polar mapping mode.",
    "local": "指定极轴映射模式。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Functions",
    "local": "功能"
  },
  {
    "origin": "(InputArray src, InputOutputArray dst, InputArray mask=noArray())",
    "local": "InputArray src，InputOutputArray dst，InputArray mask=noArray（））"
  },
  {
    "origin": "Adds an image to the accumulator image.",
    "local": "将图像添加到累加器图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src1, InputArray src2, InputOutputArray dst, InputArray mask=noArray())",
    "local": "InputArray src1、InputArray src2、InputOutputArray dst、InputArray mask=noArray（））"
  },
  {
    "origin": "Adds the per-element product of two input images to the accumulator image.",
    "local": "将两个输入图像的每元素乘积添加到累加器图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, InputOutputArray dst, InputArray mask=noArray())",
    "local": "InputArray src，InputOutputArray dst，InputArray mask=noArray（））"
  },
  {
    "origin": "Adds the square of a source image to the accumulator image.",
    "local": "将源图像的正方形添加到累加器图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, InputOutputArray dst, double alpha, InputArray mask=noArray())",
    "local": "（InputArray src，InputOutputArray dst，double alpha，InputArray mask=noArray（））"
  },
  {
    "origin": "Updates a running average.",
    "local": "更新运行平均值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, double maxValue, int adaptiveMethod, int thresholdType, int blockSize, double C)",
    "local": "（InputArray src、OutputArray dst、double maxValue、int adaptiveMethod、int thresholdType、int blockSize、double C）"
  },
  {
    "origin": "Applies an adaptive threshold to an array.",
    "local": "对数组应用自适应阈值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int colormap)",
    "local": "（InputArray src、OutputArray dst、int colormap）"
  },
  {
    "origin": "Applies a GNU Octave/MATLAB equivalent colormap on a given image.",
    "local": "在给定图像上应用GNU倍频程/MATLAB等效色映射。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, InputArray userColor)",
    "local": "（InputArray src、OutputArray dst、InputArray userColor）"
  },
  {
    "origin": "Applies a user colormap on a given image.",
    "local": "在给定图像上应用用户颜色映射。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray curve, OutputArray approxCurve, double epsilon, bool closed)",
    "local": "（输入曲线、输出近似曲线、双epsilon、布尔闭合）"
  },
  {
    "origin": "Approximates a polygonal curve(s) with the specified precision.",
    "local": "以指定的精度近似多边形曲线。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray curve, bool closed)",
    "local": "（输入阵列曲线，布尔闭合）"
  },
  {
    "origin": "Calculates a contour perimeter or a curve length.",
    "local": "计算等高线周长或曲线长度。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputOutputArray img, Point pt1, Point pt2, const Scalar &amp;color, int thickness=1, int line_type=8, int shift=0, double tipLength=0.1)",
    "local": "（InputOutputArray img、点pt1、点pt2、常量标量&amp；颜色，内部厚度=1，内部线条类型=8，内部偏移=0，双厚度=0.1）"
  },
  {
    "origin": "Draws a arrow segment pointing from the first point to the second one.",
    "local": "绘制从第一个点指向第二个点的箭头段。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int d, double sigmaColor, double sigmaSpace, int borderType=BORDER_DEFAULT)",
    "local": "（InputArray src，OutputArray dst，int d，double sigmaColor，double sigmaSpace，int borderType=BORDER\\u DEFAULT）"
  },
  {
    "origin": "Applies the bilateral filter to an image.",
    "local": "对图像应用双边滤波器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src1, InputArray src2, InputArray weights1, InputArray weights2, OutputArray dst)",
    "local": "（输入数组src1、输入数组src2、输入数组权重1、输入数组权重2、输出数组dst）"
  },
  {
    "origin": "(InputArray src, OutputArray dst, Size ksize, Point anchor=Point(-1,-1), int borderType=BORDER_DEFAULT)",
    "local": "（InputArray src，OutputArray dst，Size ksize，Point anchor=Point（-1，-1），int borderType=BORDER\\u DEFAULT）"
  },
  {
    "origin": "Blurs an image using the normalized box filter.",
    "local": "使用规范化的长方体过滤器模糊图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray array)",
    "local": "（输入阵列）"
  },
  {
    "origin": "Calculates the up-right bounding rectangle of a point set or non-zero pixels of gray-scale image.",
    "local": "计算点集的右上边界矩形或灰度图像的非零像素。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int ddepth, Size ksize, Point anchor=Point(-1,-1), bool normalize=true, int borderType=BORDER_DEFAULT)",
    "local": "（InputArray src，OutputArray dst，int ddepth，Size ksize，Point anchor=Point（-1，-1），bool normalize=true，int borderType=BORDER\\u DEFAULT）"
  },
  {
    "origin": "Blurs an image using the box filter.",
    "local": "使用长方体过滤器模糊图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(RotatedRect box, OutputArray points)",
    "local": "（旋转方向框，输出阵列点）"
  },
  {
    "origin": "Finds the four vertices of a rotated rect. Useful to draw the rotated rectangle.",
    "local": "查找旋转矩形的四个顶点。用于绘制旋转的矩形。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArrayOfArrays dst, int maxlevel, int borderType=BORDER_DEFAULT)",
    "local": "（默认情况下，InputArray src、OutputArrayOfArrays dst、int maxlevel、int borderType=BORDER）"
  },
  {
    "origin": "Constructs the Gaussian pyramid for an image.",
    "local": "为图像构造高斯金字塔。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const Mat *images, int nimages, const int *channels, InputArray hist, OutputArray backProject, const float **ranges, double scale=1, bool uniform=true)",
    "local": "（const Mat*images，int nimages，const int*channels，InputArray hist，OutputArray backProject，const float**ranges，double scale=1，bool uniform=true）"
  },
  {
    "origin": "Calculates the back projection of a histogram.",
    "local": "计算直方图的反投影。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const Mat *images, int nimages, const int *channels, const SparseMat &amp;hist, OutputArray backProject, const float **ranges, double scale=1, bool uniform=true)",
    "local": "（const Mat*images、int nimages、const int*channels、const SparseMat&amp；hist，OutputArray backProject，const float**ranges，double scale=1，bool uniform=true）"
  },
  {
    "origin": "(InputArrayOfArrays images, const std::vector&lt; int &gt; &amp;channels, InputArray hist, OutputArray dst, const std::vector&lt; float &gt; &amp;ranges, double scale)",
    "local": "（InputArrayOfArrays图像，const std:：vector&lt；内部&gt&amp；通道，输入数组历史，输出数组dst，常量std：：向量&lt；浮动&gt&amp；量程，双刻度）"
  },
  {
    "origin": "(const Mat *images, int nimages, const int *channels, InputArray mask, OutputArray hist, int dims, const int *histSize, const float **ranges, bool uniform=true, bool accumulate=false)",
    "local": "（const Mat*images，int nimages，const int*channels，InputArray mask，OutputArray hist，int dims，const int*histSize，const float**ranges，bool uniform=true，bool accumulate=false）"
  },
  {
    "origin": "Calculates a histogram of a set of arrays.",
    "local": "计算一组数组的直方图。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const Mat *images, int nimages, const int *channels, InputArray mask, SparseMat &amp;hist, int dims, const int *histSize, const float **ranges, bool uniform=true, bool accumulate=false)",
    "local": "（const Mat*images、int nimages、const int*channels、InputArray mask、SparseMat&amp；hist，int dims，const int*histSize，const float**ranges，bool uniform=true，bool accumulate=false）"
  },
  {
    "origin": "(InputArrayOfArrays images, const std::vector&lt; int &gt; &amp;channels, InputArray mask, OutputArray hist, const std::vector&lt; int &gt; &amp;histSize, const std::vector&lt; float &gt; &amp;ranges, bool accumulate=false)",
    "local": "（InputArrayOfArrays图像，const std:：vector&lt；内部&gt&amp；通道，输入阵列掩码，输出阵列历史，常量标准：：向量&lt；内部&gt&amp；histSize，const std：：向量&lt；浮动&gt&amp；范围，布尔累积=假）"
  },
  {
    "origin": "(InputArray image, OutputArray edges, double threshold1, double threshold2, int apertureSize=3, bool L2gradient=false)",
    "local": "（输入阵列图像，输出阵列边缘，双阈值1，双阈值2，int apertureSize=3，bool L2gradient=false）"
  },
  {
    "origin": "Finds edges in an image using the Canny algorithm",
    "local": "使用Canny算法在图像中查找边缘"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray dx, InputArray dy, OutputArray edges, double threshold1, double threshold2, bool L2gradient=false)",
    "local": "（InputArray dx，InputArray dy，OutputArray edges，double threshold1，double threshold2，bool L2gradient=false）"
  },
  {
    "origin": "(InputOutputArray img, Point center, int radius, const Scalar &amp;color, int thickness=1, int lineType=LINE_8, int shift=0)",
    "local": "（InputOutputArray img，Point center，int radius，const Scalar&amp；颜色，int thickness=1，int lineType=LINE\\u 8，int shift=0）"
  },
  {
    "origin": "Draws a circle.",
    "local": "画一个圆。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(Size imgSize, Point &amp;pt1, Point &amp;pt2)",
    "local": "（尺寸imgSize，Point&amp；pt1，点和；pt2）"
  },
  {
    "origin": "Clips the line against the image rectangle.",
    "local": "根据图像矩形剪裁线。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(Size2l imgSize, Point2l &amp;pt1, Point2l &amp;pt2)",
    "local": "（尺寸2L imgSize，点2L&amp；pt1、点2L和；pt2）"
  },
  {
    "origin": "(Rect imgRect, Point &amp;pt1, Point &amp;pt2)",
    "local": "（右imgRect，Point&amp；pt1，点和；pt2）"
  },
  {
    "origin": "(InputArray H1, InputArray H2, int method)",
    "local": "输入数组H1，输入数组H2，int方法）"
  },
  {
    "origin": "Compares two histograms.",
    "local": "比较两个直方图。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const SparseMat &amp;H1, const SparseMat &amp;H2, int method)",
    "local": "（const SparseMat和；H1，常数SparseMat&amp；H2，int法）"
  },
  {
    "origin": "(InputArray image, OutputArray labels, int connectivity, int ltype, int ccltype)",
    "local": "（输入阵列图像、输出阵列标签、int连接性、int ltype、int ccltype）"
  },
  {
    "origin": "computes the connected components labeled image of boolean image",
    "local": "计算标记为布尔图像的图像的连接组件"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray image, OutputArray labels, int connectivity=8, int ltype=",
    "local": "（InputArray image，OutputArray labels，int connectivity=8，int ltype）="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "(InputArray image, OutputArray labels, OutputArray stats, OutputArray centroids, int connectivity, int ltype, int ccltype)",
    "local": "（输入阵列图像、输出阵列标签、输出阵列统计信息、输出阵列质心、int连接性、int ltype、int ccltype）"
  },
  {
    "origin": "computes the connected components labeled image of boolean image and also produces a statistics output for each label",
    "local": "计算标记为布尔图像的图像的连接组件，并为每个标签生成统计输出"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray image, OutputArray labels, OutputArray stats, OutputArray centroids, int connectivity=8, int ltype=",
    "local": "（输入阵列图像、输出阵列标签、输出阵列统计信息、输出阵列质心、int connectivity=8、int ltype）="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "(InputArray contour, bool oriented=false)",
    "local": "（InputArray等高线，面向布尔=假）"
  },
  {
    "origin": "Calculates a contour area.",
    "local": "计算等高线面积。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray map1, InputArray map2, OutputArray dstmap1, OutputArray dstmap2, int dstmap1type, bool nninterpolation=false)",
    "local": "（InputArray map1，InputArray map2，OutputArray dstmap1，OutputArray dstmap2，int dstmap1type，bool nninterpolation=false）"
  },
  {
    "origin": "Converts image transformation maps from one representation to another.",
    "local": "将图像变换贴图从一种表示转换为另一种表示。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray points, OutputArray hull, bool clockwise=false, bool returnPoints=true)",
    "local": "（输入数组点，输出数组外壳，布尔顺时针=假，布尔返回点=真）"
  },
  {
    "origin": "Finds the convex hull of a point set.",
    "local": "查找点集的凸包。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray contour, InputArray convexhull, OutputArray convexityDefects)",
    "local": "（输入阵列轮廓、输入阵列凸度、输出阵列凸度缺陷）"
  },
  {
    "origin": "Finds the convexity defects of a contour.",
    "local": "找出轮廓的凸面缺陷。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int blockSize, int ksize, int borderType=BORDER_DEFAULT)",
    "local": "（InputArray src，OutputArray dst，int blockSize，int ksize，int borderType=BORDER\\u DEFAULT）"
  },
  {
    "origin": "Calculates eigenvalues and eigenvectors of image blocks for corner detection.",
    "local": "为角点检测计算图像块的特征值和特征向量。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int blockSize, int ksize, double k, int borderType=BORDER_DEFAULT)",
    "local": "（InputArray src，OutputArray dst，int blockSize，int ksize，double k，int borderType=BORDER\\u DEFAULT）"
  },
  {
    "origin": "Harris corner detector.",
    "local": "哈里斯角探测器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int blockSize, int ksize=3, int borderType=BORDER_DEFAULT)",
    "local": "（InputArray src，OutputArray dst，int blockSize，int ksize=3，int borderType=BORDER\\u默认值）"
  },
  {
    "origin": "Calculates the minimal eigenvalue of gradient matrices for corner detection.",
    "local": "计算用于角点检测的梯度矩阵的最小特征值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray image, InputOutputArray corners, Size winSize, Size zeroZone, TermCriteria criteria)",
    "local": "（InputArray图像、InputOutArray角点、大小winSize、大小zeroZone、TermCriteria）"
  },
  {
    "origin": "Refines the corner locations.",
    "local": "细化拐角位置。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(double clipLimit=40.0, Size tileGridSize=Size(8, 8))",
    "local": "（双clipLimit=40.0，Size tileGridSize=Size（8，8））"
  },
  {
    "origin": "Creates a smart pointer to a",
    "local": "创建指向"
  },
  {
    "origin": "class and initializes it.",
    "local": "类并对其进行初始化。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Creates a smart pointer to a",
    "local": "创建指向"
  },
  {
    "origin": "class and initializes it.",
    "local": "类并对其进行初始化。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Creates a smart pointer to a",
    "local": "创建指向"
  },
  {
    "origin": "class and initializes it.",
    "local": "类并对其进行初始化。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(OutputArray dst, Size winSize, int type)",
    "local": "（OutputArray dst，Size winSize，int type）"
  },
  {
    "origin": "This function computes a Hanning window coefficients in two dimensions.",
    "local": "此函数计算二维汉宁窗系数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(int _refine=LSD_REFINE_STD, double _scale=0.8, double _sigma_scale=0.6, double _quant=2.0, double _ang_th=22.5, double _log_eps=0, double _density_th=0.7, int _n_bins=1024)",
    "local": "（int\\u refine=LSD\\u refine\\u STD，double\\u scale=0.8，double\\u sigma\\u scale=0.6，double\\u quant=2.0，double\\u ang\\u th=22.5，double\\u log\\u eps=0，double\\u density\\u th=0.7，int\\u n\\u bins=1024）"
  },
  {
    "origin": "Creates a smart pointer to a",
    "local": "创建指向"
  },
  {
    "origin": "object and initializes it.",
    "local": "对象并对其进行初始化。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int code, int dstCn=0)",
    "local": "（Inputarray src，outputarray dst，int code，int dstcn=0）"
  },
  {
    "origin": "Converts an image from one color space to another.",
    "local": "将图像从一个颜色空间转换为另一个颜色空间。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src1, InputArray src2, OutputArray dst, int code)",
    "local": "（inputarray src1，inputarray src2，outputarray dst，int code）"
  },
  {
    "origin": "Converts an image from one color space to another where the source image is stored in two planes.",
    "local": "将图像从一个颜色空间转换为另一个颜色空间，其中源图像存储在两个平面中。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int code, int dstCn=0)",
    "local": "（Inputarray src，outputarray dst，int code，int dstcn=0）"
  },
  {
    "origin": "main function for all demosaicing processes",
    "local": "所有脱汽过程的主要功能"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, InputArray kernel, Point anchor=Point(-1,-1), int iterations=1, int borderType=BORDER_CONSTANT, const Scalar &amp;borderValue=morphologyDefaultBorderValue())",
    "local": "（InputArray src、OutputArray dst、InputArray kernel、Point anchor=Point（-1，-1）、int iterations=1、int borderType=BORDER_常量、const Scalar&amp；borderValue=morphologyDefaultBorderValue（））"
  },
  {
    "origin": "Dilates an image by using a specific structuring element.",
    "local": "通过使用特定的结构元素来扩展图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, OutputArray labels, int distanceType, int maskSize, int labelType=DIST_LABEL_CCOMP)",
    "local": "（InputArray src，OutputArray dst，OutputArray labels，int distanceType，int maskSize，int labelType=DIST\\u LABEL\\u CCOMP）"
  },
  {
    "origin": "Calculates the distance to the closest zero pixel for each pixel of the source image.",
    "local": "为源图像的每个像素计算到最近零像素的距离。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int distanceType, int maskSize, int dstType=",
    "local": "（InputArray src，OutputArray dst，int distanceType，int maskSize，int dstType）="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "(InputOutputArray image, InputArrayOfArrays contours, int contourIdx, const Scalar &amp;color, int thickness=1, int lineType=LINE_8, InputArray hierarchy=noArray(), int maxLevel=INT_MAX, Point offset=Point())",
    "local": "（InputOutputArray图像、InputArrayOfArrays等高线、int contourIdx、const Scalar&amp；颜色，int thickness=1，int lineType=LINE\\u 8，InputArray hierarchy=noArray（），int maxLevel=int\\u MAX，Point offset=Point（））"
  },
  {
    "origin": "Draws contours outlines or filled contours.",
    "local": "绘制轮廓或填充轮廓。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputOutputArray img, Point position, const Scalar &amp;color, int markerType=MARKER_CROSS, int markerSize=20, int thickness=1, int line_type=8)",
    "local": "（InputOutputArray img、点位置、常量标量和；颜色，int markerType=MARKER\\u CROSS，int markerSize=20，int thickness=1，int line\\u type=8）"
  },
  {
    "origin": "Draws a marker on a predefined position in an image.",
    "local": "在图像中的预定义位置绘制标记。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputOutputArray img, Point center, Size axes, double angle, double startAngle, double endAngle, const Scalar &amp;color, int thickness=1, int lineType=LINE_8, int shift=0)",
    "local": "（InputOutputArray img、点中心、大小轴、双角度、双星形、双端角、常量标量和；颜色，int thickness=1，int lineType=LINE\\u 8，int shift=0）"
  },
  {
    "origin": "Draws a simple or thick elliptic arc or fills an ellipse sector.",
    "local": "绘制简单或粗椭圆弧或填充椭圆扇区。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputOutputArray img, const RotatedRect &amp;box, const Scalar &amp;color, int thickness=1, int lineType=LINE_8)",
    "local": "（InputOutputArray img、const RotatedRect和；常量标量框；颜色，int厚度=1，int线型=线（8）"
  },
  {
    "origin": "(Point center, Size axes, int angle, int arcStart, int arcEnd, int delta, std::vector&lt; Point &gt; &amp;pts)",
    "local": "（点中心、大小轴、int角度、int弧起点、int弧终点、int增量、std:：vector&lt；点&gt&amp；分）"
  },
  {
    "origin": "Approximates an elliptic arc with a polyline.",
    "local": "用多段线近似椭圆弧。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(Point2d center, Size2d axes, int angle, int arcStart, int arcEnd, int delta, std::vector&lt; Point2d &gt; &amp;pts)",
    "local": "（Point2d center，Size2d axes，int angle，int arcStart，int arcEnd，int delta，std:：vector&lt；点2D&gt&amp；分）"
  },
  {
    "origin": "(InputArray signature1, InputArray signature2, int distType, InputArray cost=noArray(), float *lowerBound=0, OutputArray flow=noArray())",
    "local": "（InputArray signature1，InputArray signature2，int distType，InputArray cost=noArray（），float*lowerBound=0，OutputArray flow=noArray（））"
  },
  {
    "origin": "Computes the \"minimal work\" distance between two weighted point configurations.",
    "local": "计算两个加权点配置之间的“最小功”距离。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst)",
    "local": "（输入阵列src，输出阵列dst）"
  },
  {
    "origin": "Equalizes the histogram of a grayscale image.",
    "local": "均衡灰度图像的直方图。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, InputArray kernel, Point anchor=Point(-1,-1), int iterations=1, int borderType=BORDER_CONSTANT, const Scalar &amp;borderValue=morphologyDefaultBorderValue())",
    "local": "（InputArray src、OutputArray dst、InputArray kernel、Point anchor=Point（-1，-1）、int iterations=1、int borderType=BORDER_常量、const Scalar&amp；borderValue=morphologyDefaultBorderValue（））"
  },
  {
    "origin": "Erodes an image by using a specific structuring element.",
    "local": "使用特定的结构元素侵蚀图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputOutputArray img, const Point *pts, int npts, const Scalar &amp;color, int lineType=LINE_8, int shift=0)",
    "local": "（InputOutputArray img，const Point*pts，int npts，const Scalar&amp；颜色，int lineType=LINE（8，int shift=0）"
  },
  {
    "origin": "(InputOutputArray img, InputArray points, const Scalar &amp;color, int lineType=LINE_8, int shift=0)",
    "local": "（InputOutputArray img、InputArray points、const Scalar&amp；颜色，int lineType=LINE（8，int shift=0）"
  },
  {
    "origin": "Fills a convex polygon.",
    "local": "填充凸多边形。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputOutputArray img, const Point **pts, const int *npts, int ncontours, const Scalar &amp;color, int lineType=LINE_8, int shift=0, Point offset=Point())",
    "local": "（InputOutputArray img，const Point**pts，const int*npts，int ncontours，const Scalar&amp；颜色，int lineType=line8，int shift=0，Point offset=Point（））"
  },
  {
    "origin": "(InputOutputArray img, InputArrayOfArrays pts, const Scalar &amp;color, int lineType=LINE_8, int shift=0, Point offset=Point())",
    "local": "（InputOutputArray img、InputArrayOfArrays pts、const Scalar&amp；颜色，int lineType=line8，int shift=0，Point offset=Point（））"
  },
  {
    "origin": "Fills the area bounded by one or more polygons.",
    "local": "填充由一个或多个多边形限定的区域。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int ddepth, InputArray kernel, Point anchor=Point(-1,-1), double delta=0, int borderType=BORDER_DEFAULT)",
    "local": "（InputArray src，OutputArray dst，int ddepth，InputArray kernel，Point anchor=Point（-1，-1），double delta=0，int borderType=BORDER\\u DEFAULT）"
  },
  {
    "origin": "Convolves an image with the kernel.",
    "local": "将图像与内核卷积。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray image, OutputArrayOfArrays contours, OutputArray hierarchy, int mode, int method, Point offset=Point())",
    "local": "（InputArray图像，OutputArrayOfArrays等高线，OutputArray层次结构，int模式，int方法，点偏移=Point（））"
  },
  {
    "origin": "Finds contours in a binary image.",
    "local": "在二值图像中查找轮廓。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray image, OutputArrayOfArrays contours, int mode, int method, Point offset=Point())",
    "local": "（InputArray图像，OutputArrayOfArrays等高线，int模式，int方法，点偏移=Point（））"
  },
  {
    "origin": "(InputArray points)",
    "local": "（输入阵列点）"
  },
  {
    "origin": "Fits an ellipse around a set of 2D points.",
    "local": "围绕一组二维点拟合椭圆。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray points)",
    "local": "（输入阵列点）"
  },
  {
    "origin": "Fits an ellipse around a set of 2D points.",
    "local": "围绕一组二维点拟合椭圆。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray points)",
    "local": "（输入阵列点）"
  },
  {
    "origin": "Fits an ellipse around a set of 2D points.",
    "local": "围绕一组二维点拟合椭圆。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray points, OutputArray line, int distType, double param, double reps, double aeps)",
    "local": "（输入数组点、输出数组线、int distType、双参数、双重复、双AEP）"
  },
  {
    "origin": "Fits a line to a 2D or 3D point set.",
    "local": "将直线拟合到二维或三维点集。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputOutputArray image, Point seedPoint, Scalar newVal, Rect *rect=0, Scalar loDiff=Scalar(), Scalar upDiff=Scalar(), int flags=4)",
    "local": "（InputOutputArray图像，点seedPoint，标量newVal，Rect*Rect=0，标量loDiff=Scalar（），标量upDiff=Scalar（），int flags=4）"
  },
  {
    "origin": "(InputOutputArray image, InputOutputArray mask, Point seedPoint, Scalar newVal, Rect *rect=0, Scalar loDiff=Scalar(), Scalar upDiff=Scalar(), int flags=4)",
    "local": "（InputOutputArray image，InputOutputArray mask，Point seedPoint，Scalar newVal，Rect*Rect=0，Scalar loDiff=Scalar（），Scalar upDiff=Scalar（），int flags=4）"
  },
  {
    "origin": "Fills a connected component with the given color.",
    "local": "用给定的颜色填充连接的组件。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, Size ksize, double sigmaX, double sigmaY=0, int borderType=BORDER_DEFAULT)",
    "local": "（InputArray src，OutputArray dst，Size ksize，double sigmaX，double sigmaY=0，int borderType=BORDER\\u DEFAULT）"
  },
  {
    "origin": "Blurs an image using a Gaussian filter.",
    "local": "使用高斯滤波器模糊图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const Point2f src[], const Point2f dst[])",
    "local": "（const Point2f src[]，const Point2f dst[]）"
  },
  {
    "origin": "Calculates an affine transform from three pairs of the corresponding points.",
    "local": "从三对对应的点计算仿射变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, InputArray dst)",
    "local": "（InputArray src，InputArray dst）"
  },
  {
    "origin": "(OutputArray kx, OutputArray ky, int dx, int dy, int ksize, bool normalize=false, int ktype=",
    "local": "（OutputArray kx，OutputArray ky，int dx，int dy，int ksize，bool normalize=false，int ktype）="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Returns filter coefficients for computing spatial image derivatives.",
    "local": "返回用于计算空间图像导数的过滤器系数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const int fontFace, const int pixelHeight, const int thickness=1)",
    "local": "（const int fontFace，const int pixelHeight，const int thickness=1）"
  },
  {
    "origin": "Calculates the font-specific size to use to achieve a given height in pixels.",
    "local": "计算用于实现给定高度（以像素为单位）的字体特定大小。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(Size ksize, double sigma, double theta, double lambd, double gamma, double psi=",
    "local": "（尺寸ksize、双西格玛、双θ、双λ、双伽马、双psi）="
  },
  {
    "origin": "*0.5, int ktype=",
    "local": "*0.5，int k类型="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Returns Gabor filter coefficients.",
    "local": "返回Gabor滤波器系数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(int ksize, double sigma, int ktype=",
    "local": "（int sexy，双西格玛，int ktype）="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Returns Gaussian filter coefficients.",
    "local": "返回高斯滤波器系数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, InputArray dst, int solveMethod=DECOMP_LU)",
    "local": "（InputArray src，InputArray dst，int solveMethod=DECOMP\\u LU）"
  },
  {
    "origin": "Calculates a perspective transform from four pairs of the corresponding points.",
    "local": "从四对对应的点计算透视变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const Point2f src[], const Point2f dst[], int solveMethod=DECOMP_LU)",
    "local": "（const Point2f src[]，const Point2f dst[]，int solveMethod=DECOMP\\u LU）"
  },
  {
    "origin": "(InputArray image, Size patchSize, Point2f center, OutputArray patch, int patchType=-1)",
    "local": "（InputArray image，Size patchSize，Point2f center，OutputArray patch，int patchType=-1）"
  },
  {
    "origin": "Retrieves a pixel rectangle from an image with sub-pixel accuracy.",
    "local": "从图像中以亚像素精度检索像素矩形。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(Point2f center, double angle, double scale)",
    "local": "（点2F中心，双角度，双刻度）"
  },
  {
    "origin": "Calculates an affine matrix of 2D rotation.",
    "local": "计算二维旋转的仿射矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Matx23d&#160;",
    "local": "Matx23d型"
  },
  {
    "origin": "(Point2f center, double angle, double scale)",
    "local": "（点2F中心，双角度，双刻度）"
  },
  {
    "origin": "(int shape, Size ksize, Point anchor=Point(-1,-1))",
    "local": "（int shape，Size ksize，Point anchor=点（-1，-1））"
  },
  {
    "origin": "Returns a structuring element of the specified size and shape for morphological operations.",
    "local": "返回用于形态学运算的指定大小和形状的结构元素。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const String &amp;text, int fontFace, double fontScale, int thickness, int *baseLine)",
    "local": "（常量字符串和；文本，int fontFace，double fontScale，int thickness，int*基线）"
  },
  {
    "origin": "Calculates the width and height of a text string.",
    "local": "计算文本字符串的宽度和高度。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray image, OutputArray corners, int maxCorners, double qualityLevel, double minDistance, InputArray mask=noArray(), int blockSize=3, bool useHarrisDetector=false, double k=0.04)",
    "local": "（InputArray image，OutputArray corners，int maxCorners，double qualityLevel，double minDistance，InputArray mask=noArray（），int blockSize=3，bool usehrisdetector=false，double k=0.04）"
  },
  {
    "origin": "Determines strong corners on an image.",
    "local": "确定图像上的强角点。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray image, OutputArray corners, int maxCorners, double qualityLevel, double minDistance, InputArray mask, int blockSize, int gradientSize, bool useHarrisDetector=false, double k=0.04)",
    "local": "（输入阵列图像、输出阵列角点、int maxCorners、double qualityLevel、double minDistance、输入阵列掩码、int blockSize、int gradientSize、bool usehrisdetector=false、double k=0.04）"
  },
  {
    "origin": "(InputArray image, OutputArray corners, int maxCorners, double qualityLevel, double minDistance, InputArray mask, OutputArray cornersQuality, int blockSize=3, int gradientSize=3, bool useHarrisDetector=false, double k=0.04)",
    "local": "（输入阵列图像、输出阵列角点、int maxCorners、double qualityLevel、double minDistance、输入阵列掩码、输出阵列角点squality、int blockSize=3、int gradientSize=3、bool usehrisdetector=false、double k=0.04）"
  },
  {
    "origin": "Same as above, but returns also quality measure of the detected corners.",
    "local": "同上，但也返回检测到的角点的质量度量。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray img, InputOutputArray mask, Rect rect, InputOutputArray bgdModel, InputOutputArray fgdModel, int iterCount, int mode=GC_EVAL)",
    "local": "（InputArray img，inpututputarray mask，Rect Rect，inpututputarray bgdModel，inpututputarray fgdModel，int iterCount，int mode=GC\\u EVAL）"
  },
  {
    "origin": "Runs the GrabCut algorithm.",
    "local": "运行GrabCut算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray image, OutputArray circles, int method, double dp, double minDist, double param1=100, double param2=100, int minRadius=0, int maxRadius=0)",
    "local": "（输入数组图像，输出数组圆，int方法，双dp，双minist，双param1=100，双param2=100，int minRadius=0，int maxRadius=0）"
  },
  {
    "origin": "Finds circles in a grayscale image using the Hough transform.",
    "local": "使用Hough变换在灰度图像中查找圆。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray image, OutputArray lines, double rho, double theta, int threshold, double srn=0, double stn=0, double min_theta=0, double max_theta=",
    "local": "（输入阵列图像，输出阵列线，双ρ，双θ，int阈值，双srn=0，双stn=0，双minθ=0，双maxθ="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Finds lines in a binary image using the standard Hough transform.",
    "local": "使用标准Hough变换在二值图像中查找线。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray image, OutputArray lines, double rho, double theta, int threshold, double minLineLength=0, double maxLineGap=0)",
    "local": "（输入阵列图像，输出阵列线，双rho，双theta，int阈值，双minLineLength=0，双maxLineGap=0）"
  },
  {
    "origin": "Finds line segments in a binary image using the probabilistic Hough transform.",
    "local": "使用概率Hough变换在二值图像中查找线段。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray _point, OutputArray _lines, int lines_max, int threshold, double min_rho, double max_rho, double rho_step, double min_theta, double max_theta, double theta_step)",
    "local": "（输入数组点、输出数组行、int行最大值、int阈值、双最小值ρ、双最大值ρ、双ρ步长、双最小θ、双最大θ、双θ步长）"
  },
  {
    "origin": "Finds lines in a set of points using the standard Hough transform.",
    "local": "使用标准Hough变换在一组点中查找直线。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const Moments &amp;moments, double hu[7])",
    "local": "（常数矩和；瞬间，双胡[7]）"
  },
  {
    "origin": "Calculates seven Hu invariants.",
    "local": "计算七个Hu不变量。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const Moments &amp;m, OutputArray hu)",
    "local": "（常数矩和；m、 输出阵列（hu）"
  },
  {
    "origin": "(InputArray src, OutputArray sum, int sdepth=-1)",
    "local": "（InputArray src，OutputArray sum，int sdepth=-1）"
  },
  {
    "origin": "(InputArray src, OutputArray sum, OutputArray sqsum, int sdepth=-1, int sqdepth=-1)",
    "local": "（InputArray src，OutputArray sum，OutputArray sqsum，int sdepth=-1，int sqdepth=-1）"
  },
  {
    "origin": "(InputArray src, OutputArray sum, OutputArray sqsum, OutputArray tilted, int sdepth=-1, int sqdepth=-1)",
    "local": "（InputArray src、OutputArray sum、OutputArray sqsum、OutputArray tilted、int sdepth=-1、int sqdepth=-1）"
  },
  {
    "origin": "Calculates the integral of an image.",
    "local": "计算图像的积分。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray _p1, InputArray _p2, OutputArray _p12, bool handleNested=true)",
    "local": "（inputArray P1，inputArray P2，outputArray P12，bool handlenested=true）"
  },
  {
    "origin": "Finds intersection of two convex polygons.",
    "local": "求两个凸多边形的交集。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray M, OutputArray iM)",
    "local": "（输入阵列M，输出阵列iM）"
  },
  {
    "origin": "Inverts an affine transformation.",
    "local": "反转仿射变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray contour)",
    "local": "（输入阵列等高线）"
  },
  {
    "origin": "Tests a contour convexity.",
    "local": "测试轮廓凸度。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int ddepth, int ksize=1, double scale=1, double delta=0, int borderType=BORDER_DEFAULT)",
    "local": "（InputArray src，OutputArray dst，int ddepth，int ksize=1，double scale=1，double delta=0，int borderType=BORDER\\u默认值）"
  },
  {
    "origin": "Calculates the Laplacian of an image.",
    "local": "计算图像的拉普拉斯函数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputOutputArray img, Point pt1, Point pt2, const Scalar &amp;color, int thickness=1, int lineType=LINE_8, int shift=0)",
    "local": "（InputOutputArray img、点pt1、点pt2、常量标量&amp；颜色，int thickness=1，int lineType=LINE\\u 8，int shift=0）"
  },
  {
    "origin": "Draws a line segment connecting two points.",
    "local": "绘制连接两点的线段。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, Point2f center, double maxRadius, int flags)",
    "local": "（InputArray src、OutputArray dst、Point2f center、double maxRadius、int标志）"
  },
  {
    "origin": "Remaps an image to polar coordinates space.",
    "local": "将图像重新映射到极坐标空间。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, Point2f center, double M, int flags)",
    "local": "（InputArray src、OutputArray dst、Point2f center、double M、int标志）"
  },
  {
    "origin": "Remaps an image to semilog-polar coordinates space.",
    "local": "将图像重映射到半对数极坐标空间。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray contour1, InputArray contour2, int method, double parameter)",
    "local": "（InputArray contour1，InputArray contour2，int方法，双参数）"
  },
  {
    "origin": "Compares two shapes.",
    "local": "比较两种形状。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray image, InputArray templ, OutputArray result, int method, InputArray mask=noArray())",
    "local": "（InputArray image，InputArray temp，OutputArray result，int method，InputArray mask=noArray（））"
  },
  {
    "origin": "Compares a template against overlapped image regions.",
    "local": "将模板与重叠的图像区域进行比较。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int ksize)",
    "local": "（输入Arsrc，输出Ardst，int ksize）"
  },
  {
    "origin": "Blurs an image using the median filter.",
    "local": "使用中值滤波器模糊图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray points)",
    "local": "（输入阵列点）"
  },
  {
    "origin": "Finds a rotated rectangle of the minimum area enclosing the input 2D point set.",
    "local": "查找包含输入二维点集的最小区域的旋转矩形。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray points, Point2f &amp;center, float &amp;radius)",
    "local": "（输入阵列点，点2f&amp；中心、浮动和；半径）"
  },
  {
    "origin": "Finds a circle of the minimum area enclosing a 2D point set.",
    "local": "查找包围二维点集的最小面积圆。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray points, OutputArray triangle)",
    "local": "（输入阵列点，输出阵列三角形）"
  },
  {
    "origin": "Finds a triangle of minimum area enclosing a 2D point set and returns its area.",
    "local": "查找包围二维点集的最小面积三角形并返回其面积。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray array, bool binaryImage=false)",
    "local": "（InputArray数组，bool binaryImage=false）"
  },
  {
    "origin": "Calculates all of the moments up to the third order of a polygon or rasterized shape.",
    "local": "计算多边形或光栅化形状的三阶矩。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "returns \"magic\" border value for erosion and dilation. It is automatically transformed to",
    "local": "返回侵蚀和扩张的“魔法”边界值。它会自动转换为"
  },
  {
    "origin": "(-DBL_MAX) for dilation.",
    "local": "（-DBL\\u MAX）用于扩张。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int op, InputArray kernel, Point anchor=Point(-1,-1), int iterations=1, int borderType=BORDER_CONSTANT, const Scalar &amp;borderValue=morphologyDefaultBorderValue())",
    "local": "（InputArray src，OutputArray dst，int op，InputArray kernel，Point anchor=Point（-1，-1），int iterations=1，int borderType=BORDER_常量，const Scalar&amp；borderValue=morphologyDefaultBorderValue（））"
  },
  {
    "origin": "Performs advanced morphological transformations.",
    "local": "执行高级形态变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Point2d&#160;",
    "local": "点2D&#160；"
  },
  {
    "origin": "(InputArray src1, InputArray src2, InputArray window=noArray(), double *response=0)",
    "local": "（InputArray src1，InputArray src2，InputArray window=noArray（），double*response=0）"
  },
  {
    "origin": "The function is used to detect translational shifts that occur between two images.",
    "local": "该函数用于检测两个图像之间发生的平移偏移。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray contour, Point2f pt, bool measureDist)",
    "local": "（输入阵列轮廓，点2f pt，布尔测量列表）"
  },
  {
    "origin": "Performs a point-in-contour test.",
    "local": "执行轮廓点测试。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputOutputArray img, const Point *const *pts, const int *npts, int ncontours, bool isClosed, const Scalar &amp;color, int thickness=1, int lineType=LINE_8, int shift=0)",
    "local": "（InputOutputArray img，const Point*const*pts，const int*npts，int ncontours，bool isClosed，const Scalar&amp；颜色，int thickness=1，int lineType=LINE\\u 8，int shift=0）"
  },
  {
    "origin": "(InputOutputArray img, InputArrayOfArrays pts, bool isClosed, const Scalar &amp;color, int thickness=1, int lineType=LINE_8, int shift=0)",
    "local": "（InputOutputArray img、InputArrayOfArrays pts、bool isClosed、const Scalar&amp；颜色，int thickness=1，int lineType=LINE\\u 8，int shift=0）"
  },
  {
    "origin": "Draws several polygonal curves.",
    "local": "绘制多条多边形曲线。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int ksize, int borderType=BORDER_DEFAULT)",
    "local": "（InputArray src，OutputArray dst，int ksize，int borderType=BORDER\\u DEFAULT）"
  },
  {
    "origin": "Calculates a feature map for corner detection.",
    "local": "计算角点检测的特征映射。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputOutputArray img, const String &amp;text, Point org, int fontFace, double fontScale, Scalar color, int thickness=1, int lineType=LINE_8, bool bottomLeftOrigin=false)",
    "local": "（InputOutputArray img、const String和；text，Point org，int fontFace，double fontScale，Scalar color，int thickness=1，int lineType=line8，bool bottomLeftOrigin=false）"
  },
  {
    "origin": "Draws a text string.",
    "local": "绘制文本字符串。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, const Size &amp;dstsize=Size(), int borderType=BORDER_DEFAULT)",
    "local": "（InputArray src、OutputArray dst、const Size和；dstsize=Size（），int borderType=BORDER（默认）"
  },
  {
    "origin": "Blurs an image and downsamples it.",
    "local": "模糊图像并对其进行下采样。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, double sp, double sr, int maxLevel=1, TermCriteria termcrit=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS, 5, 1))",
    "local": "（InputArray src，OutputArray dst，double sp，double sr，int maxLevel=1，termcruiteria termcruit=termcruiteria（termcruiter:：MAX\\u ITER+termcruiteria:：EPS，5，1））"
  },
  {
    "origin": "Performs initial step of meanshift segmentation of an image.",
    "local": "执行图像meanshift分割的初始步骤。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, const Size &amp;dstsize=Size(), int borderType=BORDER_DEFAULT)",
    "local": "（InputArray src、OutputArray dst、const Size和；dstsize=Size（），int borderType=BORDER（默认）"
  },
  {
    "origin": "Upsamples an image and then blurs it.",
    "local": "向上采样图像，然后使其模糊。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputOutputArray img, Point pt1, Point pt2, const Scalar &amp;color, int thickness=1, int lineType=LINE_8, int shift=0)",
    "local": "（InputOutputArray img、点pt1、点pt2、常量标量&amp；颜色，int thickness=1，int lineType=LINE\\u 8，int shift=0）"
  },
  {
    "origin": "Draws a simple, thick, or filled up-right rectangle.",
    "local": "绘制简单的、粗的或填充的右矩形。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputOutputArray img, Rect rec, const Scalar &amp;color, int thickness=1, int lineType=LINE_8, int shift=0)",
    "local": "（InputOutputArray img、Rect rec、const Scalar&amp；颜色，int thickness=1，int lineType=LINE\\u 8，int shift=0）"
  },
  {
    "origin": "(InputArray src, OutputArray dst, InputArray map1, InputArray map2, int interpolation, int borderMode=BORDER_CONSTANT, const Scalar &amp;borderValue=Scalar())",
    "local": "（InputArray src，OutputArray dst，InputArray map1，InputArray map2，int interpolation，int borderMode=BORDER_常量，const Scalar&amp；borderValue=标量（））"
  },
  {
    "origin": "Applies a generic geometrical transformation to an image.",
    "local": "对图像应用常规几何变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, Size dsize, double fx=0, double fy=0, int interpolation=INTER_LINEAR)",
    "local": "（InputArray src，OutputArray dst，Size dsize，double fx=0，double fy=0，int interpolation=INTER\\u LINEAR）"
  },
  {
    "origin": "Resizes an image.",
    "local": "调整图像大小。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const RotatedRect &amp;rect1, const RotatedRect &amp;rect2, OutputArray intersectingRegion)",
    "local": "（常压旋转电阻&amp；RECT1，常量ROTATEDRECT&amp；RECT2，输出相交区域）"
  },
  {
    "origin": "Finds out if there is any intersection between two rotated rectangles.",
    "local": "找出两个旋转的矩形之间是否有交集。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int ddepth, int dx, int dy, double scale=1, double delta=0, int borderType=BORDER_DEFAULT)",
    "local": "（InputArray src，OutputArray dst，int ddepth，int dx，int dy，double scale=1，double delta=0，int borderType=BORDER\\u默认值）"
  },
  {
    "origin": "Calculates the first x- or y- image derivative using Scharr operator.",
    "local": "使用Scharr算子计算第一个x或y图像导数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int ddepth, InputArray kernelX, InputArray kernelY, Point anchor=Point(-1,-1), double delta=0, int borderType=BORDER_DEFAULT)",
    "local": "（InputArray src，OutputArray dst，int ddepth，InputArray kernelX，InputArray kernelY，Point anchor=Point（-1，-1），double delta=0，int borderType=BORDER\\u DEFAULT）"
  },
  {
    "origin": "Applies a separable linear filter to an image.",
    "local": "对图像应用可分离线性滤波器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int ddepth, int dx, int dy, int ksize=3, double scale=1, double delta=0, int borderType=BORDER_DEFAULT)",
    "local": "（InputArray src，OutputArray dst，int ddepth，int dx，int dy，int ksize=3，double scale=1，double delta=0，int borderType=BORDER\\u DEFAULT）"
  },
  {
    "origin": "Calculates the first, second, third, or mixed image derivatives using an extended Sobel operator.",
    "local": "使用扩展的Sobel运算符计算第一、第二、第三或混合图像导数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dx, OutputArray dy, int ksize=3, int borderType=BORDER_DEFAULT)",
    "local": "（InputArray src，OutputArray dx，OutputArray dy，int ksize=3，int borderType=BORDER\\u默认值）"
  },
  {
    "origin": "Calculates the first order image derivative in both x and y using a Sobel operator.",
    "local": "使用Sobel运算符计算x和y上的一阶图像导数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int ddepth, Size ksize, Point anchor=Point(-1, -1), bool normalize=true, int borderType=BORDER_DEFAULT)",
    "local": "（InputArray src，OutputArray dst，int ddepth，Size ksize，Point anchor=Point（-1，-1），bool normalize=true，int borderType=BORDER\\u DEFAULT）"
  },
  {
    "origin": "Calculates the normalized sum of squares of the pixel values overlapping the filter.",
    "local": "计算与过滤器重叠的像素值的标准化平方和。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, double thresh, double maxval, int type)",
    "local": "（InputArray src、OutputArray dst、double thresh、double maxval、int类型）"
  },
  {
    "origin": "Applies a fixed-level threshold to each array element.",
    "local": "对每个数组元素应用固定级别的阈值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, InputArray M, Size dsize, int flags=INTER_LINEAR, int borderMode=BORDER_CONSTANT, const Scalar &amp;borderValue=Scalar())",
    "local": "（InputArray src、OutputArray dst、InputArray M、Size dsize、int flags=内部线性、int borderMode=边界常数、常量标量&amp；borderValue=标量（））"
  },
  {
    "origin": "Applies an affine transformation to an image.",
    "local": "对图像应用仿射变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, InputArray M, Size dsize, int flags=INTER_LINEAR, int borderMode=BORDER_CONSTANT, const Scalar &amp;borderValue=Scalar())",
    "local": "（InputArray src、OutputArray dst、InputArray M、Size dsize、int flags=内部线性、int borderMode=边界常数、常量标量&amp；borderValue=标量（））"
  },
  {
    "origin": "Applies a perspective transformation to an image.",
    "local": "对图像应用透视变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, Size dsize, Point2f center, double maxRadius, int flags)",
    "local": "（InputArray src、OutputArray dst、Size dsize、Point2f center、double maxRadius、int标志）"
  },
  {
    "origin": "Remaps an image to polar or semilog-polar coordinates space.",
    "local": "将图像重新映射到极坐标或半对数极坐标空间。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray image, InputOutputArray markers)",
    "local": "输入阵列图像、输入输出阵列标记）"
  },
  {
    "origin": "Performs a marker-based image segmentation using the watershed algorithm.",
    "local": "使用分水岭算法执行基于标记的图像分割。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray signature1, InputArray signature2, int distType, InputArray cost=noArray(), Ptr&lt; float &gt; lowerBound=Ptr&lt; float &gt;(), OutputArray flow=noArray())",
    "local": "（InputArray signature1，InputArray signature2，int distType，InputArray cost=noArray（），Ptr&lt；浮动&gt；下限=Ptr&lt；浮动&gt；（），OutputArray flow=noArray（））"
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:33 for OpenCV by &#160;",
    "local": "2021年4月2日星期五11:36:33为OpenCV生成，&#160；"
  }
]