[
  {
    "origin": "OpenCV: cv::structured_light::GrayCodePattern Class Reference",
    "local": "OpenCV:cv:：structured\\u light:：GrayCodePattern类参考"
  },
  {
    "origin": "OpenCV",
    "local": "打开CV"
  },
  {
    "origin": "Open Source Computer Vision",
    "local": "开源计算机视觉"
  },
  {
    "origin": "Classes",
    "local": "班级"
  },
  {
    "origin": "Public Member Functions",
    "local": "公共成员职能"
  },
  {
    "origin": "Static Public Member Functions",
    "local": "静态公共成员函数"
  },
  {
    "origin": "List of all members",
    "local": "所有成员的列表"
  },
  {
    "origin": "cv::structured_light::GrayCodePattern Class Reference",
    "local": "cv:：structured\\ U light:：GrayCodePattern类参考"
  },
  {
    "origin": "abstract",
    "local": "摘要"
  },
  {
    "origin": "Class implementing the Gray-code pattern, based on",
    "local": "类实现格雷码模式，基于"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Inheritance diagram for cv::structured_light::GrayCodePattern:",
    "local": "cv:：structured\\ U light:：GrayCodePattern的继承关系图："
  },
  {
    "origin": "Classes",
    "local": "班级"
  },
  {
    "origin": "struct",
    "local": "结构"
  },
  {
    "origin": "Parameters of",
    "local": "的参数"
  },
  {
    "origin": "constructor.",
    "local": "建造师。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Public Member Functions",
    "local": "公共成员职能"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "blackImage,",
    "local": "黑影，"
  },
  {
    "origin": "Generates the all-black and all-white images needed for shadowMasks computation.",
    "local": "生成阴影遮罩计算所需的全黑和全白图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual size_t",
    "local": "虚拟大小\\u t"
  },
  {
    "origin": "Get the number of pattern images needed for the graycode pattern.",
    "local": "获取格雷码图案所需的图案图像数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual bool",
    "local": "虚拟布尔"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "patternImages, int x, int y,",
    "local": "模式图，int x，int y，"
  },
  {
    "origin": "For a (x,y) pixel of a camera returns the corresponding projector pixel.",
    "local": "对于相机的（x，y）像素，返回相应的投影像素。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "Sets the value for black threshold, needed for decoding (shadowsmasks computation).",
    "local": "设置解码所需的黑色阈值（shadowsmasks计算）。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "Sets the value for white threshold, needed for decoding.",
    "local": "设置解码所需的白色阈值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Public Member Functions inherited from",
    "local": "公共成员函数继承自"
  },
  {
    "origin": "virtual bool",
    "local": "虚拟布尔"
  },
  {
    "origin": "(const std::vector&lt; std::vector&lt;",
    "local": "（const std：：向量&lt；标准：：向量&lt；"
  },
  {
    "origin": "&gt; &gt; &amp;patternImages,",
    "local": "&gt；&quot；&gt；gt；&amp；我们不应该模仿，"
  },
  {
    "origin": "disparityMap,",
    "local": "差异映射，"
  },
  {
    "origin": "blackImages=",
    "local": "黑色图像="
  },
  {
    "origin": "(),",
    "local": "(),"
  },
  {
    "origin": "whiteImages=",
    "local": "白色图像="
  },
  {
    "origin": "(), int flags=",
    "local": "（），int标志="
  },
  {
    "origin": "Decodes the structured light pattern, generating a disparity map.",
    "local": "解码结构光模式，生成视差图。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual bool",
    "local": "虚拟布尔"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "Generates the structured light pattern to project.",
    "local": "生成要投影的结构光图案。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Public Member Functions inherited from",
    "local": "公共成员函数继承自"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "virtual",
    "local": "事实上的"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Clears the algorithm state.",
    "local": "清除算法状态。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual bool",
    "local": "虚拟布尔"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "Returns true if the",
    "local": "如果"
  },
  {
    "origin": "is empty (e.g. in the very beginning or after unsuccessful read.",
    "local": "为空（例如，在最开始或读取失败后）。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual",
    "local": "事实上的"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;fn)",
    "local": "&amp；（fn）"
  },
  {
    "origin": "Reads algorithm parameters from a file storage.",
    "local": "从文件存储器中读取算法参数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;filename) const",
    "local": "&amp；文件名）常量"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;fs) const",
    "local": "&amp；（f） 常数"
  },
  {
    "origin": "Stores algorithm parameters in a file storage.",
    "local": "将算法参数存储在文件存储器中。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;fs, const",
    "local": "&gt；gt；amp；fs，常数"
  },
  {
    "origin": "&amp;name=",
    "local": "&amp；姓名="
  },
  {
    "origin": "()) const",
    "local": "（））常数"
  },
  {
    "origin": "simplified API for language bindings This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "语言绑定的简化API这是一个重载的成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Static Public Member Functions",
    "local": "静态公共成员函数"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;parameters=",
    "local": "&amp；参数="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Constructor.",
    "local": "建造师。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(int width, int height)",
    "local": "（int宽度，int高度）"
  },
  {
    "origin": "Static Public Member Functions inherited from",
    "local": "继承自的静态公共成员函数"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": "&lt_Tp&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;filename, const",
    "local": "&amp；文件名，常量"
  },
  {
    "origin": "&amp;objname=",
    "local": "&amp；对象名="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Loads algorithm from the file.",
    "local": "从文件加载算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": "&lt_Tp&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;strModel, const",
    "local": "&amp；strModel，常量"
  },
  {
    "origin": "&amp;objname=",
    "local": "&amp；对象名="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Loads algorithm from a String.",
    "local": "从字符串加载算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": "&lt_Tp&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;fn)",
    "local": "&amp；（fn）"
  },
  {
    "origin": "Reads algorithm from the file node.",
    "local": "从文件节点读取算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Additional Inherited Members",
    "local": "其他继承成员"
  },
  {
    "origin": "Protected Member Functions inherited from",
    "local": "继承自的受保护成员函数"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;fs) const",
    "local": "&amp；（f） 常数"
  },
  {
    "origin": "Detailed Description",
    "local": "详细说明"
  },
  {
    "origin": "Class implementing the Gray-code pattern, based on",
    "local": "类实现格雷码模式，基于"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "The generation of the pattern images is performed with Gray encoding using the traditional white and black colors.",
    "local": "模式图像的生成是使用传统的白色和黑色进行灰色编码的。"
  },
  {
    "origin": "The information about the two image axes x, y is encoded separately into two different pattern sequences. A projector P with resolution (P_res_x, P_res_y) will result in Ncols = log 2 (P_res_x) encoded pattern images representing the columns, and in Nrows = log 2 (P_res_y) encoded pattern images representing the rows. For example a projector with resolution 1024x768 will result in Ncols = 10 and Nrows = 10.",
    "local": "关于两个图像轴x、y的信息被分别编码成两个不同的模式序列。具有分辨率（P\\u res\\u x，P\\u res\\u y）的投影仪P将产生表示列的Ncols=log2（P\\u res\\u x）编码模式图像，以及表示行的Nrows=log2（P\\u res\\u y）编码模式图像。例如，分辨率为1024x768的投影仪将导致Ncols=10和Nrows=10。"
  },
  {
    "origin": "However, the generated pattern sequence consists of both regular color and color-inverted images: inverted pattern images are images with the same structure as the original but with inverted colors. This provides an effective method for easily determining the intensity value of each pixel when it is lit (highest value) and when it is not lit (lowest value). So for a a projector with resolution 1024x768, the number of pattern images will be Ncols * 2 + Nrows * 2 = 40.",
    "local": "然而，生成的模式序列由规则颜色和颜色反转图像组成：反转模式图像是与原始图像具有相同结构但具有反转颜色的图像。这提供了一种有效的方法，可以方便地确定每个像素点亮时的强度值（最高值）和未点亮时的强度值（最低值）。因此，对于分辨率为1024x768的投影仪，模式图像的数量将是Ncols*2+Nrows*2=40。"
  },
  {
    "origin": "Member Function Documentation",
    "local": "成员功能文档"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "create()",
    "local": "创建（）"
  },
  {
    "origin": "[1/2]",
    "local": "[1/2]"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; cv::structured_light::GrayCodePattern::create",
    "local": "&燃气轮机；cv:：结构光：：格雷码图案：：创建"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "parameters",
    "local": "参数"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.structured_light.GrayCodePattern_create(",
    "local": "cv.structured\\ U light.GrayCodePattern\\创建("
  },
  {
    "origin": "width, height",
    "local": "宽度，高度"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Constructor.",
    "local": "建造师。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "parameters",
    "local": "参数"
  },
  {
    "origin": "parameters",
    "local": "参数"
  },
  {
    "origin": ": the width and the height of the projector.",
    "local": "：投影仪的宽度和高度。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "create()",
    "local": "创建（）"
  },
  {
    "origin": "[2/2]",
    "local": "[2/2]"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; cv::structured_light::GrayCodePattern::create",
    "local": "&燃气轮机；cv:：结构光：：格雷码图案：：创建"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "width",
    "local": "宽度"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "height",
    "local": "高度"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.structured_light.GrayCodePattern_create(",
    "local": "cv.structured\\ U light.GrayCodePattern\\创建("
  },
  {
    "origin": "width, height",
    "local": "宽度，高度"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getImagesForShadowMasks()",
    "local": "getImagesForShadowMasks（）"
  },
  {
    "origin": "virtual void cv::structured_light::GrayCodePattern::getImagesForShadowMasks",
    "local": "虚空cv：：结构光：：GrayCodePattern：：getImagesForShadowMasks"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "blackImage",
    "local": "黑影"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "whiteImage",
    "local": "白色图像"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "blackImage, whiteImage",
    "local": "黑白图像"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.structured_light_GrayCodePattern.getImagesForShadowMasks(",
    "local": "cv.structured\\ U light\\ U GrayCodePattern.GetImages阴影遮罩("
  },
  {
    "origin": "blackImage, whiteImage",
    "local": "黑白图像"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Generates the all-black and all-white images needed for shadowMasks computation.",
    "local": "生成阴影遮罩计算所需的全黑和全白图像。"
  },
  {
    "origin": "To identify shadow regions, the regions of two images where the pixels are not lit by projector's light and thus where there is not coded information, the 3DUNDERWORLD algorithm computes a shadow mask for the two cameras views, starting from a white and a black images captured by each camera. This method generates these two additional images to project.",
    "local": "为了识别阴影区域，即两个图像中像素没有被投影仪的光照亮，因此没有编码信息的区域，3DUNDERWORLD算法从每个相机捕获的白色和黑色图像开始，计算两个相机视图的阴影遮罩。此方法将生成这两个附加图像以投影。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "blackImage",
    "local": "黑影"
  },
  {
    "origin": "The generated all-black CV_8U image, at projector's resolution.",
    "local": "以投影仪的分辨率生成的全黑cv8u图像。"
  },
  {
    "origin": "whiteImage",
    "local": "白色图像"
  },
  {
    "origin": "The generated all-white CV_8U image, at projector's resolution.",
    "local": "在投影仪的分辨率下生成的全白色cv8u图像。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getNumberOfPatternImages()",
    "local": "getNumberOfPatternImages（）"
  },
  {
    "origin": "virtual size_t cv::structured_light::GrayCodePattern::getNumberOfPatternImages",
    "local": "虚拟大小\\u t cv：：结构化\\u灯光：：GrayCodePattern：：getNumberOfPatternImages"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.structured_light_GrayCodePattern.getNumberOfPatternImages(",
    "local": "cv.structured\\u light\\u GrayCodePattern.getNumberOfPatternImages("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Get the number of pattern images needed for the graycode pattern.",
    "local": "获取格雷码图案所需的图案图像数。"
  },
  {
    "origin": "Returns",
    "local": "退换商品"
  },
  {
    "origin": "The number of pattern images needed for the graycode pattern.",
    "local": "格雷码图案所需的图案图像数。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getProjPixel()",
    "local": "getProjPixel（）"
  },
  {
    "origin": "virtual bool cv::structured_light::GrayCodePattern::getProjPixel",
    "local": "虚拟bool cv：：结构光：：GrayCodePattern：：getProjPixel"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "patternImages",
    "local": "图案图像"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "x",
    "local": "十"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "y",
    "local": "y"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "projPix",
    "local": "项目"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval, projPix",
    "local": "方向，投影像素"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.structured_light_GrayCodePattern.getProjPixel(",
    "local": "cv.structured\\ u light\\ u GrayCodePattern.getProjPixel文件("
  },
  {
    "origin": "patternImages, x, y",
    "local": "图案，x，y"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "For a (x,y) pixel of a camera returns the corresponding projector pixel.",
    "local": "对于相机的（x，y）像素，返回相应的投影像素。"
  },
  {
    "origin": "The function decodes each pixel in the pattern images acquired by a camera into their corresponding decimal numbers representing the projector's column and row, providing a mapping between camera's and projector's pixel.",
    "local": "该函数将相机获取的模式图像中的每个像素解码为代表投影仪列和行的相应十进制数，从而提供相机和投影仪像素之间的映射。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "patternImages",
    "local": "图案图像"
  },
  {
    "origin": "The pattern images acquired by the camera, stored in a grayscale vector &lt;",
    "local": "相机采集的模式图像，存储在灰度向量中&lt；"
  },
  {
    "origin": "&gt;.",
    "local": "&gt；。"
  },
  {
    "origin": "x",
    "local": "十"
  },
  {
    "origin": "x coordinate of the image pixel.",
    "local": "图像像素的x坐标。"
  },
  {
    "origin": "y",
    "local": "y"
  },
  {
    "origin": "y coordinate of the image pixel.",
    "local": "图像像素的y坐标。"
  },
  {
    "origin": "projPix",
    "local": "项目"
  },
  {
    "origin": "Projector's pixel corresponding to the camera's pixel: projPix.x and projPix.y are the image coordinates of the projector's pixel corresponding to the pixel being decoded in a camera.",
    "local": "投影仪像素对应于相机像素：projPix.x和projPix.y是投影仪像素的图像坐标，对应于相机中解码的像素。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "setBlackThreshold()",
    "local": "setBlackThreshold（）"
  },
  {
    "origin": "virtual void cv::structured_light::GrayCodePattern::setBlackThreshold",
    "local": "虚空cv：：结构光：：格雷码图案：：setBlackThreshold"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "size_t",
    "local": "大小\\u t"
  },
  {
    "origin": "value",
    "local": "价值"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.structured_light_GrayCodePattern.setBlackThreshold(",
    "local": "cv.structured\\ u light\\ u GrayCodePattern.setBlackThreshold("
  },
  {
    "origin": "value",
    "local": "价值"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Sets the value for black threshold, needed for decoding (shadowsmasks computation).",
    "local": "设置解码所需的黑色阈值（shadowsmasks计算）。"
  },
  {
    "origin": "Black threshold is a number between 0-255 that represents the minimum brightness difference required for valid pixels, between the fully illuminated (white) and the not illuminated images (black); used in computeShadowMasks method.",
    "local": "黑色阈值是一个介于0-255之间的数字，表示有效像素所需的最小亮度差，在完全照明（白色）和未照明图像（黑色）之间；用于computeShadowMasks方法。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "value",
    "local": "价值"
  },
  {
    "origin": "The desired black threshold value.",
    "local": "所需的黑色阈值。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "setWhiteThreshold()",
    "local": "设置白阈值（）"
  },
  {
    "origin": "virtual void cv::structured_light::GrayCodePattern::setWhiteThreshold",
    "local": "虚空cv：：结构光：：格雷码模式：：设置白阈值"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "size_t",
    "local": "大小\\u t"
  },
  {
    "origin": "value",
    "local": "价值"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.structured_light_GrayCodePattern.setWhiteThreshold(",
    "local": "cv.structured\\ u light\\ u GrayCodePattern.setWhiteThreshold设置("
  },
  {
    "origin": "value",
    "local": "价值"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Sets the value for white threshold, needed for decoding.",
    "local": "设置解码所需的白色阈值。"
  },
  {
    "origin": "White threshold is a number between 0-255 that represents the minimum brightness difference required for valid pixels, between the graycode pattern and its inverse images; used in getProjPixel method.",
    "local": "白阈值是一个介于0-255之间的数字，表示有效像素所需的最小亮度差，在格雷码模式及其反转图像之间；用于getProjPixel方法。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "value",
    "local": "价值"
  },
  {
    "origin": "The desired white threshold value.",
    "local": "所需的白色阈值。"
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": "此类的文档是从以下文件生成的："
  },
  {
    "origin": "opencv2/structured_light/",
    "local": "opencv2/结构光/"
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:48 for OpenCV by",
    "local": "于2021年4月2日星期五11:36:48为OpenCV生成"
  }
]