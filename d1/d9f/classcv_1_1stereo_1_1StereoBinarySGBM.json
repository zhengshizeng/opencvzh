[
  {
    "origin": "OpenCV: cv::stereo::StereoBinarySGBM Class Reference",
    "local": "OpenCV:cv:：stereo:：StereoBinarySGBM类引用"
  },
  {
    "origin": "Open Source Computer Vision",
    "local": "开源计算机视觉"
  },
  {
    "origin": "Public Types",
    "local": "公共类型"
  },
  {
    "origin": "Public Member Functions",
    "local": "公共成员职能"
  },
  {
    "origin": "Static Public Member Functions",
    "local": "静态公共成员函数"
  },
  {
    "origin": "List of all members",
    "local": "所有成员的列表"
  },
  {
    "origin": "cv::stereo::StereoBinarySGBM Class Reference",
    "local": "cv:：stereo:：StereoBinarySGBM类参考"
  },
  {
    "origin": "abstract",
    "local": "摘要"
  },
  {
    "origin": "The class implements the modified H. Hirschmuller algorithm",
    "local": "类实现了修改后的H。赫氏算法"
  },
  {
    "origin": "that differs from the original one as follows:",
    "local": "与原来的不同之处如下："
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Inheritance diagram for cv::stereo::StereoBinarySGBM:",
    "local": "cv:：stereo:：StereoBinarySGBM的继承关系图："
  },
  {
    "origin": "Public Types",
    "local": "公共类型"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "&#160;Public Types inherited from",
    "local": "&#160;继承自的公共类型"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= (1 &lt;&lt; DISP_SHIFT)",
    "local": "=（1&lt；）信息技术；显示（u移位）"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "Public Member Functions",
    "local": "公共成员职能"
  },
  {
    "origin": "&#160;Public Member Functions inherited from",
    "local": "&#160;公共成员函数继承自"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "left,",
    "local": "左边，"
  },
  {
    "origin": "right,",
    "local": "正确的，"
  },
  {
    "origin": "Computes disparity map for the specified stereo pair.",
    "local": "计算指定立体对的视差贴图。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&#160;Public Member Functions inherited from",
    "local": "&#160;公共成员函数继承自"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Clears the algorithm state.",
    "local": "清除算法状态。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "Returns true if the",
    "local": "如果"
  },
  {
    "origin": "is empty (e.g. in the very beginning or after unsuccessful read.",
    "local": "为空（例如，在最开始或读取失败后）。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual",
    "local": "事实上的"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;fn)",
    "local": "&amp；（fn）"
  },
  {
    "origin": "Reads algorithm parameters from a file storage.",
    "local": "从文件存储器中读取算法参数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;filename) const",
    "local": "&amp；文件名）常量"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;fs) const",
    "local": "&amp；（f） 常数"
  },
  {
    "origin": "Stores algorithm parameters in a file storage.",
    "local": "将算法参数存储在文件存储器中。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;fs, const",
    "local": "&gt；gt；amp；fs，常数"
  },
  {
    "origin": "&amp;name=",
    "local": "&amp；姓名="
  },
  {
    "origin": "()) const",
    "local": "（））常数"
  },
  {
    "origin": "simplified API for language bindings This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "语言绑定的简化API这是一个重载的成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Static Public Member Functions",
    "local": "静态公共成员函数"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(int minDisparity, int numDisparities, int blockSize, int P1=100, int P2=1000, int disp12MaxDiff=1, int preFilterCap=0, int uniquenessRatio=5, int speckleWindowSize=400, int speckleRange=200, int mode=",
    "local": "（int minDisparity，int numDisparities，int blockSize，int P1=100，int P2=1000，int disp12MaxDiff=1，int preFilterCap=0，int uniquenessRatio=5，int spoklewindowsize=400，int spoklerange=200，int mode）="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Creates",
    "local": "创建"
  },
  {
    "origin": "object.",
    "local": "对象。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&#160;Static Public Member Functions inherited from",
    "local": "&#160;继承自的静态公共成员函数"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;filename, const",
    "local": "&amp；文件名，常量"
  },
  {
    "origin": "&amp;objname=",
    "local": "&amp；对象名="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Loads algorithm from the file.",
    "local": "从文件加载算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;strModel, const",
    "local": "&amp；strModel，常量"
  },
  {
    "origin": "&amp;objname=",
    "local": "&amp；对象名="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Loads algorithm from a String.",
    "local": "从字符串加载算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;fn)",
    "local": "&amp；（fn）"
  },
  {
    "origin": "Reads algorithm from the file node.",
    "local": "从文件节点读取算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Additional Inherited Members",
    "local": "其他继承成员"
  },
  {
    "origin": "&#160;Protected Member Functions inherited from",
    "local": "&#160;继承自的受保护成员函数"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;fs) const",
    "local": "&amp；（f） 常数"
  },
  {
    "origin": "Detailed Description",
    "local": "详细说明"
  },
  {
    "origin": "The class implements the modified H. Hirschmuller algorithm",
    "local": "类实现了修改后的H。赫氏算法"
  },
  {
    "origin": "that differs from the original one as follows:",
    "local": "与原来的不同之处如下："
  },
  {
    "origin": "By default, the algorithm is single-pass, which means that you consider only 5 directions instead of 8. Set mode=",
    "local": "默认情况下，算法是单通道，这意味着您只考虑5个方向，而不是8.Set模式="
  },
  {
    "origin": "in createStereoSGBM to run the full variant of the algorithm but beware that it may consume a lot of memory.",
    "local": "在createGBM中运行算法的完整变体，但要注意它可能会消耗大量内存。"
  },
  {
    "origin": "The algorithm matches blocks, not individual pixels. Though, setting blockSize=1 reduces the blocks to single pixels.",
    "local": "该算法匹配块，而不是单个像素。不过，设置blockSize=1会将块减少为单个像素。"
  },
  {
    "origin": "Mutual information cost function is not implemented. Instead, a simpler Birchfield-Tomasi sub-pixel metric from",
    "local": "互信息成本函数未实现。相反，一个更简单的Birchfield-Tomasi亚像素度量"
  },
  {
    "origin": "is used. Though, the color images are supported as well.",
    "local": "已使用。不过，也支持彩色图像。"
  },
  {
    "origin": "Some pre- and post- processing steps from K. Konolige algorithm",
    "local": "从K。Konolige算法"
  },
  {
    "origin": "are included, for example: pre-filtering (",
    "local": "包括：预过滤("
  },
  {
    "origin": "type) and post-filtering (uniqueness check, quadratic interpolation and speckle filtering).",
    "local": "类型）和后滤波（唯一性检查、二次插值和斑点滤波）。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "(Python) An example illustrating the use of the",
    "local": "（Python）说明"
  },
  {
    "origin": "matching algorithm can be found at opencv_source_code/samples/python2/stereo_match.py",
    "local": "匹配算法可以在opencv\\u source\\u code/samples/python2/stereo\\u match.py中找到"
  },
  {
    "origin": "Member Enumeration Documentation",
    "local": "成员枚举文档"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "anonymous enum",
    "local": "匿名枚举"
  },
  {
    "origin": "anonymous enum",
    "local": "匿名枚举"
  },
  {
    "origin": "Enumerator",
    "local": "枚举器"
  },
  {
    "origin": "Member Function Documentation",
    "local": "成员功能文档"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "create()",
    "local": "创建（）"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; cv::stereo::StereoBinarySGBM::create",
    "local": "&燃气轮机；cv:：stereo:：StereoBinarySGBM:：创建"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "minDisparity",
    "local": "最小"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "numDisparities",
    "local": "数字稀疏性"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "blockSize",
    "local": "块大小"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "P1",
    "local": "第1页"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "P2",
    "local": "第2页"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "disp12MaxDiff",
    "local": "disp12MaxDiff公司"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "preFilterCap",
    "local": "预滤器盖"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "uniquenessRatio",
    "local": "独特的"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "speckleWindowSize",
    "local": "斑点窗"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "speckleRange",
    "local": "散斑范围"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mode",
    "local": "模式"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "Creates",
    "local": "创建"
  },
  {
    "origin": "object.",
    "local": "对象。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "minDisparity",
    "local": "最小"
  },
  {
    "origin": "Minimum possible disparity value. Normally, it is zero but sometimes rectification algorithms can shift images, so this parameter needs to be adjusted accordingly.",
    "local": "最小可能差异值。正常情况下，它是零，但有时校正算法可以移动图像，所以这个参数需要相应地调整。"
  },
  {
    "origin": "numDisparities",
    "local": "数字稀疏性"
  },
  {
    "origin": "Maximum disparity minus minimum disparity. The value is always greater than zero. In the current implementation, this parameter must be divisible by 16.",
    "local": "最大视差减去最小视差。该值始终大于零。在当前的实现中，这个参数必须能被16整除。"
  },
  {
    "origin": "blockSize",
    "local": "块大小"
  },
  {
    "origin": "Matched block size. It must be an odd number &gt;=1 . Normally, it should be somewhere in the 3..11 range.",
    "local": "匹配的块大小。它必须是奇数&gt=1 . 通常，它应该在3..11范围内。"
  },
  {
    "origin": "P1",
    "local": "第1页"
  },
  {
    "origin": "The first parameter controlling the disparity smoothness.This parameter is used for the case of slanted surfaces (not fronto parallel).",
    "local": "控制视差平滑度的第一个参数。此参数用于倾斜曲面（非正面平行）的情况。"
  },
  {
    "origin": "P2",
    "local": "第2页"
  },
  {
    "origin": "The second parameter controlling the disparity smoothness.This parameter is used for \"solving\" the depth discontinuities problem. The larger the values are, the smoother the disparity is. P1 is the penalty on the disparity change by plus or minus 1 between neighbor pixels. P2 is the penalty on the disparity change by more than 1 between neighbor pixels. The algorithm requires P2 &gt; P1 . See stereo_match.cpp sample where some reasonably good P1 and P2 values are shown (like 8*number_of_image_channels*SADWindowSize*SADWindowSize and 32*number_of_image_channels*SADWindowSize*SADWindowSize , respectively).",
    "local": "控制视差平滑度的第二个参数。这个参数用于“解决”深度不连续性问题。值越大，视差越平滑。P1是相邻像素之间视差变化的正负1惩罚。P2是相邻像素之间视差变化超过1的惩罚。算法需要P2&gt；第1页。请参见stereo\\u match.cpp示例，其中显示了一些相当好的P1和P2值（例如分别为8*number\\u of \\u image\\u channels*sadWindowsSize*sadWindowsSize和32*number\\u of \\u image\\u channels*sadWindowsSize*sadWindowsSize）。"
  },
  {
    "origin": "disp12MaxDiff",
    "local": "disp12MaxDiff公司"
  },
  {
    "origin": "Maximum allowed difference (in integer pixel units) in the left-right disparity check. Set it to a non-positive value to disable the check.",
    "local": "左右视差检查中允许的最大差值（整数像素单位）。将其设置为非正值以禁用检查。"
  },
  {
    "origin": "preFilterCap",
    "local": "预滤器盖"
  },
  {
    "origin": "Truncation value for the prefiltered image pixels. The algorithm first computes x-derivative at each pixel and clips its value by [-preFilterCap, preFilterCap] interval. The result values are passed to the Birchfield-Tomasi pixel cost function.",
    "local": "预滤波图像像素的截断值。该算法首先计算每个像素的x-导数，并按[-preFilterCap，preFilterCap]间隔剪裁其值。结果值被传递给Birchfield-Tomasi像素代价函数。"
  },
  {
    "origin": "uniquenessRatio",
    "local": "独特的"
  },
  {
    "origin": "Margin in percentage by which the best (minimum) computed cost function value should \"win\" the second best value to consider the found match correct. Normally, a value within the 5-15 range is good enough.",
    "local": "最佳（最小）计算成本函数值应“赢得”第二个最佳值以认为找到的匹配正确的百分比。通常，5-15范围内的值就足够了。"
  },
  {
    "origin": "speckleWindowSize",
    "local": "斑点窗"
  },
  {
    "origin": "Maximum size of smooth disparity regions to consider their noise speckles and invalidate. Set it to 0 to disable speckle filtering. Otherwise, set it somewhere in the 50-200 range.",
    "local": "平滑视差区域的最大尺寸要考虑其噪声斑点和失效。将其设置为0以禁用斑点过滤。否则，将其设置在50-200范围内。"
  },
  {
    "origin": "speckleRange",
    "local": "散斑范围"
  },
  {
    "origin": "Maximum disparity variation within each connected component. If you do speckle filtering, set the parameter to a positive value, it will be implicitly multiplied by 16. Normally, 1 or 2 is good enough.",
    "local": "每个连接组件内的最大视差变化。如果你做斑点过滤，设置参数为正值，它会隐式地乘以16。通常，1或2就足够了。"
  },
  {
    "origin": "mode",
    "local": "模式"
  },
  {
    "origin": "Set it to",
    "local": "设置为"
  },
  {
    "origin": "to run the full-scale two-pass dynamic programming algorithm. It will consume O(W*H*numDisparities) bytes, which is large for 640x480 stereo and huge for HD-size pictures. By default, it is set to false .",
    "local": "运行满标度二次通过动态规划算法。它将消耗O（W*H*numDisparities）字节，这对于640x480立体声来说是很大的，对于高清大小的图片来说是巨大的。默认情况下，它设置为false。"
  },
  {
    "origin": "The first constructor initializes",
    "local": "第一个构造函数初始化"
  },
  {
    "origin": "with all the default parameters. So, you only have to set StereoSGBM::numDisparities at minimum. The second constructor enables you to set each parameter to a custom value.",
    "local": "使用所有默认参数。因此，您只需将StereoSGBM:：numDisparities设置为最小值。第二个构造函数允许您将每个参数设置为自定义值。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "getBinaryKernelType()",
    "local": "获取二进制文件"
  },
  {
    "origin": "virtual int cv::stereo::StereoBinarySGBM::getBinaryKernelType",
    "local": "虚拟int cv:：stereo:：StereoBinarySGBM:：getBinaryKernelType"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "getMode()",
    "local": "获取模式（）"
  },
  {
    "origin": "virtual int cv::stereo::StereoBinarySGBM::getMode",
    "local": "虚拟int cv:：stereo:：StereoBinarySGBM:：getMode"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "getP1()",
    "local": "getP1（）"
  },
  {
    "origin": "virtual int cv::stereo::StereoBinarySGBM::getP1",
    "local": "虚拟int cv：：立体声：：立体声二进制sgbm：：getP1"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "getP2()",
    "local": "getP2（）"
  },
  {
    "origin": "virtual int cv::stereo::StereoBinarySGBM::getP2",
    "local": "虚拟int cv：：立体声：：立体声二进制sgbm：：getP2"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "getPreFilterCap()",
    "local": "getPreFilterCap（）"
  },
  {
    "origin": "virtual int cv::stereo::StereoBinarySGBM::getPreFilterCap",
    "local": "虚拟int cv:：stereo:：StereoBinarySGBM:：getPreFilterCap"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "getSpekleRemovalTechnique()",
    "local": "getspekleremovaltechnology（）"
  },
  {
    "origin": "virtual int cv::stereo::StereoBinarySGBM::getSpekleRemovalTechnique",
    "local": "虚拟int cv:：stereo:：StereoBinarySGBM:：getspekleremovaltechnology"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "getSubPixelInterpolationMethod()",
    "local": "getSubPixelInterpolationMethod（）"
  },
  {
    "origin": "virtual int cv::stereo::StereoBinarySGBM::getSubPixelInterpolationMethod",
    "local": "虚拟int cv:：stereo:：StereoBinarySGBM:：getSubPixelInterpolationMethod"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "getUniquenessRatio()",
    "local": "getUniquenessRatio（）"
  },
  {
    "origin": "virtual int cv::stereo::StereoBinarySGBM::getUniquenessRatio",
    "local": "虚拟int cv:：stereo:：StereoBinarySGBM:：getUniquenessRatio"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "setBinaryKernelType()",
    "local": "setBinaryKernelType（）"
  },
  {
    "origin": "virtual void cv::stereo::StereoBinarySGBM::setBinaryKernelType",
    "local": "虚空cv:：stereo:：StereoBinarySGBM:：setBinaryKernelType"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "value",
    "local": "价值"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "setMode()",
    "local": "设置模式（）"
  },
  {
    "origin": "virtual void cv::stereo::StereoBinarySGBM::setMode",
    "local": "虚空cv:：stereo:：StereoBinarySGBM:：setMode"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "mode",
    "local": "模式"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "setP1()",
    "local": "setP1（）"
  },
  {
    "origin": "virtual void cv::stereo::StereoBinarySGBM::setP1",
    "local": "虚空cv:：stereo:：StereoBinarySGBM:：setP1"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "P1",
    "local": "第1页"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "setP2()",
    "local": "setP2（）"
  },
  {
    "origin": "virtual void cv::stereo::StereoBinarySGBM::setP2",
    "local": "虚空cv:：stereo:：StereoBinarySGBM:：setP2"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "P2",
    "local": "第2页"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "setPreFilterCap()",
    "local": "setPreFilterCap（）"
  },
  {
    "origin": "virtual void cv::stereo::StereoBinarySGBM::setPreFilterCap",
    "local": "虚空cv:：stereo:：StereoBinarySGBM:：setPreFilterCap"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "preFilterCap",
    "local": "预滤器盖"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "setSpekleRemovalTechnique()",
    "local": "设置清除技术（）"
  },
  {
    "origin": "virtual void cv::stereo::StereoBinarySGBM::setSpekleRemovalTechnique",
    "local": "虚空cv:：stereo:：StereoBinarySGBM:：SetSpekleRemovalTechnology"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "factor",
    "local": "因素"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "setSubPixelInterpolationMethod()",
    "local": "setSubPixelInterpolationMethod（）"
  },
  {
    "origin": "virtual void cv::stereo::StereoBinarySGBM::setSubPixelInterpolationMethod",
    "local": "虚空cv:：stereo:：StereoBinarySGBM:：setSubPixelInterpolationMethod"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "value",
    "local": "价值"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "setUniquenessRatio()",
    "local": "设置唯一比率（）"
  },
  {
    "origin": "virtual void cv::stereo::StereoBinarySGBM::setUniquenessRatio",
    "local": "虚空cv:：stereo:：StereoBinarySGBM:：setUniquenessRatio"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "uniquenessRatio",
    "local": "独特的"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": "此类的文档是从以下文件生成的："
  },
  {
    "origin": "opencv2/",
    "local": "打开CV2/"
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:48 for OpenCV by &#160;",
    "local": "2021年4月2日星期五11:36:48为OpenCV生成，&#160；"
  }
]