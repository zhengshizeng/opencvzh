[
  {
    "origin": "OpenCV: cv::QRCodeDetector Class Reference",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "Protected Attributes",
    "local": ""
  },
  {
    "origin": "List of all members",
    "local": ""
  },
  {
    "origin": "cv::QRCodeDetector Class Reference",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "std::string",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img,",
    "local": ""
  },
  {
    "origin": "points,",
    "local": ""
  },
  {
    "origin": "straight_qrcode=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Decodes QR code in image once it's found by the",
    "local": ""
  },
  {
    "origin": "method.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img,",
    "local": ""
  },
  {
    "origin": "points,",
    "local": ""
  },
  {
    "origin": "straight_qrcode=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Decodes QR code on a curved surface in image once it's found by the",
    "local": ""
  },
  {
    "origin": "method.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img,",
    "local": ""
  },
  {
    "origin": "points, std::vector&lt; std::string &gt; &amp;decoded_info,",
    "local": ""
  },
  {
    "origin": "straight_qrcode=",
    "local": ""
  },
  {
    "origin": "()) const",
    "local": ""
  },
  {
    "origin": "Decodes QR codes in image once it's found by the",
    "local": ""
  },
  {
    "origin": "method.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img,",
    "local": ""
  },
  {
    "origin": "points) const",
    "local": ""
  },
  {
    "origin": "Detects QR code in image and returns the quadrangle containing the code.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "std::string",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img,",
    "local": ""
  },
  {
    "origin": "points=",
    "local": ""
  },
  {
    "origin": "(),",
    "local": ""
  },
  {
    "origin": "straight_qrcode=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Both detects and decodes QR code.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "std::string",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img,",
    "local": ""
  },
  {
    "origin": "points=",
    "local": ""
  },
  {
    "origin": "(),",
    "local": ""
  },
  {
    "origin": "straight_qrcode=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Both detects and decodes QR code on a curved surface.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img, std::vector&lt; std::string &gt; &amp;decoded_info,",
    "local": ""
  },
  {
    "origin": "points=",
    "local": ""
  },
  {
    "origin": "(),",
    "local": ""
  },
  {
    "origin": "straight_qrcode=",
    "local": ""
  },
  {
    "origin": "()) const",
    "local": ""
  },
  {
    "origin": "Both detects and decodes QR codes.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img,",
    "local": ""
  },
  {
    "origin": "points) const",
    "local": ""
  },
  {
    "origin": "Detects QR codes in image and returns the vector of the quadrangles containing the codes.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(double epsX)",
    "local": ""
  },
  {
    "origin": "sets the epsilon used during the horizontal scan of QR code stop marker detection.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(double epsY)",
    "local": ""
  },
  {
    "origin": "sets the epsilon used during the vertical scan of QR code stop marker detection.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Protected Attributes",
    "local": ""
  },
  {
    "origin": "&lt; Impl &gt;",
    "local": ""
  },
  {
    "origin": "Constructor &amp; Destructor Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "QRCodeDetector()",
    "local": ""
  },
  {
    "origin": "cv::QRCodeDetector::QRCodeDetector",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "&lt;QRCodeDetector object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.QRCodeDetector(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "~QRCodeDetector()",
    "local": ""
  },
  {
    "origin": "cv::QRCodeDetector::~QRCodeDetector",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Member Function Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "decode()",
    "local": ""
  },
  {
    "origin": "std::string cv::QRCodeDetector::decode",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "points",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "straight_qrcode",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval, straight_qrcode",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.QRCodeDetector.decode(",
    "local": ""
  },
  {
    "origin": "img, points[, straight_qrcode]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Decodes QR code in image once it's found by the",
    "local": ""
  },
  {
    "origin": "method.",
    "local": ""
  },
  {
    "origin": "Returns UTF8-encoded output string or empty string if the code cannot be decoded.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "grayscale or color (BGR) image containing QR code.",
    "local": ""
  },
  {
    "origin": "points",
    "local": ""
  },
  {
    "origin": "Quadrangle vertices found by",
    "local": ""
  },
  {
    "origin": "method (or some other algorithm).",
    "local": ""
  },
  {
    "origin": "straight_qrcode",
    "local": ""
  },
  {
    "origin": "The optional output image containing rectified and binarized QR code",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "decodeCurved()",
    "local": ""
  },
  {
    "origin": "cv::QRCodeDetector::decodeCurved",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "points",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "straight_qrcode",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval, straight_qrcode",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.QRCodeDetector.decodeCurved(",
    "local": ""
  },
  {
    "origin": "img, points[, straight_qrcode]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Decodes QR code on a curved surface in image once it's found by the",
    "local": ""
  },
  {
    "origin": "method.",
    "local": ""
  },
  {
    "origin": "Returns UTF8-encoded output string or empty string if the code cannot be decoded.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "grayscale or color (BGR) image containing QR code.",
    "local": ""
  },
  {
    "origin": "points",
    "local": ""
  },
  {
    "origin": "Quadrangle vertices found by",
    "local": ""
  },
  {
    "origin": "method (or some other algorithm).",
    "local": ""
  },
  {
    "origin": "straight_qrcode",
    "local": ""
  },
  {
    "origin": "The optional output image containing rectified and binarized QR code",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "decodeMulti()",
    "local": ""
  },
  {
    "origin": "bool cv::QRCodeDetector::decodeMulti",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "points",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt; std::string &gt; &amp;",
    "local": ""
  },
  {
    "origin": "decoded_info",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "straight_qrcode",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval, decoded_info, straight_qrcode",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.QRCodeDetector.decodeMulti(",
    "local": ""
  },
  {
    "origin": "img, points[, straight_qrcode]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Decodes QR codes in image once it's found by the",
    "local": ""
  },
  {
    "origin": "method.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "grayscale or color (BGR) image containing QR codes.",
    "local": ""
  },
  {
    "origin": "decoded_info",
    "local": ""
  },
  {
    "origin": "UTF8-encoded output vector of string or empty vector of string if the codes cannot be decoded.",
    "local": ""
  },
  {
    "origin": "points",
    "local": ""
  },
  {
    "origin": "vector of Quadrangle vertices found by",
    "local": ""
  },
  {
    "origin": "method (or some other algorithm).",
    "local": ""
  },
  {
    "origin": "straight_qrcode",
    "local": ""
  },
  {
    "origin": "The optional output vector of images containing rectified and binarized QR codes",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "detect()",
    "local": ""
  },
  {
    "origin": "bool cv::QRCodeDetector::detect",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "points",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval, points",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.QRCodeDetector.detect(",
    "local": ""
  },
  {
    "origin": "img[, points]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Detects QR code in image and returns the quadrangle containing the code.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "grayscale or color (BGR) image containing (or not) QR code.",
    "local": ""
  },
  {
    "origin": "points",
    "local": ""
  },
  {
    "origin": "Output vector of vertices of the minimum-area quadrangle containing the code.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "detectAndDecode()",
    "local": ""
  },
  {
    "origin": "std::string cv::QRCodeDetector::detectAndDecode",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "points",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "straight_qrcode",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval, points, straight_qrcode",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.QRCodeDetector.detectAndDecode(",
    "local": ""
  },
  {
    "origin": "img[, points[, straight_qrcode]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Both detects and decodes QR code.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "grayscale or color (BGR) image containing QR code.",
    "local": ""
  },
  {
    "origin": "points",
    "local": ""
  },
  {
    "origin": "optional output array of vertices of the found QR code quadrangle. Will be empty if not found.",
    "local": ""
  },
  {
    "origin": "straight_qrcode",
    "local": ""
  },
  {
    "origin": "The optional output image containing rectified and binarized QR code",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "detectAndDecodeCurved()",
    "local": ""
  },
  {
    "origin": "std::string cv::QRCodeDetector::detectAndDecodeCurved",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "points",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "straight_qrcode",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval, points, straight_qrcode",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.QRCodeDetector.detectAndDecodeCurved(",
    "local": ""
  },
  {
    "origin": "img[, points[, straight_qrcode]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Both detects and decodes QR code on a curved surface.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "grayscale or color (BGR) image containing QR code.",
    "local": ""
  },
  {
    "origin": "points",
    "local": ""
  },
  {
    "origin": "optional output array of vertices of the found QR code quadrangle. Will be empty if not found.",
    "local": ""
  },
  {
    "origin": "straight_qrcode",
    "local": ""
  },
  {
    "origin": "The optional output image containing rectified and binarized QR code",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "detectAndDecodeMulti()",
    "local": ""
  },
  {
    "origin": "bool cv::QRCodeDetector::detectAndDecodeMulti",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt; std::string &gt; &amp;",
    "local": ""
  },
  {
    "origin": "decoded_info",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "points",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "straight_qrcode",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval, decoded_info, points, straight_qrcode",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.QRCodeDetector.detectAndDecodeMulti(",
    "local": ""
  },
  {
    "origin": "img[, points[, straight_qrcode]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Both detects and decodes QR codes.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "grayscale or color (BGR) image containing QR codes.",
    "local": ""
  },
  {
    "origin": "decoded_info",
    "local": ""
  },
  {
    "origin": "UTF8-encoded output vector of string or empty vector of string if the codes cannot be decoded.",
    "local": ""
  },
  {
    "origin": "points",
    "local": ""
  },
  {
    "origin": "optional output vector of vertices of the found QR code quadrangles. Will be empty if not found.",
    "local": ""
  },
  {
    "origin": "straight_qrcode",
    "local": ""
  },
  {
    "origin": "The optional output vector of images containing rectified and binarized QR codes",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "detectMulti()",
    "local": ""
  },
  {
    "origin": "bool cv::QRCodeDetector::detectMulti",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "points",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval, points",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.QRCodeDetector.detectMulti(",
    "local": ""
  },
  {
    "origin": "img[, points]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Detects QR codes in image and returns the vector of the quadrangles containing the codes.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "grayscale or color (BGR) image containing (or not) QR codes.",
    "local": ""
  },
  {
    "origin": "points",
    "local": ""
  },
  {
    "origin": "Output vector of vector of vertices of the minimum-area quadrangle containing the codes.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "setEpsX()",
    "local": ""
  },
  {
    "origin": "void cv::QRCodeDetector::setEpsX",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "epsX",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.QRCodeDetector.setEpsX(",
    "local": ""
  },
  {
    "origin": "epsX",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "sets the epsilon used during the horizontal scan of QR code stop marker detection.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "epsX",
    "local": ""
  },
  {
    "origin": "Epsilon neighborhood, which allows you to determine the horizontal pattern of the scheme 1:1:3:1:1 according to QR code standard.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "setEpsY()",
    "local": ""
  },
  {
    "origin": "void cv::QRCodeDetector::setEpsY",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "epsY",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.QRCodeDetector.setEpsY(",
    "local": ""
  },
  {
    "origin": "epsY",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "sets the epsilon used during the vertical scan of QR code stop marker detection.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "epsY",
    "local": ""
  },
  {
    "origin": "Epsilon neighborhood, which allows you to determine the vertical pattern of the scheme 1:1:3:1:1 according to QR code standard.",
    "local": ""
  },
  {
    "origin": "Member Data Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "p",
    "local": ""
  },
  {
    "origin": "&lt;Impl&gt; cv::QRCodeDetector::p",
    "local": ""
  },
  {
    "origin": "protected",
    "local": ""
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": ""
  },
  {
    "origin": "opencv2/",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:43 for OpenCV by",
    "local": ""
  }
]