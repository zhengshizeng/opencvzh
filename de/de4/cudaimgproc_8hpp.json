[
  {
    "origin": "OpenCV: opencv2/cudaimgproc.hpp File Reference",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Namespaces",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "cudaimgproc.hpp File Reference",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Base class for Canny Edge Detector. :",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Base class for Contrast Limited Adaptive Histogram Equalization. :",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Base class for Cornerness Criteria computation. :",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Base class for Corners Detector. :",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Base class for circles detector algorithm. :",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Base class for lines detector algorithm. :",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Base class for line segments detector algorithm. :",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Base class for Template Matching. :",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Namespaces",
    "local": ""
  },
  {
    "origin": "\"black box\" representation of the file storage associated with a file on disk.",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= COLOR_BayerRG2BGR_MHT,",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= COLOR_BayerGR2BGR_MHT,",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= COLOR_BayerBG2BGR_MHT,",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= COLOR_BayerGB2BGR_MHT,",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "(InputArray img1, InputArray img2, OutputArray dst, int alpha_op, Stream &amp;stream=Stream::Null())",
    "local": ""
  },
  {
    "origin": "Composites two images using alpha opacity values contained in each image.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(InputArray src, OutputArray dst, int kernel_size, float sigma_color, float sigma_spatial, int borderMode=BORDER_DEFAULT, Stream &amp;stream=Stream::Null())",
    "local": ""
  },
  {
    "origin": "Performs bilateral filtering of passed image.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(InputArray img1, InputArray img2, InputArray weights1, InputArray weights2, OutputArray result, Stream &amp;stream=Stream::Null())",
    "local": ""
  },
  {
    "origin": "Performs linear blending of two images.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(InputArray src, OutputArray hist, Stream &amp;stream=Stream::Null())",
    "local": ""
  },
  {
    "origin": "Calculates histogram for one channel 8-bit image.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(InputArray src, InputArray mask, OutputArray hist, Stream &amp;stream=Stream::Null())",
    "local": ""
  },
  {
    "origin": "Calculates histogram for one channel 8-bit image confined in given mask.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(double low_thresh, double high_thresh, int apperture_size=3, bool L2gradient=false)",
    "local": ""
  },
  {
    "origin": "Creates implementation for",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(double clipLimit=40.0, Size tileGridSize=Size(8, 8))",
    "local": ""
  },
  {
    "origin": "Creates implementation for",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Creates implementation for generalized hough transform from",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Creates implementation for generalized hough transform from",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int srcType, int maxCorners=1000, double qualityLevel=0.01, double minDistance=0.0, int blockSize=3, bool useHarrisDetector=false, double harrisK=0.04)",
    "local": ""
  },
  {
    "origin": "Creates implementation for",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int srcType, int blockSize, int ksize, double k, int borderType=BORDER_REFLECT101)",
    "local": ""
  },
  {
    "origin": "Creates implementation for Harris cornerness criteria.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(float dp, float minDist, int cannyThreshold, int votesThreshold, int minRadius, int maxRadius, int maxCircles=4096)",
    "local": ""
  },
  {
    "origin": "Creates implementation for",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(float rho, float theta, int threshold, bool doSort=false, int maxLines=4096)",
    "local": ""
  },
  {
    "origin": "Creates implementation for",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(float rho, float theta, int minLineLength, int maxLineGap, int maxLines=4096)",
    "local": ""
  },
  {
    "origin": "Creates implementation for",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int srcType, int blockSize, int ksize, int borderType=BORDER_REFLECT101)",
    "local": ""
  },
  {
    "origin": "Creates implementation for the minimum eigen value of a 2x2 derivative covariation matrix (the cornerness criteria).",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int srcType, int method, Size user_block_size=Size())",
    "local": ""
  },
  {
    "origin": "Creates implementation for",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(InputArray src, OutputArray dst, int code, int dcn=0, Stream &amp;stream=Stream::Null())",
    "local": ""
  },
  {
    "origin": "Converts an image from one color space to another.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(InputArray src, OutputArray dst, int code, int dcn=-1, Stream &amp;stream=Stream::Null())",
    "local": ""
  },
  {
    "origin": "Converts an image from Bayer pattern to RGB or grayscale.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(InputArray src, OutputArray dst, Stream &amp;stream=Stream::Null())",
    "local": ""
  },
  {
    "origin": "Equalizes the histogram of a grayscale image.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(OutputArray levels, int nLevels, int lowerLevel, int upperLevel, Stream &amp;stream=Stream::Null())",
    "local": ""
  },
  {
    "origin": "Computes levels with even distribution.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(InputArray src, OutputArray dst, bool forward=true, Stream &amp;stream=Stream::Null())",
    "local": ""
  },
  {
    "origin": "Routines for correcting image color gamma.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(InputArray src, OutputArray hist, int histSize, int lowerLevel, int upperLevel, Stream &amp;stream=Stream::Null())",
    "local": ""
  },
  {
    "origin": "Calculates a histogram with evenly distributed bins.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(InputArray src, GpuMat hist[4], int histSize[4], int lowerLevel[4], int upperLevel[4], Stream &amp;stream=Stream::Null())",
    "local": ""
  },
  {
    "origin": "(InputArray src, OutputArray hist, InputArray levels, Stream &amp;stream=Stream::Null())",
    "local": ""
  },
  {
    "origin": "Calculates a histogram with bins determined by the levels array.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(InputArray src, GpuMat hist[4], const GpuMat levels[4], Stream &amp;stream=Stream::Null())",
    "local": ""
  },
  {
    "origin": "(InputArray src, OutputArray dst, int sp, int sr, TermCriteria criteria=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS, 5, 1), Stream &amp;stream=Stream::Null())",
    "local": ""
  },
  {
    "origin": "Performs mean-shift filtering for each point of the source image.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(InputArray src, OutputArray dstr, OutputArray dstsp, int sp, int sr, TermCriteria criteria=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS, 5, 1), Stream &amp;stream=Stream::Null())",
    "local": ""
  },
  {
    "origin": "Performs a mean-shift procedure and stores information about processed points (their colors and positions) in two images.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(InputArray src, OutputArray dst, int sp, int sr, int minsize, TermCriteria criteria=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS, 5, 1), Stream &amp;stream=Stream::Null())",
    "local": ""
  },
  {
    "origin": "Performs a mean-shift segmentation of the source image and eliminates small segments.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(InputOutputArray image, const int dstOrder[4], Stream &amp;stream=Stream::Null())",
    "local": ""
  },
  {
    "origin": "Exchanges the color channels of an image in-place.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:33 for OpenCV by &#160;",
    "local": ""
  }
]