[
  {
    "origin": "OpenCV: cv::dnn::TextRecognitionModel Class Reference",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "List of all members",
    "local": ""
  },
  {
    "origin": "cv::dnn::TextRecognitionModel Class Reference",
    "local": ""
  },
  {
    "origin": "This class represents high-level API for text recognition networks.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Inheritance diagram for cv::dnn::TextRecognitionModel:",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;network)",
    "local": ""
  },
  {
    "origin": "Create Text Recognition model from deep learning network Call",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "after constructor to initialize the decoding method.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const std::string &amp;model, const std::string &amp;config=\"\")",
    "local": ""
  },
  {
    "origin": "Create text recognition model from network represented in one of the supported formats Call",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "after constructor to initialize the decoding method.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "const std::string &amp;",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Get the decoding method.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "const std::vector&lt; std::string &gt; &amp;",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Get the vocabulary for recognition.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "std::string",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "frame) const",
    "local": ""
  },
  {
    "origin": "Given the",
    "local": ""
  },
  {
    "origin": "frame, create input blob, run net and return recognition result.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "frame,",
    "local": ""
  },
  {
    "origin": "roiRects, std::vector&lt; std::string &gt; &amp;results) const",
    "local": ""
  },
  {
    "origin": "Given the",
    "local": ""
  },
  {
    "origin": "frame, create input blob, run net and return recognition result.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(const std::string &amp;decodeType)",
    "local": ""
  },
  {
    "origin": "Set the decoding method of translating the network output into string.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt; std::string &gt; &amp;vocabulary)",
    "local": ""
  },
  {
    "origin": "Set the vocabulary for recognition.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;)=default",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;&amp;)=default",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;model, const",
    "local": ""
  },
  {
    "origin": "&amp;config=\"\")",
    "local": ""
  },
  {
    "origin": "Create model from deep learning network represented in one of the supported formats. An order of",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "arguments does not matter.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;network)",
    "local": ""
  },
  {
    "origin": "Create model from deep learning network.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Impl *",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Impl &amp;",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;)=default",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;&amp;)=default",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "frame,",
    "local": ""
  },
  {
    "origin": "outs) const",
    "local": ""
  },
  {
    "origin": "Given the",
    "local": ""
  },
  {
    "origin": "frame, create input blob, run net and return the output",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(bool crop)",
    "local": ""
  },
  {
    "origin": "Set flag crop for frame.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Set mean value for frame.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(double scale=1.0, const",
    "local": ""
  },
  {
    "origin": "&amp;size=",
    "local": ""
  },
  {
    "origin": "(), const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "(), bool swapRB=false, bool crop=false)",
    "local": ""
  },
  {
    "origin": "Set preprocessing parameters for frame.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(double scale)",
    "local": ""
  },
  {
    "origin": "Set scalefactor value for frame.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;size)",
    "local": ""
  },
  {
    "origin": "Set input size for frame.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(int width, int height)",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(bool swapRB)",
    "local": ""
  },
  {
    "origin": "Set flag swapRB for frame.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "backendId)",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "targetId)",
    "local": ""
  },
  {
    "origin": "Additional Inherited Members",
    "local": ""
  },
  {
    "origin": "Protected Attributes inherited from",
    "local": ""
  },
  {
    "origin": "&lt; Impl &gt;",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "This class represents high-level API for text recognition networks.",
    "local": ""
  },
  {
    "origin": "allows to set params for preprocessing input image.",
    "local": ""
  },
  {
    "origin": "creates net from file with trained weights and config, sets preprocessing input, runs forward pass and return recognition result. For",
    "local": ""
  },
  {
    "origin": ", CRNN-CTC is supported.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Constructor &amp; Destructor Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "TextRecognitionModel()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "cv::dnn::TextRecognitionModel::TextRecognitionModel",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "&lt;dnn_TextRecognitionModel object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.dnn_TextRecognitionModel(",
    "local": ""
  },
  {
    "origin": "network",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;dnn_TextRecognitionModel object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.dnn_TextRecognitionModel(",
    "local": ""
  },
  {
    "origin": "model[, config]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "TextRecognitionModel()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "cv::dnn::TextRecognitionModel::TextRecognitionModel",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "network",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "&lt;dnn_TextRecognitionModel object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.dnn_TextRecognitionModel(",
    "local": ""
  },
  {
    "origin": "network",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;dnn_TextRecognitionModel object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.dnn_TextRecognitionModel(",
    "local": ""
  },
  {
    "origin": "model[, config]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Create Text Recognition model from deep learning network Call",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "after constructor to initialize the decoding method.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "network",
    "local": ""
  },
  {
    "origin": "object",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "TextRecognitionModel()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "cv::dnn::TextRecognitionModel::TextRecognitionModel",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const std::string &amp;",
    "local": ""
  },
  {
    "origin": "model",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const std::string &amp;",
    "local": ""
  },
  {
    "origin": "config",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "&lt;dnn_TextRecognitionModel object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.dnn_TextRecognitionModel(",
    "local": ""
  },
  {
    "origin": "network",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;dnn_TextRecognitionModel object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.dnn_TextRecognitionModel(",
    "local": ""
  },
  {
    "origin": "model[, config]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Create text recognition model from network represented in one of the supported formats Call",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "after constructor to initialize the decoding method.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "model",
    "local": ""
  },
  {
    "origin": "Binary file contains trained weights",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "config",
    "local": ""
  },
  {
    "origin": "Text file contains network configuration",
    "local": ""
  },
  {
    "origin": "Member Function Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getDecodeType()",
    "local": ""
  },
  {
    "origin": "const std::string&amp; cv::dnn::TextRecognitionModel::getDecodeType",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.dnn_TextRecognitionModel.getDecodeType(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Get the decoding method.",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "the decoding method",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getVocabulary()",
    "local": ""
  },
  {
    "origin": "const std::vector&lt;std::string&gt;&amp; cv::dnn::TextRecognitionModel::getVocabulary",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.dnn_TextRecognitionModel.getVocabulary(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Get the vocabulary for recognition.",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "vocabulary the associated vocabulary",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "recognize()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "std::string cv::dnn::TextRecognitionModel::recognize",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "frame",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.dnn_TextRecognitionModel.recognize(",
    "local": ""
  },
  {
    "origin": "frame",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "results",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.dnn_TextRecognitionModel.recognize(",
    "local": ""
  },
  {
    "origin": "frame, roiRects",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Given the",
    "local": ""
  },
  {
    "origin": "frame, create input blob, run net and return recognition result.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "frame",
    "local": ""
  },
  {
    "origin": "The input image",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "The text recognition result",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "recognize()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "void cv::dnn::TextRecognitionModel::recognize",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "frame",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "roiRects",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt; std::string &gt; &amp;",
    "local": ""
  },
  {
    "origin": "results",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.dnn_TextRecognitionModel.recognize(",
    "local": ""
  },
  {
    "origin": "frame",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "results",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.dnn_TextRecognitionModel.recognize(",
    "local": ""
  },
  {
    "origin": "frame, roiRects",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Given the",
    "local": ""
  },
  {
    "origin": "frame, create input blob, run net and return recognition result.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "frame",
    "local": ""
  },
  {
    "origin": "The input image",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "roiRects",
    "local": ""
  },
  {
    "origin": "List of text detection regions of interest (",
    "local": ""
  },
  {
    "origin": ", CV_32SC4). ROIs is be cropped as the network inputs",
    "local": ""
  },
  {
    "origin": "[out]",
    "local": ""
  },
  {
    "origin": "results",
    "local": ""
  },
  {
    "origin": "A set of text recognition results.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "setDecodeType()",
    "local": ""
  },
  {
    "origin": "&amp; cv::dnn::TextRecognitionModel::setDecodeType",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const std::string &amp;",
    "local": ""
  },
  {
    "origin": "decodeType",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.dnn_TextRecognitionModel.setDecodeType(",
    "local": ""
  },
  {
    "origin": "decodeType",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Set the decoding method of translating the network output into string.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "decodeType",
    "local": ""
  },
  {
    "origin": "The decoding method of translating the network output into string: {'CTC-greedy': greedy decoding for the output of CTC-based methods}",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "setVocabulary()",
    "local": ""
  },
  {
    "origin": "&amp; cv::dnn::TextRecognitionModel::setVocabulary",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const std::vector&lt; std::string &gt; &amp;",
    "local": ""
  },
  {
    "origin": "vocabulary",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.dnn_TextRecognitionModel.setVocabulary(",
    "local": ""
  },
  {
    "origin": "vocabulary",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Set the vocabulary for recognition.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "vocabulary",
    "local": ""
  },
  {
    "origin": "the associated vocabulary of the network.",
    "local": ""
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": ""
  },
  {
    "origin": "opencv2/dnn/",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:47 for OpenCV by",
    "local": ""
  }
]