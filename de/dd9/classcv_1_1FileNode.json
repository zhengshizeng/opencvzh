[
  {
    "origin": "OpenCV: cv::FileNode Class Reference",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Public Types",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions",
    "local": ""
  },
  {
    "origin": "Public Attributes",
    "local": ""
  },
  {
    "origin": "List of all members",
    "local": ""
  },
  {
    "origin": "cv::FileNode Class Reference",
    "local": ""
  },
  {
    "origin": "Â»",
    "local": ""
  },
  {
    "origin": "File Storage",
    "local": ""
  },
  {
    "origin": "class.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Public Types",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "= REAL,",
    "local": ""
  },
  {
    "origin": "= STR,",
    "local": ""
  },
  {
    "origin": "= 16,",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "type of the file storage node",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "The constructors.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*",
    "local": ""
  },
  {
    "origin": ", size_t",
    "local": ""
  },
  {
    "origin": ", size_t",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;node)",
    "local": ""
  },
  {
    "origin": "(FileStorage::Impl *",
    "local": ""
  },
  {
    "origin": ", size_t",
    "local": ""
  },
  {
    "origin": ", size_t",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "returns iterator pointing to the first node element",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "returns true if the node is empty",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "returns iterator pointing to the element following the last node element",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "returns true if the node is an integer",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "returns true if the node is a mapping",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "returns true if the node has a name",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "returns true if the node is a \"none\" object",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "returns true if the node is a floating-point number",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "returns true if the node is a sequence",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "returns true if the node is a text string",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Returns keys of a mapping node.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Simplified reading API to use with bindings.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "std::string",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "returns the node name or an empty string if the node is nameless",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "returns the node content as double",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "returns the node content as float",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "returns the node content as text string",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;node)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;nodename) const",
    "local": ""
  },
  {
    "origin": "Returns element of a mapping node or a sequence node.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const char *nodename) const",
    "local": ""
  },
  {
    "origin": "(int i) const",
    "local": ""
  },
  {
    "origin": "*",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "*",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "size_t",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "returns raw size of the",
    "local": ""
  },
  {
    "origin": "in bytes",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;fmt, void *vec, size_t len) const",
    "local": ""
  },
  {
    "origin": "Reads node elements to the buffer with the specified format.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Simplified reading API to use with bindings.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(int",
    "local": ""
  },
  {
    "origin": ", const void *value, int len=-1)",
    "local": ""
  },
  {
    "origin": "size_t",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "returns the number of elements in the node, if it is a sequence or mapping, or 1 otherwise.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "std::string",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Simplified reading API to use with bindings.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Returns type of the node.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions",
    "local": ""
  },
  {
    "origin": "static bool",
    "local": ""
  },
  {
    "origin": "(int flags)",
    "local": ""
  },
  {
    "origin": "static bool",
    "local": ""
  },
  {
    "origin": "(int flags)",
    "local": ""
  },
  {
    "origin": "static bool",
    "local": ""
  },
  {
    "origin": "(int flags)",
    "local": ""
  },
  {
    "origin": "static bool",
    "local": ""
  },
  {
    "origin": "(int flags)",
    "local": ""
  },
  {
    "origin": "static bool",
    "local": ""
  },
  {
    "origin": "(int flags)",
    "local": ""
  },
  {
    "origin": "Public Attributes",
    "local": ""
  },
  {
    "origin": "size_t",
    "local": ""
  },
  {
    "origin": "FileStorage::Impl *",
    "local": ""
  },
  {
    "origin": "size_t",
    "local": ""
  },
  {
    "origin": "Related Functions",
    "local": ""
  },
  {
    "origin": "(Note that these are not member functions.)",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;node, int &amp;value, int default_value)",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;node, float &amp;value, float default_value)",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;node, double &amp;value, double default_value)",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;node, std::string &amp;value, const std::string &amp;default_value)",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;node,",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ", const",
    "local": ""
  },
  {
    "origin": "&amp;default_mat=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;node,",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ", const",
    "local": ""
  },
  {
    "origin": "&amp;default_mat=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;node,",
    "local": ""
  },
  {
    "origin": "&amp;value, const",
    "local": ""
  },
  {
    "origin": "&amp;default_value)",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;node,",
    "local": ""
  },
  {
    "origin": "&amp;value, const",
    "local": ""
  },
  {
    "origin": "&amp;default_value)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;node,",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt; &amp;value, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt; &amp;default_value)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;node,",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt; &amp;value, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt; &amp;default_value)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;node,",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt; &amp;value, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt; &amp;default_value)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;node,",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt; &amp;value, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt; &amp;default_value)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;node,",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt; &amp;value, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt; &amp;default_value)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int cn&gt;",
    "local": ""
  },
  {
    "origin": "static void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;node,",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, cn &gt; &amp;value, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, cn &gt; &amp;default_value)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int m, int n&gt;",
    "local": ""
  },
  {
    "origin": "static void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;node,",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, m, n &gt; &amp;value, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, m, n &gt; &amp;default_matx=",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, m, n &gt;())",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;node,",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt; &amp;value, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt; &amp;default_value)",
    "local": ""
  },
  {
    "origin": "static void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;node,",
    "local": ""
  },
  {
    "origin": "&amp;value, const",
    "local": ""
  },
  {
    "origin": "&amp;default_value)",
    "local": ""
  },
  {
    "origin": "static void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;node, bool &amp;value, bool default_value)",
    "local": ""
  },
  {
    "origin": "static void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;node,",
    "local": ""
  },
  {
    "origin": "&amp;value,",
    "local": ""
  },
  {
    "origin": "default_value)",
    "local": ""
  },
  {
    "origin": "static void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;node,",
    "local": ""
  },
  {
    "origin": "&amp;value,",
    "local": ""
  },
  {
    "origin": "default_value)",
    "local": ""
  },
  {
    "origin": "static void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;node,",
    "local": ""
  },
  {
    "origin": "&amp;value,",
    "local": ""
  },
  {
    "origin": "default_value)",
    "local": ""
  },
  {
    "origin": "static void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;node, short &amp;value, short default_value)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;it, std::vector&lt; _Tp &gt; &amp;vec, size_t maxCount=(size_t) INT_MAX)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , typename std::enable_if&lt; std::is_enum&lt; _Tp &gt;::value &gt;::type * = nullptr&gt;",
    "local": ""
  },
  {
    "origin": "static void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;node, _Tp &amp;value, const _Tp &amp;default_value=static_cast&lt; _Tp &gt;(0))",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;node, std::vector&lt; _Tp &gt; &amp;vec, const std::vector&lt; _Tp &gt; &amp;default_value=std::vector&lt; _Tp &gt;())",
    "local": ""
  },
  {
    "origin": "static void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;node, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;vec, const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;default_value)",
    "local": ""
  },
  {
    "origin": "static void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;node, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;vec, const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;default_value)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;n, _Tp &amp;value)",
    "local": ""
  },
  {
    "origin": "Reads data from a file storage.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;n, std::vector&lt; _Tp &gt; &amp;vec)",
    "local": ""
  },
  {
    "origin": "Reads data from a file storage.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;n,",
    "local": ""
  },
  {
    "origin": "&amp;kpt)",
    "local": ""
  },
  {
    "origin": "Reads",
    "local": ""
  },
  {
    "origin": "from a file storage.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;n,",
    "local": ""
  },
  {
    "origin": "&amp;m)",
    "local": ""
  },
  {
    "origin": "Reads",
    "local": ""
  },
  {
    "origin": "from a file storage.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "File Storage",
    "local": ""
  },
  {
    "origin": "class.",
    "local": ""
  },
  {
    "origin": "The node is used to store each and every element of the file storage opened for reading. When XML/YAML file is read, it is first parsed and stored in the memory as a hierarchical collection of nodes. Each node can be a \"leaf\" that is contain a single number or a string, or be a collection of other nodes. There can be named collections (mappings) where each element has a name and it is accessed by a name, and ordered collections (sequences) where elements do not have names but rather accessed by index. Type of the file node can be determined using",
    "local": ""
  },
  {
    "origin": "method.",
    "local": ""
  },
  {
    "origin": "Note that file nodes are only used for navigating file storages opened for reading. When a file storage is opened for writing, no data is stored in memory after it is written.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Member Enumeration Documentation",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "anonymous enum",
    "local": ""
  },
  {
    "origin": "anonymous enum",
    "local": ""
  },
  {
    "origin": "type of the file storage node",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "NONE",
    "local": ""
  },
  {
    "origin": "empty node",
    "local": ""
  },
  {
    "origin": "INT",
    "local": ""
  },
  {
    "origin": "an integer",
    "local": ""
  },
  {
    "origin": "REAL",
    "local": ""
  },
  {
    "origin": "floating-point number",
    "local": ""
  },
  {
    "origin": "FLOAT",
    "local": ""
  },
  {
    "origin": "synonym or REAL",
    "local": ""
  },
  {
    "origin": "STR",
    "local": ""
  },
  {
    "origin": "text string in UTF-8 encoding",
    "local": ""
  },
  {
    "origin": "STRING",
    "local": ""
  },
  {
    "origin": "synonym for STR",
    "local": ""
  },
  {
    "origin": "SEQ",
    "local": ""
  },
  {
    "origin": "sequence",
    "local": ""
  },
  {
    "origin": "MAP",
    "local": ""
  },
  {
    "origin": "mapping",
    "local": ""
  },
  {
    "origin": "TYPE_MASK",
    "local": ""
  },
  {
    "origin": "FLOW",
    "local": ""
  },
  {
    "origin": "compact representation of a sequence or mapping. Used only by YAML writer",
    "local": ""
  },
  {
    "origin": "UNIFORM",
    "local": ""
  },
  {
    "origin": "UNIFORM is used only when reading",
    "local": ""
  },
  {
    "origin": "; FLOW is used only when writing. So they share the same bit.",
    "local": ""
  },
  {
    "origin": "if set, means that all the collection elements are numbers of the same type (real's or int's).",
    "local": ""
  },
  {
    "origin": "EMPTY",
    "local": ""
  },
  {
    "origin": "empty structure (sequence or mapping)",
    "local": ""
  },
  {
    "origin": "NAMED",
    "local": ""
  },
  {
    "origin": "the node has a name (i.e. it is element of a mapping).",
    "local": ""
  },
  {
    "origin": "Constructor &amp; Destructor Documentation",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "FileNode()",
    "local": ""
  },
  {
    "origin": "[1/4]",
    "local": ""
  },
  {
    "origin": "cv::FileNode::FileNode",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "&lt;FileNode object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.FileNode(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "The constructors.",
    "local": ""
  },
  {
    "origin": "These constructors are used to create a default file node, construct it from obsolete structures or from the another file node.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "FileNode()",
    "local": ""
  },
  {
    "origin": "[2/4]",
    "local": ""
  },
  {
    "origin": "cv::FileNode::FileNode",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "*",
    "local": ""
  },
  {
    "origin": "fs",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "size_t",
    "local": ""
  },
  {
    "origin": "blockIdx",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "size_t",
    "local": ""
  },
  {
    "origin": "ofs",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "&lt;FileNode object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.FileNode(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "fs",
    "local": ""
  },
  {
    "origin": "Pointer to the file storage structure.",
    "local": ""
  },
  {
    "origin": "blockIdx",
    "local": ""
  },
  {
    "origin": "Index of the memory block where the file node is stored",
    "local": ""
  },
  {
    "origin": "ofs",
    "local": ""
  },
  {
    "origin": "Offset in bytes from the beginning of the serialized storage",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "FileNode()",
    "local": ""
  },
  {
    "origin": "[3/4]",
    "local": ""
  },
  {
    "origin": "cv::FileNode::FileNode",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "node",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "&lt;FileNode object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.FileNode(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "node",
    "local": ""
  },
  {
    "origin": "File node to be used as initialization for the created file node.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "FileNode()",
    "local": ""
  },
  {
    "origin": "[4/4]",
    "local": ""
  },
  {
    "origin": "cv::FileNode::FileNode",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "FileStorage::Impl *",
    "local": ""
  },
  {
    "origin": "fs",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "size_t",
    "local": ""
  },
  {
    "origin": "blockIdx",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "size_t",
    "local": ""
  },
  {
    "origin": "ofs",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "&lt;FileNode object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.FileNode(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Member Function Documentation",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "begin()",
    "local": ""
  },
  {
    "origin": "cv::FileNode::begin",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns iterator pointing to the first node element",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "empty()",
    "local": ""
  },
  {
    "origin": "bool cv::FileNode::empty",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.FileNode.empty(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns true if the node is empty",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "end()",
    "local": ""
  },
  {
    "origin": "cv::FileNode::end",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns iterator pointing to the element following the last node element",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "isCollection()",
    "local": ""
  },
  {
    "origin": "static bool cv::FileNode::isCollection",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "flags",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "isEmptyCollection()",
    "local": ""
  },
  {
    "origin": "static bool cv::FileNode::isEmptyCollection",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "flags",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "isFlow()",
    "local": ""
  },
  {
    "origin": "static bool cv::FileNode::isFlow",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "flags",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "isInt()",
    "local": ""
  },
  {
    "origin": "bool cv::FileNode::isInt",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.FileNode.isInt(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns true if the node is an integer",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "isMap()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "bool cv::FileNode::isMap",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.FileNode.isMap(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns true if the node is a mapping",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "isMap()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "static bool cv::FileNode::isMap",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "flags",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.FileNode.isMap(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "isNamed()",
    "local": ""
  },
  {
    "origin": "bool cv::FileNode::isNamed",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.FileNode.isNamed(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns true if the node has a name",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "isNone()",
    "local": ""
  },
  {
    "origin": "bool cv::FileNode::isNone",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.FileNode.isNone(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns true if the node is a \"none\" object",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "isReal()",
    "local": ""
  },
  {
    "origin": "bool cv::FileNode::isReal",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.FileNode.isReal(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns true if the node is a floating-point number",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "isSeq()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "bool cv::FileNode::isSeq",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.FileNode.isSeq(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns true if the node is a sequence",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "isSeq()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "static bool cv::FileNode::isSeq",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "flags",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.FileNode.isSeq(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "isString()",
    "local": ""
  },
  {
    "origin": "bool cv::FileNode::isString",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.FileNode.isString(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns true if the node is a text string",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "keys()",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; cv::FileNode::keys",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.FileNode.keys(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns keys of a mapping node.",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "Keys of a mapping node.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "mat()",
    "local": ""
  },
  {
    "origin": "cv::FileNode::mat",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.FileNode.mat(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Simplified reading API to use with bindings.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "name()",
    "local": ""
  },
  {
    "origin": "std::string cv::FileNode::name",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.FileNode.name(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns the node name or an empty string if the node is nameless",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator double()",
    "local": ""
  },
  {
    "origin": "cv::FileNode::operator double",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns the node content as double",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator float()",
    "local": ""
  },
  {
    "origin": "cv::FileNode::operator float",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns the node content as float",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator std::string()",
    "local": ""
  },
  {
    "origin": "cv::FileNode::operator std::string",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "returns the node content as text string",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator=()",
    "local": ""
  },
  {
    "origin": "&amp; cv::FileNode::operator=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "node",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator[]()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "cv::FileNode::operator[]",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "nodename",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.FileNode.at(",
    "local": ""
  },
  {
    "origin": "i",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.FileNode.getNode(",
    "local": ""
  },
  {
    "origin": "nodename",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns element of a mapping node or a sequence node.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "nodename",
    "local": ""
  },
  {
    "origin": "Name of an element in the mapping node.",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "Returns the element with the given identifier.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator[]()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "cv::FileNode::operator[]",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const char *",
    "local": ""
  },
  {
    "origin": "nodename",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.FileNode.at(",
    "local": ""
  },
  {
    "origin": "i",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.FileNode.getNode(",
    "local": ""
  },
  {
    "origin": "nodename",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "nodename",
    "local": ""
  },
  {
    "origin": "Name of an element in the mapping node.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator[]()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "cv::FileNode::operator[]",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "i",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.FileNode.at(",
    "local": ""
  },
  {
    "origin": "i",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.FileNode.getNode(",
    "local": ""
  },
  {
    "origin": "nodename",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "i",
    "local": ""
  },
  {
    "origin": "Index of an element in the sequence node.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "ptr()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "* cv::FileNode::ptr",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "ptr()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "* cv::FileNode::ptr",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "rawSize()",
    "local": ""
  },
  {
    "origin": "size_t cv::FileNode::rawSize",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.FileNode.rawSize(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns raw size of the",
    "local": ""
  },
  {
    "origin": "in bytes",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "readRaw()",
    "local": ""
  },
  {
    "origin": "void cv::FileNode::readRaw",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "fmt",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "void *",
    "local": ""
  },
  {
    "origin": "vec",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "size_t",
    "local": ""
  },
  {
    "origin": "len",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Reads node elements to the buffer with the specified format.",
    "local": ""
  },
  {
    "origin": "Usually it is more convenient to use operator",
    "local": ""
  },
  {
    "origin": "instead of this method.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "fmt",
    "local": ""
  },
  {
    "origin": "Specification of each array element. See",
    "local": ""
  },
  {
    "origin": "vec",
    "local": ""
  },
  {
    "origin": "Pointer to the destination array.",
    "local": ""
  },
  {
    "origin": "len",
    "local": ""
  },
  {
    "origin": "Number of bytes to read (buffer size limit). If it is greater than number of remaining elements then all of them will be read.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "real()",
    "local": ""
  },
  {
    "origin": "double cv::FileNode::real",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.FileNode.real(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Simplified reading API to use with bindings.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "setValue()",
    "local": ""
  },
  {
    "origin": "void cv::FileNode::setValue",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "type",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const void *",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "len",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Internal method used when reading",
    "local": ""
  },
  {
    "origin": ". Sets the type (int, real or string) and value of the previously created node.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "size()",
    "local": ""
  },
  {
    "origin": "size_t cv::FileNode::size",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.FileNode.size(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns the number of elements in the node, if it is a sequence or mapping, or 1 otherwise.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "string()",
    "local": ""
  },
  {
    "origin": "std::string cv::FileNode::string",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.FileNode.string(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Simplified reading API to use with bindings.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "type()",
    "local": ""
  },
  {
    "origin": "int cv::FileNode::type",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.FileNode.type(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns type of the node.",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "Type of the node. See FileNode::Type",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Friends And Related Function Documentation",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator&gt;&gt;()",
    "local": ""
  },
  {
    "origin": "[1/4]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static void operator&gt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "_Tp &amp;",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "Reads data from a file storage.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator&gt;&gt;()",
    "local": ""
  },
  {
    "origin": "[2/4]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static void operator&gt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt; _Tp &gt; &amp;",
    "local": ""
  },
  {
    "origin": "vec",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "Reads data from a file storage.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator&gt;&gt;()",
    "local": ""
  },
  {
    "origin": "[3/4]",
    "local": ""
  },
  {
    "origin": "static void operator&gt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "kpt",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "Reads",
    "local": ""
  },
  {
    "origin": "from a file storage.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator&gt;&gt;()",
    "local": ""
  },
  {
    "origin": "[4/4]",
    "local": ""
  },
  {
    "origin": "static void operator&gt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "Reads",
    "local": ""
  },
  {
    "origin": "from a file storage.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "[1/27]",
    "local": ""
  },
  {
    "origin": "void read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "node",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int &amp;",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "default_value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "[2/27]",
    "local": ""
  },
  {
    "origin": "void read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "node",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "float &amp;",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "default_value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "[3/27]",
    "local": ""
  },
  {
    "origin": "void read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "node",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double &amp;",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "default_value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "[4/27]",
    "local": ""
  },
  {
    "origin": "void read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "node",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::string &amp;",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const std::string &amp;",
    "local": ""
  },
  {
    "origin": "default_value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "[5/27]",
    "local": ""
  },
  {
    "origin": "void read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "node",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "mat",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "default_mat",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "[6/27]",
    "local": ""
  },
  {
    "origin": "void read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "node",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "mat",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "default_mat",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "[7/27]",
    "local": ""
  },
  {
    "origin": "void read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "node",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "default_value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "[8/27]",
    "local": ""
  },
  {
    "origin": "void read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "node",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "default_value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "[9/27]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static void read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "node",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt; &amp;",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt; &amp;",
    "local": ""
  },
  {
    "origin": "default_value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "[10/27]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static void read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "node",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt; &amp;",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt; &amp;",
    "local": ""
  },
  {
    "origin": "default_value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "[11/27]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static void read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "node",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt; &amp;",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt; &amp;",
    "local": ""
  },
  {
    "origin": "default_value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "[12/27]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static void read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "node",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt; &amp;",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt; &amp;",
    "local": ""
  },
  {
    "origin": "default_value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "[13/27]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static void read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "node",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt; &amp;",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt; &amp;",
    "local": ""
  },
  {
    "origin": "default_value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "[14/27]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int cn&gt;",
    "local": ""
  },
  {
    "origin": "static void read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "node",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, cn &gt; &amp;",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, cn &gt; &amp;",
    "local": ""
  },
  {
    "origin": "default_value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "[15/27]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int m, int n&gt;",
    "local": ""
  },
  {
    "origin": "static void read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "node",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, m, n &gt; &amp;",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, m, n &gt; &amp;",
    "local": ""
  },
  {
    "origin": "default_matx",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "[16/27]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static void read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "node",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt; &amp;",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt; &amp;",
    "local": ""
  },
  {
    "origin": "default_value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "[17/27]",
    "local": ""
  },
  {
    "origin": "static void read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "node",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "default_value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "[18/27]",
    "local": ""
  },
  {
    "origin": "static void read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "node",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool &amp;",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "default_value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "[19/27]",
    "local": ""
  },
  {
    "origin": "static void read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "node",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "default_value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "[20/27]",
    "local": ""
  },
  {
    "origin": "static void read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "node",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "default_value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "[21/27]",
    "local": ""
  },
  {
    "origin": "static void read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "node",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "default_value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "[22/27]",
    "local": ""
  },
  {
    "origin": "static void read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "node",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "short &amp;",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "short",
    "local": ""
  },
  {
    "origin": "default_value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "[23/27]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static void read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "it",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt; _Tp &gt; &amp;",
    "local": ""
  },
  {
    "origin": "vec",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "size_t",
    "local": ""
  },
  {
    "origin": "maxCount",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "[24/27]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , typename std::enable_if&lt; std::is_enum&lt; _Tp &gt;::value &gt;::type * = nullptr&gt;",
    "local": ""
  },
  {
    "origin": "static void read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "node",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "_Tp &amp;",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const _Tp &amp;",
    "local": ""
  },
  {
    "origin": "default_value",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "[25/27]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static void read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "node",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt; _Tp &gt; &amp;",
    "local": ""
  },
  {
    "origin": "vec",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const std::vector&lt; _Tp &gt; &amp;",
    "local": ""
  },
  {
    "origin": "default_value",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "[26/27]",
    "local": ""
  },
  {
    "origin": "static void read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "node",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "vec",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "default_value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "[27/27]",
    "local": ""
  },
  {
    "origin": "static void read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "node",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "vec",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "default_value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "related",
    "local": ""
  },
  {
    "origin": "Member Data Documentation",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "blockIdx",
    "local": ""
  },
  {
    "origin": "size_t cv::FileNode::blockIdx",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "fs",
    "local": ""
  },
  {
    "origin": "FileStorage::Impl* cv::FileNode::fs",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "ofs",
    "local": ""
  },
  {
    "origin": "size_t cv::FileNode::ofs",
    "local": ""
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": ""
  },
  {
    "origin": "opencv2/core/",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:42 for OpenCV by",
    "local": ""
  }
]