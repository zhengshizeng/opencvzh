[
  {
    "origin": "OpenCV: cv::cuda::StereoBeliefPropagation Class Reference",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions",
    "local": ""
  },
  {
    "origin": "List of all members",
    "local": ""
  },
  {
    "origin": "cv::cuda::StereoBeliefPropagation Class Reference",
    "local": ""
  },
  {
    "origin": "abstract",
    "local": ""
  },
  {
    "origin": "&raquo;",
    "local": ""
  },
  {
    "origin": "Class computing stereo correspondence using the belief propagation algorithm. :",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Inheritance diagram for cv::cuda::StereoBeliefPropagation:",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "left,",
    "local": ""
  },
  {
    "origin": "right,",
    "local": ""
  },
  {
    "origin": "disparity,",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "data,",
    "local": ""
  },
  {
    "origin": "disparity,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "Enables the stereo correspondence operator that finds the disparity for the specified data cost.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "data weight",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "discontinuity single jump",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "truncation of data cost",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "truncation of discontinuity cost",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "type for messages (CV_16SC1 or CV_32FC1)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "number of BP iterations on each level",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "number of levels",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&#160;Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "left,",
    "local": ""
  },
  {
    "origin": "right,",
    "local": ""
  },
  {
    "origin": "Computes disparity map for the specified stereo pair.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&#160;Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Clears the algorithm state.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Returns true if the",
    "local": ""
  },
  {
    "origin": "is empty (e.g. in the very beginning or after unsuccessful read.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;fn)",
    "local": ""
  },
  {
    "origin": "Reads algorithm parameters from a file storage.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename) const",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;fs) const",
    "local": ""
  },
  {
    "origin": "Stores algorithm parameters in a file storage.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;fs, const",
    "local": ""
  },
  {
    "origin": "&amp;name=",
    "local": ""
  },
  {
    "origin": "()) const",
    "local": ""
  },
  {
    "origin": "simplified API for language bindings This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions",
    "local": ""
  },
  {
    "origin": "(int width, int height, int &amp;ndisp, int &amp;iters, int &amp;levels)",
    "local": ""
  },
  {
    "origin": "Uses a heuristic method to compute the recommended parameters ( ndisp, iters and levels ) for the specified image size ( width and height ).",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&#160;Static Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename, const",
    "local": ""
  },
  {
    "origin": "&amp;objname=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Loads algorithm from the file.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;strModel, const",
    "local": ""
  },
  {
    "origin": "&amp;objname=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Loads algorithm from a String.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;fn)",
    "local": ""
  },
  {
    "origin": "Reads algorithm from the file node.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Additional Inherited Members",
    "local": ""
  },
  {
    "origin": "&#160;Public Types inherited from",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= (1 &lt;&lt; DISP_SHIFT)",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "&#160;Protected Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;fs) const",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Class computing stereo correspondence using the belief propagation algorithm. :",
    "local": ""
  },
  {
    "origin": "The class implements algorithm described in",
    "local": ""
  },
  {
    "origin": ". It can compute own data cost (using a truncated linear model) or use a user-provided data cost.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "requires a lot of memory for message storage:",
    "local": ""
  },
  {
    "origin": "\\[width \\_ step \\cdot height \\cdot ndisp \\cdot 4 \\cdot (1 + 0.25)\\]",
    "local": ""
  },
  {
    "origin": "and for data cost storage:",
    "local": ""
  },
  {
    "origin": "\\[width\\_step \\cdot height \\cdot ndisp \\cdot (1 + 0.25 + 0.0625 + \\dotsm + \\frac{1}{4^{levels}})\\]",
    "local": ""
  },
  {
    "origin": "width_step is the number of bytes in a line including padding.",
    "local": ""
  },
  {
    "origin": "uses a truncated linear model for the data cost and discontinuity terms:",
    "local": ""
  },
  {
    "origin": "\\[DataCost = data \\_ weight \\cdot \\min ( \\lvert Img_Left(x,y)-Img_Right(x-d,y) \\rvert , max \\_ data \\_ term)\\]",
    "local": ""
  },
  {
    "origin": "\\[DiscTerm = \\min (disc \\_ single \\_ jump \\cdot \\lvert f_1-f_2 \\rvert , max \\_ disc \\_ term)\\]",
    "local": ""
  },
  {
    "origin": "For more details, see",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "By default,",
    "local": ""
  },
  {
    "origin": "uses floating-point arithmetics and the CV_32FC1 type for messages. But it can also use fixed-point arithmetics and the CV_16SC1 message type for better performance. To avoid an overflow in this case, the parameters must satisfy the following requirement:",
    "local": ""
  },
  {
    "origin": "\\[10 \\cdot 2^{levels-1} \\cdot max \\_ data \\_ term &lt; SHRT \\_ MAX\\]",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "Member Function Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "compute()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "virtual void cv::cuda::StereoBeliefPropagation::compute",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "left",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "right",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "disparity",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "compute()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "virtual void cv::cuda::StereoBeliefPropagation::compute",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "data",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "disparity",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Enables the stereo correspondence operator that finds the disparity for the specified data cost.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "data",
    "local": ""
  },
  {
    "origin": "User-specified data cost, a matrix of msg_type type and Size(&lt;image columns&gt;*ndisp, &lt;image rows&gt;) size.",
    "local": ""
  },
  {
    "origin": "disparity",
    "local": ""
  },
  {
    "origin": "Output disparity map. If disparity is empty, the output type is CV_16SC1 . Otherwise, the type is retained. In 16-bit signed format, the disparity values do not have fractional bits.",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "for the asynchronous version.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "estimateRecommendedParams()",
    "local": ""
  },
  {
    "origin": "static void cv::cuda::StereoBeliefPropagation::estimateRecommendedParams",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "width",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "height",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "ndisp",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "iters",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "levels",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Uses a heuristic method to compute the recommended parameters ( ndisp, iters and levels ) for the specified image size ( width and height ).",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "getDataWeight()",
    "local": ""
  },
  {
    "origin": "virtual double cv::cuda::StereoBeliefPropagation::getDataWeight",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "data weight",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "getDiscSingleJump()",
    "local": ""
  },
  {
    "origin": "virtual double cv::cuda::StereoBeliefPropagation::getDiscSingleJump",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "discontinuity single jump",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "getMaxDataTerm()",
    "local": ""
  },
  {
    "origin": "virtual double cv::cuda::StereoBeliefPropagation::getMaxDataTerm",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "truncation of data cost",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "getMaxDiscTerm()",
    "local": ""
  },
  {
    "origin": "virtual double cv::cuda::StereoBeliefPropagation::getMaxDiscTerm",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "truncation of discontinuity cost",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "getMsgType()",
    "local": ""
  },
  {
    "origin": "virtual int cv::cuda::StereoBeliefPropagation::getMsgType",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "type for messages (CV_16SC1 or CV_32FC1)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "getNumIters()",
    "local": ""
  },
  {
    "origin": "virtual int cv::cuda::StereoBeliefPropagation::getNumIters",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "number of BP iterations on each level",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "getNumLevels()",
    "local": ""
  },
  {
    "origin": "virtual int cv::cuda::StereoBeliefPropagation::getNumLevels",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "number of levels",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "setDataWeight()",
    "local": ""
  },
  {
    "origin": "virtual void cv::cuda::StereoBeliefPropagation::setDataWeight",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "data_weight",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "setDiscSingleJump()",
    "local": ""
  },
  {
    "origin": "virtual void cv::cuda::StereoBeliefPropagation::setDiscSingleJump",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "disc_single_jump",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "setMaxDataTerm()",
    "local": ""
  },
  {
    "origin": "virtual void cv::cuda::StereoBeliefPropagation::setMaxDataTerm",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "max_data_term",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "setMaxDiscTerm()",
    "local": ""
  },
  {
    "origin": "virtual void cv::cuda::StereoBeliefPropagation::setMaxDiscTerm",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "max_disc_term",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "setMsgType()",
    "local": ""
  },
  {
    "origin": "virtual void cv::cuda::StereoBeliefPropagation::setMsgType",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "msg_type",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "setNumIters()",
    "local": ""
  },
  {
    "origin": "virtual void cv::cuda::StereoBeliefPropagation::setNumIters",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "iters",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "setNumLevels()",
    "local": ""
  },
  {
    "origin": "virtual void cv::cuda::StereoBeliefPropagation::setNumLevels",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "levels",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": ""
  },
  {
    "origin": "opencv2/",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:44 for OpenCV by &#160;",
    "local": ""
  }
]