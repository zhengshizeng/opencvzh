[
  {
    "origin": "OpenCV: cv::cuda::HOG Class Reference",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions",
    "local": ""
  },
  {
    "origin": "List of all members",
    "local": ""
  },
  {
    "origin": "cv::cuda::HOG Class Reference",
    "local": ""
  },
  {
    "origin": "abstract",
    "local": ""
  },
  {
    "origin": "&raquo;",
    "local": ""
  },
  {
    "origin": "The class implements Histogram of Oriented Gradients (",
    "local": ""
  },
  {
    "origin": ") object detector.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Inheritance diagram for cv::cuda::HOG:",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img,",
    "local": ""
  },
  {
    "origin": "descriptors,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "Returns block descriptors computed for the whole image.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "Performs object detection without a multi-scale window.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;found_locations, std::vector&lt; double &gt; &amp;confidences)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "Performs object detection with a multi-scale window.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;found_locations, std::vector&lt; double &gt; &amp;confidences)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;found_locations)",
    "local": ""
  },
  {
    "origin": "Performs object detection with a multi-scale window.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;found_locations)",
    "local": ""
  },
  {
    "origin": "Performs object detection without a multi-scale window.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Returns the block histogram size.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Returns coefficients of the classifier trained for people detection.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Returns the number of coefficients required for the classification.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "Flag to specify whether the gamma correction preprocessing is required or not.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "L2-Hys normalization method shrinkage.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Maximum number of detection window increases.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Coefficient of the detection window increase.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "Sets coefficients for the linear SVM classifier.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Gaussian smoothing window parameter.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "Window stride. It must be a multiple of block stride.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&#160;Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Clears the algorithm state.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Returns true if the",
    "local": ""
  },
  {
    "origin": "is empty (e.g. in the very beginning or after unsuccessful read.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;fn)",
    "local": ""
  },
  {
    "origin": "Reads algorithm parameters from a file storage.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename) const",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;fs) const",
    "local": ""
  },
  {
    "origin": "Stores algorithm parameters in a file storage.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;fs, const",
    "local": ""
  },
  {
    "origin": "&amp;name=",
    "local": ""
  },
  {
    "origin": "()) const",
    "local": ""
  },
  {
    "origin": "simplified API for language bindings This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "win_size=",
    "local": ""
  },
  {
    "origin": "(64, 128),",
    "local": ""
  },
  {
    "origin": "block_size=",
    "local": ""
  },
  {
    "origin": "(16, 16),",
    "local": ""
  },
  {
    "origin": "block_stride=",
    "local": ""
  },
  {
    "origin": "(8, 8),",
    "local": ""
  },
  {
    "origin": "cell_size=",
    "local": ""
  },
  {
    "origin": "(8, 8), int nbins=9)",
    "local": ""
  },
  {
    "origin": "Creates the",
    "local": ""
  },
  {
    "origin": "descriptor and detector.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&#160;Static Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename, const",
    "local": ""
  },
  {
    "origin": "&amp;objname=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Loads algorithm from the file.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;strModel, const",
    "local": ""
  },
  {
    "origin": "&amp;objname=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Loads algorithm from a String.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;fn)",
    "local": ""
  },
  {
    "origin": "Reads algorithm from the file node.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Additional Inherited Members",
    "local": ""
  },
  {
    "origin": "&#160;Protected Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;fs) const",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "The class implements Histogram of Oriented Gradients (",
    "local": ""
  },
  {
    "origin": ") object detector.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "An example applying the",
    "local": ""
  },
  {
    "origin": "descriptor for people detection can be found at opencv_source_code/samples/cpp/peopledetect.cpp",
    "local": ""
  },
  {
    "origin": "A CUDA example applying the",
    "local": ""
  },
  {
    "origin": "descriptor for people detection can be found at opencv_source_code/samples/gpu/hog.cpp",
    "local": ""
  },
  {
    "origin": "(Python) An example applying the",
    "local": ""
  },
  {
    "origin": "descriptor for people detection can be found at opencv_source_code/samples/python/peopledetect.py",
    "local": ""
  },
  {
    "origin": "Member Function Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "compute()",
    "local": ""
  },
  {
    "origin": "virtual void cv::cuda::HOG::compute",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "descriptors",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Returns block descriptors computed for the whole image.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "Source image. See cuda::HOGDescriptor::detect for type limitations.",
    "local": ""
  },
  {
    "origin": "descriptors",
    "local": ""
  },
  {
    "origin": "2D array of descriptors.",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "CUDA stream.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "create()",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; cv::cuda::HOG::create",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "win_size",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "block_size",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "block_stride",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "cell_size",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "nbins",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Creates the",
    "local": ""
  },
  {
    "origin": "descriptor and detector.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "win_size",
    "local": ""
  },
  {
    "origin": "Detection window size. Align to block size and block stride.",
    "local": ""
  },
  {
    "origin": "block_size",
    "local": ""
  },
  {
    "origin": "Block size in pixels. Align to cell size. Only (16,16) is supported for now.",
    "local": ""
  },
  {
    "origin": "block_stride",
    "local": ""
  },
  {
    "origin": "Block stride. It must be a multiple of cell size.",
    "local": ""
  },
  {
    "origin": "cell_size",
    "local": ""
  },
  {
    "origin": "Cell size. Only (8, 8) is supported for now.",
    "local": ""
  },
  {
    "origin": "nbins",
    "local": ""
  },
  {
    "origin": "Number of bins. Only 9 bins per cell are supported for now.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "detect()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "virtual void cv::cuda::HOG::detect",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "found_locations",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "confidences",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Performs object detection without a multi-scale window.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "Source image. CV_8UC1 and CV_8UC4 types are supported for now.",
    "local": ""
  },
  {
    "origin": "found_locations",
    "local": ""
  },
  {
    "origin": "Left-top corner points of detected objects boundaries.",
    "local": ""
  },
  {
    "origin": "confidences",
    "local": ""
  },
  {
    "origin": "Optional output array for confidences.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "detect()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "void cv::cuda::HOG::detect",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "found_locations",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "confidences",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "detectMultiScale()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "virtual void cv::cuda::HOG::detectMultiScale",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "found_locations",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "confidences",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Performs object detection with a multi-scale window.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "Source image. See cuda::HOGDescriptor::detect for type limitations.",
    "local": ""
  },
  {
    "origin": "found_locations",
    "local": ""
  },
  {
    "origin": "Detected objects boundaries.",
    "local": ""
  },
  {
    "origin": "confidences",
    "local": ""
  },
  {
    "origin": "Optional output array for confidences.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "detectMultiScale()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "void cv::cuda::HOG::detectMultiScale",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "found_locations",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "confidences",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "detectMultiScaleWithoutConf()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::HOG::detectMultiScaleWithoutConf",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "found_locations",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Performs object detection with a multi-scale window.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "Source image. See cuda::HOGDescriptor::detect for type limitations.",
    "local": ""
  },
  {
    "origin": "found_locations",
    "local": ""
  },
  {
    "origin": "Detected objects boundaries.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "detectWithoutConf()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::HOG::detectWithoutConf",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "found_locations",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Performs object detection without a multi-scale window.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "Source image. CV_8UC1 and CV_8UC4 types are supported for now.",
    "local": ""
  },
  {
    "origin": "found_locations",
    "local": ""
  },
  {
    "origin": "Left-top corner points of detected objects boundaries.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "getBlockHistogramSize()",
    "local": ""
  },
  {
    "origin": "virtual size_t cv::cuda::HOG::getBlockHistogramSize",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Returns the block histogram size.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "getDefaultPeopleDetector()",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "cv::cuda::HOG::getDefaultPeopleDetector",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Returns coefficients of the classifier trained for people detection.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "getDescriptorFormat()",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "cv::cuda::HOG::getDescriptorFormat",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "getDescriptorSize()",
    "local": ""
  },
  {
    "origin": "virtual size_t cv::cuda::HOG::getDescriptorSize",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Returns the number of coefficients required for the classification.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "getGammaCorrection()",
    "local": ""
  },
  {
    "origin": "virtual bool cv::cuda::HOG::getGammaCorrection",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "getGroupThreshold()",
    "local": ""
  },
  {
    "origin": "virtual int cv::cuda::HOG::getGroupThreshold",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "getHitThreshold()",
    "local": ""
  },
  {
    "origin": "virtual double cv::cuda::HOG::getHitThreshold",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "getL2HysThreshold()",
    "local": ""
  },
  {
    "origin": "virtual double cv::cuda::HOG::getL2HysThreshold",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "getNumLevels()",
    "local": ""
  },
  {
    "origin": "virtual int cv::cuda::HOG::getNumLevels",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "getScaleFactor()",
    "local": ""
  },
  {
    "origin": "virtual double cv::cuda::HOG::getScaleFactor",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "getWinSigma()",
    "local": ""
  },
  {
    "origin": "virtual double cv::cuda::HOG::getWinSigma",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "getWinStride()",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "cv::cuda::HOG::getWinStride",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "setDescriptorFormat()",
    "local": ""
  },
  {
    "origin": "virtual void cv::cuda::HOG::setDescriptorFormat",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "descr_format",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Descriptor storage format:",
    "local": ""
  },
  {
    "origin": "DESCR_FORMAT_ROW_BY_ROW",
    "local": ""
  },
  {
    "origin": "- Row-major order.",
    "local": ""
  },
  {
    "origin": "DESCR_FORMAT_COL_BY_COL",
    "local": ""
  },
  {
    "origin": "- Column-major order.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "setGammaCorrection()",
    "local": ""
  },
  {
    "origin": "virtual void cv::cuda::HOG::setGammaCorrection",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "gamma_correction",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Flag to specify whether the gamma correction preprocessing is required or not.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "setGroupThreshold()",
    "local": ""
  },
  {
    "origin": "virtual void cv::cuda::HOG::setGroupThreshold",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "group_threshold",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Coefficient to regulate the similarity threshold. When detected, some objects can be covered by many rectangles. 0 means not to perform grouping. See groupRectangles.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "setHitThreshold()",
    "local": ""
  },
  {
    "origin": "virtual void cv::cuda::HOG::setHitThreshold",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "hit_threshold",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Threshold for the distance between features and SVM classifying plane. Usually it is 0 and should be specified in the detector coefficients (as the last free coefficient). But if the free coefficient is omitted (which is allowed), you can specify it manually here.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "setL2HysThreshold()",
    "local": ""
  },
  {
    "origin": "virtual void cv::cuda::HOG::setL2HysThreshold",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "threshold_L2hys",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "L2-Hys normalization method shrinkage.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "setNumLevels()",
    "local": ""
  },
  {
    "origin": "virtual void cv::cuda::HOG::setNumLevels",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "nlevels",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Maximum number of detection window increases.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "setScaleFactor()",
    "local": ""
  },
  {
    "origin": "virtual void cv::cuda::HOG::setScaleFactor",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "scale0",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Coefficient of the detection window increase.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "setSVMDetector()",
    "local": ""
  },
  {
    "origin": "virtual void cv::cuda::HOG::setSVMDetector",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "detector",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Sets coefficients for the linear SVM classifier.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "setWinSigma()",
    "local": ""
  },
  {
    "origin": "virtual void cv::cuda::HOG::setWinSigma",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "win_sigma",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Gaussian smoothing window parameter.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "setWinStride()",
    "local": ""
  },
  {
    "origin": "virtual void cv::cuda::HOG::setWinStride",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "win_stride",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Window stride. It must be a multiple of block stride.",
    "local": ""
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": ""
  },
  {
    "origin": "opencv2/",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:44 for OpenCV by &#160;",
    "local": ""
  }
]