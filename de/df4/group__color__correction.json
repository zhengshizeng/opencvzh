[
  {
    "origin": "OpenCV: Color Correction Model",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "Color Correction Model",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Core class of ccm model.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "Enum of the possible types of ccm.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "Macbeth and Vinyl ColorChecker with 2deg D50.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "Enum of possible functions to calculate the distance between colors.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "Enum of the possible types of initial method.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "Linearization transformation type.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Introduction",
    "local": ""
  },
  {
    "origin": "The purpose of color correction is to adjust the color response of input and output devices to a known state. The device being calibrated is sometimes called the calibration source; the color space used as the standard is sometimes called the calibration target. Color calibration has been used in many industries, such as television production, games, photography, engineering, chemistry, medicine, etc. Due to the manufacturing process of the input and output equipment, the channel response has nonlinear distortion. In order to correct the picture output of the equipment, it is nessary to calibrate the captured color and the actual color.",
    "local": ""
  },
  {
    "origin": "Enumeration Type Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CCM_TYPE",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "Enum of the possible types of ccm.",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "CCM_3x3",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.CCM_3x3",
    "local": ""
  },
  {
    "origin": "The CCM with the shape \\(3\\times3\\) performs linear transformation on color values.",
    "local": ""
  },
  {
    "origin": "CCM_4x3",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.CCM_4x3",
    "local": ""
  },
  {
    "origin": "The CCM with the shape \\(4\\times3\\) performs affine transformation.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_sRGB",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_sRGB",
    "local": ""
  },
  {
    "origin": "https://en.wikipedia.org/wiki/SRGB",
    "local": ""
  },
  {
    "origin": ", RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_sRGBL",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_sRGBL",
    "local": ""
  },
  {
    "origin": "https://en.wikipedia.org/wiki/SRGB",
    "local": ""
  },
  {
    "origin": ", linear RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_AdobeRGB",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_AdobeRGB",
    "local": ""
  },
  {
    "origin": "https://en.wikipedia.org/wiki/Adobe_RGB_color_space",
    "local": ""
  },
  {
    "origin": ", RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_AdobeRGBL",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_AdobeRGBL",
    "local": ""
  },
  {
    "origin": "https://en.wikipedia.org/wiki/Adobe_RGB_color_space",
    "local": ""
  },
  {
    "origin": ", linear RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_WideGamutRGB",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_WideGamutRGB",
    "local": ""
  },
  {
    "origin": "https://en.wikipedia.org/wiki/Wide-gamut_RGB_color_space",
    "local": ""
  },
  {
    "origin": ", RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_WideGamutRGBL",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_WideGamutRGBL",
    "local": ""
  },
  {
    "origin": "https://en.wikipedia.org/wiki/Wide-gamut_RGB_color_space",
    "local": ""
  },
  {
    "origin": ", linear RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_ProPhotoRGB",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_ProPhotoRGB",
    "local": ""
  },
  {
    "origin": "https://en.wikipedia.org/wiki/ProPhoto_RGB_color_space",
    "local": ""
  },
  {
    "origin": ", RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_ProPhotoRGBL",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_ProPhotoRGBL",
    "local": ""
  },
  {
    "origin": "https://en.wikipedia.org/wiki/ProPhoto_RGB_color_space",
    "local": ""
  },
  {
    "origin": ", linear RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_DCI_P3_RGB",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_DCI_P3_RGB",
    "local": ""
  },
  {
    "origin": "https://en.wikipedia.org/wiki/DCI-P3",
    "local": ""
  },
  {
    "origin": ", RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_DCI_P3_RGBL",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_DCI_P3_RGBL",
    "local": ""
  },
  {
    "origin": "https://en.wikipedia.org/wiki/DCI-P3",
    "local": ""
  },
  {
    "origin": ", linear RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_AppleRGB",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_AppleRGB",
    "local": ""
  },
  {
    "origin": "https://en.wikipedia.org/wiki/RGB_color_space",
    "local": ""
  },
  {
    "origin": ", RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_AppleRGBL",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_AppleRGBL",
    "local": ""
  },
  {
    "origin": "https://en.wikipedia.org/wiki/RGB_color_space",
    "local": ""
  },
  {
    "origin": ", linear RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_REC_709_RGB",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_REC_709_RGB",
    "local": ""
  },
  {
    "origin": "https://en.wikipedia.org/wiki/Rec._709",
    "local": ""
  },
  {
    "origin": ", RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_REC_709_RGBL",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_REC_709_RGBL",
    "local": ""
  },
  {
    "origin": "https://en.wikipedia.org/wiki/Rec._709",
    "local": ""
  },
  {
    "origin": ", linear RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_REC_2020_RGB",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_REC_2020_RGB",
    "local": ""
  },
  {
    "origin": "https://en.wikipedia.org/wiki/Rec._2020",
    "local": ""
  },
  {
    "origin": ", RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_REC_2020_RGBL",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_REC_2020_RGBL",
    "local": ""
  },
  {
    "origin": "https://en.wikipedia.org/wiki/Rec._2020",
    "local": ""
  },
  {
    "origin": ", linear RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_XYZ_D65_2",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_XYZ_D65_2",
    "local": ""
  },
  {
    "origin": "https://en.wikipedia.org/wiki/CIE_1931_color_space",
    "local": ""
  },
  {
    "origin": ", non-RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_XYZ_D65_10",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_XYZ_D65_10",
    "local": ""
  },
  {
    "origin": "non-RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_XYZ_D50_2",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_XYZ_D50_2",
    "local": ""
  },
  {
    "origin": "non-RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_XYZ_D50_10",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_XYZ_D50_10",
    "local": ""
  },
  {
    "origin": "non-RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_XYZ_A_2",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_XYZ_A_2",
    "local": ""
  },
  {
    "origin": "non-RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_XYZ_A_10",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_XYZ_A_10",
    "local": ""
  },
  {
    "origin": "non-RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_XYZ_D55_2",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_XYZ_D55_2",
    "local": ""
  },
  {
    "origin": "non-RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_XYZ_D55_10",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_XYZ_D55_10",
    "local": ""
  },
  {
    "origin": "non-RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_XYZ_D75_2",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_XYZ_D75_2",
    "local": ""
  },
  {
    "origin": "non-RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_XYZ_D75_10",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_XYZ_D75_10",
    "local": ""
  },
  {
    "origin": "non-RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_XYZ_E_2",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_XYZ_E_2",
    "local": ""
  },
  {
    "origin": "non-RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_XYZ_E_10",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_XYZ_E_10",
    "local": ""
  },
  {
    "origin": "non-RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_Lab_D65_2",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_Lab_D65_2",
    "local": ""
  },
  {
    "origin": "https://en.wikipedia.org/wiki/CIELAB_color_space",
    "local": ""
  },
  {
    "origin": ", non-RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_Lab_D65_10",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_Lab_D65_10",
    "local": ""
  },
  {
    "origin": "non-RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_Lab_D50_2",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_Lab_D50_2",
    "local": ""
  },
  {
    "origin": "non-RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_Lab_D50_10",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_Lab_D50_10",
    "local": ""
  },
  {
    "origin": "non-RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_Lab_A_2",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_Lab_A_2",
    "local": ""
  },
  {
    "origin": "non-RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_Lab_A_10",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_Lab_A_10",
    "local": ""
  },
  {
    "origin": "non-RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_Lab_D55_2",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_Lab_D55_2",
    "local": ""
  },
  {
    "origin": "non-RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_Lab_D55_10",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_Lab_D55_10",
    "local": ""
  },
  {
    "origin": "non-RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_Lab_D75_2",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_Lab_D75_2",
    "local": ""
  },
  {
    "origin": "non-RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_Lab_D75_10",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_Lab_D75_10",
    "local": ""
  },
  {
    "origin": "non-RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_Lab_E_2",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_Lab_E_2",
    "local": ""
  },
  {
    "origin": "non-RGB color space",
    "local": ""
  },
  {
    "origin": "COLOR_SPACE_Lab_E_10",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLOR_SPACE_Lab_E_10",
    "local": ""
  },
  {
    "origin": "non-RGB color space",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CONST_COLOR",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "Macbeth and Vinyl ColorChecker with 2deg D50.",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "COLORCHECKER_Macbeth",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLORCHECKER_Macbeth",
    "local": ""
  },
  {
    "origin": "Macbeth ColorChecker.",
    "local": ""
  },
  {
    "origin": "COLORCHECKER_Vinyl",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLORCHECKER_Vinyl",
    "local": ""
  },
  {
    "origin": "DKK ColorChecker.",
    "local": ""
  },
  {
    "origin": "COLORCHECKER_DigitalSG",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.COLORCHECKER_DigitalSG",
    "local": ""
  },
  {
    "origin": "DigitalSG ColorChecker with 140 squares.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "DISTANCE_TYPE",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "Enum of possible functions to calculate the distance between colors.",
    "local": ""
  },
  {
    "origin": "See",
    "local": ""
  },
  {
    "origin": "https://en.wikipedia.org/wiki/Color_difference",
    "local": ""
  },
  {
    "origin": "for details",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "DISTANCE_CIE76",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.DISTANCE_CIE76",
    "local": ""
  },
  {
    "origin": "The 1976 formula is the first formula that related a measured color difference to a known set of CIELAB coordinates.",
    "local": ""
  },
  {
    "origin": "DISTANCE_CIE94_GRAPHIC_ARTS",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.DISTANCE_CIE94_GRAPHIC_ARTS",
    "local": ""
  },
  {
    "origin": "The 1976 definition was extended to address perceptual non-uniformities.",
    "local": ""
  },
  {
    "origin": "DISTANCE_CIE94_TEXTILES",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.DISTANCE_CIE94_TEXTILES",
    "local": ""
  },
  {
    "origin": "DISTANCE_CIE2000",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.DISTANCE_CIE2000",
    "local": ""
  },
  {
    "origin": "DISTANCE_CMC_1TO1",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.DISTANCE_CMC_1TO1",
    "local": ""
  },
  {
    "origin": "In 1984, the Colour Measurement Committee of the Society of Dyers and Colourists defined a difference measure, also based on the L*C*h color model.",
    "local": ""
  },
  {
    "origin": "DISTANCE_CMC_2TO1",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.DISTANCE_CMC_2TO1",
    "local": ""
  },
  {
    "origin": "DISTANCE_RGB",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.DISTANCE_RGB",
    "local": ""
  },
  {
    "origin": "Euclidean distance of rgb color space.",
    "local": ""
  },
  {
    "origin": "DISTANCE_RGBL",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.DISTANCE_RGBL",
    "local": ""
  },
  {
    "origin": "Euclidean distance of rgbl color space.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "INITIAL_METHOD_TYPE",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "Enum of the possible types of initial method.",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "INITIAL_METHOD_WHITE_BALANCE",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.INITIAL_METHOD_WHITE_BALANCE",
    "local": ""
  },
  {
    "origin": "The white balance method. The initial value is:",
    "local": ""
  },
  {
    "origin": "INITIAL_METHOD_LEAST_SQUARE",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.INITIAL_METHOD_LEAST_SQUARE",
    "local": ""
  },
  {
    "origin": "the least square method is an optimal solution under the linear RGB distance function",
    "local": ""
  },
  {
    "origin": "\\( M_{CCM}= \\begin{bmatrix} k_R &amp; 0 &amp; 0\\\\ 0 &amp; k_G &amp; 0\\\\ 0 &amp; 0 &amp; k_B\\\\ \\end{bmatrix} \\)",
    "local": ""
  },
  {
    "origin": "where",
    "local": ""
  },
  {
    "origin": "\\( k_R=mean(R_{li}')/mean(R_{li})\\\\ k_R=mean(G_{li}')/mean(G_{li})\\\\ k_R=mean(B_{li}')/mean(B_{li}) \\)",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "LINEAR_TYPE",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "Linearization transformation type.",
    "local": ""
  },
  {
    "origin": "The first step in color correction is to linearize the detected colors. Because the input color space has not been calibrated, we usually use some empirical methods to linearize. There are several common linearization methods. The first is identical transformation, the second is gamma correction, and the third is polynomial fitting.",
    "local": ""
  },
  {
    "origin": "Linearization is generally an elementwise function. The mathematical symbols are as follows:",
    "local": ""
  },
  {
    "origin": "\\(C\\): any channel of a color, could be \\(R, G\\) or \\(B\\).",
    "local": ""
  },
  {
    "origin": "\\(R, G, B\\): \\(R, G, B\\) channels respectively.",
    "local": ""
  },
  {
    "origin": "\\(G\\): grayscale;",
    "local": ""
  },
  {
    "origin": "\\(s,sl\\): subscript, which represents the detected data and its linearized value, the former is the input and the latter is the output;",
    "local": ""
  },
  {
    "origin": "\\(d,dl\\): subscript, which represents the reference data and its linearized value",
    "local": ""
  },
  {
    "origin": "Identical Transformation",
    "local": ""
  },
  {
    "origin": "No change is made during the Identical transformation linearization, usually because the tristimulus values of the input RGB image is already proportional to the luminance. For example, if the input measurement data is in RAW format, the measurement data is already linear, so no linearization is required.",
    "local": ""
  },
  {
    "origin": "The identity transformation formula is as follows:",
    "local": ""
  },
  {
    "origin": "\\[ C_{sl}=C_s \\]",
    "local": ""
  },
  {
    "origin": "Gamma Correction",
    "local": ""
  },
  {
    "origin": "Gamma correction is a means of performing nonlinearity in RGB space, see the Color Space documentation for details. In the linearization part, the value of \\(\\gamma\\) is usually set to 2.2. You can also customize the value.",
    "local": ""
  },
  {
    "origin": "The formula for gamma correction linearization is as follows:",
    "local": ""
  },
  {
    "origin": "\\[ C_{sl}=C_s^{\\gamma},\\qquad C_s\\ge0\\\\ C_{sl}=-(-C_s)^{\\gamma},\\qquad C_s&lt;0\\\\\\\\ \\]",
    "local": ""
  },
  {
    "origin": "Polynomial Fitting",
    "local": ""
  },
  {
    "origin": "Polynomial fitting uses polynomials to linearize. Provided the polynomial is:",
    "local": ""
  },
  {
    "origin": "\\[ f(x)=a_nx^n+a_{n-1}x^{n-1}+... +a_0 \\]",
    "local": ""
  },
  {
    "origin": "Then:",
    "local": ""
  },
  {
    "origin": "\\[ C_{sl}=f(C_s) \\]",
    "local": ""
  },
  {
    "origin": "In practice, \\(n\\le3\\) is used to prevent overfitting.",
    "local": ""
  },
  {
    "origin": "There are many variants of polynomial fitting, the difference lies in the way of generating \\(f(x)\\). It is usually necessary to use linearized reference colors and corresponding detected colors to calculate the polynomial parameters. However, not all colors can participate in the calculation. The saturation detected colors needs to be removed. See the algorithm introduction document for details.",
    "local": ""
  },
  {
    "origin": "Fitting Channels Respectively",
    "local": ""
  },
  {
    "origin": "Use three polynomials, \\(r(x), g(x), b(x)\\), to linearize each channel of the RGB color space[1-3]:",
    "local": ""
  },
  {
    "origin": "\\[ R_{sl}=r(R_s)\\\\ G_{sl}=g(G_s)\\\\ B_{sl}=b(B_s)\\\\ \\]",
    "local": ""
  },
  {
    "origin": "The polynomial is generated by minimizing the residual sum of squares between the detected data and the linearized reference data. Take the R-channel as an example:",
    "local": ""
  },
  {
    "origin": "\\[ R=\\arg min_{f}(\\Sigma(R_{dl}-f(R_S)^2) \\]",
    "local": ""
  },
  {
    "origin": "It's equivalent to finding the least square regression for below equations:",
    "local": ""
  },
  {
    "origin": "\\[ f(R_{s1})=R_{dl1}\\\\ f(R_{s2})=R_{dl2}\\\\ ... \\]",
    "local": ""
  },
  {
    "origin": "With a polynomial, the above equations becomes:",
    "local": ""
  },
  {
    "origin": "\\[ \\begin{bmatrix} R_{s1}^{n} &amp; R_{s1}^{n-1} &amp; ... &amp; 1\\\\ R_{s2}^{n} &amp; R_{s2}^{n-1} &amp; ... &amp; 1\\\\ ... &amp; ... &amp; ... &amp; ... \\end{bmatrix} \\begin{bmatrix} a_{n}\\\\ a_{n-1}\\\\ ... \\\\ a_0 \\end{bmatrix} = \\begin{bmatrix} R_{dl1}\\\\ R_{dl2}\\\\ ... \\end{bmatrix} \\]",
    "local": ""
  },
  {
    "origin": "It can be expressed as a system of linear equations:",
    "local": ""
  },
  {
    "origin": "\\[ AX=B \\]",
    "local": ""
  },
  {
    "origin": "When the number of reference colors is not less than the degree of the polynomial, the linear system has a least-squares solution:",
    "local": ""
  },
  {
    "origin": "\\[ X=(A^TA)^{-1}A^TB \\]",
    "local": ""
  },
  {
    "origin": "Once we get the polynomial coefficients, we can get the polynomial r.",
    "local": ""
  },
  {
    "origin": "This method of finding polynomial coefficients can be implemented by numpy.polyfit in numpy, expressed here as:",
    "local": ""
  },
  {
    "origin": "\\[ R=polyfit(R_S, R_{dl}) \\]",
    "local": ""
  },
  {
    "origin": "Note that, in general, the polynomial that we want to obtain is guaranteed to monotonically increase in the interval [0,1] , but this means that nonlinear method is needed to generate the polynomials(see [4] for detail). This would greatly increases the complexity of the program. Considering that the monotonicity does not affect the correct operation of the color correction program, polyfit is still used to implement the program.",
    "local": ""
  },
  {
    "origin": "Parameters for other channels can also be derived in a similar way.",
    "local": ""
  },
  {
    "origin": "Grayscale Polynomial Fitting",
    "local": ""
  },
  {
    "origin": "In this method[2], single polynomial is used for all channels. The polynomial is still a polyfit result from the detected colors to the linear reference colors. However, only the gray of the reference colors can participate in the calculation.",
    "local": ""
  },
  {
    "origin": "Since the detected colors corresponding to the gray of reference colors is not necessarily gray, it needs to be grayed. Grayscale refers to the Y channel of the XYZ color space. The color space of the detected data is not determined and cannot be converted into the XYZ space. Therefore, the sRGB formula is used to approximate[5].",
    "local": ""
  },
  {
    "origin": "\\[ G_{s}=0.2126R_{s}+0.7152G_{s}+0.0722B_{s} \\]",
    "local": ""
  },
  {
    "origin": "Then the polynomial parameters can be obtained by using the polyfit.",
    "local": ""
  },
  {
    "origin": "\\[ f=polyfit(G_{s}, G_{dl}) \\]",
    "local": ""
  },
  {
    "origin": "After \\(f\\) is obtained, linearization can be performed.",
    "local": ""
  },
  {
    "origin": "Logarithmic Polynomial Fitting",
    "local": ""
  },
  {
    "origin": "For gamma correction formula, we take the logarithm:",
    "local": ""
  },
  {
    "origin": "\\[ ln(C_{sl})={\\gamma}ln(C_s),\\qquad C_s\\ge0\\ \\]",
    "local": ""
  },
  {
    "origin": "It can be seen that there is a linear relationship between \\(ln(C_s)\\) and \\(ln(C_{sl})\\). It can be considered that the formula is an approximation of a polynomial relationship, that is, there exists a polynomial \\(f\\), which makes[2]:",
    "local": ""
  },
  {
    "origin": "\\[ ln(C_{sl})=f(ln(C_s)), \\qquad C_s&gt;0\\\\ C_{sl}=0, \\qquad C_s=0 \\]",
    "local": ""
  },
  {
    "origin": "Because \\(exp(ln(0))\\to\\infty \\), the channel whose component is 0 is directly mapped to 0 in the formula above.",
    "local": ""
  },
  {
    "origin": "For fitting channels respectively, we have:",
    "local": ""
  },
  {
    "origin": "\\[ r=polyfit(ln(R_s),ln(R_{dl}))\\\\ g=polyfit(ln(G_s),ln(G_{dl}))\\\\ b=polyfit(ln(B_s),ln(B_{dl}))\\\\ \\]",
    "local": ""
  },
  {
    "origin": "Note that the parameter of \\(ln(*) \\) cannot be 0. Therefore, we need to delete the channels whose values are 0 from \\(R_s \\) and \\(R_{dl} \\), \\(G_s\\) and \\(G_{dl}\\), \\(B_s\\) and \\(B_{dl}\\).",
    "local": ""
  },
  {
    "origin": "Therefore:",
    "local": ""
  },
  {
    "origin": "\\[ ln(R_{sl})=r(ln(R_s)), \\qquad R_s&gt;0\\\\ R_{sl}=0, \\qquad R_s=0\\\\ ln(G_{sl})=g(ln(G_s)),\\qquad G_s&gt;0\\\\ G_{sl}=0, \\qquad G_s=0\\\\ ln(B_{sl})=b(ln(B_s)),\\qquad B_s&gt;0\\\\ B_{sl}=0, \\qquad B_s=0\\\\ \\]",
    "local": ""
  },
  {
    "origin": "For grayscale polynomials, there are also:",
    "local": ""
  },
  {
    "origin": "\\[ f=polyfit(ln(G_{sl}),ln(G_{dl})) \\]",
    "local": ""
  },
  {
    "origin": "and:",
    "local": ""
  },
  {
    "origin": "\\[ ln(C_{sl})=f(ln(C_s)), \\qquad C_s&gt;0\\\\ C_sl=0, \\qquad C_s=0 \\]",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "LINEARIZATION_IDENTITY",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.LINEARIZATION_IDENTITY",
    "local": ""
  },
  {
    "origin": "no change is made",
    "local": ""
  },
  {
    "origin": "LINEARIZATION_GAMMA",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.LINEARIZATION_GAMMA",
    "local": ""
  },
  {
    "origin": "gamma correction; Need assign a value to gamma simultaneously",
    "local": ""
  },
  {
    "origin": "LINEARIZATION_COLORPOLYFIT",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.LINEARIZATION_COLORPOLYFIT",
    "local": ""
  },
  {
    "origin": "polynomial fitting channels respectively; Need assign a value to deg simultaneously",
    "local": ""
  },
  {
    "origin": "LINEARIZATION_COLORLOGPOLYFIT",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.LINEARIZATION_COLORLOGPOLYFIT",
    "local": ""
  },
  {
    "origin": "logarithmic polynomial fitting channels respectively; Need assign a value to deg simultaneously",
    "local": ""
  },
  {
    "origin": "LINEARIZATION_GRAYPOLYFIT",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.LINEARIZATION_GRAYPOLYFIT",
    "local": ""
  },
  {
    "origin": "grayscale polynomial fitting; Need assign a value to deg and dst_whites simultaneously",
    "local": ""
  },
  {
    "origin": "LINEARIZATION_GRAYLOGPOLYFIT",
    "local": ""
  },
  {
    "origin": "Python: cv.ccm.LINEARIZATION_GRAYLOGPOLYFIT",
    "local": ""
  },
  {
    "origin": "grayscale Logarithmic polynomial fitting; Need assign a value to deg and dst_whites simultaneously",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:41 for OpenCV by",
    "local": ""
  }
]