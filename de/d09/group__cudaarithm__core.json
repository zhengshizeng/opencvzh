[
  {
    "origin": "OpenCV: Core Operations on Matrices",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "Core Operations on Matrices",
    "local": ""
  },
  {
    "origin": "&raquo;",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Base class for transform using lookup table.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "dst, int top, int bottom, int left, int right, int borderType,",
    "local": ""
  },
  {
    "origin": "value=",
    "local": ""
  },
  {
    "origin": "(),",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Forms a border around an image.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "lut)",
    "local": ""
  },
  {
    "origin": "Creates implementation for",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "dst, int flipCode,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Flips a 2D matrix around vertical, horizontal, or both axes.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*src, size_t n,",
    "local": ""
  },
  {
    "origin": "dst,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Makes a multi-channel matrix out of several single-channel matrices.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;src,",
    "local": ""
  },
  {
    "origin": "dst,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "*dst,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Copies each plane of a multi-channel matrix into an array.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;dst,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src1,",
    "local": ""
  },
  {
    "origin": "dst,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Transposes a matrix.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Function Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "copyMakeBorder()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::copyMakeBorder",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "top",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bottom",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "left",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "right",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "borderType",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Forms a border around an image.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Source image. CV_8UC1 , CV_8UC4 , CV_32SC1 , and CV_32FC1 types are supported.",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "Destination image with the same type as src. The size is Size(src.cols+left+right, src.rows+top+bottom) .",
    "local": ""
  },
  {
    "origin": "top",
    "local": ""
  },
  {
    "origin": "Number of top pixels",
    "local": ""
  },
  {
    "origin": "bottom",
    "local": ""
  },
  {
    "origin": "Number of bottom pixels",
    "local": ""
  },
  {
    "origin": "left",
    "local": ""
  },
  {
    "origin": "Number of left pixels",
    "local": ""
  },
  {
    "origin": "right",
    "local": ""
  },
  {
    "origin": "Number of pixels in each direction from the source image rectangle to extrapolate. For example: top=1, bottom=1, left=1, right=1 mean that 1 pixel-wide border needs to be built.",
    "local": ""
  },
  {
    "origin": "borderType",
    "local": ""
  },
  {
    "origin": "Border type. See borderInterpolate for details. BORDER_REFLECT101 , BORDER_REPLICATE , BORDER_CONSTANT , BORDER_REFLECT and BORDER_WRAP are supported for now.",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": "Border value.",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "for the asynchronous version.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "createLookUpTable()",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; cv::cuda::createLookUpTable",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "lut",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Creates implementation for",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "lut",
    "local": ""
  },
  {
    "origin": "Look-up table of 256 elements. It is a continuous CV_8U matrix.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "flip()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::flip",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "flipCode",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Flips a 2D matrix around vertical, horizontal, or both axes.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Source matrix. Supports 1, 3 and 4 channels images with CV_8U, CV_16U, CV_32S or CV_32F depth.",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "Destination matrix.",
    "local": ""
  },
  {
    "origin": "flipCode",
    "local": ""
  },
  {
    "origin": "Flip mode for the source:",
    "local": ""
  },
  {
    "origin": "0 Flips around x-axis.",
    "local": ""
  },
  {
    "origin": "&gt; 0 Flips around y-axis.",
    "local": ""
  },
  {
    "origin": "&lt; 0 Flips around both axes.",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "for the asynchronous version.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "merge()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "void cv::cuda::merge",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Makes a multi-channel matrix out of several single-channel matrices.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Array/vector of source matrices.",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": "Number of source matrices.",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "Destination matrix.",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "for the asynchronous version.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "merge()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "void cv::cuda::merge",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "split()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "void cv::cuda::split",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Copies each plane of a multi-channel matrix into an array.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Source matrix.",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "Destination array/vector of single-channel matrices.",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "for the asynchronous version.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "split()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "void cv::cuda::split",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "transpose()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::transpose",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Transposes a matrix.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src1",
    "local": ""
  },
  {
    "origin": "Source matrix. 1-, 4-, 8-byte element sizes are supported for now.",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "Destination matrix.",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "for the asynchronous version.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:41 for OpenCV by &#160;",
    "local": ""
  }
]