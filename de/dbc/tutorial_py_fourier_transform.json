[
  {
    "origin": "OpenCV: Fourier Transform",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Fourier Transform",
    "local": ""
  },
  {
    "origin": "Goal",
    "local": ""
  },
  {
    "origin": "In this section, we will learn",
    "local": ""
  },
  {
    "origin": "To find the Fourier Transform of images using OpenCV",
    "local": ""
  },
  {
    "origin": "To utilize the FFT functions available in Numpy",
    "local": ""
  },
  {
    "origin": "Some applications of Fourier Transform",
    "local": ""
  },
  {
    "origin": "We will see following functions :",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "etc",
    "local": ""
  },
  {
    "origin": "Theory",
    "local": ""
  },
  {
    "origin": "Fourier Transform is used to analyze the frequency characteristics of various filters. For images,",
    "local": ""
  },
  {
    "origin": "2D Discrete Fourier Transform (DFT)",
    "local": ""
  },
  {
    "origin": "is used to find the frequency domain. A fast algorithm called",
    "local": ""
  },
  {
    "origin": "Fast Fourier Transform (FFT)",
    "local": ""
  },
  {
    "origin": "is used for calculation of DFT. Details about these can be found in any image processing or signal processing textbooks. Please see Additional Resources_ section.",
    "local": ""
  },
  {
    "origin": "For a sinusoidal signal, \\(x(t) = A \\sin(2 \\pi ft)\\), we can say \\(f\\) is the frequency of signal, and if its frequency domain is taken, we can see a spike at \\(f\\). If signal is sampled to form a discrete signal, we get the same frequency domain, but is periodic in the range \\([- \\pi, \\pi]\\) or \\([0,2\\pi]\\) (or \\([0,N]\\) for N-point DFT). You can consider an image as a signal which is sampled in two directions. So taking fourier transform in both X and Y directions gives you the frequency representation of image.",
    "local": ""
  },
  {
    "origin": "More intuitively, for the sinusoidal signal, if the amplitude varies so fast in short time, you can say it is a high frequency signal. If it varies slowly, it is a low frequency signal. You can extend the same idea to images. Where does the amplitude varies drastically in images ? At the edge points, or noises. So we can say, edges and noises are high frequency contents in an image. If there is no much changes in amplitude, it is a low frequency component. ( Some links are added to Additional Resources_ which explains frequency transform intuitively with examples).",
    "local": ""
  },
  {
    "origin": "Now we will see how to find the Fourier Transform.",
    "local": ""
  },
  {
    "origin": "Fourier Transform in Numpy",
    "local": ""
  },
  {
    "origin": "First we will see how to find Fourier Transform using Numpy. Numpy has an FFT package to do this.",
    "local": ""
  },
  {
    "origin": "np.fft.fft2()",
    "local": ""
  },
  {
    "origin": "provides us the frequency transform which will be a complex array. Its first argument is the input image, which is grayscale. Second argument is optional which decides the size of output array. If it is greater than size of input image, input image is padded with zeros before calculation of FFT. If it is less than input image, input image will be cropped. If no arguments passed, Output array size will be same as input.",
    "local": ""
  },
  {
    "origin": "Now once you got the result, zero frequency component (DC component) will be at top left corner. If you want to bring it to center, you need to shift the result by \\(\\frac{N}{2}\\) in both the directions. This is simply done by the function,",
    "local": ""
  },
  {
    "origin": "np.fft.fftshift()",
    "local": ""
  },
  {
    "origin": ". (It is more easier to analyze). Once you found the frequency transform, you can find the magnitude spectrum.",
    "local": ""
  },
  {
    "origin": "Result look like below:",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "See, You can see more whiter region at the center showing low frequency content is more.",
    "local": ""
  },
  {
    "origin": "So you found the frequency transform Now you can do some operations in frequency domain, like high pass filtering and reconstruct the image, ie find inverse DFT. For that you simply remove the low frequencies by masking with a rectangular window of size 60x60. Then apply the inverse shift using",
    "local": ""
  },
  {
    "origin": "np.fft.ifftshift()",
    "local": ""
  },
  {
    "origin": "so that DC component again come at the top-left corner. Then find inverse FFT using",
    "local": ""
  },
  {
    "origin": "np.ifft2()",
    "local": ""
  },
  {
    "origin": "function. The result, again, will be a complex number. You can take its absolute value.",
    "local": ""
  },
  {
    "origin": "Result look like below:",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "The result shows High Pass Filtering is an edge detection operation. This is what we have seen in Image Gradients chapter. This also shows that most of the image data is present in the Low frequency region of the spectrum. Anyway we have seen how to find DFT, IDFT etc in Numpy. Now let's see how to do it in OpenCV.",
    "local": ""
  },
  {
    "origin": "If you closely watch the result, especially the last image in JET color, you can see some artifacts (One instance I have marked in red arrow). It shows some ripple like structures there, and it is called",
    "local": ""
  },
  {
    "origin": "ringing effects",
    "local": ""
  },
  {
    "origin": ". It is caused by the rectangular window we used for masking. This mask is converted to sinc shape which causes this problem. So rectangular windows is not used for filtering. Better option is Gaussian Windows.",
    "local": ""
  },
  {
    "origin": "Fourier Transform in OpenCV",
    "local": ""
  },
  {
    "origin": "OpenCV provides the functions",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "for this. It returns the same result as previous, but with two channels. First channel will have the real part of the result and second channel will have the imaginary part of the result. The input image should be converted to np.float32 first. We will see how to do it.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "You can also use",
    "local": ""
  },
  {
    "origin": "which returns both magnitude and phase in a single shot",
    "local": ""
  },
  {
    "origin": "So, now we have to do inverse DFT. In previous session, we created a HPF, this time we will see how to remove high frequency contents in the image, ie we apply LPF to image. It actually blurs the image. For this, we create a mask first with high value (1) at low frequencies, ie we pass the LF content, and 0 at HF region.",
    "local": ""
  },
  {
    "origin": "See the result:",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "As usual, OpenCV functions",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "are faster than Numpy counterparts. But Numpy functions are more user-friendly. For more details about performance issues, see below section.",
    "local": ""
  },
  {
    "origin": "Performance Optimization of DFT",
    "local": ""
  },
  {
    "origin": "Performance of DFT calculation is better for some array size. It is fastest when array size is power of two. The arrays whose size is a product of 2’s, 3’s, and 5’s are also processed quite efficiently. So if you are worried about the performance of your code, you can modify the size of the array to any optimal size (by padding zeros) before finding DFT. For OpenCV, you have to manually pad zeros. But for Numpy, you specify the new size of FFT calculation, and it will automatically pad zeros for you.",
    "local": ""
  },
  {
    "origin": "So how do we find this optimal size ? OpenCV provides a function,",
    "local": ""
  },
  {
    "origin": "for this. It is applicable to both",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "np.fft.fft2()",
    "local": ""
  },
  {
    "origin": ". Let's check their performance using IPython magic command timeit.",
    "local": ""
  },
  {
    "origin": "See, the size (342,548) is modified to (360, 576). Now let's pad it with zeros (for OpenCV) and find their DFT calculation performance. You can do it by creating a new big zero array and copy the data to it, or use",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "OR:",
    "local": ""
  },
  {
    "origin": "Now we calculate the DFT performance comparison of Numpy function:",
    "local": ""
  },
  {
    "origin": "It shows a 4x speedup. Now we will try the same with OpenCV functions.",
    "local": ""
  },
  {
    "origin": "It also shows a 4x speed-up. You can also see that OpenCV functions are around 3x faster than Numpy functions. This can be tested for inverse FFT also, and that is left as an exercise for you.",
    "local": ""
  },
  {
    "origin": "Why Laplacian is a High Pass Filter?",
    "local": ""
  },
  {
    "origin": "A similar question was asked in a forum. The question is, why Laplacian is a high pass filter? Why Sobel is a HPF? etc. And the first answer given to it was in terms of Fourier Transform. Just take the fourier transform of Laplacian for some higher size of FFT. Analyze it:",
    "local": ""
  },
  {
    "origin": "See the result:",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "From image, you can see what frequency region each kernel blocks, and what region it passes. From that information, we can say why each kernel is a HPF or a LPF",
    "local": ""
  },
  {
    "origin": "Additional Resources",
    "local": ""
  },
  {
    "origin": "An Intuitive Explanation of Fourier Theory",
    "local": ""
  },
  {
    "origin": "by Steven Lehar",
    "local": ""
  },
  {
    "origin": "Fourier Transform",
    "local": ""
  },
  {
    "origin": "at HIPR",
    "local": ""
  },
  {
    "origin": "What does frequency domain denote in case of images?",
    "local": ""
  },
  {
    "origin": "Exercises",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:37 for OpenCV by &#160;",
    "local": ""
  }
]