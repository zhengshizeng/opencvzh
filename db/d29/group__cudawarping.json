[
  {
    "origin": "OpenCV: Image Warping",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "Image Warping",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "M, bool inverse,",
    "local": ""
  },
  {
    "origin": "dsize,",
    "local": ""
  },
  {
    "origin": "xmap,",
    "local": ""
  },
  {
    "origin": "ymap,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Builds transformation maps for affine transformation.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "M, bool inverse,",
    "local": ""
  },
  {
    "origin": "dsize,",
    "local": ""
  },
  {
    "origin": "&amp;xmap,",
    "local": ""
  },
  {
    "origin": "&amp;ymap,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "M, bool inverse,",
    "local": ""
  },
  {
    "origin": "dsize,",
    "local": ""
  },
  {
    "origin": "&amp;xmap,",
    "local": ""
  },
  {
    "origin": "&amp;ymap,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "M, bool inverse,",
    "local": ""
  },
  {
    "origin": "dsize,",
    "local": ""
  },
  {
    "origin": "xmap,",
    "local": ""
  },
  {
    "origin": "ymap,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Builds transformation maps for perspective transformation.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "M, bool inverse,",
    "local": ""
  },
  {
    "origin": "dsize,",
    "local": ""
  },
  {
    "origin": "&amp;xmap,",
    "local": ""
  },
  {
    "origin": "&amp;ymap,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "M, bool inverse,",
    "local": ""
  },
  {
    "origin": "dsize,",
    "local": ""
  },
  {
    "origin": "&amp;xmap,",
    "local": ""
  },
  {
    "origin": "&amp;ymap,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "dst,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Smoothes an image and downsamples it.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "dst,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Upsamples an image and then smoothes it.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "dst,",
    "local": ""
  },
  {
    "origin": "xmap,",
    "local": ""
  },
  {
    "origin": "ymap, int interpolation, int borderMode=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "borderValue=",
    "local": ""
  },
  {
    "origin": "(),",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Applies a generic geometrical transformation to an image.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "dst,",
    "local": ""
  },
  {
    "origin": "dsize, double fx=0, double fy=0, int interpolation=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Resizes an image.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "dst,",
    "local": ""
  },
  {
    "origin": "dsize, double angle, double xShift=0, double yShift=0, int interpolation=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Rotates an image around the origin (0,0) and then shifts it.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "dst,",
    "local": ""
  },
  {
    "origin": "M,",
    "local": ""
  },
  {
    "origin": "dsize, int flags=",
    "local": ""
  },
  {
    "origin": ", int borderMode=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "borderValue=",
    "local": ""
  },
  {
    "origin": "(),",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Applies an affine transformation to an image.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "dst,",
    "local": ""
  },
  {
    "origin": "M,",
    "local": ""
  },
  {
    "origin": "dsize, int flags=",
    "local": ""
  },
  {
    "origin": ", int borderMode=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "borderValue=",
    "local": ""
  },
  {
    "origin": "(),",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "dst,",
    "local": ""
  },
  {
    "origin": "M,",
    "local": ""
  },
  {
    "origin": "dsize, int flags=",
    "local": ""
  },
  {
    "origin": ", int borderMode=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "borderValue=",
    "local": ""
  },
  {
    "origin": "(),",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "dst,",
    "local": ""
  },
  {
    "origin": "M,",
    "local": ""
  },
  {
    "origin": "dsize, int flags=",
    "local": ""
  },
  {
    "origin": ", int borderMode=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "borderValue=",
    "local": ""
  },
  {
    "origin": "(),",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Applies a perspective transformation to an image.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "dst,",
    "local": ""
  },
  {
    "origin": "M,",
    "local": ""
  },
  {
    "origin": "dsize, int flags=",
    "local": ""
  },
  {
    "origin": ", int borderMode=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "borderValue=",
    "local": ""
  },
  {
    "origin": "(),",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "dst,",
    "local": ""
  },
  {
    "origin": "M,",
    "local": ""
  },
  {
    "origin": "dsize, int flags=",
    "local": ""
  },
  {
    "origin": ", int borderMode=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "borderValue=",
    "local": ""
  },
  {
    "origin": "(),",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Function Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "buildWarpAffineMaps()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "void cv::cuda::buildWarpAffineMaps",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "M",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "inverse",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dsize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "xmap",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "ymap",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Builds transformation maps for affine transformation.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "M",
    "local": ""
  },
  {
    "origin": "2x3",
    "local": ""
  },
  {
    "origin": "or",
    "local": ""
  },
  {
    "origin": "transformation matrix.",
    "local": ""
  },
  {
    "origin": "inverse",
    "local": ""
  },
  {
    "origin": "Flag specifying that M is an inverse transformation ( dst=&gt;src ).",
    "local": ""
  },
  {
    "origin": "dsize",
    "local": ""
  },
  {
    "origin": "Size of the destination image.",
    "local": ""
  },
  {
    "origin": "xmap",
    "local": ""
  },
  {
    "origin": "X values with CV_32FC1 type.",
    "local": ""
  },
  {
    "origin": "ymap",
    "local": ""
  },
  {
    "origin": "Y values with CV_32FC1 type.",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "for the asynchronous version.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "buildWarpAffineMaps()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "void cv::cuda::buildWarpAffineMaps",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "M",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "inverse",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dsize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "xmap",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "ymap",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "buildWarpAffineMaps()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "void cv::cuda::buildWarpAffineMaps",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "M",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "inverse",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dsize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "xmap",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "ymap",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "buildWarpPerspectiveMaps()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "void cv::cuda::buildWarpPerspectiveMaps",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "M",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "inverse",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dsize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "xmap",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "ymap",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Builds transformation maps for perspective transformation.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "M",
    "local": ""
  },
  {
    "origin": "3x3",
    "local": ""
  },
  {
    "origin": "or",
    "local": ""
  },
  {
    "origin": "transformation matrix.",
    "local": ""
  },
  {
    "origin": "inverse",
    "local": ""
  },
  {
    "origin": "Flag specifying that M is an inverse transformation ( dst=&gt;src ).",
    "local": ""
  },
  {
    "origin": "dsize",
    "local": ""
  },
  {
    "origin": "Size of the destination image.",
    "local": ""
  },
  {
    "origin": "xmap",
    "local": ""
  },
  {
    "origin": "X values with CV_32FC1 type.",
    "local": ""
  },
  {
    "origin": "ymap",
    "local": ""
  },
  {
    "origin": "Y values with CV_32FC1 type.",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "for the asynchronous version.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "buildWarpPerspectiveMaps()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "void cv::cuda::buildWarpPerspectiveMaps",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "M",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "inverse",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dsize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "xmap",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "ymap",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "buildWarpPerspectiveMaps()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "void cv::cuda::buildWarpPerspectiveMaps",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "M",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "inverse",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dsize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "xmap",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "ymap",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "pyrDown()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::pyrDown",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Smoothes an image and downsamples it.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Source image.",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "Destination image. Will have Size((src.cols+1)/2, (src.rows+1)/2) size and the same type as src .",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "for the asynchronous version.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "pyrUp()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::pyrUp",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Upsamples an image and then smoothes it.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Source image.",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "Destination image. Will have Size(src.cols*2, src.rows*2) size and the same type as src .",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "for the asynchronous version.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "remap()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::remap",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "xmap",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "ymap",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "interpolation",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "borderMode",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "borderValue",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Applies a generic geometrical transformation to an image.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Source image.",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "Destination image with the size the same as xmap and the type the same as src .",
    "local": ""
  },
  {
    "origin": "xmap",
    "local": ""
  },
  {
    "origin": "X values. Only CV_32FC1 type is supported.",
    "local": ""
  },
  {
    "origin": "ymap",
    "local": ""
  },
  {
    "origin": "Y values. Only CV_32FC1 type is supported.",
    "local": ""
  },
  {
    "origin": "interpolation",
    "local": ""
  },
  {
    "origin": "Interpolation method (see resize ). INTER_NEAREST , INTER_LINEAR and INTER_CUBIC are supported for now.",
    "local": ""
  },
  {
    "origin": "borderMode",
    "local": ""
  },
  {
    "origin": "Pixel extrapolation method (see borderInterpolate ). BORDER_REFLECT101 , BORDER_REPLICATE , BORDER_CONSTANT , BORDER_REFLECT and BORDER_WRAP are supported for now.",
    "local": ""
  },
  {
    "origin": "borderValue",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "for the asynchronous version.",
    "local": ""
  },
  {
    "origin": "The function transforms the source image using the specified map:",
    "local": ""
  },
  {
    "origin": "\\[\\texttt{dst} (x,y) = \\texttt{src} (xmap(x,y), ymap(x,y))\\]",
    "local": ""
  },
  {
    "origin": "Values of pixels with non-integer coordinates are computed using the bilinear interpolation.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "resize()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::resize",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dsize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "fx",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "fy",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "interpolation",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Resizes an image.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Source image.",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "Destination image with the same type as src . The size is dsize (when it is non-zero) or the size is computed from",
    "local": ""
  },
  {
    "origin": ", fx , and fy .",
    "local": ""
  },
  {
    "origin": "dsize",
    "local": ""
  },
  {
    "origin": "Destination image size. If it is zero, it is computed as:",
    "local": ""
  },
  {
    "origin": "\\[\\texttt{dsize = Size(round(fx*src.cols), round(fy*src.rows))}\\]",
    "local": ""
  },
  {
    "origin": "Either dsize or both fx and fy must be non-zero.",
    "local": ""
  },
  {
    "origin": "fx",
    "local": ""
  },
  {
    "origin": "Scale factor along the horizontal axis. If it is zero, it is computed as:",
    "local": ""
  },
  {
    "origin": "\\[\\texttt{(double)dsize.width/src.cols}\\]",
    "local": ""
  },
  {
    "origin": "fy",
    "local": ""
  },
  {
    "origin": "Scale factor along the vertical axis. If it is zero, it is computed as:",
    "local": ""
  },
  {
    "origin": "\\[\\texttt{(double)dsize.height/src.rows}\\]",
    "local": ""
  },
  {
    "origin": "interpolation",
    "local": ""
  },
  {
    "origin": "Interpolation method. INTER_NEAREST , INTER_LINEAR and INTER_CUBIC are supported for now.",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "for the asynchronous version.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "rotate()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::rotate",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dsize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "angle",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "xShift",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "yShift",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "interpolation",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Rotates an image around the origin (0,0) and then shifts it.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Source image. Supports 1, 3 or 4 channels images with CV_8U , CV_16U or CV_32F depth.",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "Destination image with the same type as src . The size is dsize .",
    "local": ""
  },
  {
    "origin": "dsize",
    "local": ""
  },
  {
    "origin": "Size of the destination image.",
    "local": ""
  },
  {
    "origin": "angle",
    "local": ""
  },
  {
    "origin": "Angle of rotation in degrees.",
    "local": ""
  },
  {
    "origin": "xShift",
    "local": ""
  },
  {
    "origin": "Shift along the horizontal axis.",
    "local": ""
  },
  {
    "origin": "yShift",
    "local": ""
  },
  {
    "origin": "Shift along the vertical axis.",
    "local": ""
  },
  {
    "origin": "interpolation",
    "local": ""
  },
  {
    "origin": "Interpolation method. Only INTER_NEAREST , INTER_LINEAR , and INTER_CUBIC are supported.",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "for the asynchronous version.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "warpAffine()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "void cv::cuda::warpAffine",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "M",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dsize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "flags",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "borderMode",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "borderValue",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Applies an affine transformation to an image.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Source image. CV_8U , CV_16U , CV_32S , or CV_32F depth and 1, 3, or 4 channels are supported.",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "Destination image with the same type as src . The size is dsize .",
    "local": ""
  },
  {
    "origin": "M",
    "local": ""
  },
  {
    "origin": "2x3",
    "local": ""
  },
  {
    "origin": "or",
    "local": ""
  },
  {
    "origin": "transformation matrix.",
    "local": ""
  },
  {
    "origin": "dsize",
    "local": ""
  },
  {
    "origin": "Size of the destination image.",
    "local": ""
  },
  {
    "origin": "flags",
    "local": ""
  },
  {
    "origin": "Combination of interpolation methods (see resize) and the optional flag WARP_INVERSE_MAP specifying that M is an inverse transformation ( dst=&gt;src ). Only INTER_NEAREST , INTER_LINEAR , and INTER_CUBIC interpolation methods are supported.",
    "local": ""
  },
  {
    "origin": "borderMode",
    "local": ""
  },
  {
    "origin": "borderValue",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "for the asynchronous version.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "warpAffine()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "void cv::cuda::warpAffine",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "M",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dsize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "flags",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "borderMode",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "borderValue",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "warpAffine()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "void cv::cuda::warpAffine",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "M",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dsize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "flags",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "borderMode",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "borderValue",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "warpPerspective()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "void cv::cuda::warpPerspective",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "M",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dsize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "flags",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "borderMode",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "borderValue",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Applies a perspective transformation to an image.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Source image. CV_8U , CV_16U , CV_32S , or CV_32F depth and 1, 3, or 4 channels are supported.",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "Destination image with the same type as src . The size is dsize .",
    "local": ""
  },
  {
    "origin": "M",
    "local": ""
  },
  {
    "origin": "3x3",
    "local": ""
  },
  {
    "origin": "or",
    "local": ""
  },
  {
    "origin": "transformation matrix.",
    "local": ""
  },
  {
    "origin": "dsize",
    "local": ""
  },
  {
    "origin": "Size of the destination image.",
    "local": ""
  },
  {
    "origin": "flags",
    "local": ""
  },
  {
    "origin": "Combination of interpolation methods (see resize ) and the optional flag WARP_INVERSE_MAP specifying that M is the inverse transformation ( dst =&gt; src ). Only INTER_NEAREST , INTER_LINEAR , and INTER_CUBIC interpolation methods are supported.",
    "local": ""
  },
  {
    "origin": "borderMode",
    "local": ""
  },
  {
    "origin": "borderValue",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "for the asynchronous version.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "warpPerspective()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "void cv::cuda::warpPerspective",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "M",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dsize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "flags",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "borderMode",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "borderValue",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "warpPerspective()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "void cv::cuda::warpPerspective",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "M",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dsize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "flags",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "borderMode",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "borderValue",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:41 for OpenCV by &#160;",
    "local": ""
  }
]