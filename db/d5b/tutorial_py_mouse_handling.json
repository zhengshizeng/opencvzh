[
  {
    "origin": "OpenCV: Mouse as a Paint-Brush",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Mouse as a Paint-Brush",
    "local": ""
  },
  {
    "origin": "Goal",
    "local": ""
  },
  {
    "origin": "Learn to handle mouse events in OpenCV",
    "local": ""
  },
  {
    "origin": "You will learn these functions :",
    "local": ""
  },
  {
    "origin": "Simple Demo",
    "local": ""
  },
  {
    "origin": "Here, we create a simple application which draws a circle on an image wherever we double-click on it.",
    "local": ""
  },
  {
    "origin": "First we create a mouse callback function which is executed when a mouse event take place. Mouse event can be anything related to mouse like left-button down, left-button up, left-button double-click etc. It gives us the coordinates (x,y) for every mouse event. With this event and location, we can do whatever we like. To list all available events available, run the following code in Python terminal:",
    "local": ""
  },
  {
    "origin": "Creating mouse callback function has a specific format which is same everywhere. It differs only in what the function does. So our mouse callback function does one thing, it draws a circle where we double-click. So see the code below. Code is self-explanatory from comments :",
    "local": ""
  },
  {
    "origin": "More Advanced Demo",
    "local": ""
  },
  {
    "origin": "Now we go for a much better application. In this, we draw either rectangles or circles (depending on the mode we select) by dragging the mouse like we do in Paint application. So our mouse callback function has two parts, one to draw rectangle and other to draw the circles. This specific example will be really helpful in creating and understanding some interactive applications like object tracking, image segmentation etc.",
    "local": ""
  },
  {
    "origin": "Next we have to bind this mouse callback function to OpenCV window. In the main loop, we should set a keyboard binding for key 'm' to toggle between rectangle and circle.",
    "local": ""
  },
  {
    "origin": "Additional Resources",
    "local": ""
  },
  {
    "origin": "Exercises",
    "local": ""
  },
  {
    "origin": "In our last example, we drew filled rectangle. You modify the code to draw an unfilled rectangle.",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:37 for OpenCV by &#160;",
    "local": ""
  }
]