[
  {
    "origin": "OpenCV: cv::dnn::LSTMLayer Class Reference",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions",
    "local": ""
  },
  {
    "origin": "List of all members",
    "local": ""
  },
  {
    "origin": "cv::dnn::LSTMLayer Class Reference",
    "local": ""
  },
  {
    "origin": "abstract",
    "local": ""
  },
  {
    "origin": "&raquo;",
    "local": ""
  },
  {
    "origin": "LSTM recurrent layer.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Inheritance diagram for cv::dnn::LSTMLayer:",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "inputName)",
    "local": ""
  },
  {
    "origin": "Returns index of input blob into the input array.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;outputName)",
    "local": ""
  },
  {
    "origin": "Returns index of output blob in output array.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;outTailShape=",
    "local": ""
  },
  {
    "origin": "Specifies shape of output blob which will be [[",
    "local": ""
  },
  {
    "origin": "],",
    "local": ""
  },
  {
    "origin": "] +",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "If this flag is set to true then layer will produce \\( c_t \\) as second output.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Specifies either interpret first dimension of input blob as timestamp dimension either as sample.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;Wh, const",
    "local": ""
  },
  {
    "origin": "&amp;Wx, const",
    "local": ""
  },
  {
    "origin": "Set trained weights for LSTM layer.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&#160;Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;params)",
    "local": ""
  },
  {
    "origin": "Initializes only",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "fields.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;node, const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "*&gt; &amp;inputs, const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;outputs, int targetId) const",
    "local": ""
  },
  {
    "origin": "Automatic Halide scheduling based on layer hyper-parameters.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "*&gt; &amp;input, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;output)",
    "local": ""
  },
  {
    "origin": "Computes and sets internal parameters according to inputs, outputs and blobs.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "inputs,",
    "local": ""
  },
  {
    "origin": "outputs)",
    "local": ""
  },
  {
    "origin": "Computes and sets internal parameters according to inputs, outputs and blobs.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;inputs, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;outputs)",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;inputs)",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(std::vector&lt;",
    "local": ""
  },
  {
    "origin": "*&gt; &amp;input, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;output, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;internals)",
    "local": ""
  },
  {
    "origin": "Given the",
    "local": ""
  },
  {
    "origin": "blobs, computes the output",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "inputs,",
    "local": ""
  },
  {
    "origin": "outputs,",
    "local": ""
  },
  {
    "origin": "internals)",
    "local": ""
  },
  {
    "origin": "Given the",
    "local": ""
  },
  {
    "origin": "blobs, computes the output",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "inputs,",
    "local": ""
  },
  {
    "origin": "outputs,",
    "local": ""
  },
  {
    "origin": "internals)",
    "local": ""
  },
  {
    "origin": "Given the",
    "local": ""
  },
  {
    "origin": "blobs, computes the output",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;inputs, const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;outputs) const",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;inputs, const int requiredOutputs, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;outputs, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;internals) const",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;scale,",
    "local": ""
  },
  {
    "origin": "&amp;shift) const",
    "local": ""
  },
  {
    "origin": "Returns parameters of layers with channel-wise multiplication and addition.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(void *context, const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;&gt; &amp;inputs, const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;&gt; &amp;outputs)",
    "local": ""
  },
  {
    "origin": "Returns a CUDA backend node.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &gt; &amp;inputs)",
    "local": ""
  },
  {
    "origin": "Returns Halide backend node.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &gt; &amp;inputs)",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &gt; &amp;inputs, const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &gt; &amp;nodes)",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &gt; &amp;inputs)",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;inputs, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;outputs, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;internals)",
    "local": ""
  },
  {
    "origin": "Allocates layer and computes output.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;layer)",
    "local": ""
  },
  {
    "origin": "Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;params)",
    "local": ""
  },
  {
    "origin": "Initializes only",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "fields.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int backendId)",
    "local": ""
  },
  {
    "origin": "Ask layer if it support specific backend for doing computations.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;node)",
    "local": ""
  },
  {
    "origin": "Implement layers fusing.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;top)",
    "local": ""
  },
  {
    "origin": "Try to fuse current layer with a next one.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "\"Deattaches\" all the layers, attached to particular layer.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;inputs)",
    "local": ""
  },
  {
    "origin": "&#160;Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Clears the algorithm state.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Returns true if the",
    "local": ""
  },
  {
    "origin": "is empty (e.g. in the very beginning or after unsuccessful read.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;fn)",
    "local": ""
  },
  {
    "origin": "Reads algorithm parameters from a file storage.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename) const",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;fs) const",
    "local": ""
  },
  {
    "origin": "Stores algorithm parameters in a file storage.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;fs, const",
    "local": ""
  },
  {
    "origin": "&amp;name=",
    "local": ""
  },
  {
    "origin": "()) const",
    "local": ""
  },
  {
    "origin": "simplified API for language bindings This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;params)",
    "local": ""
  },
  {
    "origin": "&#160;Static Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename, const",
    "local": ""
  },
  {
    "origin": "&amp;objname=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Loads algorithm from the file.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;strModel, const",
    "local": ""
  },
  {
    "origin": "&amp;objname=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Loads algorithm from a String.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;fn)",
    "local": ""
  },
  {
    "origin": "Reads algorithm from the file node.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Additional Inherited Members",
    "local": ""
  },
  {
    "origin": "&#160;Public Attributes inherited from",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "List of learned parameters must be stored here to allow read them by using",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Name of the layer instance, can be used for logging or other internal purposes.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "prefer target for layer forwarding",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Type name which was used for creating layer by layer factory.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&#160;Protected Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;fs) const",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "LSTM recurrent layer.",
    "local": ""
  },
  {
    "origin": "Member Function Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "create()",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; cv::dnn::LSTMLayer::create",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "params",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Creates instance of LSTM layer",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "inputNameToIndex()",
    "local": ""
  },
  {
    "origin": "int cv::dnn::LSTMLayer::inputNameToIndex",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "inputName",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Returns index of input blob into the input array.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "inputName",
    "local": ""
  },
  {
    "origin": "label of input blob",
    "local": ""
  },
  {
    "origin": "Each layer input and output can be labeled to easily identify them using \"%&lt;layer_name%&gt;[.output_name]\" notation. This method maps label of input blob to its index into input vector.",
    "local": ""
  },
  {
    "origin": "Reimplemented from",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "outputNameToIndex()",
    "local": ""
  },
  {
    "origin": "int cv::dnn::LSTMLayer::outputNameToIndex",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "outputName",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Returns index of output blob in output array.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "Reimplemented from",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "setOutShape()",
    "local": ""
  },
  {
    "origin": "virtual void cv::dnn::LSTMLayer::setOutShape",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "outTailShape",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Specifies shape of output blob which will be [[",
    "local": ""
  },
  {
    "origin": "],",
    "local": ""
  },
  {
    "origin": "] +",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "If this parameter is empty or unset then",
    "local": ""
  },
  {
    "origin": "= [",
    "local": ""
  },
  {
    "origin": ".size(0)] will be used, where",
    "local": ""
  },
  {
    "origin": "is parameter from",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "setProduceCellOutput()",
    "local": ""
  },
  {
    "origin": "virtual void cv::dnn::LSTMLayer::setProduceCellOutput",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "produce",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "If this flag is set to true then layer will produce \\( c_t \\) as second output.",
    "local": ""
  },
  {
    "origin": "Use flag",
    "local": ""
  },
  {
    "origin": "in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Shape of the second output is the same as first output.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "setUseTimstampsDim()",
    "local": ""
  },
  {
    "origin": "virtual void cv::dnn::LSTMLayer::setUseTimstampsDim",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "use",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Specifies either interpret first dimension of input blob as timestamp dimension either as sample.",
    "local": ""
  },
  {
    "origin": "Use flag",
    "local": ""
  },
  {
    "origin": "in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "If flag is set to true then shape of input blob will be interpreted as [",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "] where",
    "local": ""
  },
  {
    "origin": "specifies number of timestamps,",
    "local": ""
  },
  {
    "origin": "is number of independent streams. In this case each",
    "local": ""
  },
  {
    "origin": "call will iterate through",
    "local": ""
  },
  {
    "origin": "timestamps and update layer's state",
    "local": ""
  },
  {
    "origin": "times.",
    "local": ""
  },
  {
    "origin": "If flag is set to false then shape of input blob will be interpreted as [",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "]. In this case each",
    "local": ""
  },
  {
    "origin": "call will make one iteration and produce one timestamp with shape [",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "].",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "setWeights()",
    "local": ""
  },
  {
    "origin": "virtual void cv::dnn::LSTMLayer::setWeights",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Wh",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Wx",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Set trained weights for LSTM layer.",
    "local": ""
  },
  {
    "origin": "Use",
    "local": ""
  },
  {
    "origin": "instead.",
    "local": ""
  },
  {
    "origin": "LSTM behavior on each step is defined by current input, previous output, previous cell state and learned weights.",
    "local": ""
  },
  {
    "origin": "Let \\(x_t\\) be current input, \\(h_t\\) be current output, \\(c_t\\) be current state. Than current output and current cell state is computed as follows:",
    "local": ""
  },
  {
    "origin": "\\begin{eqnarray*} h_t &amp;= o_t \\odot tanh(c_t), \\\\ c_t &amp;= f_t \\odot c_{t-1} + i_t \\odot g_t, \\\\ \\end{eqnarray*}",
    "local": ""
  },
  {
    "origin": "where \\(\\odot\\) is per-element multiply operation and \\(i_t, f_t, o_t, g_t\\) is internal gates that are computed using learned weights.",
    "local": ""
  },
  {
    "origin": "Gates are computed as follows:",
    "local": ""
  },
  {
    "origin": "\\begin{eqnarray*} i_t &amp;= sigmoid&amp;(W_{xi} x_t + W_{hi} h_{t-1} + b_i), \\\\ f_t &amp;= sigmoid&amp;(W_{xf} x_t + W_{hf} h_{t-1} + b_f), \\\\ o_t &amp;= sigmoid&amp;(W_{xo} x_t + W_{ho} h_{t-1} + b_o), \\\\ g_t &amp;= tanh &amp;(W_{xg} x_t + W_{hg} h_{t-1} + b_g), \\\\ \\end{eqnarray*}",
    "local": ""
  },
  {
    "origin": "where \\(W_{x?}\\), \\(W_{h?}\\) and \\(b_{?}\\) are learned weights represented as matrices: \\(W_{x?} \\in R^{N_h \\times N_x}\\), \\(W_{h?} \\in R^{N_h \\times N_h}\\), \\(b_? \\in R^{N_h}\\).",
    "local": ""
  },
  {
    "origin": "For simplicity and performance purposes we use \\( W_x = [W_{xi}; W_{xf}; W_{xo}, W_{xg}] \\) (i.e. \\(W_x\\) is vertical concatenation of \\( W_{x?} \\)), \\( W_x \\in R^{4N_h \\times N_x} \\). The same for \\( W_h = [W_{hi}; W_{hf}; W_{ho}, W_{hg}], W_h \\in R^{4N_h \\times N_h} \\) and for \\( b = [b_i; b_f, b_o, b_g]\\), \\(b \\in R^{4N_h} \\).",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "Wh",
    "local": ""
  },
  {
    "origin": "is matrix defining how previous output is transformed to internal gates (i.e. according to above mentioned notation is \\( W_h \\))",
    "local": ""
  },
  {
    "origin": "Wx",
    "local": ""
  },
  {
    "origin": "is matrix defining how current input is transformed to internal gates (i.e. according to above mentioned notation is \\( W_x \\))",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": "is bias vector (i.e. according to above mentioned notation is \\( b \\))",
    "local": ""
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": ""
  },
  {
    "origin": "opencv2/dnn/",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:47 for OpenCV by &#160;",
    "local": ""
  }
]