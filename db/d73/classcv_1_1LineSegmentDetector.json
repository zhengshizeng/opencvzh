[
  {
    "origin": "OpenCV: cv::LineSegmentDetector Class Reference",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "List of all members",
    "local": ""
  },
  {
    "origin": "cv::LineSegmentDetector Class Reference",
    "local": ""
  },
  {
    "origin": "abstract",
    "local": ""
  },
  {
    "origin": "»",
    "local": ""
  },
  {
    "origin": "Line segment detector class.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Inheritance diagram for cv::LineSegmentDetector:",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "virtual int",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;size,",
    "local": ""
  },
  {
    "origin": "lines1,",
    "local": ""
  },
  {
    "origin": "lines2,",
    "local": ""
  },
  {
    "origin": "_image=",
    "local": ""
  },
  {
    "origin": "Draws two groups of lines in blue and red, counting the non overlapping (mismatching) pixels.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "_image,",
    "local": ""
  },
  {
    "origin": "_lines,",
    "local": ""
  },
  {
    "origin": "width=",
    "local": ""
  },
  {
    "origin": "(),",
    "local": ""
  },
  {
    "origin": "prec=",
    "local": ""
  },
  {
    "origin": "(),",
    "local": ""
  },
  {
    "origin": "nfa=",
    "local": ""
  },
  {
    "origin": "Finds lines in the input image.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "_image,",
    "local": ""
  },
  {
    "origin": "Draws the line segments on a given image.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Clears the algorithm state.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual bool",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Returns true if the",
    "local": ""
  },
  {
    "origin": "is empty (e.g. in the very beginning or after unsuccessful read.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;fn)",
    "local": ""
  },
  {
    "origin": "Reads algorithm parameters from a file storage.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename) const",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;fs) const",
    "local": ""
  },
  {
    "origin": "Stores algorithm parameters in a file storage.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;fs, const",
    "local": ""
  },
  {
    "origin": "&amp;name=",
    "local": ""
  },
  {
    "origin": "()) const",
    "local": ""
  },
  {
    "origin": "simplified API for language bindings This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Additional Inherited Members",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename, const",
    "local": ""
  },
  {
    "origin": "&amp;objname=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Loads algorithm from the file.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;strModel, const",
    "local": ""
  },
  {
    "origin": "&amp;objname=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Loads algorithm from a String.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;fn)",
    "local": ""
  },
  {
    "origin": "Reads algorithm from the file node.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Protected Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;fs) const",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Line segment detector class.",
    "local": ""
  },
  {
    "origin": "following the algorithm described at",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Implementation has been removed due original code license conflict",
    "local": ""
  },
  {
    "origin": "Constructor &amp; Destructor Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "~LineSegmentDetector()",
    "local": ""
  },
  {
    "origin": "virtual cv::LineSegmentDetector::~LineSegmentDetector",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Member Function Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "compareSegments()",
    "local": ""
  },
  {
    "origin": "virtual int cv::LineSegmentDetector::compareSegments",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "size",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "lines1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "lines2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "_image",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval, _image",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.LineSegmentDetector.compareSegments(",
    "local": ""
  },
  {
    "origin": "size, lines1, lines2[, _image]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Draws two groups of lines in blue and red, counting the non overlapping (mismatching) pixels.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "size",
    "local": ""
  },
  {
    "origin": "The size of the image, where lines1 and lines2 were found.",
    "local": ""
  },
  {
    "origin": "lines1",
    "local": ""
  },
  {
    "origin": "The first group of lines that needs to be drawn. It is visualized in blue color.",
    "local": ""
  },
  {
    "origin": "lines2",
    "local": ""
  },
  {
    "origin": "The second group of lines. They visualized in red color.",
    "local": ""
  },
  {
    "origin": "_image",
    "local": ""
  },
  {
    "origin": "Optional image, where the lines will be drawn. The image should be color(3-channel) in order for lines1 and lines2 to be drawn in the above mentioned colors.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "detect()",
    "local": ""
  },
  {
    "origin": "virtual void cv::LineSegmentDetector::detect",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "_image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "_lines",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "width",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "prec",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "nfa",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "_lines, width, prec, nfa",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.LineSegmentDetector.detect(",
    "local": ""
  },
  {
    "origin": "_image[, _lines[, width[, prec[, nfa]]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Finds lines in the input image.",
    "local": ""
  },
  {
    "origin": "This is the output of the default parameters of the algorithm on the above shown image.",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "_image",
    "local": ""
  },
  {
    "origin": "A grayscale (CV_8UC1) input image. If only a roi needs to be selected, use:",
    "local": ""
  },
  {
    "origin": "_lines",
    "local": ""
  },
  {
    "origin": "A vector of Vec4i or Vec4f elements specifying the beginning and ending point of a line. Where Vec4i/Vec4f is (x1, y1, x2, y2), point 1 is the start, point 2 - end. Returned lines are strictly oriented depending on the gradient.",
    "local": ""
  },
  {
    "origin": "width",
    "local": ""
  },
  {
    "origin": "Vector of widths of the regions, where the lines are found. E.g. Width of line.",
    "local": ""
  },
  {
    "origin": "prec",
    "local": ""
  },
  {
    "origin": "Vector of precisions with which the lines are found.",
    "local": ""
  },
  {
    "origin": "nfa",
    "local": ""
  },
  {
    "origin": "Vector containing number of false alarms in the line region, with precision of 10%. The bigger the value, logarithmically better the detection.",
    "local": ""
  },
  {
    "origin": "-1 corresponds to 10 mean false alarms",
    "local": ""
  },
  {
    "origin": "0 corresponds to 1 mean false alarm",
    "local": ""
  },
  {
    "origin": "1 corresponds to 0.1 mean false alarms This vector will be calculated only when the objects type is",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "drawSegments()",
    "local": ""
  },
  {
    "origin": "virtual void cv::LineSegmentDetector::drawSegments",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "_image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "lines",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "_image",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.LineSegmentDetector.drawSegments(",
    "local": ""
  },
  {
    "origin": "_image, lines",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Draws the line segments on a given image.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "_image",
    "local": ""
  },
  {
    "origin": "The image, where the lines will be drawn. Should be bigger or equal to the image, where the lines were found.",
    "local": ""
  },
  {
    "origin": "lines",
    "local": ""
  },
  {
    "origin": "A vector of the lines that needed to be drawn.",
    "local": ""
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": ""
  },
  {
    "origin": "opencv2/",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:43 for OpenCV by",
    "local": ""
  }
]