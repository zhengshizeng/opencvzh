[
  {
    "origin": "OpenCV: cv::cuda::NvidiaOpticalFlow_2_0 Class Reference",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Public Types",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions",
    "local": ""
  },
  {
    "origin": "List of all members",
    "local": ""
  },
  {
    "origin": "cv::cuda::NvidiaOpticalFlow_2_0 Class Reference",
    "local": ""
  },
  {
    "origin": "abstract",
    "local": ""
  },
  {
    "origin": "&raquo;",
    "local": ""
  },
  {
    "origin": "Class for computing the optical flow vectors between two images using NVIDIA Optical Flow hardware and Optical Flow SDK 2.0.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Inheritance diagram for cv::cuda::NvidiaOpticalFlow_2_0:",
    "local": ""
  },
  {
    "origin": "Public Types",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= 20,",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "flow,",
    "local": ""
  },
  {
    "origin": "helper function converts the hardware-generated flow vectors to floating point representation (1 flow vector for gridSize). gridSize can be queried via function",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&#160;Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "inputImage,",
    "local": ""
  },
  {
    "origin": "referenceImage,",
    "local": ""
  },
  {
    "origin": "flow,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "(),",
    "local": ""
  },
  {
    "origin": "hint=",
    "local": ""
  },
  {
    "origin": "(),",
    "local": ""
  },
  {
    "origin": "cost=",
    "local": ""
  },
  {
    "origin": "Calculates Optical Flow using NVIDIA Optical Flow SDK.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Releases all buffers, contexts and device pointers.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Returns grid size of output buffer as per the hardware's capability.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&#160;Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Clears the algorithm state.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Returns true if the",
    "local": ""
  },
  {
    "origin": "is empty (e.g. in the very beginning or after unsuccessful read.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;fn)",
    "local": ""
  },
  {
    "origin": "Reads algorithm parameters from a file storage.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename) const",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;fs) const",
    "local": ""
  },
  {
    "origin": "Stores algorithm parameters in a file storage.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;fs, const",
    "local": ""
  },
  {
    "origin": "&amp;name=",
    "local": ""
  },
  {
    "origin": "()) const",
    "local": ""
  },
  {
    "origin": "simplified API for language bindings This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "imageSize,",
    "local": ""
  },
  {
    "origin": "perfPreset=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "outputGridSize=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hintGridSize=",
    "local": ""
  },
  {
    "origin": "&amp;inputStream=",
    "local": ""
  },
  {
    "origin": "(),",
    "local": ""
  },
  {
    "origin": "&amp;outputStream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Instantiate NVIDIA Optical Flow.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "imageSize, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; roiData,",
    "local": ""
  },
  {
    "origin": "perfPreset=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "outputGridSize=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hintGridSize=",
    "local": ""
  },
  {
    "origin": "&amp;inputStream=",
    "local": ""
  },
  {
    "origin": "(),",
    "local": ""
  },
  {
    "origin": "&amp;outputStream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Instantiate NVIDIA Optical Flow with ROI Feature.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&#160;Static Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename, const",
    "local": ""
  },
  {
    "origin": "&amp;objname=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Loads algorithm from the file.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;strModel, const",
    "local": ""
  },
  {
    "origin": "&amp;objname=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Loads algorithm from a String.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;fn)",
    "local": ""
  },
  {
    "origin": "Reads algorithm from the file node.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Additional Inherited Members",
    "local": ""
  },
  {
    "origin": "&#160;Protected Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;fs) const",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Class for computing the optical flow vectors between two images using NVIDIA Optical Flow hardware and Optical Flow SDK 2.0.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "A sample application demonstrating the use of NVIDIA Optical Flow can be found at opencv_contrib_source_code/modules/cudaoptflow/samples/nvidia_optical_flow.cpp",
    "local": ""
  },
  {
    "origin": "An example application comparing accuracy and performance of NVIDIA Optical Flow with other optical flow algorithms in OpenCV can be found at opencv_contrib_source_code/modules/cudaoptflow/samples/optical_flow.cpp",
    "local": ""
  },
  {
    "origin": "Member Enumeration Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "NVIDIA_OF_HINT_VECTOR_GRID_SIZE",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "Supported grid size for hint buffer.",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "NV_OF_HINT_VECTOR_GRID_SIZE_1&#160;",
    "local": ""
  },
  {
    "origin": "Hint buffer grid size is 1x1.",
    "local": ""
  },
  {
    "origin": "NV_OF_HINT_VECTOR_GRID_SIZE_2&#160;",
    "local": ""
  },
  {
    "origin": "Hint buffer grid size is 2x2.",
    "local": ""
  },
  {
    "origin": "NV_OF_HINT_VECTOR_GRID_SIZE_4&#160;",
    "local": ""
  },
  {
    "origin": "Hint buffer grid size is 4x4.",
    "local": ""
  },
  {
    "origin": "NV_OF_HINT_VECTOR_GRID_SIZE_8&#160;",
    "local": ""
  },
  {
    "origin": "Hint buffer grid size is 8x8.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "NVIDIA_OF_OUTPUT_VECTOR_GRID_SIZE",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "Supported grid size for output buffer.",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "NV_OF_OUTPUT_VECTOR_GRID_SIZE_1&#160;",
    "local": ""
  },
  {
    "origin": "Output buffer grid size is 1x1",
    "local": ""
  },
  {
    "origin": "NV_OF_OUTPUT_VECTOR_GRID_SIZE_2&#160;",
    "local": ""
  },
  {
    "origin": "Output buffer grid size is 2x2",
    "local": ""
  },
  {
    "origin": "NV_OF_OUTPUT_VECTOR_GRID_SIZE_4&#160;",
    "local": ""
  },
  {
    "origin": "Output buffer grid size is 4x4",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "NVIDIA_OF_PERF_LEVEL",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "Supported optical flow performance levels.",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "Slow perf level results in lowest performance and best quality",
    "local": ""
  },
  {
    "origin": "Medium perf level results in low performance and medium quality",
    "local": ""
  },
  {
    "origin": "Fast perf level results in high performance and low quality",
    "local": ""
  },
  {
    "origin": "Member Function Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "convertToFloat()",
    "local": ""
  },
  {
    "origin": "virtual void cv::cuda::NvidiaOpticalFlow_2_0::convertToFloat",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "flow",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "floatFlow",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "helper function converts the hardware-generated flow vectors to floating point representation (1 flow vector for gridSize). gridSize can be queried via function",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "flow",
    "local": ""
  },
  {
    "origin": "Buffer of type CV_16FC2 containing flow vectors generated by",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "floatFlow",
    "local": ""
  },
  {
    "origin": "Buffer of type CV_32FC2, containing flow vectors in floating point representation, each flow vector for 1 pixel per gridSize, in the pitch-linear layout.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "create()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; cv::cuda::NvidiaOpticalFlow_2_0::create",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "imageSize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "perfPreset",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "outputGridSize",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hintGridSize",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "enableTemporalHints",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "enableExternalHints",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "enableCostBuffer",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "gpuId",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "inputStream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "outputStream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Instantiate NVIDIA Optical Flow.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "imageSize",
    "local": ""
  },
  {
    "origin": "Size of input image in pixels.",
    "local": ""
  },
  {
    "origin": "perfPreset",
    "local": ""
  },
  {
    "origin": "Optional parameter. Refer",
    "local": ""
  },
  {
    "origin": "NV OF SDK documentation",
    "local": ""
  },
  {
    "origin": "for details about presets. Defaults to NV_OF_PERF_LEVEL_SLOW.",
    "local": ""
  },
  {
    "origin": "outputGridSize",
    "local": ""
  },
  {
    "origin": "Optional parameter. Refer",
    "local": ""
  },
  {
    "origin": "NV OF SDK documentation",
    "local": ""
  },
  {
    "origin": "for details about output grid sizes. Defaults to NV_OF_OUTPUT_VECTOR_GRID_SIZE_1.",
    "local": ""
  },
  {
    "origin": "hintGridSize",
    "local": ""
  },
  {
    "origin": "Optional parameter. Refer",
    "local": ""
  },
  {
    "origin": "NV OF SDK documentation",
    "local": ""
  },
  {
    "origin": "for details about hint grid sizes. Defaults to NV_OF_HINT_VECTOR_GRID_SIZE_1.",
    "local": ""
  },
  {
    "origin": "enableTemporalHints",
    "local": ""
  },
  {
    "origin": "Optional parameter. Flag to enable temporal hints. When set to true, the hardware uses the flow vectors generated in previous call to",
    "local": ""
  },
  {
    "origin": "as internal hints for the current call to",
    "local": ""
  },
  {
    "origin": ". Useful when computing flow vectors between successive video frames. Defaults to false.",
    "local": ""
  },
  {
    "origin": "enableExternalHints",
    "local": ""
  },
  {
    "origin": "Optional Parameter. Flag to enable passing external hints buffer to",
    "local": ""
  },
  {
    "origin": ". Defaults to false.",
    "local": ""
  },
  {
    "origin": "enableCostBuffer",
    "local": ""
  },
  {
    "origin": "Optional Parameter. Flag to enable cost buffer output from",
    "local": ""
  },
  {
    "origin": ". Defaults to false.",
    "local": ""
  },
  {
    "origin": "gpuId",
    "local": ""
  },
  {
    "origin": "inputStream",
    "local": ""
  },
  {
    "origin": "Optical flow algorithm may optionally involve cuda preprocessing on the input buffers. The input cuda stream can be used to pipeline and synchronize the cuda preprocessing tasks with OF HW engine. If input stream is not set, the execute function will use default stream which is NULL stream;",
    "local": ""
  },
  {
    "origin": "outputStream",
    "local": ""
  },
  {
    "origin": "Optical flow algorithm may optionally involve cuda post processing on the output flow vectors. The output cuda stream can be used to pipeline and synchronize the cuda post processing tasks with OF HW engine. If output stream is not set, the execute function will use default stream which is NULL stream;",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "create()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; cv::cuda::NvidiaOpticalFlow_2_0::create",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "imageSize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "roiData",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "perfPreset",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "outputGridSize",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hintGridSize",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "enableTemporalHints",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "enableExternalHints",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "enableCostBuffer",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "gpuId",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "inputStream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "outputStream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Instantiate NVIDIA Optical Flow with ROI Feature.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "imageSize",
    "local": ""
  },
  {
    "origin": "Size of input image in pixels.",
    "local": ""
  },
  {
    "origin": "roiData",
    "local": ""
  },
  {
    "origin": "Pointer to ROI data.",
    "local": ""
  },
  {
    "origin": "perfPreset",
    "local": ""
  },
  {
    "origin": "Optional parameter. Refer",
    "local": ""
  },
  {
    "origin": "NV OF SDK documentation",
    "local": ""
  },
  {
    "origin": "for details about presets. Defaults to NV_OF_PERF_LEVEL_SLOW.",
    "local": ""
  },
  {
    "origin": "outputGridSize",
    "local": ""
  },
  {
    "origin": "Optional parameter. Refer",
    "local": ""
  },
  {
    "origin": "NV OF SDK documentation",
    "local": ""
  },
  {
    "origin": "for details about output grid sizes. Defaults to NV_OF_OUTPUT_VECTOR_GRID_SIZE_1.",
    "local": ""
  },
  {
    "origin": "hintGridSize",
    "local": ""
  },
  {
    "origin": "Optional parameter. Refer",
    "local": ""
  },
  {
    "origin": "NV OF SDK documentation",
    "local": ""
  },
  {
    "origin": "for details about hint grid sizes. Defaults to NV_OF_HINT_VECTOR_GRID_SIZE_1.",
    "local": ""
  },
  {
    "origin": "enableTemporalHints",
    "local": ""
  },
  {
    "origin": "Optional parameter. Flag to enable temporal hints. When set to true, the hardware uses the flow vectors generated in previous call to",
    "local": ""
  },
  {
    "origin": "as internal hints for the current call to",
    "local": ""
  },
  {
    "origin": ". Useful when computing flow vectors between successive video frames. Defaults to false.",
    "local": ""
  },
  {
    "origin": "enableExternalHints",
    "local": ""
  },
  {
    "origin": "Optional Parameter. Flag to enable passing external hints buffer to",
    "local": ""
  },
  {
    "origin": ". Defaults to false.",
    "local": ""
  },
  {
    "origin": "enableCostBuffer",
    "local": ""
  },
  {
    "origin": "Optional Parameter. Flag to enable cost buffer output from",
    "local": ""
  },
  {
    "origin": ". Defaults to false.",
    "local": ""
  },
  {
    "origin": "gpuId",
    "local": ""
  },
  {
    "origin": "inputStream",
    "local": ""
  },
  {
    "origin": "Optical flow algorithm may optionally involve cuda preprocessing on the input buffers. The input cuda stream can be used to pipeline and synchronize the cuda preprocessing tasks with OF HW engine. If input stream is not set, the execute function will use default stream which is NULL stream;",
    "local": ""
  },
  {
    "origin": "outputStream",
    "local": ""
  },
  {
    "origin": "Optical flow algorithm may optionally involve cuda post processing on the output flow vectors. The output cuda stream can be used to pipeline and synchronize the cuda post processing tasks with OF HW engine. If output stream is not set, the execute function will use default stream which is NULL stream;",
    "local": ""
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": ""
  },
  {
    "origin": "opencv2/",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:44 for OpenCV by &#160;",
    "local": ""
  }
]