[
  {
    "origin": "OpenCV: cv::ppf_match_3d::PPF3DDetector Class Reference",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "Protected Member Functions",
    "local": ""
  },
  {
    "origin": "Protected Attributes",
    "local": ""
  },
  {
    "origin": "List of all members",
    "local": ""
  },
  {
    "origin": "cv::ppf_match_3d::PPF3DDetector Class Reference",
    "local": ""
  },
  {
    "origin": "Class, allowing the load and matching 3D models. Typical Use:",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Empty constructor. Sets default arguments.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const double relativeSamplingStep, const double relativeDistanceStep=0.05, const double numAngles=30)",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;scene, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;results, const double relativeSceneSampleStep=1.0/5.0, const double relativeSceneDistance=0.03)",
    "local": ""
  },
  {
    "origin": "Matches a trained model across a provided scene.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;fn)",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const double positionThreshold=-1, const double rotationThreshold=-1, const bool useWeightedClustering=false)",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;Model)",
    "local": ""
  },
  {
    "origin": "Trains a new model.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;fs) const",
    "local": ""
  },
  {
    "origin": "Protected Member Functions",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Protected Attributes",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "*",
    "local": ""
  },
  {
    "origin": "*",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Class, allowing the load and matching 3D models. Typical Use:",
    "local": ""
  },
  {
    "origin": "Constructor &amp; Destructor Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "PPF3DDetector()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "cv::ppf_match_3d::PPF3DDetector::PPF3DDetector",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "&lt;ppf_match_3d_PPF3DDetector object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.ppf_match_3d_PPF3DDetector(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;ppf_match_3d_PPF3DDetector object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.ppf_match_3d_PPF3DDetector(",
    "local": ""
  },
  {
    "origin": "relativeSamplingStep[, relativeDistanceStep[, numAngles]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Empty constructor. Sets default arguments.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "PPF3DDetector()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "cv::ppf_match_3d::PPF3DDetector::PPF3DDetector",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const double",
    "local": ""
  },
  {
    "origin": "relativeSamplingStep",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const double",
    "local": ""
  },
  {
    "origin": "relativeDistanceStep",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const double",
    "local": ""
  },
  {
    "origin": "numAngles",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "&lt;ppf_match_3d_PPF3DDetector object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.ppf_match_3d_PPF3DDetector(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;ppf_match_3d_PPF3DDetector object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.ppf_match_3d_PPF3DDetector(",
    "local": ""
  },
  {
    "origin": "relativeSamplingStep[, relativeDistanceStep[, numAngles]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Constructor with arguments",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "relativeSamplingStep",
    "local": ""
  },
  {
    "origin": "Sampling distance relative to the object's diameter. Models are first sampled uniformly in order to improve efficiency. Decreasing this value leads to a denser model, and a more accurate pose estimation but the larger the model, the slower the training. Increasing the value leads to a less accurate pose computation but a smaller model and faster model generation and matching. Beware of the memory consumption when using small values.",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "relativeDistanceStep",
    "local": ""
  },
  {
    "origin": "The discretization distance of the point pair distance relative to the model's diameter. This value has a direct impact on the hashtable. Using small values would lead to too fine discretization, and thus ambiguity in the bins of hashtable. Too large values would lead to no discrimination over the feature vectors and different point pair features would be assigned to the same bin. This argument defaults to the value of RelativeSamplingStep. For noisy scenes, the value can be increased to improve the robustness of the matching against noisy points.",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "numAngles",
    "local": ""
  },
  {
    "origin": "Set the discretization of the point pair orientation as the number of subdivisions of the angle. This value is the equivalent of RelativeDistanceStep for the orientations. Increasing the value increases the precision of the matching but decreases the robustness against incorrect normal directions. Decreasing the value decreases the precision of the matching but increases the robustness against incorrect normal directions. For very noisy scenes where the normal directions can not be computed accurately, the value can be set to 25 or 20.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "~PPF3DDetector()",
    "local": ""
  },
  {
    "origin": "virtual cv::ppf_match_3d::PPF3DDetector::~PPF3DDetector",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Member Function Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "clearTrainingModels()",
    "local": ""
  },
  {
    "origin": "void cv::ppf_match_3d::PPF3DDetector::clearTrainingModels",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "protected",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "match()",
    "local": ""
  },
  {
    "origin": "void cv::ppf_match_3d::PPF3DDetector::match",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "scene",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "results",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const double",
    "local": ""
  },
  {
    "origin": "relativeSceneSampleStep",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const double",
    "local": ""
  },
  {
    "origin": "relativeSceneDistance",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "results",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.ppf_match_3d_PPF3DDetector.match(",
    "local": ""
  },
  {
    "origin": "scene[, relativeSceneSampleStep[, relativeSceneDistance]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Matches a trained model across a provided scene.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "scene",
    "local": ""
  },
  {
    "origin": "Point cloud for the scene",
    "local": ""
  },
  {
    "origin": "[out]",
    "local": ""
  },
  {
    "origin": "results",
    "local": ""
  },
  {
    "origin": "List of output poses",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "relativeSceneSampleStep",
    "local": ""
  },
  {
    "origin": "The ratio of scene points to be used for the matching after sampling with relativeSceneDistance. For example, if this value is set to 1.0/5.0, every 5th point from the scene is used for pose estimation. This parameter allows an easy trade-off between speed and accuracy of the matching. Increasing the value leads to less points being used and in turn to a faster but less accurate pose computation. Decreasing the value has the inverse effect.",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "relativeSceneDistance",
    "local": ""
  },
  {
    "origin": "Set the distance threshold relative to the diameter of the model. This parameter is equivalent to relativeSamplingStep in the training stage. This parameter acts like a prior sampling with the relativeSceneSampleStep parameter.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "void cv::ppf_match_3d::PPF3DDetector::read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "fn",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "setSearchParams()",
    "local": ""
  },
  {
    "origin": "void cv::ppf_match_3d::PPF3DDetector::setSearchParams",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const double",
    "local": ""
  },
  {
    "origin": "positionThreshold",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const double",
    "local": ""
  },
  {
    "origin": "rotationThreshold",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const bool",
    "local": ""
  },
  {
    "origin": "useWeightedClustering",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Set the parameters for the search",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "positionThreshold",
    "local": ""
  },
  {
    "origin": "Position threshold controlling the similarity of translations. Depends on the units of calibration/model.",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "rotationThreshold",
    "local": ""
  },
  {
    "origin": "Position threshold controlling the similarity of rotations. This parameter can be perceived as a threshold over the difference of angles",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "useWeightedClustering",
    "local": ""
  },
  {
    "origin": "The algorithm by default clusters the poses without weighting. A non-zero value would indicate that the pose clustering should take into account the number of votes as the weights and perform a weighted averaging instead of a simple one.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "trainModel()",
    "local": ""
  },
  {
    "origin": "void cv::ppf_match_3d::PPF3DDetector::trainModel",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "Model",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.ppf_match_3d_PPF3DDetector.trainModel(",
    "local": ""
  },
  {
    "origin": "Model",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Trains a new model.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "Model",
    "local": ""
  },
  {
    "origin": "The input point cloud with normals (Nx6)",
    "local": ""
  },
  {
    "origin": "Uses the parameters set in the constructor to downsample and learn a new model. When the model is learnt, the instance gets ready for calling \"match\".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "write()",
    "local": ""
  },
  {
    "origin": "void cv::ppf_match_3d::PPF3DDetector::write",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "fs",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Member Data Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "angle_step",
    "local": ""
  },
  {
    "origin": "double cv::ppf_match_3d::PPF3DDetector::angle_step",
    "local": ""
  },
  {
    "origin": "protected",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "angle_step_radians",
    "local": ""
  },
  {
    "origin": "double cv::ppf_match_3d::PPF3DDetector::angle_step_radians",
    "local": ""
  },
  {
    "origin": "protected",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "angle_step_relative",
    "local": ""
  },
  {
    "origin": "double cv::ppf_match_3d::PPF3DDetector::angle_step_relative",
    "local": ""
  },
  {
    "origin": "protected",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "distance_step",
    "local": ""
  },
  {
    "origin": "double cv::ppf_match_3d::PPF3DDetector::distance_step",
    "local": ""
  },
  {
    "origin": "protected",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "distance_step_relative",
    "local": ""
  },
  {
    "origin": "double cv::ppf_match_3d::PPF3DDetector::distance_step_relative",
    "local": ""
  },
  {
    "origin": "protected",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "hash_nodes",
    "local": ""
  },
  {
    "origin": "* cv::ppf_match_3d::PPF3DDetector::hash_nodes",
    "local": ""
  },
  {
    "origin": "protected",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "hash_table",
    "local": ""
  },
  {
    "origin": "* cv::ppf_match_3d::PPF3DDetector::hash_table",
    "local": ""
  },
  {
    "origin": "protected",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "num_ref_points",
    "local": ""
  },
  {
    "origin": "int cv::ppf_match_3d::PPF3DDetector::num_ref_points",
    "local": ""
  },
  {
    "origin": "protected",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "position_threshold",
    "local": ""
  },
  {
    "origin": "double cv::ppf_match_3d::PPF3DDetector::position_threshold",
    "local": ""
  },
  {
    "origin": "protected",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "ppf",
    "local": ""
  },
  {
    "origin": "cv::ppf_match_3d::PPF3DDetector::ppf",
    "local": ""
  },
  {
    "origin": "protected",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "rotation_threshold",
    "local": ""
  },
  {
    "origin": "double cv::ppf_match_3d::PPF3DDetector::rotation_threshold",
    "local": ""
  },
  {
    "origin": "protected",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "sampled_pc",
    "local": ""
  },
  {
    "origin": "cv::ppf_match_3d::PPF3DDetector::sampled_pc",
    "local": ""
  },
  {
    "origin": "protected",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "sampling_step_relative",
    "local": ""
  },
  {
    "origin": "double cv::ppf_match_3d::PPF3DDetector::sampling_step_relative",
    "local": ""
  },
  {
    "origin": "protected",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "scene_sample_step",
    "local": ""
  },
  {
    "origin": "int cv::ppf_match_3d::PPF3DDetector::scene_sample_step",
    "local": ""
  },
  {
    "origin": "protected",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "use_weighted_avg",
    "local": ""
  },
  {
    "origin": "bool cv::ppf_match_3d::PPF3DDetector::use_weighted_avg",
    "local": ""
  },
  {
    "origin": "protected",
    "local": ""
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": ""
  },
  {
    "origin": "opencv2/surface_matching/",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:48 for OpenCV by",
    "local": ""
  }
]