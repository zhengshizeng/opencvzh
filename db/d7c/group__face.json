[
  {
    "origin": "OpenCV: Face Analysis",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Typedefs",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "Face Analysis",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "struct",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Abstract base class for trainable facemark models.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Abstract base class for all face recognition models.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Minimum Average Correlation Energy Filter useful for authentication with (cancellable) biometrical features. (does not need many positives to train (10-50), and no negatives at all, also robust to noise/salting)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Abstract base class for all strategies of prediction result handling.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Default predict collector.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Typedefs",
    "local": ""
  },
  {
    "origin": "typedef bool(*",
    "local": ""
  },
  {
    "origin": ") (",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", void *userData)",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image,",
    "local": ""
  },
  {
    "origin": "points,",
    "local": ""
  },
  {
    "origin": "color=",
    "local": ""
  },
  {
    "origin": "(255, 0, 0))",
    "local": ""
  },
  {
    "origin": "Utility to draw the detected facial landmark points.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image,",
    "local": ""
  },
  {
    "origin": "faces,",
    "local": ""
  },
  {
    "origin": "*params)",
    "local": ""
  },
  {
    "origin": "Default face detector This function is mainly utilized by the implementation of a",
    "local": ""
  },
  {
    "origin": ". End users are advised to use function Facemark::getFaces which can be manually defined and circumvented to the algorithm by Facemark::setFaceDetector.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image,",
    "local": ""
  },
  {
    "origin": "faces, const",
    "local": ""
  },
  {
    "origin": "&amp;face_cascade_name)",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "imageList,",
    "local": ""
  },
  {
    "origin": "annotationList, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;images, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;annotations)",
    "local": ""
  },
  {
    "origin": "A utility to load list of paths to training image and annotation file.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "filename,",
    "local": ""
  },
  {
    "origin": "points, float offset=0.0f)",
    "local": ""
  },
  {
    "origin": "A utility to load facial landmark information from a given file.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "filename, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;images,",
    "local": ""
  },
  {
    "origin": "facePoints, char delim=' ', float offset=0.0f)",
    "local": ""
  },
  {
    "origin": "A utility to load facial landmark dataset from a single file.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "imageList,",
    "local": ""
  },
  {
    "origin": "groundTruth, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;images,",
    "local": ""
  },
  {
    "origin": "facePoints, float offset=0.0f)",
    "local": ""
  },
  {
    "origin": "A utility to load facial landmark information from the dataset.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; filename, std::vector&lt; std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &gt; &amp;trainlandmarks, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;trainimages)",
    "local": ""
  },
  {
    "origin": "This function extracts the data for training from .txt files which contains the corresponding image name and landmarks. The first file in each file should give the path of the image whose landmarks are being described in the file. Then in the subsequent lines there should be coordinates of the landmarks in the image i.e each line should be of the form x,y where x represents the x coordinate of the landmark and y represents the y coordinate of the landmark.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "The",
    "local": ""
  },
  {
    "origin": "API",
    "local": ""
  },
  {
    "origin": "Typedef Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "FN_FaceDetector",
    "local": ""
  },
  {
    "origin": "typedef bool(* cv::face::FN_FaceDetector) (",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", void *userData)",
    "local": ""
  },
  {
    "origin": "Function Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "drawFacemarks()",
    "local": ""
  },
  {
    "origin": "void cv::face::drawFacemarks",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "points",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face.drawFacemarks(",
    "local": ""
  },
  {
    "origin": "image, points[, color]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Utility to draw the detected facial landmark points.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "The input image to be processed.",
    "local": ""
  },
  {
    "origin": "points",
    "local": ""
  },
  {
    "origin": "Contains the data of points which will be drawn.",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": "The color of points in BGR format represented by",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Example of usage",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getFaces()",
    "local": ""
  },
  {
    "origin": "bool cv::face::getFaces",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "faces",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "*",
    "local": ""
  },
  {
    "origin": "params",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Default face detector This function is mainly utilized by the implementation of a",
    "local": ""
  },
  {
    "origin": ". End users are advised to use function Facemark::getFaces which can be manually defined and circumvented to the algorithm by Facemark::setFaceDetector.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "The input image to be processed.",
    "local": ""
  },
  {
    "origin": "faces",
    "local": ""
  },
  {
    "origin": "Output of the function which represent region of interest of the detected faces. Each face is stored in",
    "local": ""
  },
  {
    "origin": "container.",
    "local": ""
  },
  {
    "origin": "params",
    "local": ""
  },
  {
    "origin": "detector parameters",
    "local": ""
  },
  {
    "origin": "Example of usage",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getFacesHAAR()",
    "local": ""
  },
  {
    "origin": "bool cv::face::getFacesHAAR",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "faces",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "face_cascade_name",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval, faces",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face.getFacesHAAR(",
    "local": ""
  },
  {
    "origin": "image, face_cascade_name[, faces]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "loadDatasetList()",
    "local": ""
  },
  {
    "origin": "bool cv::face::loadDatasetList",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "imageList",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "annotationList",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "images",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "annotations",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face.loadDatasetList(",
    "local": ""
  },
  {
    "origin": "imageList, annotationList, images, annotations",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "A utility to load list of paths to training image and annotation file.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "imageList",
    "local": ""
  },
  {
    "origin": "The specified file contains paths to the training images.",
    "local": ""
  },
  {
    "origin": "annotationList",
    "local": ""
  },
  {
    "origin": "The specified file contains paths to the training annotations.",
    "local": ""
  },
  {
    "origin": "images",
    "local": ""
  },
  {
    "origin": "The loaded paths of training images.",
    "local": ""
  },
  {
    "origin": "annotations",
    "local": ""
  },
  {
    "origin": "The loaded paths of annotation files.",
    "local": ""
  },
  {
    "origin": "Example of usage:",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "loadFacePoints()",
    "local": ""
  },
  {
    "origin": "bool cv::face::loadFacePoints",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "filename",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "points",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "offset",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval, points",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face.loadFacePoints(",
    "local": ""
  },
  {
    "origin": "filename[, points[, offset]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "A utility to load facial landmark information from a given file.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "filename",
    "local": ""
  },
  {
    "origin": "The filename of file contains the facial landmarks data.",
    "local": ""
  },
  {
    "origin": "points",
    "local": ""
  },
  {
    "origin": "The loaded facial landmark points.",
    "local": ""
  },
  {
    "origin": "offset",
    "local": ""
  },
  {
    "origin": "An offset value to adjust the loaded points.",
    "local": ""
  },
  {
    "origin": "Example of usage",
    "local": ""
  },
  {
    "origin": "The annotation file should follow the default format which is",
    "local": ""
  },
  {
    "origin": "where n_points is the number of points considered and each point is represented as its position in x and y.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "loadTrainingData()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "bool cv::face::loadTrainingData",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "filename",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "images",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "facePoints",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "char",
    "local": ""
  },
  {
    "origin": "delim",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "offset",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval, facePoints",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face.loadTrainingData(",
    "local": ""
  },
  {
    "origin": "filename, images[, facePoints[, delim[, offset]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval, facePoints",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face.loadTrainingData(",
    "local": ""
  },
  {
    "origin": "imageList, groundTruth, images[, facePoints[, offset]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face.loadTrainingData(",
    "local": ""
  },
  {
    "origin": "filename, trainlandmarks, trainimages",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "A utility to load facial landmark dataset from a single file.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "filename",
    "local": ""
  },
  {
    "origin": "The filename of a file that contains the dataset information. Each line contains the filename of an image followed by pairs of x and y values of facial landmarks points separated by a space. Example",
    "local": ""
  },
  {
    "origin": "images",
    "local": ""
  },
  {
    "origin": "A vector where each element represent the filename of image in the dataset. Images are not loaded by default to save the memory.",
    "local": ""
  },
  {
    "origin": "facePoints",
    "local": ""
  },
  {
    "origin": "The loaded landmark points for all training data.",
    "local": ""
  },
  {
    "origin": "delim",
    "local": ""
  },
  {
    "origin": "Delimiter between each element, the default value is a whitespace.",
    "local": ""
  },
  {
    "origin": "offset",
    "local": ""
  },
  {
    "origin": "An offset value to adjust the loaded points.",
    "local": ""
  },
  {
    "origin": "Example of usage",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "loadTrainingData()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "bool cv::face::loadTrainingData",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "imageList",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "groundTruth",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "images",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "facePoints",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "offset",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval, facePoints",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face.loadTrainingData(",
    "local": ""
  },
  {
    "origin": "filename, images[, facePoints[, delim[, offset]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval, facePoints",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face.loadTrainingData(",
    "local": ""
  },
  {
    "origin": "imageList, groundTruth, images[, facePoints[, offset]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face.loadTrainingData(",
    "local": ""
  },
  {
    "origin": "filename, trainlandmarks, trainimages",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "A utility to load facial landmark information from the dataset.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "imageList",
    "local": ""
  },
  {
    "origin": "A file contains the list of image filenames in the training dataset.",
    "local": ""
  },
  {
    "origin": "groundTruth",
    "local": ""
  },
  {
    "origin": "A file contains the list of filenames where the landmarks points information are stored. The content in each file should follow the standard format (see",
    "local": ""
  },
  {
    "origin": ").",
    "local": ""
  },
  {
    "origin": "images",
    "local": ""
  },
  {
    "origin": "A vector where each element represent the filename of image in the dataset. Images are not loaded by default to save the memory.",
    "local": ""
  },
  {
    "origin": "facePoints",
    "local": ""
  },
  {
    "origin": "The loaded landmark points for all training data.",
    "local": ""
  },
  {
    "origin": "offset",
    "local": ""
  },
  {
    "origin": "An offset value to adjust the loaded points.",
    "local": ""
  },
  {
    "origin": "Example of usage",
    "local": ""
  },
  {
    "origin": "example of content in the images_train.txt",
    "local": ""
  },
  {
    "origin": "example of content in the points_train.txt",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "loadTrainingData()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "bool cv::face::loadTrainingData",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "filename",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt; std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &gt; &amp;",
    "local": ""
  },
  {
    "origin": "trainlandmarks",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "trainimages",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval, facePoints",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face.loadTrainingData(",
    "local": ""
  },
  {
    "origin": "filename, images[, facePoints[, delim[, offset]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval, facePoints",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face.loadTrainingData(",
    "local": ""
  },
  {
    "origin": "imageList, groundTruth, images[, facePoints[, offset]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face.loadTrainingData(",
    "local": ""
  },
  {
    "origin": "filename, trainlandmarks, trainimages",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This function extracts the data for training from .txt files which contains the corresponding image name and landmarks. The first file in each file should give the path of the image whose landmarks are being described in the file. Then in the subsequent lines there should be coordinates of the landmarks in the image i.e each line should be of the form x,y where x represents the x coordinate of the landmark and y represents the y coordinate of the landmark.",
    "local": ""
  },
  {
    "origin": "For reference you can see the files as provided in the",
    "local": ""
  },
  {
    "origin": "HELEN dataset",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "filename",
    "local": ""
  },
  {
    "origin": "A vector of type",
    "local": ""
  },
  {
    "origin": "containing name of the .txt files.",
    "local": ""
  },
  {
    "origin": "trainlandmarks",
    "local": ""
  },
  {
    "origin": "A vector of type",
    "local": ""
  },
  {
    "origin": "that would store shape or landmarks of all images.",
    "local": ""
  },
  {
    "origin": "trainimages",
    "local": ""
  },
  {
    "origin": "A vector of type",
    "local": ""
  },
  {
    "origin": "which stores the name of images whose landmarks are tracked",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "A boolean value. It returns true when it reads the data successfully and false otherwise",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:41 for OpenCV by",
    "local": ""
  }
]