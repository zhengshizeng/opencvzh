[
  {
    "origin": "OpenCV: cv::dnn::TextDetectionModel_DB Class Reference",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "List of all members",
    "local": ""
  },
  {
    "origin": "cv::dnn::TextDetectionModel_DB Class Reference",
    "local": ""
  },
  {
    "origin": "This class represents high-level API for text detection DL networks compatible with DB model.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Inheritance diagram for cv::dnn::TextDetectionModel_DB:",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;network)",
    "local": ""
  },
  {
    "origin": "Create text detection algorithm from deep learning network.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const std::string &amp;model, const std::string &amp;config=\"\")",
    "local": ""
  },
  {
    "origin": "Create text detection model from network represented in one of the supported formats. An order of",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "arguments does not matter.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(float binaryThreshold)",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(int maxCandidates)",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(float polygonThreshold)",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(double unclipRatio)",
    "local": ""
  },
  {
    "origin": "Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "frame, std::vector&lt; std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &gt; &amp;detections, std::vector&lt; float &gt; &amp;confidences) const",
    "local": ""
  },
  {
    "origin": "Performs detection.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "frame, std::vector&lt; std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &gt; &amp;detections) const",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "frame, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;detections, std::vector&lt; float &gt; &amp;confidences) const",
    "local": ""
  },
  {
    "origin": "Performs detection.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "frame, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;detections) const",
    "local": ""
  },
  {
    "origin": "Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;)=default",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;&amp;)=default",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;model, const",
    "local": ""
  },
  {
    "origin": "&amp;config=\"\")",
    "local": ""
  },
  {
    "origin": "Create model from deep learning network represented in one of the supported formats. An order of",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "arguments does not matter.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;network)",
    "local": ""
  },
  {
    "origin": "Create model from deep learning network.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Impl *",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Impl &amp;",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;)=default",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;&amp;)=default",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "frame,",
    "local": ""
  },
  {
    "origin": "outs) const",
    "local": ""
  },
  {
    "origin": "Given the",
    "local": ""
  },
  {
    "origin": "frame, create input blob, run net and return the output",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(bool crop)",
    "local": ""
  },
  {
    "origin": "Set flag crop for frame.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Set mean value for frame.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(double scale=1.0, const",
    "local": ""
  },
  {
    "origin": "&amp;size=",
    "local": ""
  },
  {
    "origin": "(), const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "(), bool swapRB=false, bool crop=false)",
    "local": ""
  },
  {
    "origin": "Set preprocessing parameters for frame.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(double scale)",
    "local": ""
  },
  {
    "origin": "Set scalefactor value for frame.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;size)",
    "local": ""
  },
  {
    "origin": "Set input size for frame.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(int width, int height)",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(bool swapRB)",
    "local": ""
  },
  {
    "origin": "Set flag swapRB for frame.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "backendId)",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "targetId)",
    "local": ""
  },
  {
    "origin": "Additional Inherited Members",
    "local": ""
  },
  {
    "origin": "Protected Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Protected Attributes inherited from",
    "local": ""
  },
  {
    "origin": "&lt; Impl &gt;",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "This class represents high-level API for text detection DL networks compatible with DB model.",
    "local": ""
  },
  {
    "origin": "Related publications:",
    "local": ""
  },
  {
    "origin": "Paper:",
    "local": ""
  },
  {
    "origin": "https://arxiv.org/abs/1911.08947",
    "local": ""
  },
  {
    "origin": "For more information about the hyper-parameters setting, please refer to",
    "local": ""
  },
  {
    "origin": "https://github.com/MhLiao/DB",
    "local": ""
  },
  {
    "origin": "Configurable parameters:",
    "local": ""
  },
  {
    "origin": "(float) polygonThreshold - The threshold of text polygons. It is usually set to 0.5, 0.6, and 0.7. Default is 0.5f",
    "local": ""
  },
  {
    "origin": "(double) unclipRatio - The unclip ratio of the detected text region, which determines the output size. It is usually set to 2.0.",
    "local": ""
  },
  {
    "origin": "(int) maxCandidates - The max number of the output results.",
    "local": ""
  },
  {
    "origin": "Constructor &amp; Destructor Documentation",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "TextDetectionModel_DB()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "cv::dnn::TextDetectionModel_DB::TextDetectionModel_DB",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "&lt;dnn_TextDetectionModel_DB object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.dnn_TextDetectionModel_DB(",
    "local": ""
  },
  {
    "origin": "network",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;dnn_TextDetectionModel_DB object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.dnn_TextDetectionModel_DB(",
    "local": ""
  },
  {
    "origin": "model[, config]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "TextDetectionModel_DB()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "cv::dnn::TextDetectionModel_DB::TextDetectionModel_DB",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "network",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "&lt;dnn_TextDetectionModel_DB object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.dnn_TextDetectionModel_DB(",
    "local": ""
  },
  {
    "origin": "network",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;dnn_TextDetectionModel_DB object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.dnn_TextDetectionModel_DB(",
    "local": ""
  },
  {
    "origin": "model[, config]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Create text detection algorithm from deep learning network.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "network",
    "local": ""
  },
  {
    "origin": "object.",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "TextDetectionModel_DB()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "cv::dnn::TextDetectionModel_DB::TextDetectionModel_DB",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const std::string &amp;",
    "local": ""
  },
  {
    "origin": "model",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const std::string &amp;",
    "local": ""
  },
  {
    "origin": "config",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "&lt;dnn_TextDetectionModel_DB object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.dnn_TextDetectionModel_DB(",
    "local": ""
  },
  {
    "origin": "network",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;dnn_TextDetectionModel_DB object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.dnn_TextDetectionModel_DB(",
    "local": ""
  },
  {
    "origin": "model[, config]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Create text detection model from network represented in one of the supported formats. An order of",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "arguments does not matter.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "model",
    "local": ""
  },
  {
    "origin": "Binary file contains trained weights.",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "config",
    "local": ""
  },
  {
    "origin": "Text file contains network configuration.",
    "local": ""
  },
  {
    "origin": "Member Function Documentation",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "getBinaryThreshold()",
    "local": ""
  },
  {
    "origin": "float cv::dnn::TextDetectionModel_DB::getBinaryThreshold",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.dnn_TextDetectionModel_DB.getBinaryThreshold(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "getMaxCandidates()",
    "local": ""
  },
  {
    "origin": "int cv::dnn::TextDetectionModel_DB::getMaxCandidates",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.dnn_TextDetectionModel_DB.getMaxCandidates(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "getPolygonThreshold()",
    "local": ""
  },
  {
    "origin": "float cv::dnn::TextDetectionModel_DB::getPolygonThreshold",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.dnn_TextDetectionModel_DB.getPolygonThreshold(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "getUnclipRatio()",
    "local": ""
  },
  {
    "origin": "double cv::dnn::TextDetectionModel_DB::getUnclipRatio",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.dnn_TextDetectionModel_DB.getUnclipRatio(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "setBinaryThreshold()",
    "local": ""
  },
  {
    "origin": "&amp; cv::dnn::TextDetectionModel_DB::setBinaryThreshold",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "binaryThreshold",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.dnn_TextDetectionModel_DB.setBinaryThreshold(",
    "local": ""
  },
  {
    "origin": "binaryThreshold",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "setMaxCandidates()",
    "local": ""
  },
  {
    "origin": "&amp; cv::dnn::TextDetectionModel_DB::setMaxCandidates",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "maxCandidates",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.dnn_TextDetectionModel_DB.setMaxCandidates(",
    "local": ""
  },
  {
    "origin": "maxCandidates",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "setPolygonThreshold()",
    "local": ""
  },
  {
    "origin": "&amp; cv::dnn::TextDetectionModel_DB::setPolygonThreshold",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "polygonThreshold",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.dnn_TextDetectionModel_DB.setPolygonThreshold(",
    "local": ""
  },
  {
    "origin": "polygonThreshold",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "setUnclipRatio()",
    "local": ""
  },
  {
    "origin": "&amp; cv::dnn::TextDetectionModel_DB::setUnclipRatio",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "unclipRatio",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.dnn_TextDetectionModel_DB.setUnclipRatio(",
    "local": ""
  },
  {
    "origin": "unclipRatio",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": ""
  },
  {
    "origin": "opencv2/dnn/",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:47 for OpenCV by",
    "local": ""
  }
]