[
  {
    "origin": "OpenCV: opencv2/ccalib/omnidir.hpp File Reference",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Namespaces",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "omnidir.hpp File Reference",
    "local": ""
  },
  {
    "origin": "Namespaces",
    "local": ""
  },
  {
    "origin": "\"black box\" representation of the file storage associated with a file on disk.",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= 16,",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "(InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size size, InputOutputArray K, InputOutputArray xi, InputOutputArray D, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, int flags, TermCriteria criteria, OutputArray idx=noArray())",
    "local": ""
  },
  {
    "origin": "Perform omnidirectional camera calibration, the default depth of outputs is CV_64F.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(InputArray _om1, InputArray _T1, InputArray _om2, InputArray _T2, Mat &amp;om3, Mat &amp;T3, Mat &amp;dom3dom1, Mat &amp;dom3dT1, Mat &amp;dom3dom2, Mat &amp;dom3dT2, Mat &amp;dT3dom1, Mat &amp;dT3dT1, Mat &amp;dT3dom2, Mat &amp;dT3dT2)",
    "local": ""
  },
  {
    "origin": "(InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, InputArray parameters, Mat &amp;JTJ_inv, Mat &amp;JTE, int flags, double epsilon)",
    "local": ""
  },
  {
    "origin": "(InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputArray parameters, Mat &amp;JTJ_inv, Mat &amp;JTE, int flags, double epsilon)",
    "local": ""
  },
  {
    "origin": "(InputArrayOfArrays imagePoints, InputArrayOfArrays proImagePoints)",
    "local": ""
  },
  {
    "origin": "(InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, InputArray K, InputArray D, double xi, InputArrayOfArrays omAll, InputArrayOfArrays tAll)",
    "local": ""
  },
  {
    "origin": "(InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputArray K1, InputArray K2, InputArray D1, InputArray D2, double xi1, double xi2, InputArray om, InputArray T, InputArrayOfArrays omL, InputArrayOfArrays TL)",
    "local": ""
  },
  {
    "origin": "(InputArray paramsters, OutputArray K, OutputArrayOfArrays omAll, OutputArrayOfArrays tAll, OutputArray distoration, double &amp;xi)",
    "local": ""
  },
  {
    "origin": "(InputArray parameters, OutputArray K1, OutputArray K2, OutputArray om, OutputArray T, OutputArrayOfArrays omL, OutputArrayOfArrays tL, OutputArray D1, OutputArray D2, double &amp;xi1, double &amp;xi2)",
    "local": ""
  },
  {
    "origin": "(InputArray K, InputArrayOfArrays omAll, InputArrayOfArrays tAll, InputArray distoaration, double xi, OutputArray parameters)",
    "local": ""
  },
  {
    "origin": "(InputArray K1, InputArray K2, InputArray om, InputArray T, InputArrayOfArrays omL, InputArrayOfArrays tL, InputArray D1, InputArray D2, double xi1, double xi2, OutputArray parameters)",
    "local": ""
  },
  {
    "origin": "(InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, InputArray parameters, Mat &amp;errors, Vec2d &amp;std_error, double &amp;rms, int flags)",
    "local": ""
  },
  {
    "origin": "(InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputArray parameters, Mat &amp;errors, Vec2d &amp;std_error, double &amp;rms, int flags)",
    "local": ""
  },
  {
    "origin": "(Mat &amp;G, int flags, int n)",
    "local": ""
  },
  {
    "origin": "(Mat &amp;G, int flags, int n)",
    "local": ""
  },
  {
    "origin": "(const Mat &amp;row)",
    "local": ""
  },
  {
    "origin": "Vec3d&#160;",
    "local": ""
  },
  {
    "origin": "(InputArray mat)",
    "local": ""
  },
  {
    "origin": "(int flags, std::vector&lt; int &gt; &amp;idx, int n)",
    "local": ""
  },
  {
    "origin": "(int flags, std::vector&lt; int &gt; &amp;idx, int n)",
    "local": ""
  },
  {
    "origin": "(InputArray idx1, InputArray idx2, OutputArray inter1, OutputArray inter2, OutputArray inter_ori)",
    "local": ""
  },
  {
    "origin": "(InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size size, OutputArrayOfArrays omAll, OutputArrayOfArrays tAll, OutputArray K, double &amp;xi, OutputArray idx=noArray())",
    "local": ""
  },
  {
    "origin": "(InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, const Size &amp;size1, const Size &amp;size2, OutputArray om, OutputArray T, OutputArrayOfArrays omL, OutputArrayOfArrays tL, OutputArray K1, OutputArray D1, OutputArray K2, OutputArray D2, double &amp;xi1, double &amp;xi2, int flags, OutputArray idx)",
    "local": ""
  },
  {
    "origin": "(InputArray K, InputArray D, InputArray xi, InputArray R, InputArray P, const",
    "local": ""
  },
  {
    "origin": "&amp;size, int m1type, OutputArray map1, OutputArray map2, int flags)",
    "local": ""
  },
  {
    "origin": "Computes undistortion and rectification maps for omnidirectional camera image transform by a rotation R. It output two maps that are used for",
    "local": ""
  },
  {
    "origin": ". If D is empty then zero distortion is used, if R or P is empty then identity matrices are used.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(InputArray objectPoints, OutputArray imagePoints, InputArray rvec, InputArray tvec, InputArray K, double xi, InputArray D, OutputArray jacobian=noArray())",
    "local": ""
  },
  {
    "origin": "Projects points for omnidirectional camera using CMei's model.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(InputArray objectPoints, OutputArray imagePoints, const Affine3d &amp;affine, InputArray K, double xi, InputArray D, OutputArray jacobian=noArray())",
    "local": ""
  },
  {
    "origin": "(InputOutputArrayOfArrays objectPoints, InputOutputArrayOfArrays imagePoints1, InputOutputArrayOfArrays imagePoints2, const Size &amp;imageSize1, const Size &amp;imageSize2, InputOutputArray K1, InputOutputArray xi1, InputOutputArray D1, InputOutputArray K2, InputOutputArray xi2, InputOutputArray D2, OutputArray rvec, OutputArray tvec, OutputArrayOfArrays rvecsL, OutputArrayOfArrays tvecsL, int flags, TermCriteria criteria, OutputArray idx=noArray())",
    "local": ""
  },
  {
    "origin": "Stereo calibration for omnidirectional camera model. It computes the intrinsic parameters for two cameras and the extrinsic parameters between two cameras. The default depth of outputs is CV_64F.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(InputArray image1, InputArray image2, InputArray K1, InputArray D1, InputArray xi1, InputArray K2, InputArray D2, InputArray xi2, InputArray R, InputArray T, int flag, int numDisparities, int SADWindowSize, OutputArray disparity, OutputArray image1Rec, OutputArray image2Rec, const Size &amp;newSize=Size(), InputArray Knew=",
    "local": ""
  },
  {
    "origin": "(), OutputArray pointCloud=",
    "local": ""
  },
  {
    "origin": "(), int pointType=XYZRGB)",
    "local": ""
  },
  {
    "origin": "Stereo 3D reconstruction from a pair of images.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(InputArray R, InputArray T, OutputArray R1, OutputArray R2)",
    "local": ""
  },
  {
    "origin": "Stereo rectification for omnidirectional camera model. It computes the rectification rotations for two cameras.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const Mat &amp;src, Mat &amp;dst, const std::vector&lt; int &gt; &amp;cols, const std::vector&lt; int &gt; &amp;rows)",
    "local": ""
  },
  {
    "origin": "(InputArray distorted, OutputArray undistorted, InputArray K, InputArray D, InputArray xi, int flags, InputArray Knew=",
    "local": ""
  },
  {
    "origin": "(), const Size &amp;new_size=Size(), InputArray R=Mat::eye(3, 3,",
    "local": ""
  },
  {
    "origin": "))",
    "local": ""
  },
  {
    "origin": "Undistort omnidirectional images to perspective images.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(InputArray distorted, OutputArray undistorted, InputArray K, InputArray D, InputArray xi, InputArray R)",
    "local": ""
  },
  {
    "origin": "Undistort 2D image points for omnidirectional camera using CMei's model.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:33 for OpenCV by &#160;",
    "local": ""
  }
]