[
  {
    "origin": "OpenCV: Image Registration",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Image Registration",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Base class for modelling a",
    "local": ""
  },
  {
    "origin": "between two images.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Base class for modelling an algorithm for calculating a map.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "The Registration module implements parametric image registration. The implemented method is direct alignment, that is, it uses directly the pixel values for calculating the registration between a pair of images, as opposed to feature-based registration. The implementation follows essentially the corresponding part of",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Feature based methods have some advantages over pixel based methods when we are trying to register pictures that have been shoot under different lighting conditions or exposition times, or when the images overlap only partially. On the other hand, the main advantage of pixel-based methods when compared to feature based methods is their better precision for some pictures (those shoot under similar lighting conditions and that have a significative overlap), due to the fact that we are using all the information available in the image, which allows us to achieve subpixel accuracy. This is particularly important for certain applications like multi-frame denoising or super-resolution.",
    "local": ""
  },
  {
    "origin": "In fact, pixel and feature registration methods can complement each other: an application could first obtain a coarse registration using features and then refine the registration using a pixel based method on the overlapping area of the images. The code developed allows this use case.",
    "local": ""
  },
  {
    "origin": "The module implements classes derived from the abstract classes",
    "local": ""
  },
  {
    "origin": "or",
    "local": ""
  },
  {
    "origin": ". The former models a coordinate transformation between two reference frames, while the later encapsulates a way of invoking a method that calculates a",
    "local": ""
  },
  {
    "origin": "between two images. Although the objective has been to implement pixel based methods, the module can be extended to support other methods that can calculate transformations between images (feature methods, optical flow, etc.).",
    "local": ""
  },
  {
    "origin": "Each class derived from",
    "local": ""
  },
  {
    "origin": "implements a motion model, as follows:",
    "local": ""
  },
  {
    "origin": ": Models a simple translation",
    "local": ""
  },
  {
    "origin": ": Models an affine transformation",
    "local": ""
  },
  {
    "origin": ": Models a projective transformation",
    "local": ""
  },
  {
    "origin": "MapProject can also be used to model affine motion or translations, but some operations on it are more costly, and that is the reason for defining the other two classes.",
    "local": ""
  },
  {
    "origin": "The classes derived from",
    "local": ""
  },
  {
    "origin": "are",
    "local": ""
  },
  {
    "origin": ": Gradient based alignment for calculating translations. It produces a",
    "local": ""
  },
  {
    "origin": "(two parameters that correspond to the shift vector).",
    "local": ""
  },
  {
    "origin": ": Gradient based alignment for euclidean motions, that is, rotations and translations. It calculates three parameters (angle and shift vector), although the result is stored in a",
    "local": ""
  },
  {
    "origin": "object for convenience.",
    "local": ""
  },
  {
    "origin": ": Gradient based alignment for calculating similarities, which adds scaling to the euclidean motion. It calculates four parameters (two for the anti-symmetric matrix and two for the shift vector), although the result is stored in a",
    "local": ""
  },
  {
    "origin": "object for better convenience.",
    "local": ""
  },
  {
    "origin": ": Gradient based alignment for an affine motion model. The number of parameters is six and the result is stored in a",
    "local": ""
  },
  {
    "origin": "object.",
    "local": ""
  },
  {
    "origin": ": Gradient based alignment for calculating projective transformations. The number of parameters is eight and the result is stored in a MapProject object.",
    "local": ""
  },
  {
    "origin": ": It implements hyerarchical motion estimation using a Gaussian pyramid. Its constructor accepts as argument any other object that implements the",
    "local": ""
  },
  {
    "origin": "interface, and it is that mapper the one called by",
    "local": ""
  },
  {
    "origin": "for each scale of the pyramid.",
    "local": ""
  },
  {
    "origin": "If the motion between the images is not very small, the normal way of using these classes is to create a MapperGrad* object and use it as input to create a",
    "local": ""
  },
  {
    "origin": ", which in turn is called to perform the calculation. However, if the motion between the images is small enough, we can use directly the MapperGrad* classes. Another possibility is to use first a feature based method to perform a coarse registration and then do a refinement through",
    "local": ""
  },
  {
    "origin": "or directly a MapperGrad* object. The \"calculate\" method of the mappers accepts an initial estimation of the motion as input.",
    "local": ""
  },
  {
    "origin": "When deciding which MapperGrad to use we must take into account that mappers with more parameters can handle more complex motions, but involve more calculations and are therefore slower. Also, if we are confident on the motion model that is followed by the sequence, increasing the number of parameters beyond what we need will decrease the accuracy: it is better to use the least number of degrees of freedom that we can.",
    "local": ""
  },
  {
    "origin": "In the module tests there are examples that show how to register a pair of images using any of the implemented mappers.",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:41 for OpenCV by &#160;",
    "local": ""
  }
]