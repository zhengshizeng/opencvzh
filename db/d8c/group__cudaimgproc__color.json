[
  {
    "origin": "OpenCV: Color space processing",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "Color space processing",
    "local": ""
  },
  {
    "origin": "&raquo;",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= COLOR_BayerRG2BGR_MHT,",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= COLOR_BayerGR2BGR_MHT,",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= COLOR_BayerBG2BGR_MHT,",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= COLOR_BayerGB2BGR_MHT,",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img1,",
    "local": ""
  },
  {
    "origin": "img2,",
    "local": ""
  },
  {
    "origin": "dst, int alpha_op,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Composites two images using alpha opacity values contained in each image.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Converts an image from one color space to another.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Converts an image from Bayer pattern to RGB or grayscale.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "dst, bool forward=true,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Routines for correcting image color gamma.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image, const int dstOrder[4],",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Exchanges the color channels of an image in-place.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Enumeration Type Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "AlphaCompTypes",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "DemosaicTypes",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "COLOR_BayerBG2BGR_MHT&#160;",
    "local": ""
  },
  {
    "origin": "Bayer Demosaicing (Malvar, He, and Cutler)",
    "local": ""
  },
  {
    "origin": "COLOR_BayerGB2BGR_MHT&#160;",
    "local": ""
  },
  {
    "origin": "COLOR_BayerRG2BGR_MHT&#160;",
    "local": ""
  },
  {
    "origin": "COLOR_BayerGR2BGR_MHT&#160;",
    "local": ""
  },
  {
    "origin": "COLOR_BayerBG2RGB_MHT&#160;",
    "local": ""
  },
  {
    "origin": "COLOR_BayerGB2RGB_MHT&#160;",
    "local": ""
  },
  {
    "origin": "COLOR_BayerRG2RGB_MHT&#160;",
    "local": ""
  },
  {
    "origin": "COLOR_BayerGR2RGB_MHT&#160;",
    "local": ""
  },
  {
    "origin": "COLOR_BayerBG2GRAY_MHT&#160;",
    "local": ""
  },
  {
    "origin": "COLOR_BayerGB2GRAY_MHT&#160;",
    "local": ""
  },
  {
    "origin": "COLOR_BayerRG2GRAY_MHT&#160;",
    "local": ""
  },
  {
    "origin": "COLOR_BayerGR2GRAY_MHT&#160;",
    "local": ""
  },
  {
    "origin": "Function Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "alphaComp()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::alphaComp",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "img2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "alpha_op",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Composites two images using alpha opacity values contained in each image.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "img1",
    "local": ""
  },
  {
    "origin": "First image. Supports CV_8UC4 , CV_16UC4 , CV_32SC4 and CV_32FC4 types.",
    "local": ""
  },
  {
    "origin": "img2",
    "local": ""
  },
  {
    "origin": "Second image. Must have the same size and the same type as img1 .",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "Destination image.",
    "local": ""
  },
  {
    "origin": "alpha_op",
    "local": ""
  },
  {
    "origin": "Flag specifying the alpha-blending operation:",
    "local": ""
  },
  {
    "origin": "ALPHA_OVER",
    "local": ""
  },
  {
    "origin": "ALPHA_IN",
    "local": ""
  },
  {
    "origin": "ALPHA_OUT",
    "local": ""
  },
  {
    "origin": "ALPHA_ATOP",
    "local": ""
  },
  {
    "origin": "ALPHA_XOR",
    "local": ""
  },
  {
    "origin": "ALPHA_PLUS",
    "local": ""
  },
  {
    "origin": "ALPHA_OVER_PREMUL",
    "local": ""
  },
  {
    "origin": "ALPHA_IN_PREMUL",
    "local": ""
  },
  {
    "origin": "ALPHA_OUT_PREMUL",
    "local": ""
  },
  {
    "origin": "ALPHA_ATOP_PREMUL",
    "local": ""
  },
  {
    "origin": "ALPHA_XOR_PREMUL",
    "local": ""
  },
  {
    "origin": "ALPHA_PLUS_PREMUL",
    "local": ""
  },
  {
    "origin": "ALPHA_PREMUL",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "for the asynchronous version.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "An example demonstrating the use of alphaComp can be found at opencv_source_code/samples/gpu/alpha_comp.cpp",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "cvtColor()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::cvtColor",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "code",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dcn",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Converts an image from one color space to another.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Source image with CV_8U , CV_16U , or CV_32F depth and 1, 3, or 4 channels.",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "Destination image.",
    "local": ""
  },
  {
    "origin": "code",
    "local": ""
  },
  {
    "origin": "Color space conversion code. For details, see cvtColor .",
    "local": ""
  },
  {
    "origin": "dcn",
    "local": ""
  },
  {
    "origin": "Number of channels in the destination image. If the parameter is 0, the number of the channels is derived automatically from src and the code .",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "for the asynchronous version.",
    "local": ""
  },
  {
    "origin": "3-channel color spaces (like HSV, XYZ, and so on) can be stored in a 4-channel image for better performance.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "demosaicing()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::demosaicing",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "code",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dcn",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Converts an image from Bayer pattern to RGB or grayscale.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Source image (8-bit or 16-bit single channel).",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "Destination image.",
    "local": ""
  },
  {
    "origin": "code",
    "local": ""
  },
  {
    "origin": "Color space conversion code (see the description below).",
    "local": ""
  },
  {
    "origin": "dcn",
    "local": ""
  },
  {
    "origin": "Number of channels in the destination image. If the parameter is 0, the number of the channels is derived automatically from src and the code .",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "for the asynchronous version.",
    "local": ""
  },
  {
    "origin": "The function can do the following transformations:",
    "local": ""
  },
  {
    "origin": "Demosaicing using bilinear interpolation",
    "local": ""
  },
  {
    "origin": "&gt; - COLOR_BayerBG2GRAY , COLOR_BayerGB2GRAY , COLOR_BayerRG2GRAY , COLOR_BayerGR2GRAY &gt; - COLOR_BayerBG2BGR , COLOR_BayerGB2BGR , COLOR_BayerRG2BGR , COLOR_BayerGR2BGR",
    "local": ""
  },
  {
    "origin": "Demosaicing using Malvar-He-Cutler algorithm (",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&gt; - COLOR_BayerBG2GRAY_MHT , COLOR_BayerGB2GRAY_MHT , COLOR_BayerRG2GRAY_MHT , &gt; COLOR_BayerGR2GRAY_MHT &gt; - COLOR_BayerBG2BGR_MHT , COLOR_BayerGB2BGR_MHT , COLOR_BayerRG2BGR_MHT , &gt; COLOR_BayerGR2BGR_MHT",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "gammaCorrection()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::gammaCorrection",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "forward",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Routines for correcting image color gamma.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Source image (3- or 4-channel 8 bit).",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "Destination image.",
    "local": ""
  },
  {
    "origin": "forward",
    "local": ""
  },
  {
    "origin": "true for forward gamma correction or false for inverse gamma correction.",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "for the asynchronous version.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "swapChannels()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::swapChannels",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dstOrder",
    "local": ""
  },
  {
    "origin": "[4],",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Exchanges the color channels of an image in-place.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "Source image. Supports only CV_8UC4 type.",
    "local": ""
  },
  {
    "origin": "dstOrder",
    "local": ""
  },
  {
    "origin": "Integer array describing how channel values are permutated. The n-th entry of the array contains the number of the channel that is stored in the n-th channel of the output image. E.g. Given an RGBA image, aDstOrder = [3,2,1,0] converts this to ABGR channel order.",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "for the asynchronous version.",
    "local": ""
  },
  {
    "origin": "The methods support arbitrary permutations of the original channels, including replication.",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:41 for OpenCV by &#160;",
    "local": ""
  }
]