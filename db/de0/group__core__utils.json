[
  {
    "origin": "OpenCV: Utility and system functions and macros",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Modules",
    "local": ""
  },
  {
    "origin": "Namespaces",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Macros",
    "local": ""
  },
  {
    "origin": "Typedefs",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "Utility and system functions and macros",
    "local": ""
  },
  {
    "origin": "Modules",
    "local": ""
  },
  {
    "origin": "Namespaces",
    "local": ""
  },
  {
    "origin": "\"black box\" representation of the file storage associated with a file on disk.",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Automatically Allocated Buffer Class.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Manages memory block shared by muliple buffers.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Designed for command line parsing.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "union",
    "local": ""
  },
  {
    "origin": "union",
    "local": ""
  },
  {
    "origin": "union",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Class passed to an error.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "struct",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Base class for parallel data processors.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "a Class to measure passing time.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Simple TLS data class.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "TLS data accumulator with gathering methods.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Macros",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "6.283185307179586476925286766559",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "(expr) do { if(!!(expr)) ; else",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ", #expr, CV_Func, __FILE__, __LINE__ ); } while(0)",
    "local": ""
  },
  {
    "origin": "Checks a condition at runtime and throws exception if it fails.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "27",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "26",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "24",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "14",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "15",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "16",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "17",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "13",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "18",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "18",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "19",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "20",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "22",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "21",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "23",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "25",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "(x) std::move(x)",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "(expr)",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "(x)",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "(type) (",
    "local": ""
  },
  {
    "origin": "(type)*",
    "local": ""
  },
  {
    "origin": "(type))",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "(type) ((0x28442211 &gt;&gt; CV_MAT_DEPTH(type)*4) &amp; 15)",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "(EnumType, ...) __CV_EXPAND(__CV_CAT(__CV_ENUM_CLASS_EXPOSE_, __CV_VA_NUM_ARGS(__VA_ARGS__))(EnumType, __VA_ARGS__)); \\",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "(EnumType)",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "(code, msg)",
    "local": ""
  },
  {
    "origin": "( code, msg, CV_Func, __FILE__, __LINE__ )",
    "local": ""
  },
  {
    "origin": "Call the error handler.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "(code, args)",
    "local": ""
  },
  {
    "origin": "( code, cv::format args, CV_Func, __FILE__, __LINE__ )",
    "local": ""
  },
  {
    "origin": "Call the error handler.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "(synonym) CV_EXPORTS",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "CV_EXPORTS",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "CV_EXPORTS",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "CV_EXPORTS",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "CV_EXPORTS",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "extern \"C\"",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "final",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "(flags) ((flags) &amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "(flags) ((flags) &amp; CV_MAT_SUBMAT_FLAG)",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "0.69314718055994530941723212145818",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "(flags) ((((flags) &amp;",
    "local": ""
  },
  {
    "origin": ") &gt;&gt;",
    "local": ""
  },
  {
    "origin": ") + 1)",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "((",
    "local": ""
  },
  {
    "origin": "- 1) &lt;&lt;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "(1 &lt;&lt;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "14",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "(flags) ((flags) &amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "*",
    "local": ""
  },
  {
    "origin": "- 1)",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "/* nothing by default */",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "override",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "3.1415926535897932384626433832795",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "(1 &lt;&lt;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "15",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "(synonym)",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "(val)",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "(mappable)",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "(phantom_header)",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "(a, b) ((a) &lt; (b) ? (b) : (a))",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "(a, b) ((a) &gt; (b) ? (b) : (a))",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "Typedefs",
    "local": ""
  },
  {
    "origin": "typedef std::lock_guard&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "typedef int(*",
    "local": ""
  },
  {
    "origin": ") (int status, const char *func_name, const char *err_msg, const char *file_name, int",
    "local": ""
  },
  {
    "origin": ", void *userdata)",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "typedef std::recursive_mutex",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "= 13,",
    "local": ""
  },
  {
    "origin": "= 14,",
    "local": ""
  },
  {
    "origin": "= 15,",
    "local": ""
  },
  {
    "origin": "= 16,",
    "local": ""
  },
  {
    "origin": "= 17,",
    "local": ""
  },
  {
    "origin": "= 18,",
    "local": ""
  },
  {
    "origin": "= 18,",
    "local": ""
  },
  {
    "origin": "= 19,",
    "local": ""
  },
  {
    "origin": "= 20,",
    "local": ""
  },
  {
    "origin": "= 21,",
    "local": ""
  },
  {
    "origin": "= 22,",
    "local": ""
  },
  {
    "origin": "= 23,",
    "local": ""
  },
  {
    "origin": "= 24,",
    "local": ""
  },
  {
    "origin": "= 25,",
    "local": ""
  },
  {
    "origin": "= 26,",
    "local": ""
  },
  {
    "origin": "= 27,",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "Available CPU features.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "= 16",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static _Tp *",
    "local": ""
  },
  {
    "origin": "(_Tp *ptr, int n=(int) sizeof(_Tp))",
    "local": ""
  },
  {
    "origin": "Aligns a pointer to the specified number of bytes.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static size_t",
    "local": ""
  },
  {
    "origin": "(size_t sz, int n)",
    "local": ""
  },
  {
    "origin": "Aligns a buffer size to the specified number of bytes.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(int feature)",
    "local": ""
  },
  {
    "origin": "Returns true if the specified feature is supported by the host hardware.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(float *A, size_t astep, int m, float *b, size_t bstep, int n)",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(double *A, size_t astep, int m, double *b, size_t bstep, int n)",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "(float val)",
    "local": ""
  },
  {
    "origin": "Computes the cube root of an argument.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static double",
    "local": ""
  },
  {
    "origin": "(double val)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "_Tp",
    "local": ""
  },
  {
    "origin": "(_Tp x)",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "x)",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "x)",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "x)",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "(short x)",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "(double value)",
    "local": ""
  },
  {
    "origin": "Rounds floating-point number to the nearest integer not smaller than the original.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "(float value)",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "(int value)",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "(double value)",
    "local": ""
  },
  {
    "origin": "Rounds floating-point number to the nearest integer not larger than the original.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "(float value)",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "(int value)",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "(double value)",
    "local": ""
  },
  {
    "origin": "Determines if the argument is Infinity.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "(float value)",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "(double value)",
    "local": ""
  },
  {
    "origin": "Determines if the argument is Not A Number.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "(float value)",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "(double value)",
    "local": ""
  },
  {
    "origin": "Rounds floating-point number to the nearest integer.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "(float value)",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "(int value)",
    "local": ""
  },
  {
    "origin": "static int",
    "local": ""
  },
  {
    "origin": "(int a, unsigned int b)",
    "local": ""
  },
  {
    "origin": "Integer division with result round up.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static size_t",
    "local": ""
  },
  {
    "origin": "(size_t a, unsigned int b)",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(bool argument)",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const char *argument)",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(double argument)",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(float argument)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "argument)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "argument)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "argument)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "argument)",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(int argument)",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;argument)",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;argument)",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;argument)",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(size_t argument)",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;argument)",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;argument)",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;exc)",
    "local": ""
  },
  {
    "origin": "Signals an error and raises the exception.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(int _code, const",
    "local": ""
  },
  {
    "origin": "&amp;_err, const char *_func, const char *_file, int _line)",
    "local": ""
  },
  {
    "origin": "Signals an error and raises the exception.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "(float y, float x)",
    "local": ""
  },
  {
    "origin": "Calculates the angle of a 2D vector in degrees.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(void *ptr)",
    "local": ""
  },
  {
    "origin": "Deallocates a memory buffer.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void *",
    "local": ""
  },
  {
    "origin": "(size_t bufSize)",
    "local": ""
  },
  {
    "origin": "Allocates an aligned memory buffer.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , typename Functor &gt;",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const Functor &amp;operation)",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Returns full configuration time cmake output.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "std::string",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Returns list of CPU features enabled during compilation.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Returns the number of CPU ticks.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static size_t",
    "local": ""
  },
  {
    "origin": "(int type)",
    "local": ""
  },
  {
    "origin": "(int feature)",
    "local": ""
  },
  {
    "origin": "Returns feature name by ID.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Returns the number of logical CPUs available for the process.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Returns the number of threads used by OpenCV for parallel regions.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Returns the index of the currently executed thread within the current parallel region. Always returns 0 if called outside of parallel region.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Returns the number of ticks.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Returns the number of ticks per second.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Returns major library version.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Returns minor library version.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Returns revision field of the library version.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Returns library version string.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "pattern, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;result, bool recursive=false)",
    "local": ""
  },
  {
    "origin": "template&lt;int N, typename T &gt;",
    "local": ""
  },
  {
    "origin": "static bool",
    "local": ""
  },
  {
    "origin": "(const T &amp;data)",
    "local": ""
  },
  {
    "origin": "Alignment check of passed values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int N&gt;",
    "local": ""
  },
  {
    "origin": "static bool",
    "local": ""
  },
  {
    "origin": "(const void *p1)",
    "local": ""
  },
  {
    "origin": "template&lt;int N&gt;",
    "local": ""
  },
  {
    "origin": "static bool",
    "local": ""
  },
  {
    "origin": "(const void *p1, const void *p2)",
    "local": ""
  },
  {
    "origin": "template&lt;int N&gt;",
    "local": ""
  },
  {
    "origin": "static bool",
    "local": ""
  },
  {
    "origin": "(const void *p1, const void *p2, const void *p3)",
    "local": ""
  },
  {
    "origin": "template&lt;int N&gt;",
    "local": ""
  },
  {
    "origin": "static bool",
    "local": ""
  },
  {
    "origin": "(const void *p1, const void *p2, const void *p3, const void *p4)",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "(float *A, size_t astep, int m, float *b, size_t bstep, int n)",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "(double *A, size_t astep, int m, double *b, size_t bstep, int n)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , typename _AccTp &gt;",
    "local": ""
  },
  {
    "origin": "static _AccTp",
    "local": ""
  },
  {
    "origin": "(const _Tp *a, int n)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , typename _AccTp &gt;",
    "local": ""
  },
  {
    "origin": "static _AccTp",
    "local": ""
  },
  {
    "origin": "(const _Tp *a, const _Tp *b, int n)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , typename _AccTp &gt;",
    "local": ""
  },
  {
    "origin": "static _AccTp",
    "local": ""
  },
  {
    "origin": "(const _Tp *a, int n)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , typename _AccTp &gt;",
    "local": ""
  },
  {
    "origin": "static _AccTp",
    "local": ""
  },
  {
    "origin": "(const _Tp *a, const _Tp *b, int n)",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "(const float *a, const float *b, int n)",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*a, const",
    "local": ""
  },
  {
    "origin": "*b, int n)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , typename _AccTp &gt;",
    "local": ""
  },
  {
    "origin": "static _AccTp",
    "local": ""
  },
  {
    "origin": "(const _Tp *a, int n)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , typename _AccTp &gt;",
    "local": ""
  },
  {
    "origin": "static _AccTp",
    "local": ""
  },
  {
    "origin": "(const _Tp *a, const _Tp *b, int n)",
    "local": ""
  },
  {
    "origin": "static float",
    "local": ""
  },
  {
    "origin": "(const float *a, const float *b, int n)",
    "local": ""
  },
  {
    "origin": "static std::ostream &amp;",
    "local": ""
  },
  {
    "origin": "(std::ostream &amp;out, const",
    "local": ""
  },
  {
    "origin": "&amp;tm)",
    "local": ""
  },
  {
    "origin": "output operator",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "errCallback, void *userdata=0, void **prevUserdata=0)",
    "local": ""
  },
  {
    "origin": "Sets the new error handler and the optional user data.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static int",
    "local": ""
  },
  {
    "origin": "(int a, unsigned int b)",
    "local": ""
  },
  {
    "origin": "Round first value up to the nearest multiple of second value.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static size_t",
    "local": ""
  },
  {
    "origin": "(size_t a, unsigned int b)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static _Tp",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "Template function for accurate conversion from one primitive type to another.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static _Tp",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static _Tp",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static _Tp",
    "local": ""
  },
  {
    "origin": "(short v)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static _Tp",
    "local": ""
  },
  {
    "origin": "(unsigned v)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static _Tp",
    "local": ""
  },
  {
    "origin": "(int v)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static _Tp",
    "local": ""
  },
  {
    "origin": "(float v)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static _Tp",
    "local": ""
  },
  {
    "origin": "(double v)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static _Tp",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static _Tp",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static _Tp",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(short v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(unsigned v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(int v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(float v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(double v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(int v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(short v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(unsigned v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(float v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(double v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "short",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "short",
    "local": ""
  },
  {
    "origin": "(int v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "short",
    "local": ""
  },
  {
    "origin": "(unsigned v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "short",
    "local": ""
  },
  {
    "origin": "(float v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "short",
    "local": ""
  },
  {
    "origin": "(double v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "short",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "short",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(int v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(short v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(unsigned v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(float v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(double v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(short v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(int v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "unsigned",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "unsigned",
    "local": ""
  },
  {
    "origin": "(short v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "unsigned",
    "local": ""
  },
  {
    "origin": "(int v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "unsigned",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "unsigned",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "unsigned",
    "local": ""
  },
  {
    "origin": "(float v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "unsigned",
    "local": ""
  },
  {
    "origin": "(double v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(short v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(int v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(unsigned v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(float v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(double v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(bool flag)",
    "local": ""
  },
  {
    "origin": "Sets/resets the break-on-error mode.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(int nthreads)",
    "local": ""
  },
  {
    "origin": "OpenCV will try to set the number of threads for the next parallel region.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(bool onoff)",
    "local": ""
  },
  {
    "origin": "Enables or disables the optimized code.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const char *suffix=0)",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "argument)",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(int value, const",
    "local": ""
  },
  {
    "origin": "&amp;point=",
    "local": ""
  },
  {
    "origin": "(42, 24))",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;rect)",
    "local": ""
  },
  {
    "origin": "static void",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Returns the status of optimized code usage.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Macro Definition Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_2PI",
    "local": ""
  },
  {
    "origin": "#define CV_2PI 6.283185307179586476925286766559",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_ALWAYS_INLINE",
    "local": ""
  },
  {
    "origin": "#define CV_ALWAYS_INLINE inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_Assert",
    "local": ""
  },
  {
    "origin": "#define CV_Assert",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "expr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "do { if(!!(expr)) ; else",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ", #expr, CV_Func, __FILE__, __LINE__ ); } while(0)",
    "local": ""
  },
  {
    "origin": "Checks a condition at runtime and throws exception if it fails.",
    "local": ""
  },
  {
    "origin": "The macros CV_Assert (and",
    "local": ""
  },
  {
    "origin": ") evaluate the specified expression. If it is 0, the macros raise an error (see",
    "local": ""
  },
  {
    "origin": "). The macro CV_Assert checks the condition in both Debug and Release configurations while CV_DbgAssert is only retained in the Debug configuration.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CONSTEXPR",
    "local": ""
  },
  {
    "origin": "#define CV_CONSTEXPR",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_AVX",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_AVX2",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_AVX2 11",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_AVX512_CLX",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_AVX512_CLX 261",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_AVX512_CNL",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_AVX512_CNL 260",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_AVX512_COMMON",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_AVX512_COMMON 257",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_AVX512_ICL",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_AVX512_ICL 262",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_AVX512_KNL",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_AVX512_KNL 258",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_AVX512_KNM",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_AVX512_KNM 259",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_AVX512_SKX",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_AVX512_SKX 256",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_AVX_5124FMAPS",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_AVX_5124FMAPS 27",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_AVX_5124VNNIW",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_AVX_5124VNNIW 26",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_AVX_512BITALG",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_AVX_512BITALG 24",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_AVX_512BW",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_AVX_512BW 14",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_AVX_512CD",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_AVX_512CD 15",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_AVX_512DQ",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_AVX_512DQ 16",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_AVX_512ER",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_AVX_512ER 17",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_AVX_512F",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_AVX_512F 13",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_AVX_512IFMA",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_AVX_512IFMA 18",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_AVX_512IFMA512",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_AVX_512IFMA512 18",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_AVX_512PF",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_AVX_512PF 19",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_AVX_512VBMI",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_AVX_512VBMI 20",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_AVX_512VBMI2",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_AVX_512VBMI2 22",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_AVX_512VL",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_AVX_512VL 21",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_AVX_512VNNI",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_AVX_512VNNI 23",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_AVX_512VPOPCNTDQ",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_AVX_512VPOPCNTDQ 25",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_FMA3",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_FMA3 12",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_FP16",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_FP16 9",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_MMX",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_MSA",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_NEON",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_NONE",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_POPCNT",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_RVV",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_SSE",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_SSE2",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_SSE2 3",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_SSE3",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_SSE3 4",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_SSE4_1",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_SSE4_1 6",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_SSE4_2",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_SSE4_2 7",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_SSSE3",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_SSSE3 5",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_VSX",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CPU_VSX3",
    "local": ""
  },
  {
    "origin": "#define CV_CPU_VSX3 201",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CXX_MOVE",
    "local": ""
  },
  {
    "origin": "#define CV_CXX_MOVE",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "std::move(x)",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CXX_MOVE_SEMANTICS",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_CXX_STD_ARRAY",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_DbgAssert",
    "local": ""
  },
  {
    "origin": "#define CV_DbgAssert",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "expr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "replaced with",
    "local": ""
  },
  {
    "origin": "in Debug configuration",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_DECL_ALIGNED",
    "local": ""
  },
  {
    "origin": "#define CV_DECL_ALIGNED",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_ELEM_SIZE",
    "local": ""
  },
  {
    "origin": "#define CV_ELEM_SIZE",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "type",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "(type)*",
    "local": ""
  },
  {
    "origin": "(type))",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_ELEM_SIZE1",
    "local": ""
  },
  {
    "origin": "#define CV_ELEM_SIZE1",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "type",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "((0x28442211 &gt;&gt; CV_MAT_DEPTH(type)*4) &amp; 15)",
    "local": ""
  },
  {
    "origin": "Size of each channel item, 0x28442211 = 0010 1000 0100 0100 0010 0010 0001 0001 ~ array of sizeof(arr_type_elem)",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_ENABLE_UNROLLED",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_ENUM_CLASS_EXPOSE",
    "local": ""
  },
  {
    "origin": "#define CV_ENUM_CLASS_EXPOSE",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "EnumType,",
    "local": ""
  },
  {
    "origin": "...",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "__CV_EXPAND(__CV_CAT(__CV_ENUM_CLASS_EXPOSE_, __CV_VA_NUM_ARGS(__VA_ARGS__))(EnumType, __VA_ARGS__)); \\",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_ENUM_FLAGS",
    "local": ""
  },
  {
    "origin": "#define CV_ENUM_FLAGS",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "EnumType",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Value:",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_Error",
    "local": ""
  },
  {
    "origin": "#define CV_Error",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "code,",
    "local": ""
  },
  {
    "origin": "msg",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "( code, msg, CV_Func, __FILE__, __LINE__ )",
    "local": ""
  },
  {
    "origin": "Call the error handler.",
    "local": ""
  },
  {
    "origin": "Currently, the error handler prints the error code and the error message to the standard error stream",
    "local": ""
  },
  {
    "origin": ". In the Debug configuration, it then provokes memory access violation, so that the execution stack and all the parameters can be analyzed by the debugger. In the Release configuration, the exception is thrown.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "code",
    "local": ""
  },
  {
    "origin": "one of Error::Code",
    "local": ""
  },
  {
    "origin": "msg",
    "local": ""
  },
  {
    "origin": "error message",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_Error_",
    "local": ""
  },
  {
    "origin": "#define CV_Error_",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "code,",
    "local": ""
  },
  {
    "origin": "args",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "( code, cv::format args, CV_Func, __FILE__, __LINE__ )",
    "local": ""
  },
  {
    "origin": "Call the error handler.",
    "local": ""
  },
  {
    "origin": "This macro can be used to construct an error message on-fly to include some dynamic information, for example:",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "code",
    "local": ""
  },
  {
    "origin": "one of Error::Code",
    "local": ""
  },
  {
    "origin": "args",
    "local": ""
  },
  {
    "origin": "printf-like formatted error message in parentheses",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_EXPORTS_AS",
    "local": ""
  },
  {
    "origin": "#define CV_EXPORTS_AS",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "synonym",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "CV_EXPORTS",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_EXPORTS_TEMPLATE",
    "local": ""
  },
  {
    "origin": "#define CV_EXPORTS_TEMPLATE CV_EXPORTS",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_EXPORTS_W",
    "local": ""
  },
  {
    "origin": "#define CV_EXPORTS_W CV_EXPORTS",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_EXPORTS_W_MAP",
    "local": ""
  },
  {
    "origin": "#define CV_EXPORTS_W_MAP CV_EXPORTS",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_EXPORTS_W_SIMPLE",
    "local": ""
  },
  {
    "origin": "#define CV_EXPORTS_W_SIMPLE CV_EXPORTS",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_EXTERN_C",
    "local": ""
  },
  {
    "origin": "#define CV_EXTERN_C extern \"C\"",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_FINAL",
    "local": ""
  },
  {
    "origin": "#define CV_FINAL final",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_FP16_TYPE",
    "local": ""
  },
  {
    "origin": "#define CV_FP16_TYPE 0",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_HARDWARE_MAX_FEATURE",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_IN_OUT",
    "local": ""
  },
  {
    "origin": "#define CV_IN_OUT",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_IS_CONT_MAT",
    "local": ""
  },
  {
    "origin": "#define CV_IS_CONT_MAT",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_IS_MAT_CONT",
    "local": ""
  },
  {
    "origin": "#define CV_IS_MAT_CONT",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "flags",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "((flags) &amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_IS_SUBMAT",
    "local": ""
  },
  {
    "origin": "#define CV_IS_SUBMAT",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "flags",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "((flags) &amp; CV_MAT_SUBMAT_FLAG)",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_LOG2",
    "local": ""
  },
  {
    "origin": "#define CV_LOG2 0.69314718055994530941723212145818",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_MAT_CN",
    "local": ""
  },
  {
    "origin": "#define CV_MAT_CN",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "flags",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "((((flags) &amp;",
    "local": ""
  },
  {
    "origin": ") &gt;&gt;",
    "local": ""
  },
  {
    "origin": ") + 1)",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_MAT_CN_MASK",
    "local": ""
  },
  {
    "origin": "#define CV_MAT_CN_MASK ((",
    "local": ""
  },
  {
    "origin": "- 1) &lt;&lt;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_MAT_CONT_FLAG",
    "local": ""
  },
  {
    "origin": "#define CV_MAT_CONT_FLAG (1 &lt;&lt;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_MAT_CONT_FLAG_SHIFT",
    "local": ""
  },
  {
    "origin": "#define CV_MAT_CONT_FLAG_SHIFT 14",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_MAT_TYPE",
    "local": ""
  },
  {
    "origin": "#define CV_MAT_TYPE",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "flags",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "((flags) &amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_MAT_TYPE_MASK",
    "local": ""
  },
  {
    "origin": "#define CV_MAT_TYPE_MASK (",
    "local": ""
  },
  {
    "origin": "*",
    "local": ""
  },
  {
    "origin": "- 1)",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_NODISCARD",
    "local": ""
  },
  {
    "origin": "#define CV_NODISCARD /* nothing by default */",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_NOEXCEPT",
    "local": ""
  },
  {
    "origin": "#define CV_NOEXCEPT",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_OUT",
    "local": ""
  },
  {
    "origin": "#define CV_OUT",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_OVERRIDE",
    "local": ""
  },
  {
    "origin": "#define CV_OVERRIDE override",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_PI",
    "local": ""
  },
  {
    "origin": "#define CV_PI 3.1415926535897932384626433832795",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_PROP",
    "local": ""
  },
  {
    "origin": "#define CV_PROP",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_PROP_RW",
    "local": ""
  },
  {
    "origin": "#define CV_PROP_RW",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_STRONG_ALIGNMENT",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_SUBMAT_FLAG",
    "local": ""
  },
  {
    "origin": "#define CV_SUBMAT_FLAG (1 &lt;&lt;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_SUBMAT_FLAG_SHIFT",
    "local": ""
  },
  {
    "origin": "#define CV_SUBMAT_FLAG_SHIFT 15",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_WRAP",
    "local": ""
  },
  {
    "origin": "#define CV_WRAP",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_WRAP_AS",
    "local": ""
  },
  {
    "origin": "#define CV_WRAP_AS",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "synonym",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_WRAP_DEFAULT",
    "local": ""
  },
  {
    "origin": "#define CV_WRAP_DEFAULT",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_WRAP_MAPPABLE",
    "local": ""
  },
  {
    "origin": "#define CV_WRAP_MAPPABLE",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "mappable",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_WRAP_PHANTOM",
    "local": ""
  },
  {
    "origin": "#define CV_WRAP_PHANTOM",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "phantom_header",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "MAX",
    "local": ""
  },
  {
    "origin": "#define MAX",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a,",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "((a) &lt; (b) ? (b) : (a))",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "MIN",
    "local": ""
  },
  {
    "origin": "#define MIN",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a,",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "((a) &gt; (b) ? (b) : (a))",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "OPENCV_ABI_COMPATIBILITY",
    "local": ""
  },
  {
    "origin": "Typedef Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "AutoLock",
    "local": ""
  },
  {
    "origin": "typedef std::lock_guard&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "ErrorCallback",
    "local": ""
  },
  {
    "origin": "typedef int(* cv::ErrorCallback) (int status, const char *func_name, const char *err_msg, const char *file_name, int",
    "local": ""
  },
  {
    "origin": ", void *userdata)",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "HammingLUT",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "Mutex",
    "local": ""
  },
  {
    "origin": "typedef std::recursive_mutex",
    "local": ""
  },
  {
    "origin": "Enumeration Type Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CpuFeatures",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "Available CPU features.",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "CPU_MMX",
    "local": ""
  },
  {
    "origin": "CPU_SSE",
    "local": ""
  },
  {
    "origin": "CPU_SSE2",
    "local": ""
  },
  {
    "origin": "CPU_SSE3",
    "local": ""
  },
  {
    "origin": "CPU_SSSE3",
    "local": ""
  },
  {
    "origin": "CPU_SSE4_1",
    "local": ""
  },
  {
    "origin": "CPU_SSE4_2",
    "local": ""
  },
  {
    "origin": "CPU_POPCNT",
    "local": ""
  },
  {
    "origin": "CPU_FP16",
    "local": ""
  },
  {
    "origin": "CPU_AVX",
    "local": ""
  },
  {
    "origin": "CPU_AVX2",
    "local": ""
  },
  {
    "origin": "CPU_FMA3",
    "local": ""
  },
  {
    "origin": "CPU_AVX_512F",
    "local": ""
  },
  {
    "origin": "CPU_AVX_512BW",
    "local": ""
  },
  {
    "origin": "CPU_AVX_512CD",
    "local": ""
  },
  {
    "origin": "CPU_AVX_512DQ",
    "local": ""
  },
  {
    "origin": "CPU_AVX_512ER",
    "local": ""
  },
  {
    "origin": "CPU_AVX_512IFMA512",
    "local": ""
  },
  {
    "origin": "CPU_AVX_512IFMA",
    "local": ""
  },
  {
    "origin": "CPU_AVX_512PF",
    "local": ""
  },
  {
    "origin": "CPU_AVX_512VBMI",
    "local": ""
  },
  {
    "origin": "CPU_AVX_512VL",
    "local": ""
  },
  {
    "origin": "CPU_AVX_512VBMI2",
    "local": ""
  },
  {
    "origin": "CPU_AVX_512VNNI",
    "local": ""
  },
  {
    "origin": "CPU_AVX_512BITALG",
    "local": ""
  },
  {
    "origin": "CPU_AVX_512VPOPCNTDQ",
    "local": ""
  },
  {
    "origin": "CPU_AVX_5124VNNIW",
    "local": ""
  },
  {
    "origin": "CPU_AVX_5124FMAPS",
    "local": ""
  },
  {
    "origin": "CPU_NEON",
    "local": ""
  },
  {
    "origin": "CPU_MSA",
    "local": ""
  },
  {
    "origin": "CPU_VSX",
    "local": ""
  },
  {
    "origin": "CPU_VSX3",
    "local": ""
  },
  {
    "origin": "CPU_RVV",
    "local": ""
  },
  {
    "origin": "CPU_AVX512_SKX",
    "local": ""
  },
  {
    "origin": "Skylake-X with AVX-512F/CD/BW/DQ/VL.",
    "local": ""
  },
  {
    "origin": "CPU_AVX512_COMMON",
    "local": ""
  },
  {
    "origin": "Common instructions AVX-512F/CD for all CPUs that support AVX-512.",
    "local": ""
  },
  {
    "origin": "CPU_AVX512_KNL",
    "local": ""
  },
  {
    "origin": "Knights Landing with AVX-512F/CD/ER/PF.",
    "local": ""
  },
  {
    "origin": "CPU_AVX512_KNM",
    "local": ""
  },
  {
    "origin": "Knights Mill with AVX-512F/CD/ER/PF/4FMAPS/4VNNIW/VPOPCNTDQ.",
    "local": ""
  },
  {
    "origin": "CPU_AVX512_CNL",
    "local": ""
  },
  {
    "origin": "Cannon Lake with AVX-512F/CD/BW/DQ/VL/IFMA/VBMI.",
    "local": ""
  },
  {
    "origin": "CPU_AVX512_CLX",
    "local": ""
  },
  {
    "origin": "Cascade Lake with AVX-512F/CD/BW/DQ/VL/VNNI.",
    "local": ""
  },
  {
    "origin": "CPU_AVX512_ICL",
    "local": ""
  },
  {
    "origin": "Ice Lake with AVX-512F/CD/BW/DQ/VL/IFMA/VBMI/VNNI/VBMI2/BITALG/VPOPCNTDQ.",
    "local": ""
  },
  {
    "origin": "CPU_MAX_FEATURE",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "SortFlags",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "SORT_EVERY_ROW",
    "local": ""
  },
  {
    "origin": "Python: cv.SORT_EVERY_ROW",
    "local": ""
  },
  {
    "origin": "each matrix row is sorted independently",
    "local": ""
  },
  {
    "origin": "SORT_EVERY_COLUMN",
    "local": ""
  },
  {
    "origin": "Python: cv.SORT_EVERY_COLUMN",
    "local": ""
  },
  {
    "origin": "each matrix column is sorted independently; this flag and the previous one are mutually exclusive.",
    "local": ""
  },
  {
    "origin": "SORT_ASCENDING",
    "local": ""
  },
  {
    "origin": "Python: cv.SORT_ASCENDING",
    "local": ""
  },
  {
    "origin": "each matrix row is sorted in the ascending order.",
    "local": ""
  },
  {
    "origin": "SORT_DESCENDING",
    "local": ""
  },
  {
    "origin": "Python: cv.SORT_DESCENDING",
    "local": ""
  },
  {
    "origin": "each matrix row is sorted in the descending order; this flag and the previous one are also mutually exclusive.",
    "local": ""
  },
  {
    "origin": "Function Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "alignPtr()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static _Tp* cv::alignPtr",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "_Tp *",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Aligns a pointer to the specified number of bytes.",
    "local": ""
  },
  {
    "origin": "The function returns the aligned pointer of the same type as the input pointer:",
    "local": ""
  },
  {
    "origin": "\\[\\texttt{(_Tp*)(((size_t)ptr + n-1) &amp; -n)}\\]",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": "Aligned pointer.",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": "Alignment size that must be a power of two.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "alignSize()",
    "local": ""
  },
  {
    "origin": "static size_t cv::alignSize",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "size_t",
    "local": ""
  },
  {
    "origin": "sz",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Aligns a buffer size to the specified number of bytes.",
    "local": ""
  },
  {
    "origin": "The function returns the minimum number that is greater than or equal to sz and is divisible by n :",
    "local": ""
  },
  {
    "origin": "\\[\\texttt{(sz + n-1) &amp; -n}\\]",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "sz",
    "local": ""
  },
  {
    "origin": "Buffer size to align.",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": "Alignment size that must be a power of two.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "checkHardwareSupport()",
    "local": ""
  },
  {
    "origin": "bool cv::checkHardwareSupport",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "feature",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.checkHardwareSupport(",
    "local": ""
  },
  {
    "origin": "feature",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns true if the specified feature is supported by the host hardware.",
    "local": ""
  },
  {
    "origin": "The function returns true if the host hardware supports the specified feature. When user calls setUseOptimized(false), the subsequent calls to",
    "local": ""
  },
  {
    "origin": "will return false until setUseOptimized(true) is called. This way user can dynamically switch on and off the optimized code in OpenCV.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "feature",
    "local": ""
  },
  {
    "origin": "The feature of interest, one of cv::CpuFeatures",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "Cholesky()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "bool cv::Cholesky",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "float *",
    "local": ""
  },
  {
    "origin": "A",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "size_t",
    "local": ""
  },
  {
    "origin": "astep",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "float *",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "size_t",
    "local": ""
  },
  {
    "origin": "bstep",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "proxy for hal::Cholesky",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "Cholesky()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "bool cv::Cholesky",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "double *",
    "local": ""
  },
  {
    "origin": "A",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "size_t",
    "local": ""
  },
  {
    "origin": "astep",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double *",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "size_t",
    "local": ""
  },
  {
    "origin": "bstep",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "proxy for hal::Cholesky",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "cubeRoot()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "float cv::cubeRoot",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cubeRoot(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Computes the cube root of an argument.",
    "local": ""
  },
  {
    "origin": "The function cubeRoot computes \\(\\sqrt[3]{\\texttt{val}}\\). Negative arguments are handled correctly. NaN and Inf are not handled. The accuracy approaches the maximum possible accuracy for single-precision data.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": "A function argument.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "cubeRoot()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "static double cv::cubeRoot",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cubeRoot(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "cubeRoot with argument of",
    "local": ""
  },
  {
    "origin": "type calls",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "cv_abs()",
    "local": ""
  },
  {
    "origin": "[1/5]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "_Tp cv::cv_abs",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "_Tp",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "cv_abs()",
    "local": ""
  },
  {
    "origin": "[2/5]",
    "local": ""
  },
  {
    "origin": "int cv::cv_abs",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "cv_abs()",
    "local": ""
  },
  {
    "origin": "[3/5]",
    "local": ""
  },
  {
    "origin": "int cv::cv_abs",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "cv_abs()",
    "local": ""
  },
  {
    "origin": "[4/5]",
    "local": ""
  },
  {
    "origin": "int cv::cv_abs",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "cv_abs()",
    "local": ""
  },
  {
    "origin": "[5/5]",
    "local": ""
  },
  {
    "origin": "int cv::cv_abs",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "short",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "cvCeil()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "int cvCeil",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Rounds floating-point number to the nearest integer not smaller than the original.",
    "local": ""
  },
  {
    "origin": "The function computes an integer i such that:",
    "local": ""
  },
  {
    "origin": "\\[i \\le \\texttt{value} &lt; i+1\\]",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": "floating-point number. If the value is outside of INT_MIN ... INT_MAX range, the result is not defined.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "cvCeil()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "int cvCeil",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "cvCeil()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "int cvCeil",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "cvFloor()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "int cvFloor",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Rounds floating-point number to the nearest integer not larger than the original.",
    "local": ""
  },
  {
    "origin": "The function computes an integer i such that:",
    "local": ""
  },
  {
    "origin": "\\[i \\le \\texttt{value} &lt; i+1\\]",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": "floating-point number. If the value is outside of INT_MIN ... INT_MAX range, the result is not defined.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "cvFloor()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "int cvFloor",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "cvFloor()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "int cvFloor",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "cvIsInf()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "int cvIsInf",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Determines if the argument is Infinity.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": "The input floating-point value",
    "local": ""
  },
  {
    "origin": "The function returns 1 if the argument is a plus or minus infinity (as defined by IEEE754 standard) and 0 otherwise.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "cvIsInf()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "int cvIsInf",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "cvIsNaN()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "int cvIsNaN",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Determines if the argument is Not A Number.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": "The input floating-point value",
    "local": ""
  },
  {
    "origin": "The function returns 1 if the argument is Not A Number (as defined by IEEE754 standard), 0 otherwise.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "cvIsNaN()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "int cvIsNaN",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "cvRound()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "int cvRound",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Rounds floating-point number to the nearest integer.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": "floating-point number. If the value is outside of INT_MIN ... INT_MAX range, the result is not defined.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "cvRound()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "int cvRound",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "cvRound()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "int cvRound",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "divUp()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "static int cv::divUp",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "unsigned int",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Integer division with result round up.",
    "local": ""
  },
  {
    "origin": "Use this function instead of",
    "local": ""
  },
  {
    "origin": "expressions.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "divUp()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "static size_t cv::divUp",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "size_t",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "unsigned int",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "dumpBool()",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::utils::dumpBool",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.utils.dumpBool(",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "dumpCString()",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::utils::dumpCString",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const char *",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.utils.dumpCString(",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "dumpDouble()",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::utils::dumpDouble",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.utils.dumpDouble(",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "dumpFloat()",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::utils::dumpFloat",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.utils.dumpFloat(",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "dumpInputArray()",
    "local": ""
  },
  {
    "origin": "cv::utils::dumpInputArray",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.utils.dumpInputArray(",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "dumpInputArrayOfArrays()",
    "local": ""
  },
  {
    "origin": "cv::utils::dumpInputArrayOfArrays",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.utils.dumpInputArrayOfArrays(",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "dumpInputOutputArray()",
    "local": ""
  },
  {
    "origin": "cv::utils::dumpInputOutputArray",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval, argument",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.utils.dumpInputOutputArray(",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "dumpInputOutputArrayOfArrays()",
    "local": ""
  },
  {
    "origin": "cv::utils::dumpInputOutputArrayOfArrays",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval, argument",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.utils.dumpInputOutputArrayOfArrays(",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "dumpInt()",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::utils::dumpInt",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.utils.dumpInt(",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "dumpRange()",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::utils::dumpRange",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.utils.dumpRange(",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "dumpRect()",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::utils::dumpRect",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.utils.dumpRect(",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "dumpRotatedRect()",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::utils::dumpRotatedRect",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.utils.dumpRotatedRect(",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "dumpSizeT()",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::utils::dumpSizeT",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "size_t",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.utils.dumpSizeT(",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "dumpString()",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::utils::dumpString",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.utils.dumpString(",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "dumpTermCriteria()",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::utils::dumpTermCriteria",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.utils.dumpTermCriteria(",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "error()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "void cv::error",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "exc",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Signals an error and raises the exception.",
    "local": ""
  },
  {
    "origin": "By default the function prints information about the error to stderr, then it either stops if",
    "local": ""
  },
  {
    "origin": "had been called before or raises the exception. It is possible to alternate error processing by using",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "exc",
    "local": ""
  },
  {
    "origin": "the exception raisen.",
    "local": ""
  },
  {
    "origin": "drop this version",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "error()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "void cv::error",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "_code",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "_err",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const char *",
    "local": ""
  },
  {
    "origin": "_func",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const char *",
    "local": ""
  },
  {
    "origin": "_file",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "_line",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Signals an error and raises the exception.",
    "local": ""
  },
  {
    "origin": "By default the function prints information about the error to stderr, then it either stops if",
    "local": ""
  },
  {
    "origin": "had been called before or raises the exception. It is possible to alternate error processing by using",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "_code",
    "local": ""
  },
  {
    "origin": "- error code (",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "_err",
    "local": ""
  },
  {
    "origin": "- error description",
    "local": ""
  },
  {
    "origin": "_func",
    "local": ""
  },
  {
    "origin": "- function name. Available only when the compiler supports getting it",
    "local": ""
  },
  {
    "origin": "_file",
    "local": ""
  },
  {
    "origin": "- source file name where the error has occurred",
    "local": ""
  },
  {
    "origin": "_line",
    "local": ""
  },
  {
    "origin": "- line number in the source file where the error has occurred",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "fastAtan2()",
    "local": ""
  },
  {
    "origin": "float cv::fastAtan2",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "y",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.fastAtan2(",
    "local": ""
  },
  {
    "origin": "y, x",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Calculates the angle of a 2D vector in degrees.",
    "local": ""
  },
  {
    "origin": "The function fastAtan2 calculates the full-range angle of an input 2D vector. The angle is measured in degrees and varies from 0 to 360 degrees. The accuracy is about 0.3 degrees.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x-coordinate of the vector.",
    "local": ""
  },
  {
    "origin": "y",
    "local": ""
  },
  {
    "origin": "y-coordinate of the vector.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "fastFree()",
    "local": ""
  },
  {
    "origin": "void cv::fastFree",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "void *",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Deallocates a memory buffer.",
    "local": ""
  },
  {
    "origin": "The function deallocates the buffer allocated with fastMalloc . If NULL pointer is passed, the function does nothing. C version of the function clears the pointer",
    "local": ""
  },
  {
    "origin": "pptr",
    "local": ""
  },
  {
    "origin": "to avoid problems with double memory deallocation.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": "Pointer to the allocated buffer.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "fastMalloc()",
    "local": ""
  },
  {
    "origin": "void* cv::fastMalloc",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "size_t",
    "local": ""
  },
  {
    "origin": "bufSize",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Allocates an aligned memory buffer.",
    "local": ""
  },
  {
    "origin": "The function allocates the buffer of the specified size and returns it. When the buffer size is 16 bytes or more, the returned buffer is aligned to 16 bytes.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "bufSize",
    "local": ""
  },
  {
    "origin": "Allocated buffer size.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "forEach_impl()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , typename Functor &gt;",
    "local": ""
  },
  {
    "origin": "void cv::Mat::forEach_impl",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const Functor &amp;",
    "local": ""
  },
  {
    "origin": "operation",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "protected",
    "local": ""
  },
  {
    "origin": "idx is modified in this-&gt;rowCall",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getBuildInformation()",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp; cv::getBuildInformation",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.getBuildInformation(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns full configuration time cmake output.",
    "local": ""
  },
  {
    "origin": "Returned value is raw cmake output including version control system revision, compiler version, compiler flags, enabled modules and third party libraries, etc. Output format depends on target architecture.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getCPUFeaturesLine()",
    "local": ""
  },
  {
    "origin": "std::string cv::getCPUFeaturesLine",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.getCPUFeaturesLine(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns list of CPU features enabled during compilation.",
    "local": ""
  },
  {
    "origin": "Returned value is a string containing space separated list of CPU features with following markers:",
    "local": ""
  },
  {
    "origin": "no markers - baseline features",
    "local": ""
  },
  {
    "origin": "prefix",
    "local": ""
  },
  {
    "origin": "- features enabled in dispatcher",
    "local": ""
  },
  {
    "origin": "suffix",
    "local": ""
  },
  {
    "origin": "- features enabled but not available in HW",
    "local": ""
  },
  {
    "origin": "Example:",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getCPUTickCount()",
    "local": ""
  },
  {
    "origin": "cv::getCPUTickCount",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.getCPUTickCount(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns the number of CPU ticks.",
    "local": ""
  },
  {
    "origin": "The function returns the current number of CPU ticks on some architectures (such as x86, x64, PowerPC). On other platforms the function is equivalent to getTickCount. It can also be used for very accurate time measurements, as well as for",
    "local": ""
  },
  {
    "origin": "initialization. Note that in case of multi-CPU systems a thread, from which getCPUTickCount is called, can be suspended and resumed at another CPU with its own counter. So, theoretically (and practically) the subsequent calls to the function do not necessary return the monotonously increasing values. Also, since a modern CPU varies the CPU frequency depending on the load, the number of CPU clocks spent in some code cannot be directly converted to time units. Therefore, getTickCount is generally a preferable solution for measuring execution time.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getElemSize()",
    "local": ""
  },
  {
    "origin": "static size_t cv::getElemSize",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "type",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getHardwareFeatureName()",
    "local": ""
  },
  {
    "origin": "cv::getHardwareFeatureName",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "feature",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.getHardwareFeatureName(",
    "local": ""
  },
  {
    "origin": "feature",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns feature name by ID.",
    "local": ""
  },
  {
    "origin": "Returns empty string if feature is not defined",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getNumberOfCPUs()",
    "local": ""
  },
  {
    "origin": "int cv::getNumberOfCPUs",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.getNumberOfCPUs(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns the number of logical CPUs available for the process.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getNumThreads()",
    "local": ""
  },
  {
    "origin": "int cv::getNumThreads",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.getNumThreads(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns the number of threads used by OpenCV for parallel regions.",
    "local": ""
  },
  {
    "origin": "Always returns 1 if OpenCV is built without threading support.",
    "local": ""
  },
  {
    "origin": "The exact meaning of return value depends on the threading framework used by OpenCV library:",
    "local": ""
  },
  {
    "origin": "- The number of threads, that OpenCV will try to use for parallel regions. If there is any tbb::thread_scheduler_init in user code conflicting with OpenCV, then function returns default number of threads used by TBB library.",
    "local": ""
  },
  {
    "origin": "- An upper bound on the number of threads that could be used to form a new team.",
    "local": ""
  },
  {
    "origin": "- The number of threads, that OpenCV will try to use for parallel regions.",
    "local": ""
  },
  {
    "origin": "- Unsupported; returns the GCD thread pool limit (512) for compatibility.",
    "local": ""
  },
  {
    "origin": "- The number of threads, that OpenCV will try to use for parallel regions, if before called setNumThreads with threads &gt; 0, otherwise returns the number of logical CPUs, available for the process.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getThreadNum()",
    "local": ""
  },
  {
    "origin": "int cv::getThreadNum",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.getThreadNum(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns the index of the currently executed thread within the current parallel region. Always returns 0 if called outside of parallel region.",
    "local": ""
  },
  {
    "origin": "Current implementation doesn't corresponding to this documentation.",
    "local": ""
  },
  {
    "origin": "The exact meaning of the return value depends on the threading framework used by OpenCV library:",
    "local": ""
  },
  {
    "origin": "- Unsupported with current 4.1 TBB release. Maybe will be supported in future.",
    "local": ""
  },
  {
    "origin": "- The thread number, within the current team, of the calling thread.",
    "local": ""
  },
  {
    "origin": "- An ID for the virtual processor that the current context is executing on (0 for master thread and unique number for others, but not necessary 1,2,3,...).",
    "local": ""
  },
  {
    "origin": "- System calling thread's ID. Never returns 0 inside parallel region.",
    "local": ""
  },
  {
    "origin": "- The index of the current parallel task.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getTickCount()",
    "local": ""
  },
  {
    "origin": "cv::getTickCount",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.getTickCount(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns the number of ticks.",
    "local": ""
  },
  {
    "origin": "The function returns the number of ticks after the certain event (for example, when the machine was turned on). It can be used to initialize",
    "local": ""
  },
  {
    "origin": "or to measure a function execution time by reading the tick count before and after the function call.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getTickFrequency()",
    "local": ""
  },
  {
    "origin": "double cv::getTickFrequency",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.getTickFrequency(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns the number of ticks per second.",
    "local": ""
  },
  {
    "origin": "The function returns the number of ticks per second. That is, the following code computes the execution time in seconds:",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getVersionMajor()",
    "local": ""
  },
  {
    "origin": "int cv::getVersionMajor",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.getVersionMajor(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns major library version.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getVersionMinor()",
    "local": ""
  },
  {
    "origin": "int cv::getVersionMinor",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.getVersionMinor(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns minor library version.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getVersionRevision()",
    "local": ""
  },
  {
    "origin": "int cv::getVersionRevision",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.getVersionRevision(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns revision field of the library version.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getVersionString()",
    "local": ""
  },
  {
    "origin": "cv::getVersionString",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.getVersionString(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns library version string.",
    "local": ""
  },
  {
    "origin": "For example \"3.4.1-dev\".",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "getMajorVersion, getMinorVersion, getRevisionVersion",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "glob()",
    "local": ""
  },
  {
    "origin": "void cv::glob",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "pattern",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "result",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "recursive",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "isAligned()",
    "local": ""
  },
  {
    "origin": "[1/5]",
    "local": ""
  },
  {
    "origin": "template&lt;int N, typename T &gt;",
    "local": ""
  },
  {
    "origin": "static bool cv::isAligned",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const T &amp;",
    "local": ""
  },
  {
    "origin": "data",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Alignment check of passed values.",
    "local": ""
  },
  {
    "origin": "Usage:",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "isAligned()",
    "local": ""
  },
  {
    "origin": "[2/5]",
    "local": ""
  },
  {
    "origin": "template&lt;int N&gt;",
    "local": ""
  },
  {
    "origin": "static bool cv::isAligned",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const void *",
    "local": ""
  },
  {
    "origin": "p1",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "isAligned()",
    "local": ""
  },
  {
    "origin": "[3/5]",
    "local": ""
  },
  {
    "origin": "template&lt;int N&gt;",
    "local": ""
  },
  {
    "origin": "static bool cv::isAligned",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const void *",
    "local": ""
  },
  {
    "origin": "p1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const void *",
    "local": ""
  },
  {
    "origin": "p2",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "isAligned()",
    "local": ""
  },
  {
    "origin": "[4/5]",
    "local": ""
  },
  {
    "origin": "template&lt;int N&gt;",
    "local": ""
  },
  {
    "origin": "static bool cv::isAligned",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const void *",
    "local": ""
  },
  {
    "origin": "p1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const void *",
    "local": ""
  },
  {
    "origin": "p2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const void *",
    "local": ""
  },
  {
    "origin": "p3",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "isAligned()",
    "local": ""
  },
  {
    "origin": "[5/5]",
    "local": ""
  },
  {
    "origin": "template&lt;int N&gt;",
    "local": ""
  },
  {
    "origin": "static bool cv::isAligned",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const void *",
    "local": ""
  },
  {
    "origin": "p1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const void *",
    "local": ""
  },
  {
    "origin": "p2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const void *",
    "local": ""
  },
  {
    "origin": "p3",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const void *",
    "local": ""
  },
  {
    "origin": "p4",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "LU()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "int cv::LU",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "float *",
    "local": ""
  },
  {
    "origin": "A",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "size_t",
    "local": ""
  },
  {
    "origin": "astep",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "float *",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "size_t",
    "local": ""
  },
  {
    "origin": "bstep",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "proxy for hal::LU",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "LU()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "int cv::LU",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "double *",
    "local": ""
  },
  {
    "origin": "A",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "size_t",
    "local": ""
  },
  {
    "origin": "astep",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double *",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "size_t",
    "local": ""
  },
  {
    "origin": "bstep",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "proxy for hal::LU",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "normInf()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , typename _AccTp &gt;",
    "local": ""
  },
  {
    "origin": "static _AccTp cv::normInf",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const _Tp *",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "normInf()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , typename _AccTp &gt;",
    "local": ""
  },
  {
    "origin": "static _AccTp cv::normInf",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const _Tp *",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const _Tp *",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "normL1()",
    "local": ""
  },
  {
    "origin": "[1/4]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , typename _AccTp &gt;",
    "local": ""
  },
  {
    "origin": "static _AccTp cv::normL1",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const _Tp *",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "normL1()",
    "local": ""
  },
  {
    "origin": "[2/4]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , typename _AccTp &gt;",
    "local": ""
  },
  {
    "origin": "static _AccTp cv::normL1",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const _Tp *",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const _Tp *",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "normL1()",
    "local": ""
  },
  {
    "origin": "[3/4]",
    "local": ""
  },
  {
    "origin": "float cv::normL1",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const float *",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const float *",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "normL1()",
    "local": ""
  },
  {
    "origin": "[4/4]",
    "local": ""
  },
  {
    "origin": "int cv::normL1",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "*",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "*",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "normL2Sqr()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , typename _AccTp &gt;",
    "local": ""
  },
  {
    "origin": "static _AccTp cv::normL2Sqr",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const _Tp *",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "normL2Sqr()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , typename _AccTp &gt;",
    "local": ""
  },
  {
    "origin": "static _AccTp cv::normL2Sqr",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const _Tp *",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const _Tp *",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "normL2Sqr()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "static float cv::normL2Sqr",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const float *",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const float *",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "operator&lt;&lt;()",
    "local": ""
  },
  {
    "origin": "static std::ostream&amp; cv::operator&lt;&lt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "std::ostream &amp;",
    "local": ""
  },
  {
    "origin": "out",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "tm",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "output operator",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "redirectError()",
    "local": ""
  },
  {
    "origin": "cv::redirectError",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "errCallback",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "void *",
    "local": ""
  },
  {
    "origin": "userdata",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "void **",
    "local": ""
  },
  {
    "origin": "prevUserdata",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Sets the new error handler and the optional user data.",
    "local": ""
  },
  {
    "origin": "The function sets the new error handler, called from",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "errCallback",
    "local": ""
  },
  {
    "origin": "the new error handler. If NULL, the default error handler is used.",
    "local": ""
  },
  {
    "origin": "userdata",
    "local": ""
  },
  {
    "origin": "the optional user data pointer, passed to the callback.",
    "local": ""
  },
  {
    "origin": "prevUserdata",
    "local": ""
  },
  {
    "origin": "the optional output parameter where the previous user data pointer is stored",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "the previous error handler",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "roundUp()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "static int cv::roundUp",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "unsigned int",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Round first value up to the nearest multiple of second value.",
    "local": ""
  },
  {
    "origin": "Use this function instead of",
    "local": ""
  },
  {
    "origin": "expressions.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "roundUp()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "static size_t cv::roundUp",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "size_t",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "unsigned int",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast()",
    "local": ""
  },
  {
    "origin": "[1/11]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static _Tp cv::saturate_cast",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Template function for accurate conversion from one primitive type to another.",
    "local": ""
  },
  {
    "origin": "The function saturate_cast resembles the standard C++ cast operations, such as static_cast&lt;T&gt;() and others. It perform an efficient and accurate conversion from one primitive type to another (see the introduction chapter). saturate in the name means that when the input value v is out of the range of the target type, the result is not formed just by taking low bits of the input, but instead the value is clipped. For example:",
    "local": ""
  },
  {
    "origin": "Such clipping is done when the target type is unsigned char , signed char , unsigned short or signed short . For 32-bit integers, no clipping is done.",
    "local": ""
  },
  {
    "origin": "When the parameter is a floating-point value and the target type is an integer (8-, 16- or 32-bit), the floating-point value is first rounded to the nearest integer and then clipped if needed (when the target type is 8- or 16-bit).",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": "Function parameter.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast()",
    "local": ""
  },
  {
    "origin": "[2/11]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static _Tp cv::saturate_cast",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast()",
    "local": ""
  },
  {
    "origin": "[3/11]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static _Tp cv::saturate_cast",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast()",
    "local": ""
  },
  {
    "origin": "[4/11]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static _Tp cv::saturate_cast",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "short",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast()",
    "local": ""
  },
  {
    "origin": "[5/11]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static _Tp cv::saturate_cast",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "unsigned",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast()",
    "local": ""
  },
  {
    "origin": "[6/11]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static _Tp cv::saturate_cast",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast()",
    "local": ""
  },
  {
    "origin": "[7/11]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static _Tp cv::saturate_cast",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast()",
    "local": ""
  },
  {
    "origin": "[8/11]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static _Tp cv::saturate_cast",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast()",
    "local": ""
  },
  {
    "origin": "[9/11]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static _Tp cv::saturate_cast",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast()",
    "local": ""
  },
  {
    "origin": "[10/11]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static _Tp cv::saturate_cast",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast()",
    "local": ""
  },
  {
    "origin": "[11/11]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static _Tp cv::saturate_cast",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; float16_t &gt;()",
    "local": ""
  },
  {
    "origin": "[1/10]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; float16_t &gt;()",
    "local": ""
  },
  {
    "origin": "[2/10]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; float16_t &gt;()",
    "local": ""
  },
  {
    "origin": "[3/10]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; float16_t &gt;()",
    "local": ""
  },
  {
    "origin": "[4/10]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "short",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; float16_t &gt;()",
    "local": ""
  },
  {
    "origin": "[5/10]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "unsigned",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; float16_t &gt;()",
    "local": ""
  },
  {
    "origin": "[6/10]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; float16_t &gt;()",
    "local": ""
  },
  {
    "origin": "[7/10]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; float16_t &gt;()",
    "local": ""
  },
  {
    "origin": "[8/10]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; float16_t &gt;()",
    "local": ""
  },
  {
    "origin": "[9/10]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; float16_t &gt;()",
    "local": ""
  },
  {
    "origin": "[10/10]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; int64 &gt;()",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; schar &gt;()",
    "local": ""
  },
  {
    "origin": "[1/9]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; schar &gt;()",
    "local": ""
  },
  {
    "origin": "[2/9]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; schar &gt;()",
    "local": ""
  },
  {
    "origin": "[3/9]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; schar &gt;()",
    "local": ""
  },
  {
    "origin": "[4/9]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "short",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; schar &gt;()",
    "local": ""
  },
  {
    "origin": "[5/9]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "unsigned",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; schar &gt;()",
    "local": ""
  },
  {
    "origin": "[6/9]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; schar &gt;()",
    "local": ""
  },
  {
    "origin": "[7/9]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; schar &gt;()",
    "local": ""
  },
  {
    "origin": "[8/9]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; schar &gt;()",
    "local": ""
  },
  {
    "origin": "[9/9]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; short &gt;()",
    "local": ""
  },
  {
    "origin": "[1/7]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "short",
    "local": ""
  },
  {
    "origin": "&lt; short &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; short &gt;()",
    "local": ""
  },
  {
    "origin": "[2/7]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "short",
    "local": ""
  },
  {
    "origin": "&lt; short &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; short &gt;()",
    "local": ""
  },
  {
    "origin": "[3/7]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "short",
    "local": ""
  },
  {
    "origin": "&lt; short &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "unsigned",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; short &gt;()",
    "local": ""
  },
  {
    "origin": "[4/7]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "short",
    "local": ""
  },
  {
    "origin": "&lt; short &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; short &gt;()",
    "local": ""
  },
  {
    "origin": "[5/7]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "short",
    "local": ""
  },
  {
    "origin": "&lt; short &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; short &gt;()",
    "local": ""
  },
  {
    "origin": "[6/7]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "short",
    "local": ""
  },
  {
    "origin": "&lt; short &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; short &gt;()",
    "local": ""
  },
  {
    "origin": "[7/7]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "short",
    "local": ""
  },
  {
    "origin": "&lt; short &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; uchar &gt;()",
    "local": ""
  },
  {
    "origin": "[1/9]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; uchar &gt;()",
    "local": ""
  },
  {
    "origin": "[2/9]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; uchar &gt;()",
    "local": ""
  },
  {
    "origin": "[3/9]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; uchar &gt;()",
    "local": ""
  },
  {
    "origin": "[4/9]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "short",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; uchar &gt;()",
    "local": ""
  },
  {
    "origin": "[5/9]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "unsigned",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; uchar &gt;()",
    "local": ""
  },
  {
    "origin": "[6/9]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; uchar &gt;()",
    "local": ""
  },
  {
    "origin": "[7/9]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; uchar &gt;()",
    "local": ""
  },
  {
    "origin": "[8/9]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; uchar &gt;()",
    "local": ""
  },
  {
    "origin": "[9/9]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; uint64 &gt;()",
    "local": ""
  },
  {
    "origin": "[1/4]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; uint64 &gt;()",
    "local": ""
  },
  {
    "origin": "[2/4]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "short",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; uint64 &gt;()",
    "local": ""
  },
  {
    "origin": "[3/4]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; uint64 &gt;()",
    "local": ""
  },
  {
    "origin": "[4/4]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; unsigned &gt;()",
    "local": ""
  },
  {
    "origin": "[1/7]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "unsigned",
    "local": ""
  },
  {
    "origin": "&lt; unsigned &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; unsigned &gt;()",
    "local": ""
  },
  {
    "origin": "[2/7]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "unsigned",
    "local": ""
  },
  {
    "origin": "&lt; unsigned &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "short",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; unsigned &gt;()",
    "local": ""
  },
  {
    "origin": "[3/7]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "unsigned",
    "local": ""
  },
  {
    "origin": "&lt; unsigned &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; unsigned &gt;()",
    "local": ""
  },
  {
    "origin": "[4/7]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "unsigned",
    "local": ""
  },
  {
    "origin": "&lt; unsigned &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; unsigned &gt;()",
    "local": ""
  },
  {
    "origin": "[5/7]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "unsigned",
    "local": ""
  },
  {
    "origin": "&lt; unsigned &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; unsigned &gt;()",
    "local": ""
  },
  {
    "origin": "[6/7]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "unsigned",
    "local": ""
  },
  {
    "origin": "&lt; unsigned &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; unsigned &gt;()",
    "local": ""
  },
  {
    "origin": "[7/7]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "unsigned",
    "local": ""
  },
  {
    "origin": "&lt; unsigned &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; ushort &gt;()",
    "local": ""
  },
  {
    "origin": "[1/8]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; ushort &gt;()",
    "local": ""
  },
  {
    "origin": "[2/8]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "short",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; ushort &gt;()",
    "local": ""
  },
  {
    "origin": "[3/8]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; ushort &gt;()",
    "local": ""
  },
  {
    "origin": "[4/8]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "unsigned",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; ushort &gt;()",
    "local": ""
  },
  {
    "origin": "[5/8]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; ushort &gt;()",
    "local": ""
  },
  {
    "origin": "[6/8]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; ushort &gt;()",
    "local": ""
  },
  {
    "origin": "[7/8]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; ushort &gt;()",
    "local": ""
  },
  {
    "origin": "[8/8]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "setBreakOnError()",
    "local": ""
  },
  {
    "origin": "bool cv::setBreakOnError",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "flag",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Sets/resets the break-on-error mode.",
    "local": ""
  },
  {
    "origin": "When the break-on-error mode is set, the default error handler issues a hardware exception, which can make debugging more convenient.",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "the previous state",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "setNumThreads()",
    "local": ""
  },
  {
    "origin": "void cv::setNumThreads",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "nthreads",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.setNumThreads(",
    "local": ""
  },
  {
    "origin": "nthreads",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "OpenCV will try to set the number of threads for the next parallel region.",
    "local": ""
  },
  {
    "origin": "If threads == 0, OpenCV will disable threading optimizations and run all it's functions sequentially. Passing threads &lt; 0 will reset threads number to system default. This function must be called outside of parallel region.",
    "local": ""
  },
  {
    "origin": "OpenCV will try to run its functions with specified threads number, but some behaviour differs from framework:",
    "local": ""
  },
  {
    "origin": "- User-defined parallel constructions will run with the same threads number, if another is not specified. If later on user creates his own scheduler, OpenCV will use it.",
    "local": ""
  },
  {
    "origin": "- No special defined behaviour.",
    "local": ""
  },
  {
    "origin": "- If threads == 1, OpenCV will disable threading optimizations and run its functions sequentially.",
    "local": ""
  },
  {
    "origin": "- No special defined behaviour.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "nthreads",
    "local": ""
  },
  {
    "origin": "Number of threads used by OpenCV.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "setUseOptimized()",
    "local": ""
  },
  {
    "origin": "void cv::setUseOptimized",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "onoff",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.setUseOptimized(",
    "local": ""
  },
  {
    "origin": "onoff",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Enables or disables the optimized code.",
    "local": ""
  },
  {
    "origin": "The function can be used to dynamically turn on and off optimized dispatched code (code that uses SSE4.2, AVX/AVX2, and other instructions on the platforms that support it). It sets a global flag that is further checked by OpenCV functions. Since the flag is not checked in the inner OpenCV loops, it is only safe to call the function on the very top level in your application where you can be sure that no other OpenCV function is currently executed.",
    "local": ""
  },
  {
    "origin": "By default, the optimized code is enabled unless you disable it in CMake. The current status can be retrieved using useOptimized.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "onoff",
    "local": ""
  },
  {
    "origin": "The boolean flag specifying whether the optimized code should be used (onoff=true) or not (onoff=false).",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "tempfile()",
    "local": ""
  },
  {
    "origin": "cv::tempfile",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const char *",
    "local": ""
  },
  {
    "origin": "suffix",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "testAsyncArray()",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::utils::testAsyncArray",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.utils.testAsyncArray(",
    "local": ""
  },
  {
    "origin": "argument",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "testAsyncException()",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::utils::testAsyncException",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.utils.testAsyncException(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "testOverloadResolution()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::utils::testOverloadResolution",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "point",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.utils.testOverloadResolution(",
    "local": ""
  },
  {
    "origin": "value[, point]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.utils.testOverloadResolution(",
    "local": ""
  },
  {
    "origin": "rect",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "testOverloadResolution()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::utils::testOverloadResolution",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "rect",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.utils.testOverloadResolution(",
    "local": ""
  },
  {
    "origin": "value[, point]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.utils.testOverloadResolution(",
    "local": ""
  },
  {
    "origin": "rect",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "testRaiseGeneralException()",
    "local": ""
  },
  {
    "origin": "static void cv::utils::testRaiseGeneralException",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.utils.testRaiseGeneralException(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "useOptimized()",
    "local": ""
  },
  {
    "origin": "bool cv::useOptimized",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.useOptimized(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns the status of optimized code usage.",
    "local": ""
  },
  {
    "origin": "The function returns true if the optimized code is enabled. Otherwise, it returns false.",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:40 for OpenCV by",
    "local": ""
  }
]