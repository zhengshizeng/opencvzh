[
  {
    "origin": "OpenCV: cv::face::FacemarkTrain Class Reference",
    "local": "OpenCV:cv:：face:：FacemarkTrain类引用"
  },
  {
    "origin": "Open Source Computer Vision",
    "local": "开源计算机视觉"
  },
  {
    "origin": "Public Member Functions",
    "local": "公共成员职能"
  },
  {
    "origin": "List of all members",
    "local": "所有成员的列表"
  },
  {
    "origin": "cv::face::FacemarkTrain Class Reference",
    "local": "cv:：face:：FacemarkTrain类引用"
  },
  {
    "origin": "abstract",
    "local": "摘要"
  },
  {
    "origin": "Abstract base class for trainable facemark models.",
    "local": "可训练facemark模型的抽象基类。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Inheritance diagram for cv::face::FacemarkTrain:",
    "local": "cv:：face:：FacemarkTrain的继承关系图："
  },
  {
    "origin": "Public Member Functions",
    "local": "公共成员职能"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "image,",
    "local": "图像，"
  },
  {
    "origin": "Add one training sample to the trainer.",
    "local": "向培训师添加一个培训样本。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Get data from an algorithm.",
    "local": "从算法中获取数据。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "image,",
    "local": "图像，"
  },
  {
    "origin": "Detect faces from a given image using default or user defined face detector. Some",
    "local": "使用默认或用户定义的人脸检测器从给定图像中检测人脸。一些"
  },
  {
    "origin": "might not provide a default face detector.",
    "local": "可能不提供默认的人脸检测器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "detector, void *userData=0)=0",
    "local": "检测器，void*userData=0）=0"
  },
  {
    "origin": "Set a user defined face detector for the",
    "local": "设置用户定义的人脸检测器"
  },
  {
    "origin": "algorithm.",
    "local": "算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Trains a",
    "local": "列车a"
  },
  {
    "origin": "algorithm using the given dataset. Before the training process, training samples should be added to the trainer using face::addTrainingSample function.",
    "local": "使用给定数据集的算法。在进行培训之前，应使用face:：addTrainingSample函数将培训样本添加到培训师中。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&#160;Public Member Functions inherited from",
    "local": "&#160;公共成员函数继承自"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "image,",
    "local": "图像，"
  },
  {
    "origin": "faces,",
    "local": "面孔，"
  },
  {
    "origin": "Detect facial landmarks from an image.",
    "local": "从图像中检测面部标志。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "A function to load the trained model before the fitting process.",
    "local": "在拟合过程之前加载训练模型的函数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&#160;Public Member Functions inherited from",
    "local": "&#160;公共成员函数继承自"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Clears the algorithm state.",
    "local": "清除算法状态。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "Returns true if the",
    "local": "如果"
  },
  {
    "origin": "is empty (e.g. in the very beginning or after unsuccessful read.",
    "local": "为空（例如，在最开始或读取失败后）。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual",
    "local": "事实上的"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;fn)",
    "local": "&amp；（fn）"
  },
  {
    "origin": "Reads algorithm parameters from a file storage.",
    "local": "从文件存储器中读取算法参数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;filename) const",
    "local": "&amp；文件名）常量"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;fs) const",
    "local": "&amp；（f） 常数"
  },
  {
    "origin": "Stores algorithm parameters in a file storage.",
    "local": "将算法参数存储在文件存储器中。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;fs, const",
    "local": "&gt；gt；amp；fs，常数"
  },
  {
    "origin": "&amp;name=",
    "local": "&amp；姓名="
  },
  {
    "origin": "()) const",
    "local": "（））常数"
  },
  {
    "origin": "simplified API for language bindings This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "语言绑定的简化API这是一个重载的成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Additional Inherited Members",
    "local": "其他继承成员"
  },
  {
    "origin": "&#160;Static Public Member Functions inherited from",
    "local": "&#160;继承自的静态公共成员函数"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;filename, const",
    "local": "&amp；文件名，常量"
  },
  {
    "origin": "&amp;objname=",
    "local": "&amp；对象名="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Loads algorithm from the file.",
    "local": "从文件加载算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;strModel, const",
    "local": "&amp；strModel，常量"
  },
  {
    "origin": "&amp;objname=",
    "local": "&amp；对象名="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Loads algorithm from a String.",
    "local": "从字符串加载算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;fn)",
    "local": "&amp；（fn）"
  },
  {
    "origin": "Reads algorithm from the file node.",
    "local": "从文件节点读取算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&#160;Protected Member Functions inherited from",
    "local": "&#160;继承自的受保护成员函数"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;fs) const",
    "local": "&amp；（f） 常数"
  },
  {
    "origin": "Detailed Description",
    "local": "详细说明"
  },
  {
    "origin": "Abstract base class for trainable facemark models.",
    "local": "可训练facemark模型的抽象基类。"
  },
  {
    "origin": "To utilize this API in your program, please take a look at the",
    "local": "要在程序中使用此API，请查看"
  },
  {
    "origin": "Description",
    "local": "说明"
  },
  {
    "origin": "The AAM and LBF facemark models in OpenCV are derived from the abstract base class",
    "local": "OpenCV中的AAM和LBF facemark模型是从抽象基类派生的"
  },
  {
    "origin": ", which provides a unified access to those facemark algorithms in OpenCV.",
    "local": "，它提供了对OpenCV中那些facemark算法的统一访问。"
  },
  {
    "origin": "Here is an example on how to declare facemark algorithm:",
    "local": "下面是一个如何声明facemark算法的示例："
  },
  {
    "origin": "The typical pipeline for facemark detection is listed as follows:",
    "local": "用于脸痕检测的典型管道如下所示："
  },
  {
    "origin": "(Non-mandatory) Set a user defined face detection using",
    "local": "（非强制）使用设置用户定义的人脸检测"
  },
  {
    "origin": ". The facemark algorithms are designed to fit the facial points into a face. Therefore, the face information should be provided to the facemark algorithm. Some algorithms might provides a default face recognition function. However, the users might prefer to use their own face detector to obtains the best possible detection result.",
    "local": ". facemark算法的目的是将面部的点匹配到一张脸上。因此，需要将人脸信息提供给facemark算法。有些算法可能提供默认的人脸识别功能。然而，用户可能更愿意使用自己的人脸检测器来获得最佳的检测结果。"
  },
  {
    "origin": "(Non-mandatory) Training the model for a specific algorithm using",
    "local": "（非强制性）使用"
  },
  {
    "origin": ". In this case, the model should be automatically saved by the algorithm. If the user already have a trained model, then this part can be omitted.",
    "local": ". 在这种情况下，模型应该由算法自动保存。如果用户已经有了一个经过训练的模型，那么这个部分可以省略。"
  },
  {
    "origin": "Load the trained model using",
    "local": "使用加载训练模型"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Perform the fitting via the",
    "local": "通过执行装配"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Member Function Documentation",
    "local": "成员功能文档"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "addTrainingSample()",
    "local": "添加培训示例（）"
  },
  {
    "origin": "virtual bool cv::face::FacemarkTrain::addTrainingSample",
    "local": "虚拟bool cv:：face:：FacemarkTrain:：addTrainingSample"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "image",
    "local": "形象"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "landmarks",
    "local": "地标"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Add one training sample to the trainer.",
    "local": "向培训师添加一个培训样本。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "image",
    "local": "形象"
  },
  {
    "origin": "Input image.",
    "local": "输入图像。"
  },
  {
    "origin": "landmarks",
    "local": "地标"
  },
  {
    "origin": "The ground-truth of facial landmarks points corresponds to the image.",
    "local": "面部标志点的地面真值与图像相对应。"
  },
  {
    "origin": "Example of usage",
    "local": "用法示例"
  },
  {
    "origin": "The contents in the training files should follows the standard format. Here are examples for the contents in these files. example of content in the images_train.txt",
    "local": "培训文件的内容应遵循标准格式。下面是这些文件中内容的示例。images\\u train.txt中的内容示例"
  },
  {
    "origin": "example of content in the points_train.txt",
    "local": "points_train.txt中的内容示例"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "getData()",
    "local": "获取数据（）"
  },
  {
    "origin": "virtual bool cv::face::FacemarkTrain::getData",
    "local": "虚拟bool cv:：face:：FacemarkTrain:：getData"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "items",
    "local": "项目"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Get data from an algorithm.",
    "local": "从算法中获取数据。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "items",
    "local": "项目"
  },
  {
    "origin": "The obtained data, algorithm dependent.",
    "local": "获得的数据，取决于算法。"
  },
  {
    "origin": "Example of usage",
    "local": "用法示例"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "getFaces()",
    "local": "getFaces（）"
  },
  {
    "origin": "virtual bool cv::face::FacemarkTrain::getFaces",
    "local": "虚拟bool cv:：face:：FacemarkTrain:：getFaces"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "image",
    "local": "形象"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "faces",
    "local": "面孔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Detect faces from a given image using default or user defined face detector. Some",
    "local": "使用默认或用户定义的人脸检测器从给定图像中检测人脸。一些"
  },
  {
    "origin": "might not provide a default face detector.",
    "local": "可能不提供默认的人脸检测器。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "image",
    "local": "形象"
  },
  {
    "origin": "Input image.",
    "local": "输入图像。"
  },
  {
    "origin": "faces",
    "local": "面孔"
  },
  {
    "origin": "Output of the function which represent region of interest of the detected faces. Each face is stored in",
    "local": "表示检测到的人脸的感兴趣区域的函数的输出。每个面都存储在"
  },
  {
    "origin": "container.",
    "local": "容器。"
  },
  {
    "origin": "Example of usage",
    "local": "用法示例"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "setFaceDetector()",
    "local": "setFaceDetector（）"
  },
  {
    "origin": "virtual bool cv::face::FacemarkTrain::setFaceDetector",
    "local": "虚拟布尔cv:：face:：FacemarkTrain:：setFaceDetector"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "detector",
    "local": "探测器"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "userData",
    "local": "用户数据"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Set a user defined face detector for the",
    "local": "设置用户定义的人脸检测器"
  },
  {
    "origin": "algorithm.",
    "local": "算法。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "detector",
    "local": "探测器"
  },
  {
    "origin": "The user defined face detector function",
    "local": "用户定义的人脸检测功能"
  },
  {
    "origin": "userData",
    "local": "用户数据"
  },
  {
    "origin": "Detector parameters",
    "local": "探测器参数"
  },
  {
    "origin": "Example of usage",
    "local": "用法示例"
  },
  {
    "origin": "Example of a user defined face detector",
    "local": "用户定义的人脸检测器示例"
  },
  {
    "origin": "TODO Lifetime of detector parameters is uncontrolled. Rework interface design to \"Ptr&lt;FaceDetector&gt;\".",
    "local": "探测器参数的TODO寿命不受控制。将接口设计返工至“Ptr&lt；人脸检测器&gt；“。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "training()",
    "local": "培训（）"
  },
  {
    "origin": "virtual void cv::face::FacemarkTrain::training",
    "local": "虚拟void cv:：face:：FacemarkTrain:：training"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "parameters",
    "local": "参数"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Trains a",
    "local": "列车a"
  },
  {
    "origin": "algorithm using the given dataset. Before the training process, training samples should be added to the trainer using face::addTrainingSample function.",
    "local": "使用给定数据集的算法。在进行培训之前，应使用face:：addTrainingSample函数将培训样本添加到培训师中。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "parameters",
    "local": "参数"
  },
  {
    "origin": "Optional extra parameters (algorithm dependent).",
    "local": "可选的额外参数（取决于算法）。"
  },
  {
    "origin": "Example of usage",
    "local": "用法示例"
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": "此类的文档是从以下文件生成的："
  },
  {
    "origin": "opencv2/face/",
    "local": "打开CV2/面/"
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:47 for OpenCV by &#160;",
    "local": "2021年4月2日星期五11:36:47为OpenCV生成，&#160；"
  }
]