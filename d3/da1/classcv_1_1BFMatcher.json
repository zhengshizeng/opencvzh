[
  {
    "origin": "OpenCV: cv::BFMatcher Class Reference",
    "local": "OpenCV:cv:：BFMatcher类引用"
  },
  {
    "origin": "OpenCV",
    "local": "打开CV"
  },
  {
    "origin": "Open Source Computer Vision",
    "local": "开源计算机视觉"
  },
  {
    "origin": "Public Member Functions",
    "local": "公共成员职能"
  },
  {
    "origin": "Static Public Member Functions",
    "local": "静态公共成员函数"
  },
  {
    "origin": "Protected Member Functions",
    "local": "受保护的成员函数"
  },
  {
    "origin": "Protected Attributes",
    "local": "受保护的属性"
  },
  {
    "origin": "List of all members",
    "local": "所有成员的列表"
  },
  {
    "origin": "cv::BFMatcher Class Reference",
    "local": "cv:：BFMatcher类引用"
  },
  {
    "origin": "»",
    "local": "»"
  },
  {
    "origin": "Brute-force descriptor matcher.",
    "local": "暴力描述符匹配器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Inheritance diagram for cv::BFMatcher:",
    "local": "cv:：BFMatcher的继承关系图："
  },
  {
    "origin": "Public Member Functions",
    "local": "公共成员职能"
  },
  {
    "origin": "(int",
    "local": "（内景）"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ", bool",
    "local": "，布尔"
  },
  {
    "origin": "=false)",
    "local": "=假）"
  },
  {
    "origin": "Brute-force matcher constructor (obsolete). Please use",
    "local": "蛮力匹配构造函数（过时）。请使用"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual",
    "local": "事实上的"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "virtual",
    "local": "事实上的"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(bool emptyTrainData=false) const",
    "local": "（bool emptyTrainData=false）常量"
  },
  {
    "origin": "Clones the matcher.",
    "local": "克隆匹配器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual bool",
    "local": "虚拟布尔"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "Returns true if the descriptor matcher supports masking permissible matches.",
    "local": "如果描述符匹配器支持屏蔽允许的匹配，则返回true。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Public Member Functions inherited from",
    "local": "公共成员函数继承自"
  },
  {
    "origin": "virtual",
    "local": "事实上的"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "descriptors)",
    "local": "描述符）"
  },
  {
    "origin": "Adds descriptors to train a CPU(trainDescCollectionis) or GPU(utrainDescCollectionis) descriptor collection.",
    "local": "添加描述符以训练CPU（trainDescCollectionis）或GPU（utrainDescCollectionis）描述符集合。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Clears the train descriptor collections.",
    "local": "清除列描述符集合。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual bool",
    "local": "虚拟布尔"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "Returns true if there are no train descriptors in the both collections.",
    "local": "如果两个集合中都没有列描述符，则返回true。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "const std::vector&lt;",
    "local": "常量标准：：向量&lt；"
  },
  {
    "origin": "&gt; &amp;",
    "local": "&燃气轮机&amp；"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "Returns a constant link to the train descriptor collection trainDescCollection .",
    "local": "返回指向列描述符集合trainDescCollection的常量链接。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "queryDescriptors,",
    "local": "查询脚本，"
  },
  {
    "origin": "trainDescriptors, std::vector&lt; std::vector&lt;",
    "local": "列车描述符，标准：：向量&lt；标准：：向量&lt；"
  },
  {
    "origin": "&gt; &gt; &amp;matches, int k,",
    "local": "&gt；gt；&gt；gt；amp；匹配，int k，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "(), bool compactResult=false) const",
    "local": "（），bool compactResult=false）常量"
  },
  {
    "origin": "Finds the k best matches for each descriptor from a query set.",
    "local": "从查询集中为每个描述符查找k个最佳匹配项。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "queryDescriptors, std::vector&lt; std::vector&lt;",
    "local": "queryDescriptors，std:：vector&lt；标准：：向量&lt；"
  },
  {
    "origin": "&gt; &gt; &amp;matches, int k,",
    "local": "&gt；gt；&gt；gt；amp；匹配，int k，"
  },
  {
    "origin": "masks=",
    "local": "面具="
  },
  {
    "origin": "(), bool compactResult=false)",
    "local": "（），bool compactResult=false）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "queryDescriptors,",
    "local": "查询脚本，"
  },
  {
    "origin": "trainDescriptors, std::vector&lt;",
    "local": "列车描述符，标准：：向量&lt；"
  },
  {
    "origin": "&gt; &amp;matches,",
    "local": "&燃气轮机&amp；比赛，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "()) const",
    "local": "（））常数"
  },
  {
    "origin": "Finds the best match for each descriptor from a query set.",
    "local": "从查询集中查找每个描述符的最佳匹配。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "queryDescriptors, std::vector&lt;",
    "local": "queryDescriptors，std:：vector&lt；"
  },
  {
    "origin": "&gt; &amp;matches,",
    "local": "&燃气轮机&amp；比赛，"
  },
  {
    "origin": "masks=",
    "local": "面具="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "queryDescriptors,",
    "local": "查询脚本，"
  },
  {
    "origin": "trainDescriptors, std::vector&lt; std::vector&lt;",
    "local": "列车描述符，标准：：向量&lt；标准：：向量&lt；"
  },
  {
    "origin": "&gt; &gt; &amp;matches, float maxDistance,",
    "local": "&gt；gt；&gt；gt；amp；匹配，浮动最大距离，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "(), bool compactResult=false) const",
    "local": "（），bool compactResult=false）常量"
  },
  {
    "origin": "For each query descriptor, finds the training descriptors not farther than the specified distance.",
    "local": "对于每个查询描述符，查找不超过指定距离的训练描述符。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "queryDescriptors, std::vector&lt; std::vector&lt;",
    "local": "queryDescriptors，std:：vector&lt；标准：：向量&lt；"
  },
  {
    "origin": "&gt; &gt; &amp;matches, float maxDistance,",
    "local": "&gt；gt；&gt；gt；amp；匹配，浮动最大距离，"
  },
  {
    "origin": "masks=",
    "local": "面具="
  },
  {
    "origin": "(), bool compactResult=false)",
    "local": "（），bool compactResult=false）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;fileName)",
    "local": "&amp；文件名）"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;)",
    "local": "&amp；）"
  },
  {
    "origin": "Reads algorithm parameters from a file storage.",
    "local": "从文件存储器中读取算法参数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Trains a descriptor matcher.",
    "local": "训练描述符匹配器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;fileName) const",
    "local": "&amp；文件名）常量"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;) const",
    "local": "&amp；）常数"
  },
  {
    "origin": "Stores algorithm parameters in a file storage.",
    "local": "将算法参数存储在文件存储器中。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;fs, const",
    "local": "&gt；gt；amp；fs，常数"
  },
  {
    "origin": "&amp;name=",
    "local": "&amp；姓名="
  },
  {
    "origin": "()) const",
    "local": "（））常数"
  },
  {
    "origin": "Public Member Functions inherited from",
    "local": "公共成员函数继承自"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "virtual",
    "local": "事实上的"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "virtual",
    "local": "事实上的"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;filename) const",
    "local": "&amp；文件名）常量"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;fs, const",
    "local": "&gt；gt；amp；fs，常数"
  },
  {
    "origin": "&amp;name=",
    "local": "&amp；姓名="
  },
  {
    "origin": "()) const",
    "local": "（））常数"
  },
  {
    "origin": "simplified API for language bindings This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "语言绑定的简化API这是一个重载的成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Static Public Member Functions",
    "local": "静态公共成员函数"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(int",
    "local": "（内景）"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ", bool",
    "local": "，布尔"
  },
  {
    "origin": "=false)",
    "local": "=假）"
  },
  {
    "origin": "Brute-force matcher create method.",
    "local": "蛮力匹配器创建方法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Static Public Member Functions inherited from",
    "local": "继承自的静态公共成员函数"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;descriptorMatcherType)",
    "local": "&amp；描述格式"
  },
  {
    "origin": "Creates a descriptor matcher of a given type with the default parameters (using default constructor).",
    "local": "使用默认参数（使用默认构造函数）创建给定类型的描述符匹配器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;matcherType)",
    "local": "&amp；匹配类型）"
  },
  {
    "origin": "Static Public Member Functions inherited from",
    "local": "继承自的静态公共成员函数"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": "&lt_Tp&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;filename, const",
    "local": "&amp；文件名，常量"
  },
  {
    "origin": "&amp;objname=",
    "local": "&amp；对象名="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Loads algorithm from the file.",
    "local": "从文件加载算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": "&lt_Tp&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;strModel, const",
    "local": "&amp；strModel，常量"
  },
  {
    "origin": "&amp;objname=",
    "local": "&amp；对象名="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Loads algorithm from a String.",
    "local": "从字符串加载算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": "&lt_Tp&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;fn)",
    "local": "&amp；（fn）"
  },
  {
    "origin": "Reads algorithm from the file node.",
    "local": "从文件节点读取算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Protected Member Functions",
    "local": "受保护的成员函数"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "queryDescriptors, std::vector&lt; std::vector&lt;",
    "local": "queryDescriptors，std:：vector&lt；标准：：向量&lt；"
  },
  {
    "origin": "&gt; &gt; &amp;matches, int k,",
    "local": "&gt；gt；&gt；gt；amp；匹配，int k，"
  },
  {
    "origin": "masks=",
    "local": "面具="
  },
  {
    "origin": "(), bool compactResult=false)",
    "local": "（），bool compactResult=false）"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "queryDescriptors, std::vector&lt; std::vector&lt;",
    "local": "queryDescriptors，std:：vector&lt；标准：：向量&lt；"
  },
  {
    "origin": "&gt; &gt; &amp;matches, float maxDistance,",
    "local": "&gt；gt；&gt；gt；amp；匹配，浮动最大距离，"
  },
  {
    "origin": "masks=",
    "local": "面具="
  },
  {
    "origin": "(), bool compactResult=false)",
    "local": "（），bool compactResult=false）"
  },
  {
    "origin": "Protected Member Functions inherited from",
    "local": "继承自的受保护成员函数"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "masks, int queryDescriptorsCount) const",
    "local": "掩码，int queryDescriptorsCount）常量"
  },
  {
    "origin": "Protected Member Functions inherited from",
    "local": "继承自的受保护成员函数"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;fs) const",
    "local": "&amp；（f） 常数"
  },
  {
    "origin": "Protected Attributes",
    "local": "受保护的属性"
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "Protected Attributes inherited from",
    "local": "继承自的受保护属性"
  },
  {
    "origin": "std::vector&lt;",
    "local": "标准：：向量&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "Collection of descriptors from train images.",
    "local": "从火车图像中收集描述符。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "std::vector&lt;",
    "local": "标准：：向量&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "Additional Inherited Members",
    "local": "其他继承成员"
  },
  {
    "origin": "Public Types inherited from",
    "local": "继承自的公共类型"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "Static Protected Member Functions inherited from",
    "local": "继承自的静态受保护成员函数"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "m)",
    "local": "米）"
  },
  {
    "origin": "static bool",
    "local": "静态布尔"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "masks, int queryIdx)",
    "local": "掩码，int queryIdx）"
  },
  {
    "origin": "static bool",
    "local": "静态布尔"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "mask, int queryIdx, int trainIdx)",
    "local": "掩码，int queryIdx，int trainIdx）"
  },
  {
    "origin": "Detailed Description",
    "local": "详细说明"
  },
  {
    "origin": "Brute-force descriptor matcher.",
    "local": "暴力描述符匹配器。"
  },
  {
    "origin": "For each descriptor in the first set, this matcher finds the closest descriptor in the second set by trying each one. This descriptor matcher supports masking permissible matches of descriptor sets.",
    "local": "对于第一个集合中的每个描述符，该匹配器通过尝试每个描述符来查找第二个集合中最接近的描述符。此描述符匹配器支持屏蔽允许的描述符集匹配。"
  },
  {
    "origin": "Constructor &amp; Destructor Documentation",
    "local": "建造商和；析构函数文档"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "BFMatcher()",
    "local": "BFMatcher（）"
  },
  {
    "origin": "cv::BFMatcher::BFMatcher",
    "local": "简历：：BFMatcher：：BFMatcher"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "normType",
    "local": "标准"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "crossCheck",
    "local": "交叉检查"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "&lt;BFMatcher object&gt;",
    "local": "&lt；BFMatcher对象&gt；"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.BFMatcher(",
    "local": "cv.B匹配器("
  },
  {
    "origin": "[, normType[, crossCheck]]",
    "local": "[，normType[，交叉检查]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Brute-force matcher constructor (obsolete). Please use",
    "local": "蛮力匹配构造函数（过时）。请使用"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "~BFMatcher()",
    "local": "~BFMatcher（）"
  },
  {
    "origin": "virtual cv::BFMatcher::~BFMatcher",
    "local": "虚拟简历：：BFMatcher:：~BFMatcher"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "inline",
    "local": "内联"
  },
  {
    "origin": "virtual",
    "local": "事实上的"
  },
  {
    "origin": "Member Function Documentation",
    "local": "成员功能文档"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "clone()",
    "local": "克隆（）"
  },
  {
    "origin": "virtual",
    "local": "事实上的"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; cv::BFMatcher::clone",
    "local": "&燃气轮机；cv:：BFMatcher:：克隆"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "emptyTrainData",
    "local": "空训练数据"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "virtual",
    "local": "事实上的"
  },
  {
    "origin": "Clones the matcher.",
    "local": "克隆匹配器。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "emptyTrainData",
    "local": "空训练数据"
  },
  {
    "origin": "If emptyTrainData is false, the method creates a deep copy of the object, that is, copies both parameters and train data. If emptyTrainData is true, the method creates an object copy with the current parameters but with empty train data.",
    "local": "如果emptyTrainData为false，则该方法将创建对象的深度副本，即复制参数和训练数据。如果emptyTrainData为true，则该方法使用当前参数创建对象副本，但使用空的列车数据。"
  },
  {
    "origin": "Implements",
    "local": "工具"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "create()",
    "local": "创建（）"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; cv::BFMatcher::create",
    "local": "&燃气轮机；cv:：BFMatcher:：创建"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "normType",
    "local": "标准"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "crossCheck",
    "local": "交叉检查"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.BFMatcher_create(",
    "local": "简历BFMatcher\\u创建("
  },
  {
    "origin": "[, normType[, crossCheck]]",
    "local": "[，normType[，交叉检查]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Brute-force matcher create method.",
    "local": "蛮力匹配器创建方法。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "normType",
    "local": "标准"
  },
  {
    "origin": "One of NORM_L1, NORM_L2, NORM_HAMMING, NORM_HAMMING2.",
    "local": "NORM\\u L1，NORM\\u L2，NORM\\u HAMMING，NORM\\u HAMMING2之一。"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": "norms are preferable choices for",
    "local": "规范是更可取的选择"
  },
  {
    "origin": "and SURF descriptors, NORM_HAMMING should be used with",
    "local": "以及冲浪描述符，NORM\\u HAMMING应该与"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "and BRIEF, NORM_HAMMING2 should be used with",
    "local": "简而言之，NORM\\u HAMMING2应该与"
  },
  {
    "origin": "when WTA_K==3 or 4 (see ORB::ORB constructor description).",
    "local": "当WTA_K==3或4时（请参阅ORB:：ORB构造函数描述）。"
  },
  {
    "origin": "crossCheck",
    "local": "交叉检查"
  },
  {
    "origin": "If it is false, this is will be default",
    "local": "如果为false，则为默认值"
  },
  {
    "origin": "behaviour when it finds the k nearest neighbors for each query descriptor. If crossCheck==true, then the",
    "local": "当它为每个查询描述符找到k个最近邻居时的行为。如果crossCheck==true，则"
  },
  {
    "origin": "method with k=1 will only return pairs (i,j) such that for i-th query descriptor the j-th descriptor in the matcher's collection is the nearest and vice versa, i.e. the",
    "local": "k=1的方法将只返回对（i，j），这样对于第i个查询描述符，匹配器集合中的第j个描述符是最近的，反之亦然，即"
  },
  {
    "origin": "will only return consistent pairs. Such technique usually produces best results with minimal number of outliers when there are enough matches. This is alternative to the ratio test, used by D. Lowe in",
    "local": "将只返回一致的对。当有足够的匹配时，这种技术通常以最少的异常值产生最佳结果。这是D。洛伊恩"
  },
  {
    "origin": "paper.",
    "local": "纸张。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "isMaskSupported()",
    "local": "isMaskSupported（）"
  },
  {
    "origin": "virtual bool cv::BFMatcher::isMaskSupported",
    "local": "支持虚拟bool cv:：BFMatcher:：ismask"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "inline",
    "local": "内联"
  },
  {
    "origin": "virtual",
    "local": "事实上的"
  },
  {
    "origin": "Returns true if the descriptor matcher supports masking permissible matches.",
    "local": "如果描述符匹配器支持屏蔽允许的匹配，则返回true。"
  },
  {
    "origin": "Implements",
    "local": "工具"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "knnMatchImpl()",
    "local": "knnmatchimpl（）"
  },
  {
    "origin": "virtual void cv::BFMatcher::knnMatchImpl",
    "local": "虚拟void cv：：bfmatcher：：knnmatchimpl"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "queryDescriptors",
    "local": "查询描述符"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "std::vector&lt; std::vector&lt;",
    "local": "标准：：向量&lt；标准：：向量&lt；"
  },
  {
    "origin": "&gt; &gt; &amp;",
    "local": "&燃气轮机&燃气轮机&amp；"
  },
  {
    "origin": "matches",
    "local": "比赛"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "k",
    "local": "k"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "masks",
    "local": "面具"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "compactResult",
    "local": "压缩结果"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "protected",
    "local": "受保护的"
  },
  {
    "origin": "virtual",
    "local": "事实上的"
  },
  {
    "origin": "In fact the matching is implemented only by the following two methods. These methods suppose that the class object has been trained already. Public match methods call these methods after calling",
    "local": "实际上，匹配只通过以下两种方法实现。这些方法假设类对象已经过训练。公共匹配方法在调用"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Implements",
    "local": "工具"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "radiusMatchImpl()",
    "local": "radiusMatchImpl（）"
  },
  {
    "origin": "virtual void cv::BFMatcher::radiusMatchImpl",
    "local": "虚拟void cv:：BFMatcher:：radiusMatchImpl"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "queryDescriptors",
    "local": "查询描述符"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "std::vector&lt; std::vector&lt;",
    "local": "标准：：向量&lt；标准：：向量&lt；"
  },
  {
    "origin": "&gt; &gt; &amp;",
    "local": "&燃气轮机&燃气轮机&amp；"
  },
  {
    "origin": "matches",
    "local": "比赛"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "maxDistance",
    "local": "½屏幕距离"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "masks",
    "local": "面具"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "compactResult",
    "local": "压缩结果"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "protected",
    "local": "受保护的"
  },
  {
    "origin": "virtual",
    "local": "事实上的"
  },
  {
    "origin": "Implements",
    "local": "工具"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Member Data Documentation",
    "local": "成员数据文档"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "crossCheck",
    "local": "交叉检查"
  },
  {
    "origin": "bool cv::BFMatcher::crossCheck",
    "local": "bool cv:：BFMatcher:：交叉检查"
  },
  {
    "origin": "protected",
    "local": "受保护的"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "normType",
    "local": "标准"
  },
  {
    "origin": "int cv::BFMatcher::normType",
    "local": "int cv:：BFMatcher:：normType"
  },
  {
    "origin": "protected",
    "local": "受保护的"
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": "此类的文档是从以下文件生成的："
  },
  {
    "origin": "opencv2/",
    "local": "打开CV2/"
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:42 for OpenCV by",
    "local": "于2021年4月2日星期五11:36:42为OpenCV生成"
  }
]