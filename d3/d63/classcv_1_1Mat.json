[
  {
    "origin": "OpenCV: cv::Mat Class Reference",
    "local": "OpenCV:cv:：Mat类引用"
  },
  {
    "origin": "Open Source Computer Vision",
    "local": "开源计算机视觉"
  },
  {
    "origin": "Public Types",
    "local": "公共类型"
  },
  {
    "origin": "Public Member Functions",
    "local": "公共成员职能"
  },
  {
    "origin": "Static Public Member Functions",
    "local": "静态公共成员函数"
  },
  {
    "origin": "Public Attributes",
    "local": "公共属性"
  },
  {
    "origin": "Protected Member Functions",
    "local": "受保护的成员函数"
  },
  {
    "origin": "List of all members",
    "local": "所有成员的列表"
  },
  {
    "origin": "cv::Mat Class Reference",
    "local": "cv:：Mat类参考"
  },
  {
    "origin": "&raquo;",
    "local": "&引用；"
  },
  {
    "origin": "n-dimensional dense array class",
    "local": "n维密集数组类"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Inheritance diagram for cv::Mat:",
    "local": "cv:：Mat的继承关系图："
  },
  {
    "origin": "Public Types",
    "local": "公共类型"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 0x42FF0000,",
    "local": "=0x42FF0000，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= CV_MAT_CONT_FLAG,",
    "local": "=CV\\u MAT\\u CONT\\u标志，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= CV_SUBMAT_FLAG",
    "local": "=CV\\u SUBMAT\\u标志"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 0xFFFF0000,",
    "local": "=0xFF0000，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 0x00000FFF,",
    "local": "=0x00000FFF，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "Public Member Functions",
    "local": "公共成员职能"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "(int",
    "local": "（内景）"
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "(int",
    "local": "（内景）"
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ", const",
    "local": "，常量"
  },
  {
    "origin": "&amp;s)",
    "local": "&amp；秒）"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ", const",
    "local": "，常量"
  },
  {
    "origin": "&amp;s)",
    "local": "&amp；秒）"
  },
  {
    "origin": "(int ndims, const int *sizes, int",
    "local": "（int ndims，const int*大小，int）"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "(const std::vector&lt; int &gt; &amp;sizes, int",
    "local": "（const std：：向量&lt；内部&gt&amp；尺寸，内景"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "(int ndims, const int *sizes, int",
    "local": "（int ndims，const int*大小，int）"
  },
  {
    "origin": ", const",
    "local": "，常量"
  },
  {
    "origin": "&amp;s)",
    "local": "&amp；秒）"
  },
  {
    "origin": "(const std::vector&lt; int &gt; &amp;sizes, int",
    "local": "（const std：：向量&lt；内部&gt&amp；尺寸，内景"
  },
  {
    "origin": ", const",
    "local": "，常量"
  },
  {
    "origin": "&amp;s)",
    "local": "&amp；秒）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;m)",
    "local": "&amp；米）"
  },
  {
    "origin": "(int",
    "local": "（内景）"
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ", void *",
    "local": "，无效*"
  },
  {
    "origin": ", size_t",
    "local": "，大小\\u t"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ", void *",
    "local": "，无效*"
  },
  {
    "origin": ", size_t",
    "local": "，大小\\u t"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "(int ndims, const int *sizes, int",
    "local": "（int ndims，const int*大小，int）"
  },
  {
    "origin": ", void *",
    "local": "，无效*"
  },
  {
    "origin": ", const size_t *steps=0)",
    "local": "，常量大小（t*steps=0）"
  },
  {
    "origin": "(const std::vector&lt; int &gt; &amp;sizes, int",
    "local": "（const std：：向量&lt；内部&gt&amp；尺寸，内景"
  },
  {
    "origin": ", void *",
    "local": "，无效*"
  },
  {
    "origin": ", const size_t *steps=0)",
    "local": "，常量大小（t*steps=0）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;m, const",
    "local": "&amp；m、 常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": ", const",
    "local": "，常量"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;m, const",
    "local": "&amp；m、 常数"
  },
  {
    "origin": "&amp;roi)",
    "local": "&amp；投资回报率）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;m, const",
    "local": "&amp；m、 常数"
  },
  {
    "origin": "*ranges)",
    "local": "*范围）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;m, const std::vector&lt;",
    "local": "&amp；m、 常量标准：：向量&lt；"
  },
  {
    "origin": "&gt; &amp;ranges)",
    "local": "&燃气轮机&amp；范围）"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "(const std::vector&lt; _Tp &gt; &amp;vec, bool copyData=false)",
    "local": "（const std：：向量&lt；“uTp&gt&amp；vec，bool copyData=假）"
  },
  {
    "origin": "template&lt;typename _Tp , typename = typename std::enable_if&lt;std::is_arithmetic&lt;_Tp&gt;::value&gt;::type&gt;",
    "local": "模板&lt；typename\\u Tp，typename=typename std：：启用\\u if&lt；std：：是算术&lt_Tp&gt；：：值&gt；：：类型&gt；"
  },
  {
    "origin": "(const std::initializer_list&lt; _Tp &gt; list)",
    "local": "（const std：：初始值设定项列表&lt_Tp&gt；（列表）"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "(const std::initializer_list&lt; int &gt; sizes, const std::initializer_list&lt; _Tp &gt; list)",
    "local": "（const std：：初始值设定项列表&lt；内部&gt；大小，常量std：：初始值设定项\\u list&lt_Tp&gt；（列表）"
  },
  {
    "origin": "template&lt;typename _Tp , size_t _Nm&gt;",
    "local": "模板&lt；类型名称\\u Tp，大小\\u t\\u Nm&gt；"
  },
  {
    "origin": "(const std::array&lt; _Tp, _Nm &gt; &amp;arr, bool copyData=false)",
    "local": "（const std：：数组&lt；“uTp，.u.Nm&gt&amp；arr，bool copyData=假）"
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": "模板&lt；类型名称&u Tp，int n&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;vec, bool copyData=true)",
    "local": "&左；（u）总磷，n&gt&amp；vec，bool copyData=真）"
  },
  {
    "origin": "template&lt;typename _Tp , int m, int n&gt;",
    "local": "模板&lt；typename\\u Tp，int m，int n&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt; _Tp, m, n &gt; &amp;mtx, bool copyData=true)",
    "local": "&lt_Tp，m，n&gt&amp；mtx，bool copyData=真）"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt; _Tp &gt; &amp;pt, bool copyData=true)",
    "local": "&左；（u）Tp&gt&amp；pt，bool copyData=真）"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt; _Tp &gt; &amp;pt, bool copyData=true)",
    "local": "&左；（u）Tp&gt&amp；pt，bool copyData=真）"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt; _Tp &gt; &amp;commaInitializer)",
    "local": "&lt；&gt；&TP安培；Commainitializer）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;m)",
    "local": "&amp；米）"
  },
  {
    "origin": "download data from GpuMat",
    "local": "从GpuMat下载数据"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;&amp;m)",
    "local": "&amp&amp；米）"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "destructor - calls",
    "local": "析构函数-调用"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Increments the reference counter.",
    "local": "递增参考计数器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(int dtop, int dbottom, int dleft, int dright)",
    "local": "（int dtop，int dbottom，int dleft，int dright）"
  },
  {
    "origin": "Adjusts a submatrix size and position within the parent matrix.",
    "local": "在父矩阵中调整子矩阵的大小和位置。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;m, int",
    "local": "&amp；m、 内景"
  },
  {
    "origin": "=-1) const",
    "local": "=-1）常数"
  },
  {
    "origin": "Provides a functional form of convertTo.",
    "local": "提供convertTo的函数形式。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "(int i0=0)",
    "local": "（整数i0=0）"
  },
  {
    "origin": "Returns a reference to the specified array element.",
    "local": "返回对指定数组元素的引用。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "(int i0=0) const",
    "local": "（int i0=0）常数"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "(int",
    "local": "（内景）"
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "(int",
    "local": "（内景）"
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ") const",
    "local": ")常数"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "(int i0, int i1, int i2)",
    "local": "（整数i0，整数i1，整数i2）"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "(int i0, int i1, int i2) const",
    "local": "（int i0，int i1，int i2）常数"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "(const int *idx)",
    "local": "（const int*idx）"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "(const int *idx) const",
    "local": "（const int*idx）const"
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": "模板&lt；类型名称&u Tp，int n&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt; int, n &gt; &amp;idx)",
    "local": "&lt；整数，n&gt；&安培；IDX公司）"
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": "模板&lt；类型名称&u Tp，int n&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt; int, n &gt; &amp;idx) const",
    "local": "&lt；整数，n&gt；&安培；常量"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "pt)",
    "local": "（pt）"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "pt) const",
    "local": "（pt）常数"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Returns the matrix iterator and sets it to the first matrix element.",
    "local": "返回矩阵迭代器并将其设置为第一个矩阵元素。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "Returns the number of matrix channels.",
    "local": "返回矩阵通道数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(int elemChannels, int",
    "local": "（国际电子通道，国际）"
  },
  {
    "origin": "=-1, bool requireContinuous=true) const",
    "local": "=-1，布尔要求连续=真）常量"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "Creates a full copy of the array and the underlying data.",
    "local": "创建数组和基础数据的完整副本。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(int x) const",
    "local": "（int x）const"
  },
  {
    "origin": "Creates a matrix header for the specified matrix column.",
    "local": "为指定的矩阵列创建矩阵标题。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(int startcol, int endcol) const",
    "local": "（int startcol，int endcol）常量"
  },
  {
    "origin": "Creates a matrix header for the specified column span.",
    "local": "为指定的列范围创建矩阵标题。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;r) const",
    "local": "&amp；（r） 常数；"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "m, int rtype, double alpha=1, double beta=0) const",
    "local": "m、 int rtype，double alpha=1，double beta=0）常量"
  },
  {
    "origin": "Converts an array to another data type with optional scaling.",
    "local": "将数组转换为具有可选缩放比例的其他数据类型。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;m)",
    "local": "&amp；米）"
  },
  {
    "origin": "internal use function; properly re-allocates _size, _step arrays",
    "local": "内部使用功能；正确地重新分配\\u大小、\\u步进数组"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "m) const",
    "local": "（m）const"
  },
  {
    "origin": "Copies the matrix to another one.",
    "local": "将矩阵复制到另一个矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "m,",
    "local": "嗯，"
  },
  {
    "origin": "mask) const",
    "local": "掩码）常量"
  },
  {
    "origin": "(int",
    "local": "（内景）"
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Allocates new array data if needed.",
    "local": "如果需要，分配新的数组数据。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "(int ndims, const int *sizes, int",
    "local": "（int ndims，const int*大小，int）"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "(const std::vector&lt; int &gt; &amp;sizes, int",
    "local": "（const std：：向量&lt；内部&gt&amp；尺寸，内景"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "m) const",
    "local": "（m）const"
  },
  {
    "origin": "Computes a cross-product of two 3-element vectors.",
    "local": "计算两个三元素向量的叉积。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "internal use function, consider to use 'release' method instead; deallocates the matrix data",
    "local": "内部使用功能，考虑改用“释放”方法；取消分配矩阵数据"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "Returns the depth of a matrix element.",
    "local": "返回矩阵元素的深度。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(int d=0) const",
    "local": "（int d=0）常数"
  },
  {
    "origin": "Extracts a diagonal from a matrix.",
    "local": "从矩阵中提取对角线。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "m) const",
    "local": "（m）const"
  },
  {
    "origin": "Computes a dot-product of two vectors.",
    "local": "计算两个向量的点积。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "Returns the matrix element size in bytes.",
    "local": "返回以字节为单位的矩阵元素大小。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "Returns the size of each matrix element channel in bytes.",
    "local": "返回每个矩阵元素通道的大小（字节）。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "Returns true if the array has no elements.",
    "local": "如果数组没有元素，则返回true。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Returns the matrix iterator and sets it to the after-last matrix element.",
    "local": "返回矩阵迭代器并将其设置为后一个矩阵元素。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "template&lt;typename _Tp , typename Functor &gt;",
    "local": "模板&lt；typename&u Tp，typename Functor&gt；"
  },
  {
    "origin": "(const Functor &amp;operation)",
    "local": "（const函子&amp；（操作）"
  },
  {
    "origin": "Runs the given functor over all matrix elements in parallel.",
    "local": "在所有矩阵元素上并行运行给定的函子。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename _Tp , typename Functor &gt;",
    "local": "模板&lt；typename&u Tp，typename Functor&gt；"
  },
  {
    "origin": "(const Functor &amp;operation) const",
    "local": "（const函子&amp；操作）常数"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "accessFlags,",
    "local": "访问标志，"
  },
  {
    "origin": "usageFlags=",
    "local": "用法标志="
  },
  {
    "origin": ") const",
    "local": ")常数"
  },
  {
    "origin": "retrieve",
    "local": "检索"
  },
  {
    "origin": "from",
    "local": "从"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(int method=",
    "local": "（int）方法="
  },
  {
    "origin": ") const",
    "local": ")常数"
  },
  {
    "origin": "Inverses a matrix.",
    "local": "求矩阵的逆。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "Reports whether the matrix is continuous or not.",
    "local": "报告矩阵是否连续。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "returns true if the matrix is a submatrix of another matrix",
    "local": "如果矩阵是另一个矩阵的子矩阵，则返回true"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;wholeSize,",
    "local": "&amp；批发，"
  },
  {
    "origin": "&amp;ofs) const",
    "local": "&amp；ofs）常数"
  },
  {
    "origin": "Locates the matrix header within a parent matrix.",
    "local": "在父矩阵中查找矩阵头。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "m, double scale=1) const",
    "local": "m、 双刻度=1）常数"
  },
  {
    "origin": "Performs an element-wise multiplication or division of the two matrices.",
    "local": "对两个矩阵执行按元素的乘法或除法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename _Tp , int m, int n&gt;",
    "local": "模板&lt；typename\\u Tp，int m，int n&gt；"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "template&lt;typename _Tp , std::size_t _Nm&gt;",
    "local": "模板&lt；typename\\u Tp，std:：size\\u t\\u Nm&gt；"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": "模板&lt；类型名称&u Tp，int n&gt；"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ") const",
    "local": ")常数"
  },
  {
    "origin": "Extracts a rectangular submatrix.",
    "local": "提取矩形子矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;roi) const",
    "local": "&amp；AROI）常数"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "*ranges) const",
    "local": "*范围）常数"
  },
  {
    "origin": "(const std::vector&lt;",
    "local": "（const std：：向量&lt；"
  },
  {
    "origin": "&gt; &amp;ranges) const",
    "local": "&燃气轮机&amp；范围）常数"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;m)",
    "local": "&amp；米）"
  },
  {
    "origin": "assignment operators",
    "local": "赋值运算符"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;expr)",
    "local": "&amp；快递）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;s)",
    "local": "&amp；秒）"
  },
  {
    "origin": "Sets all or some of the array elements to the specified value.",
    "local": "将所有或部分数组元素设置为指定值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;&amp;m)",
    "local": "&amp&amp；米）"
  },
  {
    "origin": "(size_t nelems=1)",
    "local": "（尺寸=1）"
  },
  {
    "origin": "Removes elements from the bottom of the matrix.",
    "local": "从矩阵底部移除元素。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(int i0=0)",
    "local": "（整数i0=0）"
  },
  {
    "origin": "Returns a pointer to the specified matrix row.",
    "local": "返回指向指定矩阵行的指针。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "(int i0=0) const",
    "local": "（int i0=0）常数"
  },
  {
    "origin": "(int",
    "local": "（内景）"
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "(int",
    "local": "（内景）"
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ") const",
    "local": ")常数"
  },
  {
    "origin": "(int i0, int i1, int i2)",
    "local": "（整数i0，整数i1，整数i2）"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "(int i0, int i1, int i2) const",
    "local": "（int i0，int i1，int i2）常数"
  },
  {
    "origin": "(const int *idx)",
    "local": "（const int*idx）"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "(const int *idx) const",
    "local": "（const int*idx）const"
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": "模板&lt；国际n&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt; int, n &gt; &amp;idx)",
    "local": "&lt；整数，n&gt；&安培；IDX公司）"
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": "模板&lt；国际n&gt；"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt; int, n &gt; &amp;idx) const",
    "local": "&lt；整数，n&gt；&安培；常量"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "(int i0=0)",
    "local": "（整数i0=0）"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "(int i0=0) const",
    "local": "（int i0=0）常数"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "(int",
    "local": "（内景）"
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "(int",
    "local": "（内景）"
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ") const",
    "local": ")常数"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "(int i0, int i1, int i2)",
    "local": "（整数i0，整数i1，整数i2）"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "(int i0, int i1, int i2) const",
    "local": "（int i0，int i1，int i2）常数"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "(const int *idx)",
    "local": "（const int*idx）"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "(const int *idx) const",
    "local": "（const int*idx）const"
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": "模板&lt；类型名称&u Tp，int n&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt; int, n &gt; &amp;idx)",
    "local": "&lt；整数，n&gt；&安培；IDX公司）"
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": "模板&lt；类型名称&u Tp，int n&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt; int, n &gt; &amp;idx) const",
    "local": "&lt；整数，n&gt；&安培；常量"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "(const _Tp &amp;elem)",
    "local": "（const&Tp；元素）"
  },
  {
    "origin": "Adds elements to the bottom of the matrix.",
    "local": "将元素添加到矩阵的底部。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt; _Tp &gt; &amp;elem)",
    "local": "&左；（u）Tp&gt&amp；元素）"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "(const std::vector&lt; _Tp &gt; &amp;elem)",
    "local": "（const std：：向量&lt_Tp&gt；&gt；amp；（元素）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;m)",
    "local": "&amp；米）"
  },
  {
    "origin": "(const void *elem)",
    "local": "（const void*元素）"
  },
  {
    "origin": "internal function",
    "local": "内部功能"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Decrements the reference counter and deallocates the matrix if needed.",
    "local": "如果需要，减少引用计数器并释放矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(size_t sz)",
    "local": "（尺寸\\u t sz）"
  },
  {
    "origin": "Reserves space for the certain number of rows.",
    "local": "为一定数量的行保留空间。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(size_t sz)",
    "local": "（尺寸\\u t sz）"
  },
  {
    "origin": "Reserves space for the certain number of bytes.",
    "local": "为一定数量的字节保留空间。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(int cn, int",
    "local": "（内景，内景）"
  },
  {
    "origin": "=0) const",
    "local": "=0）常数"
  },
  {
    "origin": "Changes the shape and/or the number of channels of a 2D matrix without copying the data.",
    "local": "在不复制数据的情况下更改2D矩阵的形状和/或通道数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(int cn, int newndims, const int *newsz) const",
    "local": "（int cn，int newndims，const int*newsz）常量"
  },
  {
    "origin": "(int cn, const std::vector&lt; int &gt; &amp;newshape) const",
    "local": "（int-cn，const-std：：向量&lt；内部&gt&amp；新形状）常量"
  },
  {
    "origin": "(size_t sz)",
    "local": "（尺寸\\u t sz）"
  },
  {
    "origin": "Changes the number of matrix rows.",
    "local": "更改矩阵行数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(size_t sz, const",
    "local": "（尺寸\\u t sz，常数"
  },
  {
    "origin": "&amp;s)",
    "local": "&amp；秒）"
  },
  {
    "origin": "(int y) const",
    "local": "（整型y）常量"
  },
  {
    "origin": "Creates a matrix header for the specified matrix row.",
    "local": "为指定的矩阵行创建矩阵头。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(int startrow, int endrow) const",
    "local": "（int startrow，int endrow）常量"
  },
  {
    "origin": "Creates a matrix header for the specified row span.",
    "local": "为指定的行范围创建矩阵标头。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;r) const",
    "local": "&amp；（r） 常数；"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "value,",
    "local": "价值观，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Sets all or some of the array elements to the specified value.",
    "local": "将所有或部分数组元素设置为指定值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(int i=0) const",
    "local": "（int i=0）常数"
  },
  {
    "origin": "Returns a normalized step.",
    "local": "返回标准化步骤。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "Transposes a matrix.",
    "local": "变换矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "Returns the total number of array elements.",
    "local": "返回数组元素的总数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(int startDim, int endDim=INT_MAX) const",
    "local": "（int startDim，int endDim=int\\u MAX）常数"
  },
  {
    "origin": "Returns the total number of array elements.",
    "local": "返回数组元素的总数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "Returns the type of a matrix element.",
    "local": "返回矩阵元素的类型。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "internal use method: updates the continuity flag",
    "local": "内部使用方法：更新连续性标志"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Static Public Member Functions",
    "local": "静态公共成员函数"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;d)",
    "local": "&amp；（d）"
  },
  {
    "origin": "creates a diagonal matrix",
    "local": "创建对角矩阵"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "(int",
    "local": "（内景）"
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Returns an identity matrix of the specified size and type.",
    "local": "返回指定大小和类型的标识矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "and the standard allocator",
    "local": "以及标准分配器"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "(int",
    "local": "（内景）"
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Returns an array of all 1's of the specified size and type.",
    "local": "返回指定大小和类型的所有1的数组。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "(int ndims, const int *sz, int",
    "local": "（int ndims，常数int*sz，int）"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "*",
    "local": "*"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "(int",
    "local": "（内景）"
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Returns a zero array of the specified size and type.",
    "local": "返回指定大小和类型的零数组。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "(int ndims, const int *sz, int",
    "local": "（int ndims，常数int*sz，int）"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Public Attributes",
    "local": "公共属性"
  },
  {
    "origin": "custom allocator",
    "local": "自定义分配器"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "pointer to the data",
    "local": "指向数据的指针"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "helper fields used in locateROI and adjustROI",
    "local": "locateROI和adjustROI中使用的helper字段"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions",
    "local": "矩阵有两个以上维度时的行数和列数或（-1，-1）"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "interaction with",
    "local": "与…互动"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Protected Member Functions",
    "local": "受保护的成员函数"
  },
  {
    "origin": "template&lt;typename _Tp , typename Functor &gt;",
    "local": "模板&lt；typename&u Tp，typename Functor&gt；"
  },
  {
    "origin": "(const Functor &amp;operation)",
    "local": "（const函子&amp；（操作）"
  },
  {
    "origin": "Detailed Description",
    "local": "详细说明"
  },
  {
    "origin": "n-dimensional dense array class",
    "local": "n维密集数组类"
  },
  {
    "origin": "The class",
    "local": "班级"
  },
  {
    "origin": "represents an n-dimensional dense numerical single-channel or multi-channel array. It can be used to store real or complex-valued vectors and matrices, grayscale or color images, voxel volumes, vector fields, point clouds, tensors, histograms (though, very high-dimensional histograms may be better stored in a",
    "local": "表示n维密集数值单通道或多通道阵列。它可以用来存储实值或复数向量和矩阵、灰度或彩色图像、体素体积、向量场、点云、张量、直方图（不过，高维直方图最好存储在"
  },
  {
    "origin": "). The data layout of the array",
    "local": "). 数组的数据布局"
  },
  {
    "origin": "is defined by the array",
    "local": "由数组定义"
  },
  {
    "origin": ", so that the address of element \\((i_0,...,i_{M.dims-1})\\), where \\(0\\leq i_k&lt;M.size[k]\\), is computed as:",
    "local": "，因此元素\\（（i\\u 0，…，i{M.dims-1}）\\）的地址，其中\\（0\\leq i\\u k&lt；M.size[k]\\），计算如下："
  },
  {
    "origin": "\\[addr(M_{i_0,...,i_{M.dims-1}}) = M.data + M.step[0]*i_0 + M.step[1]*i_1 + ... + M.step[M.dims-1]*i_{M.dims-1}\\]",
    "local": "\\[地址（M{i_0，…，i{M.dims-1}}）=M.data+M.step[0]*i_0+M.step[1]*i_1+…+M.step[M.dims-1]*i{M.dims-1}\\]"
  },
  {
    "origin": "In case of a 2-dimensional array, the above formula is reduced to:",
    "local": "对于二维数组，上述公式简化为："
  },
  {
    "origin": "\\[addr(M_{i,j}) = M.data + M.step[0]*i + M.step[1]*j\\]",
    "local": "\\[地址（M{i，j}）=M.data+M.step[0]*i+M.step[1]*j\\]"
  },
  {
    "origin": "Note that",
    "local": "请注意"
  },
  {
    "origin": "(in fact,",
    "local": "（事实上，"
  },
  {
    "origin": "). This means that 2-dimensional matrices are stored row-by-row, 3-dimensional matrices are stored plane-by-plane, and so on. M.step[M.dims-1] is minimal and always equal to the element size M.elemSize() .",
    "local": "). 这意味着二维矩阵逐行存储，三维矩阵逐平面存储，依此类推。M.step[M.dims-1]是最小值，并且始终等于元素大小M.elemSize（）。"
  },
  {
    "origin": "So, the data layout in",
    "local": "因此，数据布局"
  },
  {
    "origin": "is compatible with the majority of dense array types from the standard toolkits and SDKs, such as Numpy (ndarray), Win32 (independent device bitmaps), and others, that is, with any array that uses",
    "local": "与标准工具箱和SDK中的大多数密集数组类型兼容，如Numpy（ndarray）、Win32（独立设备位图）等，也就是说，与使用"
  },
  {
    "origin": "steps",
    "local": "步骤"
  },
  {
    "origin": "(or",
    "local": "（或"
  },
  {
    "origin": "strides",
    "local": "跨步"
  },
  {
    "origin": ") to compute the position of a pixel. Due to this compatibility, it is possible to make a",
    "local": ")计算像素的位置。由于这种兼容性，可以使"
  },
  {
    "origin": "header for user-allocated data and process it in-place using OpenCV functions.",
    "local": "用户分配数据的头，并使用OpenCV函数就地处理它。"
  },
  {
    "origin": "There are many different ways to create a",
    "local": "有许多不同的方法来创建"
  },
  {
    "origin": "object. The most popular options are listed below:",
    "local": "对象。最受欢迎的选项如下："
  },
  {
    "origin": "Use the create(nrows, ncols, type) method or the similar Mat(nrows, ncols, type[, fillValue]) constructor. A new array of the specified size and type is allocated. type has the same meaning as in the cvCreateMat method. For example, CV_8UC1 means a 8-bit single-channel array, CV_32FC2 means a 2-channel (complex) floating-point array, and so on.",
    "local": "使用create（nrows，ncols，type）方法或类似的Mat（nrows，ncols，type[，fillValue]）构造函数。将分配指定大小和类型的新数组。类型与cvCreateMat方法中的含义相同。例如，CVï8UC1表示8位单通道数组，CVï32FC2表示2通道（复数）浮点数组，依此类推。"
  },
  {
    "origin": "As noted in the introduction to this chapter,",
    "local": "如本章导言所述，"
  },
  {
    "origin": "allocates only a new array when the shape or type of the current array are different from the specified ones.",
    "local": "当当前数组的形状或类型与指定的不同时，仅分配新数组。"
  },
  {
    "origin": "Create a multi-dimensional array:",
    "local": "创建多维数组："
  },
  {
    "origin": "It passes the number of dimensions =1 to the",
    "local": "它将维数=1传递给"
  },
  {
    "origin": "constructor but the created array will be 2-dimensional with the number of columns set to 1. So,",
    "local": "但创建的数组将是二维的，列数设置为1。所以，"
  },
  {
    "origin": "Use a copy constructor or assignment operator where there can be an array or expression on the right side (see below). As noted in the introduction, the array assignment is an O(1) operation because it only copies the header and increases the reference counter. The",
    "local": "如果右侧可以有数组或表达式，请使用复制构造函数或赋值运算符（见下文）。如简介中所述，数组赋值是一个O（1）操作，因为它只复制头并增加引用计数器。这个"
  },
  {
    "origin": "method can be used to get a full (deep) copy of the array when you need it.",
    "local": "方法可用于在需要时获取数组的完整（深度）副本。"
  },
  {
    "origin": "Construct a header for a part of another array. It can be a single row, single column, several rows, several columns, rectangular region in the array (called a",
    "local": "为另一个数组的一部分构造头。它可以是数组中的单行、单列、多行、多列、矩形区域（称为"
  },
  {
    "origin": "minor",
    "local": "少数的"
  },
  {
    "origin": "in algebra) or a diagonal. Such operations are also O(1) because the new header references the same data. You can actually modify a part of the array using this feature, for example:",
    "local": "或对角线。这样的操作也是O（1），因为新的头引用相同的数据。实际上，可以使用此功能修改阵列的一部分，例如："
  },
  {
    "origin": "Due to the additional datastart and dataend members, it is possible to compute a relative sub-array position in the main",
    "local": "由于额外的datastart和dataend成员，可以计算主数组中的相对子数组位置"
  },
  {
    "origin": "container",
    "local": "容器"
  },
  {
    "origin": "array using",
    "local": "数组使用"
  },
  {
    "origin": ":",
    "local": ":"
  },
  {
    "origin": "As in case of whole matrices, if you need a deep copy, use the",
    "local": "在整个矩阵的情况下，如果需要深度副本，请使用"
  },
  {
    "origin": "method of the extracted sub-matrices.",
    "local": "提取子矩阵的方法。"
  },
  {
    "origin": "Make a header for user-allocated data. It can be useful to do the following:",
    "local": "为用户分配的数据创建标头。可以执行以下操作："
  },
  {
    "origin": "Process \"foreign\" data using OpenCV (for example, when you implement a DirectShow* filter or a processing module for gstreamer, and so on). For example:",
    "local": "使用OpenCV处理“外来”数据（例如，当您实现DirectShow*过滤器或gstreamer的处理模块时，等等）。例如："
  },
  {
    "origin": "Quickly initialize small matrices and/or get a super-fast element access.",
    "local": "快速初始化小矩阵和/或获得超快速元素访问。"
  },
  {
    "origin": "Use MATLAB-style array initializers,",
    "local": "使用MATLAB风格的数组初始化器，"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", for example:",
    "local": "，例如："
  },
  {
    "origin": "Use a comma-separated initializer:",
    "local": "使用逗号分隔的初始值设定项："
  },
  {
    "origin": "With this approach, you first call a constructor of the",
    "local": "使用这种方法，首先调用"
  },
  {
    "origin": "class with the proper parameters, and then you just put",
    "local": "用适当的参数初始化，然后"
  },
  {
    "origin": "followed by comma-separated values that can be constants, variables, expressions, and so on. Also, note the extra parentheses required to avoid compilation errors.",
    "local": "后跟逗号分隔的值，这些值可以是常量、变量、表达式等。另外，请注意避免编译错误所需的额外括号。"
  },
  {
    "origin": "Once the array is created, it is automatically managed via a reference-counting mechanism. If the array header is built on top of user-allocated data, you should handle the data by yourself. The array data is deallocated when no one points to it. If you want to release the data pointed by a array header before the array destructor is called, use",
    "local": "一旦创建了数组，它就会通过引用计数机制进行自动管理。如果数组头构建在用户分配的数据之上，那么您应该自己处理数据。当没有人指向数组数据时，数组数据将被释放。如果要在调用数组析构函数之前释放数组头所指向的数据，请使用"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "The next important thing to learn about the array class is element access. This manual already described how to compute an address of each array element. Normally, you are not required to use the formula directly in the code. If you know the array element type (which can be retrieved using the method",
    "local": "了解array类的下一个重要内容是元素访问。本手册已经描述了如何计算每个数组元素的地址。通常，您不需要在代码中直接使用公式。如果您知道数组元素类型（可以使用"
  },
  {
    "origin": "), you can access the element \\(M_{ij}\\) of a 2-dimensional array as:",
    "local": ")，可以访问二维数组的元素\\（M{ij}\\），如下所示："
  },
  {
    "origin": "assuming that",
    "local": "假设"
  },
  {
    "origin": "is a double-precision floating-point array. There are several variants of the method at for a different number of dimensions.",
    "local": "是双精度浮点数组。对于不同数量的尺寸，有几种不同的方法。"
  },
  {
    "origin": "If you need to process a whole row of a 2D array, the most efficient way is to get the pointer to the row first, and then just use the plain C operator [] :",
    "local": "如果您需要处理一个2D数组的整行，最有效的方法是首先获取指向该行的指针，然后只需使用纯C运算符[]："
  },
  {
    "origin": "Some operations, like the one above, do not actually depend on the array shape. They just process elements of an array one by one (or elements from multiple arrays that have the same coordinates, for example, array addition). Such operations are called",
    "local": "有些操作（如上面的操作）实际上并不依赖于数组的形状。它们只是一个接一个地处理一个数组的元素（或者来自多个具有相同坐标的数组的元素，例如数组加法）。这种操作称为"
  },
  {
    "origin": "element-wise",
    "local": "元素方面"
  },
  {
    "origin": ". It makes sense to check whether all the input/output arrays are continuous, namely, have no gaps at the end of each row. If yes, process them as a long single row:",
    "local": ". 检查是否所有的输入/输出数组都是连续的是有意义的，也就是说，每行的末尾都没有间隙。如果是，则将其作为一个长行处理："
  },
  {
    "origin": "In case of the continuous matrix, the outer loop body is executed just once. So, the overhead is smaller, which is especially noticeable in case of small matrices.",
    "local": "对于连续矩阵，外循环体只执行一次。因此，开销更小，这在小矩阵的情况下尤其明显。"
  },
  {
    "origin": "Finally, there are STL-style iterators that are smart enough to skip gaps between successive rows:",
    "local": "最后，STL风格的迭代器非常聪明，可以跳过连续行之间的间隙："
  },
  {
    "origin": "The matrix iterators are random-access iterators, so they can be passed to any STL algorithm, including",
    "local": "矩阵迭代器是随机访问迭代器，因此它们可以传递给任何STL算法，包括"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "Matrix Expressions and arithmetic see",
    "local": "矩阵表达式和算术参见"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Member Enumeration Documentation",
    "local": "成员枚举文档"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "anonymous enum",
    "local": "匿名枚举"
  },
  {
    "origin": "anonymous enum",
    "local": "匿名枚举"
  },
  {
    "origin": "Enumerator",
    "local": "枚举器"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "anonymous enum",
    "local": "匿名枚举"
  },
  {
    "origin": "anonymous enum",
    "local": "匿名枚举"
  },
  {
    "origin": "Enumerator",
    "local": "枚举器"
  },
  {
    "origin": "Constructor &amp; Destructor Documentation",
    "local": "建造商和；析构函数文档"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "Mat()",
    "local": "材料（）"
  },
  {
    "origin": "[1/29]",
    "local": "[1/29]"
  },
  {
    "origin": "cv::Mat::Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "These are various constructors that form a matrix. As noted in the AutomaticAllocation, often the default constructor is enough, and the proper matrix will be allocated by an OpenCV function. The constructed matrix can further be assigned to another matrix or matrix expression or can be allocated with",
    "local": "这些是构成矩阵的各种构造函数。正如AutomaticAllocation中所指出的，通常默认构造函数就足够了，适当的矩阵将由OpenCV函数分配。所构造的矩阵可以进一步分配给另一个矩阵或矩阵表达式，或者可以使用"
  },
  {
    "origin": ". In the former case, the old content is de-referenced.",
    "local": ". 在前一种情况下，旧内容被取消引用。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "Mat()",
    "local": "材料（）"
  },
  {
    "origin": "[2/29]",
    "local": "[2/29]"
  },
  {
    "origin": "cv::Mat::Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "rows",
    "local": "排"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "cols",
    "local": "胶水"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "rows",
    "local": "排"
  },
  {
    "origin": "Number of rows in a 2D array.",
    "local": "二维数组中的行数。"
  },
  {
    "origin": "cols",
    "local": "胶水"
  },
  {
    "origin": "Number of columns in a 2D array.",
    "local": "二维数组中的列数。"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": "Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or",
    "local": "数组类型。使用CV_8UC1，…，CV_64FC4创建1-4个通道矩阵，或"
  },
  {
    "origin": ", ...,",
    "local": ", ...,"
  },
  {
    "origin": "to create multi-channel (up to CV_CN_MAX channels) matrices.",
    "local": "创建多通道（最多CV\\U CN\\U MAX通道）矩阵。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "Mat()",
    "local": "材料（）"
  },
  {
    "origin": "[3/29]",
    "local": "[3/29]"
  },
  {
    "origin": "cv::Mat::Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "size",
    "local": "大小"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "size",
    "local": "大小"
  },
  {
    "origin": "2D array size: Size(cols, rows) . In the",
    "local": "二维数组大小：大小（列、行）。在"
  },
  {
    "origin": "constructor, the number of rows and the number of columns go in the reverse order.",
    "local": "构造函数中，行数和列数的顺序相反。"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": "Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or",
    "local": "数组类型。使用CV_8UC1，…，CV_64FC4创建1-4个通道矩阵，或"
  },
  {
    "origin": ", ...,",
    "local": ", ...,"
  },
  {
    "origin": "to create multi-channel (up to CV_CN_MAX channels) matrices.",
    "local": "创建多通道（最多CV\\U CN\\U MAX通道）矩阵。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "Mat()",
    "local": "材料（）"
  },
  {
    "origin": "[4/29]",
    "local": "[4/29]"
  },
  {
    "origin": "cv::Mat::Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "rows",
    "local": "排"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "cols",
    "local": "胶水"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "s",
    "local": "s"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "rows",
    "local": "排"
  },
  {
    "origin": "Number of rows in a 2D array.",
    "local": "二维数组中的行数。"
  },
  {
    "origin": "cols",
    "local": "胶水"
  },
  {
    "origin": "Number of columns in a 2D array.",
    "local": "二维数组中的列数。"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": "Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or",
    "local": "数组类型。使用CV_8UC1，…，CV_64FC4创建1-4个通道矩阵，或"
  },
  {
    "origin": ", ...,",
    "local": ", ...,"
  },
  {
    "origin": "to create multi-channel (up to CV_CN_MAX channels) matrices.",
    "local": "创建多通道（最多CV\\U CN\\U MAX通道）矩阵。"
  },
  {
    "origin": "s",
    "local": "s"
  },
  {
    "origin": "An optional value to initialize each matrix element with. To set all the matrix elements to the particular value after the construction, use the assignment operator",
    "local": "用于初始化每个矩阵元素的可选值。要在构造之后将所有矩阵元素设置为特定值，请使用赋值运算符"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "Mat()",
    "local": "材料（）"
  },
  {
    "origin": "[5/29]",
    "local": "[5/29]"
  },
  {
    "origin": "cv::Mat::Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "size",
    "local": "大小"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "s",
    "local": "s"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "size",
    "local": "大小"
  },
  {
    "origin": "2D array size: Size(cols, rows) . In the",
    "local": "二维数组大小：大小（列、行）。在"
  },
  {
    "origin": "constructor, the number of rows and the number of columns go in the reverse order.",
    "local": "构造函数中，行数和列数的顺序相反。"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": "Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or",
    "local": "数组类型。使用CV_8UC1，…，CV_64FC4创建1-4个通道矩阵，或"
  },
  {
    "origin": ", ...,",
    "local": ", ...,"
  },
  {
    "origin": "to create multi-channel (up to CV_CN_MAX channels) matrices.",
    "local": "创建多通道（最多CV\\U CN\\U MAX通道）矩阵。"
  },
  {
    "origin": "s",
    "local": "s"
  },
  {
    "origin": "An optional value to initialize each matrix element with. To set all the matrix elements to the particular value after the construction, use the assignment operator",
    "local": "用于初始化每个矩阵元素的可选值。要在构造之后将所有矩阵元素设置为特定值，请使用赋值运算符"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "Mat()",
    "local": "材料（）"
  },
  {
    "origin": "[6/29]",
    "local": "[6/29]"
  },
  {
    "origin": "cv::Mat::Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "ndims",
    "local": "数组的维数"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "sizes",
    "local": "尺寸"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "ndims",
    "local": "数组的维数"
  },
  {
    "origin": "Array dimensionality.",
    "local": "数组维数。"
  },
  {
    "origin": "sizes",
    "local": "尺寸"
  },
  {
    "origin": "Array of integers specifying an n-dimensional array shape.",
    "local": "指定n维数组形状的整数数组。"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": "Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or",
    "local": "数组类型。使用CV_8UC1，…，CV_64FC4创建1-4个通道矩阵，或"
  },
  {
    "origin": ", ...,",
    "local": ", ...,"
  },
  {
    "origin": "to create multi-channel (up to CV_CN_MAX channels) matrices.",
    "local": "创建多通道（最多CV\\U CN\\U MAX通道）矩阵。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "Mat()",
    "local": "材料（）"
  },
  {
    "origin": "[7/29]",
    "local": "[7/29]"
  },
  {
    "origin": "cv::Mat::Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "sizes",
    "local": "尺寸"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "sizes",
    "local": "尺寸"
  },
  {
    "origin": "Array of integers specifying an n-dimensional array shape.",
    "local": "指定n维数组形状的整数数组。"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": "Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or",
    "local": "数组类型。使用CV_8UC1，…，CV_64FC4创建1-4个通道矩阵，或"
  },
  {
    "origin": ", ...,",
    "local": ", ...,"
  },
  {
    "origin": "to create multi-channel (up to CV_CN_MAX channels) matrices.",
    "local": "创建多通道（最多CV\\U CN\\U MAX通道）矩阵。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "Mat()",
    "local": "材料（）"
  },
  {
    "origin": "[8/29]",
    "local": "[8/29]"
  },
  {
    "origin": "cv::Mat::Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "ndims",
    "local": "数组的维数"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "sizes",
    "local": "尺寸"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "s",
    "local": "s"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "ndims",
    "local": "数组的维数"
  },
  {
    "origin": "Array dimensionality.",
    "local": "数组维数。"
  },
  {
    "origin": "sizes",
    "local": "尺寸"
  },
  {
    "origin": "Array of integers specifying an n-dimensional array shape.",
    "local": "指定n维数组形状的整数数组。"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": "Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or",
    "local": "数组类型。使用CV_8UC1，…，CV_64FC4创建1-4个通道矩阵，或"
  },
  {
    "origin": ", ...,",
    "local": ", ...,"
  },
  {
    "origin": "to create multi-channel (up to CV_CN_MAX channels) matrices.",
    "local": "创建多通道（最多CV\\U CN\\U MAX通道）矩阵。"
  },
  {
    "origin": "s",
    "local": "s"
  },
  {
    "origin": "An optional value to initialize each matrix element with. To set all the matrix elements to the particular value after the construction, use the assignment operator",
    "local": "用于初始化每个矩阵元素的可选值。要在构造之后将所有矩阵元素设置为特定值，请使用赋值运算符"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "Mat()",
    "local": "材料（）"
  },
  {
    "origin": "[9/29]",
    "local": "[9/29]"
  },
  {
    "origin": "cv::Mat::Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "sizes",
    "local": "尺寸"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "s",
    "local": "s"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "sizes",
    "local": "尺寸"
  },
  {
    "origin": "Array of integers specifying an n-dimensional array shape.",
    "local": "指定n维数组形状的整数数组。"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": "Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or",
    "local": "数组类型。使用CV_8UC1，…，CV_64FC4创建1-4个通道矩阵，或"
  },
  {
    "origin": ", ...,",
    "local": ", ...,"
  },
  {
    "origin": "to create multi-channel (up to CV_CN_MAX channels) matrices.",
    "local": "创建多通道（最多CV\\U CN\\U MAX通道）矩阵。"
  },
  {
    "origin": "s",
    "local": "s"
  },
  {
    "origin": "An optional value to initialize each matrix element with. To set all the matrix elements to the particular value after the construction, use the assignment operator",
    "local": "用于初始化每个矩阵元素的可选值。要在构造之后将所有矩阵元素设置为特定值，请使用赋值运算符"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "Mat()",
    "local": "材料（）"
  },
  {
    "origin": "[10/29]",
    "local": "[10/29]"
  },
  {
    "origin": "cv::Mat::Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": "Array that (as a whole or partly) is assigned to the constructed matrix. No data is copied by these constructors. Instead, the header pointing to m data or its sub-array is constructed and associated with it. The reference counter, if any, is incremented. So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . If you want to have an independent copy of the sub-array, use",
    "local": "（作为整体或部分）分配给构造矩阵的数组。这些构造函数不复制任何数据。相反，指向m data或其子数组的头被构造并与之关联。参考计数器（如果有）将递增。因此，当您修改使用这种构造函数形成的矩阵时，您也修改m的相应元素。如果要拥有子数组的独立副本，请使用"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "Mat()",
    "local": "材料（）"
  },
  {
    "origin": "[11/29]",
    "local": "[11/29]"
  },
  {
    "origin": "cv::Mat::Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "rows",
    "local": "排"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "cols",
    "local": "胶水"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "data",
    "local": "数据"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "step",
    "local": "步"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "rows",
    "local": "排"
  },
  {
    "origin": "Number of rows in a 2D array.",
    "local": "二维数组中的行数。"
  },
  {
    "origin": "cols",
    "local": "胶水"
  },
  {
    "origin": "Number of columns in a 2D array.",
    "local": "二维数组中的列数。"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": "Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or",
    "local": "数组类型。使用CV_8UC1，…，CV_64FC4创建1-4个通道矩阵，或"
  },
  {
    "origin": ", ...,",
    "local": ", ...,"
  },
  {
    "origin": "to create multi-channel (up to CV_CN_MAX channels) matrices.",
    "local": "创建多通道（最多CV\\U CN\\U MAX通道）矩阵。"
  },
  {
    "origin": "data",
    "local": "数据"
  },
  {
    "origin": "Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. This operation is very efficient and can be used to process external data using OpenCV functions. The external data is not automatically deallocated, so you should take care of it.",
    "local": "指向用户数据的指针。接受数据和步长参数的矩阵构造函数不分配矩阵数据。相反，它们只是初始化指向指定数据的矩阵头，这意味着不复制任何数据。此操作非常有效，可以使用OpenCV函数处理外部数据。外部数据不会自动解除分配，因此您应该注意它。"
  },
  {
    "origin": "step",
    "local": "步"
  },
  {
    "origin": "Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any. If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize(). See",
    "local": "每个矩阵行占用的字节数。该值应包括每行末尾的填充字节（如果有）。如果缺少参数（设置为AUTO\\u STEP），则不假设填充，实际步长计算为cols*elemSize（）。看到了吗"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "Mat()",
    "local": "材料（）"
  },
  {
    "origin": "[12/29]",
    "local": "[12/29]"
  },
  {
    "origin": "cv::Mat::Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "size",
    "local": "大小"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "data",
    "local": "数据"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "step",
    "local": "步"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "size",
    "local": "大小"
  },
  {
    "origin": "2D array size: Size(cols, rows) . In the",
    "local": "二维数组大小：大小（列、行）。在"
  },
  {
    "origin": "constructor, the number of rows and the number of columns go in the reverse order.",
    "local": "构造函数中，行数和列数的顺序相反。"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": "Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or",
    "local": "数组类型。使用CV_8UC1，…，CV_64FC4创建1-4个通道矩阵，或"
  },
  {
    "origin": ", ...,",
    "local": ", ...,"
  },
  {
    "origin": "to create multi-channel (up to CV_CN_MAX channels) matrices.",
    "local": "创建多通道（最多CV\\U CN\\U MAX通道）矩阵。"
  },
  {
    "origin": "data",
    "local": "数据"
  },
  {
    "origin": "Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. This operation is very efficient and can be used to process external data using OpenCV functions. The external data is not automatically deallocated, so you should take care of it.",
    "local": "指向用户数据的指针。接受数据和步长参数的矩阵构造函数不分配矩阵数据。相反，它们只是初始化指向指定数据的矩阵头，这意味着不复制任何数据。此操作非常有效，可以使用OpenCV函数处理外部数据。外部数据不会自动解除分配，因此您应该注意它。"
  },
  {
    "origin": "step",
    "local": "步"
  },
  {
    "origin": "Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any. If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize(). See",
    "local": "每个矩阵行占用的字节数。该值应包括每行末尾的填充字节（如果有）。如果缺少参数（设置为AUTO\\u STEP），则不假设填充，实际步长计算为cols*elemSize（）。看到了吗"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "Mat()",
    "local": "材料（）"
  },
  {
    "origin": "[13/29]",
    "local": "[13/29]"
  },
  {
    "origin": "cv::Mat::Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "ndims",
    "local": "数组的维数"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "sizes",
    "local": "尺寸"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "data",
    "local": "数据"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "steps",
    "local": "步骤"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "ndims",
    "local": "数组的维数"
  },
  {
    "origin": "Array dimensionality.",
    "local": "数组维数。"
  },
  {
    "origin": "sizes",
    "local": "尺寸"
  },
  {
    "origin": "Array of integers specifying an n-dimensional array shape.",
    "local": "指定n维数组形状的整数数组。"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": "Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or",
    "local": "数组类型。使用CV_8UC1，…，CV_64FC4创建1-4个通道矩阵，或"
  },
  {
    "origin": ", ...,",
    "local": ", ...,"
  },
  {
    "origin": "to create multi-channel (up to CV_CN_MAX channels) matrices.",
    "local": "创建多通道（最多CV\\U CN\\U MAX通道）矩阵。"
  },
  {
    "origin": "data",
    "local": "数据"
  },
  {
    "origin": "Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. This operation is very efficient and can be used to process external data using OpenCV functions. The external data is not automatically deallocated, so you should take care of it.",
    "local": "指向用户数据的指针。接受数据和步长参数的矩阵构造函数不分配矩阵数据。相反，它们只是初始化指向指定数据的矩阵头，这意味着不复制任何数据。此操作非常有效，可以使用OpenCV函数处理外部数据。外部数据不会自动解除分配，因此您应该注意它。"
  },
  {
    "origin": "steps",
    "local": "步骤"
  },
  {
    "origin": "Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). If not specified, the matrix is assumed to be continuous.",
    "local": "多维数组中ndims-1步骤的数组（最后一步始终设置为元素大小）。如果未指定，则假定矩阵是连续的。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "Mat()",
    "local": "材料（）"
  },
  {
    "origin": "[14/29]",
    "local": "[14/29]"
  },
  {
    "origin": "cv::Mat::Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "sizes",
    "local": "尺寸"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "data",
    "local": "数据"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "steps",
    "local": "步骤"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "sizes",
    "local": "尺寸"
  },
  {
    "origin": "Array of integers specifying an n-dimensional array shape.",
    "local": "指定n维数组形状的整数数组。"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": "Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or",
    "local": "数组类型。使用CV_8UC1，…，CV_64FC4创建1-4个通道矩阵，或"
  },
  {
    "origin": ", ...,",
    "local": ", ...,"
  },
  {
    "origin": "to create multi-channel (up to CV_CN_MAX channels) matrices.",
    "local": "创建多通道（最多CV\\U CN\\U MAX通道）矩阵。"
  },
  {
    "origin": "data",
    "local": "数据"
  },
  {
    "origin": "Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. This operation is very efficient and can be used to process external data using OpenCV functions. The external data is not automatically deallocated, so you should take care of it.",
    "local": "指向用户数据的指针。接受数据和步长参数的矩阵构造函数不分配矩阵数据。相反，它们只是初始化指向指定数据的矩阵头，这意味着不复制任何数据。此操作非常有效，可以使用OpenCV函数处理外部数据。外部数据不会自动解除分配，因此您应该注意它。"
  },
  {
    "origin": "steps",
    "local": "步骤"
  },
  {
    "origin": "Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). If not specified, the matrix is assumed to be continuous.",
    "local": "多维数组中ndims-1步骤的数组（最后一步始终设置为元素大小）。如果未指定，则假定矩阵是连续的。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "Mat()",
    "local": "材料（）"
  },
  {
    "origin": "[15/29]",
    "local": "[15/29]"
  },
  {
    "origin": "cv::Mat::Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "rowRange",
    "local": "罗朗"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "colRange",
    "local": "科尔兰奇"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": "Array that (as a whole or partly) is assigned to the constructed matrix. No data is copied by these constructors. Instead, the header pointing to m data or its sub-array is constructed and associated with it. The reference counter, if any, is incremented. So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . If you want to have an independent copy of the sub-array, use",
    "local": "（作为整体或部分）分配给构造矩阵的数组。这些构造函数不复制任何数据。相反，指向m data或其子数组的头被构造并与之关联。参考计数器（如果有）将递增。因此，当您修改使用这种构造函数形成的矩阵时，您也修改m的相应元素。如果要拥有子数组的独立副本，请使用"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "rowRange",
    "local": "罗朗"
  },
  {
    "origin": "of the m rows to take. As usual, the range start is inclusive and the range end is exclusive. Use",
    "local": "在要采取的m行中。通常，范围开始是包含的，范围结束是独占的。使用"
  },
  {
    "origin": "to take all the rows.",
    "local": "把所有的行都拿走。"
  },
  {
    "origin": "colRange",
    "local": "科尔兰奇"
  },
  {
    "origin": "of the m columns to take. Use",
    "local": "m列中的一列。使用"
  },
  {
    "origin": "to take all the columns.",
    "local": "把所有的柱子都拿走。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "Mat()",
    "local": "材料（）"
  },
  {
    "origin": "[16/29]",
    "local": "[16/29]"
  },
  {
    "origin": "cv::Mat::Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "roi",
    "local": "投资回报率"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": "Array that (as a whole or partly) is assigned to the constructed matrix. No data is copied by these constructors. Instead, the header pointing to m data or its sub-array is constructed and associated with it. The reference counter, if any, is incremented. So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . If you want to have an independent copy of the sub-array, use",
    "local": "（作为整体或部分）分配给构造矩阵的数组。这些构造函数不复制任何数据。相反，指向m data或其子数组的头被构造并与之关联。参考计数器（如果有）将递增。因此，当您修改使用这种构造函数形成的矩阵时，您也修改m的相应元素。如果要拥有子数组的独立副本，请使用"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "roi",
    "local": "投资回报率"
  },
  {
    "origin": "Region of interest.",
    "local": "感兴趣的地区。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "Mat()",
    "local": "材料（）"
  },
  {
    "origin": "[17/29]",
    "local": "[17/29]"
  },
  {
    "origin": "cv::Mat::Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "ranges",
    "local": "范围"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": "Array that (as a whole or partly) is assigned to the constructed matrix. No data is copied by these constructors. Instead, the header pointing to m data or its sub-array is constructed and associated with it. The reference counter, if any, is incremented. So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . If you want to have an independent copy of the sub-array, use",
    "local": "（作为整体或部分）分配给构造矩阵的数组。这些构造函数不复制任何数据。相反，指向m data或其子数组的头被构造并与之关联。参考计数器（如果有）将递增。因此，当您修改使用这种构造函数形成的矩阵时，您也修改m的相应元素。如果要拥有子数组的独立副本，请使用"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "ranges",
    "local": "范围"
  },
  {
    "origin": "Array of selected ranges of m along each dimensionality.",
    "local": "沿每个维度的m的选定范围的数组。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "Mat()",
    "local": "材料（）"
  },
  {
    "origin": "[18/29]",
    "local": "[18/29]"
  },
  {
    "origin": "cv::Mat::Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const std::vector&lt;",
    "local": "常量标准：：向量&lt；"
  },
  {
    "origin": "ranges",
    "local": "范围"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": "Array that (as a whole or partly) is assigned to the constructed matrix. No data is copied by these constructors. Instead, the header pointing to m data or its sub-array is constructed and associated with it. The reference counter, if any, is incremented. So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . If you want to have an independent copy of the sub-array, use",
    "local": "（作为整体或部分）分配给构造矩阵的数组。这些构造函数不复制任何数据。相反，指向m data或其子数组的头被构造并与之关联。参考计数器（如果有）将递增。因此，当您修改使用这种构造函数形成的矩阵时，您也修改m的相应元素。如果要拥有子数组的独立副本，请使用"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "ranges",
    "local": "范围"
  },
  {
    "origin": "Array of selected ranges of m along each dimensionality.",
    "local": "沿每个维度的m的选定范围的数组。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "Mat()",
    "local": "材料（）"
  },
  {
    "origin": "[19/29]",
    "local": "[19/29]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "cv::Mat::Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "vec",
    "local": "向量"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "copyData",
    "local": "复制数据"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "explicit",
    "local": "明确的"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "vec",
    "local": "向量"
  },
  {
    "origin": "STL vector whose elements form the matrix. The matrix has a single column and the number of rows equal to the number of vector elements. Type of the matrix matches the type of vector elements. The constructor can handle arbitrary types, for which there is a properly declared",
    "local": "其元素构成矩阵的STL向量。矩阵只有一列，行数等于向量元素的个数。矩阵的类型与向量元素的类型匹配。构造函数可以处理任意类型，其中有一个正确声明的"
  },
  {
    "origin": ". This means that the vector elements must be primitive numbers or uni-type numerical tuples of numbers. Mixed-type structures are not supported. The corresponding constructor is explicit. Since STL vectors are not automatically converted to",
    "local": ". 这意味着向量元素必须是原始数或单一类型的数字元组。不支持混合类型结构。相应的构造函数是显式的。因为STL向量不会自动转换为"
  },
  {
    "origin": "instances, you should write Mat(vec) explicitly. Unless you copy the data into the matrix ( copyData=true ), no new elements will be added to the vector because it can potentially yield vector data reallocation, and, thus, the matrix data pointer will be invalid.",
    "local": "例如，应该显式地编写Mat（vec）。除非将数据复制到矩阵中（copyData=true），否则不会向向量中添加新元素，因为它可能会产生向量数据重新分配，因此，矩阵数据指针将无效。"
  },
  {
    "origin": "copyData",
    "local": "复制数据"
  },
  {
    "origin": "Flag to specify whether the underlying data of the STL vector should be copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, the allocated buffer is managed using",
    "local": "标志，指定STL向量的基础数据应复制到（true）还是与（false）新构造的矩阵共享。复制数据时，分配的缓冲区使用"
  },
  {
    "origin": "reference counting mechanism. While the data is shared, the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.",
    "local": "参考计数机制。共享数据时，引用计数器为空，在矩阵未被破坏之前，不应取消分配数据。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "Mat()",
    "local": "材料（）"
  },
  {
    "origin": "[20/29]",
    "local": "[20/29]"
  },
  {
    "origin": "template&lt;typename _Tp , typename = typename std::enable_if&lt;std::is_arithmetic&lt;_Tp&gt;::value&gt;::type&gt;",
    "local": "模板&lt；typename\\u Tp，typename=typename std：：启用\\u if&lt；std：：是算术&lt_Tp&gt；：：值&gt；：：类型&gt；"
  },
  {
    "origin": "cv::Mat::Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "list",
    "local": "列表"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "explicit",
    "local": "明确的"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "Mat()",
    "local": "材料（）"
  },
  {
    "origin": "[21/29]",
    "local": "[21/29]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "cv::Mat::Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "sizes",
    "local": "尺寸"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "list",
    "local": "列表"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "explicit",
    "local": "明确的"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "Mat()",
    "local": "材料（）"
  },
  {
    "origin": "[22/29]",
    "local": "[22/29]"
  },
  {
    "origin": "template&lt;typename _Tp , size_t _Nm&gt;",
    "local": "模板&lt；类型名称\\u Tp，大小\\u t\\u Nm&gt；"
  },
  {
    "origin": "cv::Mat::Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "arr",
    "local": "阿里尔"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "copyData",
    "local": "复制数据"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "explicit",
    "local": "明确的"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "Mat()",
    "local": "材料（）"
  },
  {
    "origin": "[23/29]",
    "local": "[23/29]"
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": "模板&lt；类型名称&u Tp，int n&gt；"
  },
  {
    "origin": "cv::Mat::Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "vec",
    "local": "向量"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "copyData",
    "local": "复制数据"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "explicit",
    "local": "明确的"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "Mat()",
    "local": "材料（）"
  },
  {
    "origin": "[24/29]",
    "local": "[24/29]"
  },
  {
    "origin": "template&lt;typename _Tp , int m, int n&gt;",
    "local": "模板&lt；typename\\u Tp，int m，int n&gt；"
  },
  {
    "origin": "cv::Mat::Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "mtx",
    "local": "mtx公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "copyData",
    "local": "复制数据"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "explicit",
    "local": "明确的"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "Mat()",
    "local": "材料（）"
  },
  {
    "origin": "[25/29]",
    "local": "[25/29]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "cv::Mat::Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "pt",
    "local": "pt公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "copyData",
    "local": "复制数据"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "explicit",
    "local": "明确的"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "Mat()",
    "local": "材料（）"
  },
  {
    "origin": "[26/29]",
    "local": "[26/29]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "cv::Mat::Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "pt",
    "local": "pt公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "copyData",
    "local": "复制数据"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "explicit",
    "local": "明确的"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "Mat()",
    "local": "材料（）"
  },
  {
    "origin": "[27/29]",
    "local": "[27/29]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "cv::Mat::Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "commaInitializer",
    "local": "Commainitializer"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "explicit",
    "local": "明确的"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "Mat()",
    "local": "材料（）"
  },
  {
    "origin": "[28/29]",
    "local": "[28/29]"
  },
  {
    "origin": "cv::Mat::Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "explicit",
    "local": "明确的"
  },
  {
    "origin": "download data from GpuMat",
    "local": "从GpuMat下载数据"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "~Mat()",
    "local": "~Mat（）"
  },
  {
    "origin": "cv::Mat::~Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "destructor - calls",
    "local": "析构函数-调用"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "Mat()",
    "local": "材料（）"
  },
  {
    "origin": "[29/29]",
    "local": "[29/29]"
  },
  {
    "origin": "cv::Mat::Mat",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Member Function Documentation",
    "local": "成员功能文档"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "addref()",
    "local": "addref（）"
  },
  {
    "origin": "void cv::Mat::addref",
    "local": "无效cv:：Mat:：addref"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Increments the reference counter.",
    "local": "递增参考计数器。"
  },
  {
    "origin": "The method increments the reference counter associated with the matrix data. If the matrix header points to an external data set (see",
    "local": "该方法增加与矩阵数据相关联的参考计数器。如果矩阵头指向外部数据集（请参阅"
  },
  {
    "origin": "), the reference counter is NULL, and the method has no effect in this case. Normally, to avoid memory leaks, the method should not be called explicitly. It is called implicitly by the matrix assignment operator. The reference counter increment is an atomic operation on the platforms that support it. Thus, it is safe to operate on the same matrices asynchronously in different threads.",
    "local": ")，引用计数器为空，并且该方法在这种情况下无效。通常，为避免内存泄漏，不应显式调用该方法。它由矩阵赋值运算符隐式调用。参考计数器增量是支持它的平台上的原子操作。因此，在不同的线程中异步操作相同的矩阵是安全的。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "adjustROI()",
    "local": "调整投资回报率（）"
  },
  {
    "origin": "&amp; cv::Mat::adjustROI",
    "local": "&amp；简历：：材料：：调整投资回报率"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "dtop",
    "local": "dtop公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dbottom",
    "local": "底部"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dleft",
    "local": "德勒夫特"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dright",
    "local": "直接"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Adjusts a submatrix size and position within the parent matrix.",
    "local": "在父矩阵中调整子矩阵的大小和位置。"
  },
  {
    "origin": "The method is complimentary to",
    "local": "该方法是对"
  },
  {
    "origin": ". The typical use of these functions is to determine the submatrix position within the parent matrix and then shift the position somehow. Typically, it can be required for filtering operations when pixels outside of the ROI should be taken into account. When all the method parameters are positive, the ROI needs to grow in all directions by the specified amount, for example:",
    "local": ". 这些函数的典型用法是确定子矩阵在父矩阵中的位置，然后以某种方式移动位置。通常，当应该考虑ROI之外的像素时，过滤操作可能需要它。当所有方法参数都为正时，ROI需要在各个方向上以指定的数量增长，例如："
  },
  {
    "origin": "In this example, the matrix size is increased by 4 elements in each direction. The matrix is shifted by 2 elements to the left and 2 elements up, which brings in all the necessary pixels for the filtering with the 5x5 kernel.",
    "local": "在本例中，矩阵大小在每个方向上增加4个元素。矩阵向左移动2个元素，向上移动2个元素，这就为5x5内核的过滤带来了所有必要的像素。"
  },
  {
    "origin": "adjustROI forces the adjusted ROI to be inside of the parent matrix that is boundaries of the adjusted ROI are constrained by boundaries of the parent matrix. For example, if the submatrix A is located in the first row of a parent matrix and you called A.adjustROI(2, 2, 2, 2) then A will not be increased in the upward direction.",
    "local": "adjustROI强制调整后的ROI位于父矩阵内部，即调整后的ROI的边界受父矩阵的边界约束。例如，如果子矩阵A位于父矩阵的第一行，并且您调用了A.adjustROI（2，2，2，2），那么A将不会向上增加。"
  },
  {
    "origin": "The function is used internally by the OpenCV filtering functions, like filter2D , morphological operations, and so on.",
    "local": "该函数由OpenCV过滤函数内部使用，如filter2D、形态学操作等。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "dtop",
    "local": "dtop公司"
  },
  {
    "origin": "Shift of the top submatrix boundary upwards.",
    "local": "顶部子矩阵边界向上移动。"
  },
  {
    "origin": "dbottom",
    "local": "底部"
  },
  {
    "origin": "Shift of the bottom submatrix boundary downwards.",
    "local": "底部子矩阵边界向下移动。"
  },
  {
    "origin": "dleft",
    "local": "德勒夫特"
  },
  {
    "origin": "Shift of the left submatrix boundary to the left.",
    "local": "左子矩阵边界向左移动。"
  },
  {
    "origin": "dright",
    "local": "直接"
  },
  {
    "origin": "Shift of the right submatrix boundary to the right.",
    "local": "右子矩阵边界向右移动。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "assignTo()",
    "local": "分配到（）"
  },
  {
    "origin": "void cv::Mat::assignTo",
    "local": "无效cv:：Mat:：assignTo"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Provides a functional form of convertTo.",
    "local": "提供convertTo的函数形式。"
  },
  {
    "origin": "This is an internally used method called by the",
    "local": "这是由调用的内部使用的方法"
  },
  {
    "origin": "engine.",
    "local": "引擎。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": "Destination array.",
    "local": "目标阵列。"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": "Desired destination array depth (or -1 if it should be the same as the source type).",
    "local": "所需的目标数组深度（如果与源类型相同，则为-1）。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "at()",
    "local": "在（）"
  },
  {
    "origin": "[1/12]",
    "local": "[1/12]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "_Tp&amp; cv::Mat::at",
    "local": "_Tp和；cv：：材料：：在"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "i0",
    "local": "十"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Returns a reference to the specified array element.",
    "local": "返回对指定数组元素的引用。"
  },
  {
    "origin": "The template methods return a reference to the specified array element. For the sake of higher performance, the index range checks are only performed in the Debug configuration.",
    "local": "模板方法返回对指定数组元素的引用。为了提高性能，索引范围检查仅在调试配置中执行。"
  },
  {
    "origin": "Note that the variants with a single index (i) can be used to access elements of single-row or single-column 2-dimensional arrays. That is, if, for example, A is a 1 x N floating-point matrix and B is an M x 1 integer matrix, you can simply write",
    "local": "请注意，具有单个索引（i）的变体可用于访问单行或单列二维数组的元素。也就是说，例如，如果A是1xn浮点矩阵，而B是mx1整数矩阵，则可以简单地编写"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": "instead of",
    "local": "而不是"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": ", respectively.",
    "local": "分别是。"
  },
  {
    "origin": "The example below initializes a Hilbert matrix:",
    "local": "下面的示例初始化希尔伯特矩阵："
  },
  {
    "origin": "Keep in mind that the size identifier used in the at operator cannot be chosen at random. It depends on the image from which you are trying to retrieve the data. The table below gives a better insight in this:",
    "local": "请记住，at运算符中使用的大小标识符不能随机选择。这取决于您试图从中检索数据的图像。下表给出了这方面更好的见解："
  },
  {
    "origin": "If matrix is of type",
    "local": "如果矩阵是"
  },
  {
    "origin": "then use",
    "local": "然后使用"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "If matrix is of type",
    "local": "如果矩阵是"
  },
  {
    "origin": "then use",
    "local": "然后使用"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "If matrix is of type",
    "local": "如果矩阵是"
  },
  {
    "origin": "then use",
    "local": "然后使用"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "If matrix is of type",
    "local": "如果矩阵是"
  },
  {
    "origin": "then use",
    "local": "然后使用"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "If matrix is of type",
    "local": "如果矩阵是"
  },
  {
    "origin": "then use",
    "local": "然后使用"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "If matrix is of type",
    "local": "如果矩阵是"
  },
  {
    "origin": "then use",
    "local": "然后使用"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "If matrix is of type",
    "local": "如果矩阵是"
  },
  {
    "origin": "then use",
    "local": "然后使用"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "i0",
    "local": "十"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "at()",
    "local": "在（）"
  },
  {
    "origin": "[2/12]",
    "local": "[2/12]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "const _Tp&amp; cv::Mat::at",
    "local": "施工图；cv：：材料：：在"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "i0",
    "local": "十"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "i0",
    "local": "十"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "at()",
    "local": "在（）"
  },
  {
    "origin": "[3/12]",
    "local": "[3/12]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "_Tp&amp; cv::Mat::at",
    "local": "_Tp和；cv：：材料：：在"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "row",
    "local": "行"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "col",
    "local": "列"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "row",
    "local": "行"
  },
  {
    "origin": "col",
    "local": "列"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "at()",
    "local": "在（）"
  },
  {
    "origin": "[4/12]",
    "local": "[4/12]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "const _Tp&amp; cv::Mat::at",
    "local": "施工图；cv：：材料：：在"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "row",
    "local": "行"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "col",
    "local": "列"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "row",
    "local": "行"
  },
  {
    "origin": "col",
    "local": "列"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "at()",
    "local": "在（）"
  },
  {
    "origin": "[5/12]",
    "local": "[5/12]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "_Tp&amp; cv::Mat::at",
    "local": "_Tp和；cv：：材料：：在"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "i0",
    "local": "十"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "i1",
    "local": "一"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "i2",
    "local": "十二"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "i0",
    "local": "十"
  },
  {
    "origin": "i1",
    "local": "一"
  },
  {
    "origin": "i2",
    "local": "十二"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "at()",
    "local": "在（）"
  },
  {
    "origin": "[6/12]",
    "local": "[6/12]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "const _Tp&amp; cv::Mat::at",
    "local": "施工图；cv：：材料：：在"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "i0",
    "local": "十"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "i1",
    "local": "一"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "i2",
    "local": "十二"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "i0",
    "local": "十"
  },
  {
    "origin": "i1",
    "local": "一"
  },
  {
    "origin": "i2",
    "local": "十二"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "at()",
    "local": "在（）"
  },
  {
    "origin": "[7/12]",
    "local": "[7/12]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "_Tp&amp; cv::Mat::at",
    "local": "_Tp和；cv：：材料：：在"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "idx",
    "local": "idx公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "idx",
    "local": "idx公司"
  },
  {
    "origin": "Array of",
    "local": "数组"
  },
  {
    "origin": "indices.",
    "local": "指数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "at()",
    "local": "在（）"
  },
  {
    "origin": "[8/12]",
    "local": "[8/12]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "const _Tp&amp; cv::Mat::at",
    "local": "施工图；cv：：材料：：在"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "idx",
    "local": "idx公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "idx",
    "local": "idx公司"
  },
  {
    "origin": "Array of",
    "local": "数组"
  },
  {
    "origin": "indices.",
    "local": "指数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "at()",
    "local": "在（）"
  },
  {
    "origin": "[9/12]",
    "local": "[9/12]"
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": "模板&lt；类型名称&u Tp，int n&gt；"
  },
  {
    "origin": "_Tp&amp; cv::Mat::at",
    "local": "_Tp和；cv：：材料：：在"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "idx",
    "local": "idx公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "at()",
    "local": "在（）"
  },
  {
    "origin": "[10/12]",
    "local": "[10/12]"
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": "模板&lt；类型名称&u Tp，int n&gt；"
  },
  {
    "origin": "const _Tp&amp; cv::Mat::at",
    "local": "施工图；cv：：材料：：在"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "idx",
    "local": "idx公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "at()",
    "local": "在（）"
  },
  {
    "origin": "[11/12]",
    "local": "[11/12]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "_Tp&amp; cv::Mat::at",
    "local": "_Tp和；cv：：材料：：在"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "pt",
    "local": "pt公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. special versions for 2D arrays (especially convenient for referencing image pixels)",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。2D阵列的特殊版本（特别便于参考图像像素）"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "pt",
    "local": "pt公司"
  },
  {
    "origin": "Element position specified as Point(j,i) .",
    "local": "指定为点（j，i）的元件位置。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "at()",
    "local": "在（）"
  },
  {
    "origin": "[12/12]",
    "local": "[12/12]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "const _Tp&amp; cv::Mat::at",
    "local": "施工图；cv：：材料：：在"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "pt",
    "local": "pt公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. special versions for 2D arrays (especially convenient for referencing image pixels)",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。2D阵列的特殊版本（特别便于参考图像像素）"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "pt",
    "local": "pt公司"
  },
  {
    "origin": "Element position specified as Point(j,i) .",
    "local": "指定为点（j，i）的元件位置。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "begin()",
    "local": "开始（）"
  },
  {
    "origin": "[1/2]",
    "local": "[1/2]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "&lt;_Tp&gt; cv::Mat::begin",
    "local": "&lt_Tp&gt；简历：：材料：：开始"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Returns the matrix iterator and sets it to the first matrix element.",
    "local": "返回矩阵迭代器并将其设置为第一个矩阵元素。"
  },
  {
    "origin": "The methods return the matrix read-only or read-write iterators. The use of matrix iterators is very similar to the use of bi-directional STL iterators. In the example below, the alpha blending function is rewritten using the matrix iterators:",
    "local": "这些方法返回矩阵只读或读写迭代器。矩阵迭代器的使用与双向STL迭代器的使用非常相似。在下面的示例中，使用矩阵迭代器重写alpha混合函数："
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "begin()",
    "local": "开始（）"
  },
  {
    "origin": "[2/2]",
    "local": "[2/2]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "&lt;_Tp&gt; cv::Mat::begin",
    "local": "&lt_Tp&gt；简历：：材料：：开始"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "channels()",
    "local": "频道（）"
  },
  {
    "origin": "int cv::Mat::channels",
    "local": "int cv：：Mat：：通道"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Returns the number of matrix channels.",
    "local": "返回矩阵通道数。"
  },
  {
    "origin": "The method returns the number of matrix channels.",
    "local": "该方法返回矩阵通道数。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "checkVector()",
    "local": "checkVector（）"
  },
  {
    "origin": "int cv::Mat::checkVector",
    "local": "int cv:：Mat:：checkVector"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "elemChannels",
    "local": "电子通道"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "depth",
    "local": "深度"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "requireContinuous",
    "local": "要求连续"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "elemChannels",
    "local": "电子通道"
  },
  {
    "origin": "Number of channels or number of columns the matrix should have. For a 2-D matrix, when the matrix has only 1 column, then it should have elemChannels channels; When the matrix has only 1 channel, then it should have elemChannels columns. For a 3-D matrix, it should have only one channel. Furthermore, if the number of planes is not one, then the number of rows within every plane has to be 1; if the number of rows within every plane is not 1, then the number of planes has to be 1.",
    "local": "矩阵应具有的通道数或列数。对于一个二维矩阵，当矩阵只有一列时，它应该有电子通道；当矩阵只有一个通道时，它应该有elemChannels列。对于三维矩阵，它应该只有一个通道。此外，如果平面的数目不是一，那么每个平面内的行的数目必须是1；如果每个平面内的行数不是1，则平面数必须是1。"
  },
  {
    "origin": "depth",
    "local": "深度"
  },
  {
    "origin": "The depth the matrix should have. Set it to -1 when any depth is fine.",
    "local": "矩阵应有的深度。当任何深度都很好时，将其设置为-1。"
  },
  {
    "origin": "requireContinuous",
    "local": "要求连续"
  },
  {
    "origin": "Set it to true to require the matrix to be continuous",
    "local": "将其设置为true以要求矩阵是连续的"
  },
  {
    "origin": "Returns",
    "local": "退换商品"
  },
  {
    "origin": "-1 if the requirement is not satisfied. Otherwise, it returns the number of elements in the matrix. Note that an element may have multiple channels.",
    "local": "-1如果不满足要求。否则，它将返回矩阵中的元素数。请注意，一个元素可能有多个通道。"
  },
  {
    "origin": "The following code demonstrates its usage for a 2-d matrix:",
    "local": "下面的代码演示了它在二维矩阵中的用法："
  },
  {
    "origin": "The following code demonstrates its usage for a 3-d matrix:",
    "local": "下面的代码演示了它在三维矩阵中的用法："
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "clone()",
    "local": "克隆（）"
  },
  {
    "origin": "cv::Mat::clone",
    "local": "简历：：材料：：克隆"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Creates a full copy of the array and the underlying data.",
    "local": "创建数组和基础数据的完整副本。"
  },
  {
    "origin": "The method creates a full copy of the array. The original step[] is not taken into account. So, the array copy is a continuous array occupying",
    "local": "该方法创建数组的完整副本。不考虑原始步骤[]。因此，数组副本是一个连续的数组"
  },
  {
    "origin": "*elemSize() bytes.",
    "local": "*分析大小字节。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "col()",
    "local": "列（）"
  },
  {
    "origin": "cv::Mat::col",
    "local": "cv：：材料：：柱"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "x",
    "local": "十"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Creates a matrix header for the specified matrix column.",
    "local": "为指定的矩阵列创建矩阵标题。"
  },
  {
    "origin": "The method makes a new header for the specified matrix column and returns it. This is an O(1) operation, regardless of the matrix size. The underlying data of the new matrix is shared with the original matrix. See also the",
    "local": "该方法为指定的矩阵列生成一个新的头并返回它。这是一个O（1）运算，与矩阵大小无关。新矩阵的底层数据与原始矩阵共享。另请参见"
  },
  {
    "origin": "description.",
    "local": "描述。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "x",
    "local": "十"
  },
  {
    "origin": "A 0-based column index.",
    "local": "基于0的列索引。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "colRange()",
    "local": "列范围（）"
  },
  {
    "origin": "[1/2]",
    "local": "[1/2]"
  },
  {
    "origin": "cv::Mat::colRange",
    "local": "cv：：Mat：：colRange公司"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "startcol",
    "local": "startcol公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "endcol",
    "local": "端柱"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Creates a matrix header for the specified column span.",
    "local": "为指定的列范围创建矩阵标题。"
  },
  {
    "origin": "The method makes a new header for the specified column span of the matrix. Similarly to",
    "local": "该方法为矩阵的指定列范围生成一个新标题。类似于"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": ", this is an O(1) operation.",
    "local": "，这是一个O（1）操作。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "startcol",
    "local": "startcol公司"
  },
  {
    "origin": "An inclusive 0-based start index of the column span.",
    "local": "列范围的从0开始的包含索引。"
  },
  {
    "origin": "endcol",
    "local": "端柱"
  },
  {
    "origin": "An exclusive 0-based ending index of the column span.",
    "local": "列跨度的基于0的独占结束索引。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "colRange()",
    "local": "列范围（）"
  },
  {
    "origin": "[2/2]",
    "local": "[2/2]"
  },
  {
    "origin": "cv::Mat::colRange",
    "local": "cv：：Mat：：colRange公司"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "r",
    "local": "r"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "r",
    "local": "r"
  },
  {
    "origin": "structure containing both the start and the end indices.",
    "local": "包含开始索引和结束索引的结构。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "convertTo()",
    "local": "转换到"
  },
  {
    "origin": "void cv::Mat::convertTo",
    "local": "无效cv:：Mat:：convertTo"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "rtype",
    "local": "R型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "alpha",
    "local": "阿尔法"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "beta",
    "local": "贝塔"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Converts an array to another data type with optional scaling.",
    "local": "将数组转换为具有可选缩放比例的其他数据类型。"
  },
  {
    "origin": "The method converts source pixel values to the target data type. saturate_cast&lt;&gt; is applied at the end to avoid possible overflows:",
    "local": "该方法将源像素值转换为目标数据类型。饱和\\u-cast&lt&燃气轮机；在末端应用，以避免可能的溢出："
  },
  {
    "origin": "\\[m(x,y) = saturate \\_ cast&lt;rType&gt;( \\alpha (*this)(x,y) + \\beta )\\]",
    "local": "\\[m（x，y）=饱和；rType&gt；（\\α（*这个）（x，y）+\\beta）\\]"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": "output matrix; if it does not have a proper size or type before the operation, it is reallocated.",
    "local": "输出矩阵；如果在操作之前没有合适的大小或类型，则会重新分配。"
  },
  {
    "origin": "rtype",
    "local": "R型"
  },
  {
    "origin": "desired output matrix type or, rather, the depth since the number of channels are the same as the input has; if rtype is negative, the output matrix will have the same type as the input.",
    "local": "期望的输出矩阵类型，或者更确切地说，由于信道的数目与输入的数目相同，因此深度；如果rtype为负，则输出矩阵的类型与输入矩阵的类型相同。"
  },
  {
    "origin": "alpha",
    "local": "阿尔法"
  },
  {
    "origin": "optional scale factor.",
    "local": "可选比例因子。"
  },
  {
    "origin": "beta",
    "local": "贝塔"
  },
  {
    "origin": "optional delta added to the scaled values.",
    "local": "添加到缩放值的可选增量。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "copySize()",
    "local": "copySize（）"
  },
  {
    "origin": "void cv::Mat::copySize",
    "local": "void cv:：Mat:：copySize无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "internal use function; properly re-allocates _size, _step arrays",
    "local": "内部使用功能；正确地重新分配\\u大小、\\u步进数组"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "copyTo()",
    "local": "复制到（）"
  },
  {
    "origin": "[1/2]",
    "local": "[1/2]"
  },
  {
    "origin": "void cv::Mat::copyTo",
    "local": "无效cv:：Mat:：copyTo"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Copies the matrix to another one.",
    "local": "将矩阵复制到另一个矩阵。"
  },
  {
    "origin": "The method copies the matrix data to another matrix. Before copying the data, the method invokes :",
    "local": "该方法将矩阵数据复制到另一个矩阵。在复制数据之前，该方法调用："
  },
  {
    "origin": "so that the destination matrix is reallocated if needed. While m.copyTo(m); works flawlessly, the function does not handle the case of a partial overlap between the source and the destination matrices.",
    "local": "以便在需要时重新分配目标矩阵。而m.copyTo（m）；工作完美，该函数不处理源和目标矩阵之间部分重叠的情况。"
  },
  {
    "origin": "When the operation mask is specified, if the",
    "local": "指定操作掩码时，如果"
  },
  {
    "origin": "call shown above reallocates the matrix, the newly allocated matrix is initialized with all zeros before copying the data.",
    "local": "上面显示的调用重新分配矩阵，新分配的矩阵在复制数据之前用全零初始化。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": "Destination matrix. If it does not have a proper size or type before the operation, it is reallocated.",
    "local": "目标矩阵。如果在操作之前没有合适的大小或类型，则会重新分配。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "copyTo()",
    "local": "复制到（）"
  },
  {
    "origin": "[2/2]",
    "local": "[2/2]"
  },
  {
    "origin": "void cv::Mat::copyTo",
    "local": "无效cv:：Mat:：copyTo"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": "Destination matrix. If it does not have a proper size or type before the operation, it is reallocated.",
    "local": "目标矩阵。如果在操作之前没有合适的大小或类型，则会重新分配。"
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "Operation mask of the same size as *this. Its non-zero elements indicate which matrix elements need to be copied. The mask has to be of type CV_8U and can have 1 or multiple channels.",
    "local": "与此相同大小的操作掩码。它的非零元素表示需要复制哪些矩阵元素。掩模必须为CVƅ8U型，并且可以有1个或多个通道。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "create()",
    "local": "创建（）"
  },
  {
    "origin": "[1/4]",
    "local": "[1/4]"
  },
  {
    "origin": "void cv::Mat::create",
    "local": "void cv：：Mat：：创建"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "rows",
    "local": "排"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "cols",
    "local": "胶水"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Allocates new array data if needed.",
    "local": "如果需要，分配新的数组数据。"
  },
  {
    "origin": "This is one of the key",
    "local": "这是关键之一"
  },
  {
    "origin": "methods. Most new-style OpenCV functions and methods that produce arrays call this method for each output array. The method uses the following algorithm:",
    "local": "方法。大多数产生数组的新型OpenCV函数和方法对每个输出数组都调用此方法。该方法使用以下算法："
  },
  {
    "origin": "If the current array shape and the type match the new ones, return immediately. Otherwise, de-reference the previous data by calling",
    "local": "如果当前数组形状和类型与新的匹配，请立即返回。否则，通过调用"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Initialize the new header.",
    "local": "初始化新标头。"
  },
  {
    "origin": "Allocate the new data of",
    "local": "分配的新数据"
  },
  {
    "origin": "*elemSize() bytes.",
    "local": "*分析大小字节。"
  },
  {
    "origin": "Such a scheme makes the memory management robust and efficient at the same time and helps avoid extra typing for you. This means that usually there is no need to explicitly allocate output arrays. That is, instead of writing:",
    "local": "这样一个方案使内存管理同时健壮高效，并有助于避免额外的输入。这意味着通常不需要显式分配输出数组。也就是说，不要写："
  },
  {
    "origin": "you can simply write:",
    "local": "你可以简单地写下："
  },
  {
    "origin": "because cvtColor, as well as the most of OpenCV functions, calls",
    "local": "因为cvtColor以及大多数OpenCV函数"
  },
  {
    "origin": "for the output array internally.",
    "local": "用于内部输出数组。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "rows",
    "local": "排"
  },
  {
    "origin": "New number of rows.",
    "local": "新的行数。"
  },
  {
    "origin": "cols",
    "local": "胶水"
  },
  {
    "origin": "New number of columns.",
    "local": "新列数。"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": "New matrix type.",
    "local": "新矩阵类型。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "create()",
    "local": "创建（）"
  },
  {
    "origin": "[2/4]",
    "local": "[2/4]"
  },
  {
    "origin": "void cv::Mat::create",
    "local": "void cv：：Mat：：创建"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "size",
    "local": "大小"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "size",
    "local": "大小"
  },
  {
    "origin": "Alternative new matrix size specification: Size(cols, rows)",
    "local": "替代新矩阵大小规范：大小（列、行）"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": "New matrix type.",
    "local": "新矩阵类型。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "create()",
    "local": "创建（）"
  },
  {
    "origin": "[3/4]",
    "local": "[3/4]"
  },
  {
    "origin": "void cv::Mat::create",
    "local": "void cv：：Mat：：创建"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "ndims",
    "local": "数组的维数"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "sizes",
    "local": "尺寸"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "ndims",
    "local": "数组的维数"
  },
  {
    "origin": "New array dimensionality.",
    "local": "新的数组维数。"
  },
  {
    "origin": "sizes",
    "local": "尺寸"
  },
  {
    "origin": "Array of integers specifying a new array shape.",
    "local": "指定新数组形状的整数数组。"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": "New matrix type.",
    "local": "新矩阵类型。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "create()",
    "local": "创建（）"
  },
  {
    "origin": "[4/4]",
    "local": "[4/4]"
  },
  {
    "origin": "void cv::Mat::create",
    "local": "void cv：：Mat：：创建"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "sizes",
    "local": "尺寸"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "sizes",
    "local": "尺寸"
  },
  {
    "origin": "Array of integers specifying a new array shape.",
    "local": "指定新数组形状的整数数组。"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": "New matrix type.",
    "local": "新矩阵类型。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "cross()",
    "local": "交叉（）"
  },
  {
    "origin": "cv::Mat::cross",
    "local": "cv：：材料：：交叉"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Computes a cross-product of two 3-element vectors.",
    "local": "计算两个三元素向量的叉积。"
  },
  {
    "origin": "The method computes a cross-product of two 3-element vectors. The vectors must be 3-element floating-point vectors of the same shape and size. The result is another 3-element vector of the same shape and type as operands.",
    "local": "该方法计算两个三元向量的叉积。向量必须是具有相同形状和大小的三元素浮点向量。结果是另一个与操作数形状和类型相同的3元素向量。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": "Another cross-product operand.",
    "local": "另一个叉积操作数。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "deallocate()",
    "local": "取消分配（）"
  },
  {
    "origin": "void cv::Mat::deallocate",
    "local": "void cv:：Mat:：释放"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "internal use function, consider to use 'release' method instead; deallocates the matrix data",
    "local": "内部使用功能，考虑改用“释放”方法；取消分配矩阵数据"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "depth()",
    "local": "深度（）"
  },
  {
    "origin": "int cv::Mat::depth",
    "local": "int cv：：Mat：：深度"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Returns the depth of a matrix element.",
    "local": "返回矩阵元素的深度。"
  },
  {
    "origin": "The method returns the identifier of the matrix element depth (the type of each individual channel). For example, for a 16-bit signed element array, the method returns CV_16S . A complete list of matrix types contains the following values:",
    "local": "该方法返回矩阵元素深度的标识符（每个通道的类型）。例如，对于16位有符号元素数组，该方法返回CVØ16S。矩阵类型的完整列表包含以下值："
  },
  {
    "origin": "CV_8U - 8-bit unsigned integers ( 0..255 )",
    "local": "cv8u-8位无符号整数（0..255）"
  },
  {
    "origin": "CV_8S - 8-bit signed integers ( -128..127 )",
    "local": "cv8s-8位有符号整数（-128..127）"
  },
  {
    "origin": "CV_16U - 16-bit unsigned integers ( 0..65535 )",
    "local": "cv16u-16位无符号整数（0..65535）"
  },
  {
    "origin": "CV_16S - 16-bit signed integers ( -32768..32767 )",
    "local": "cv16s-16位有符号整数（-32768..32767）"
  },
  {
    "origin": "CV_32S - 32-bit signed integers ( -2147483648..2147483647 )",
    "local": "cv32s-32位有符号整数（-2147483648..2147483647）"
  },
  {
    "origin": "CV_32F - 32-bit floating-point numbers ( -FLT_MAX..FLT_MAX, INF, NAN )",
    "local": "CV_32F-32位浮点数（-FLT_MAX..FLT_MAX，INF，NAN）"
  },
  {
    "origin": "CV_64F - 64-bit floating-point numbers ( -DBL_MAX..DBL_MAX, INF, NAN )",
    "local": "CV_64F—64位浮点数（-DBL_MAX..DBL_MAX，INF，NAN）"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "diag()",
    "local": "诊断（）"
  },
  {
    "origin": "[1/2]",
    "local": "[1/2]"
  },
  {
    "origin": "cv::Mat::diag",
    "local": "cv：：材料：：诊断"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "d",
    "local": "d"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Extracts a diagonal from a matrix.",
    "local": "从矩阵中提取对角线。"
  },
  {
    "origin": "The method makes a new header for the specified matrix diagonal. The new matrix is represented as a single-column matrix. Similarly to",
    "local": "该方法为指定的矩阵对角线生成一个新的头。新矩阵表示为单列矩阵。类似于"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": ", this is an O(1) operation.",
    "local": "，这是一个O（1）操作。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "d",
    "local": "d"
  },
  {
    "origin": "index of the diagonal, with the following values:",
    "local": "对角线的索引，具有以下值："
  },
  {
    "origin": "is the main diagonal.",
    "local": "是主对角线。"
  },
  {
    "origin": "is a diagonal from the lower half. For example, d=-1 means the diagonal is set immediately below the main one.",
    "local": "是下半部分的对角线。例如，d=-1表示对角线设置在主对角线的正下方。"
  },
  {
    "origin": "is a diagonal from the upper half. For example, d=1 means the diagonal is set immediately above the main one. For example:",
    "local": "是上半部分的对角线。例如，d=1表示对角线设置在主对角线的正上方。例如："
  },
  {
    "origin": "The resulting matrices are",
    "local": "得到的矩阵是"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "diag()",
    "local": "诊断（）"
  },
  {
    "origin": "[2/2]",
    "local": "[2/2]"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "cv::Mat::diag",
    "local": "cv：：材料：：诊断"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "d",
    "local": "d"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "creates a diagonal matrix",
    "local": "创建对角矩阵"
  },
  {
    "origin": "The method creates a square diagonal matrix from specified main diagonal.",
    "local": "该方法从指定的主对角线创建一个正方形对角线矩阵。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "d",
    "local": "d"
  },
  {
    "origin": "One-dimensional matrix that represents the main diagonal.",
    "local": "表示主对角线的一维矩阵。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "dot()",
    "local": "点（）"
  },
  {
    "origin": "double cv::Mat::dot",
    "local": "双cv：：Mat：：dot"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Computes a dot-product of two vectors.",
    "local": "计算两个向量的点积。"
  },
  {
    "origin": "The method computes a dot-product of two matrices. If the matrices are not single-column or single-row vectors, the top-to-bottom left-to-right scan ordering is used to treat them as 1D vectors. The vectors must have the same size and type. If the matrices have more than one channel, the dot products from all the channels are summed together.",
    "local": "该方法计算两个矩阵的点积。如果矩阵不是单列或单行向量，则使用从上到下从左到右的扫描顺序将其视为一维向量。向量的大小和类型必须相同。如果矩阵有多个通道，则所有通道的点积相加。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": "another dot-product operand.",
    "local": "另一个点积操作数。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "elemSize()",
    "local": "元素"
  },
  {
    "origin": "size_t cv::Mat::elemSize",
    "local": "大小\\u t cv:：Mat:：elemSize"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Returns the matrix element size in bytes.",
    "local": "返回以字节为单位的矩阵元素大小。"
  },
  {
    "origin": "The method returns the matrix element size in bytes. For example, if the matrix type is CV_16SC3 , the method returns 3*sizeof(short) or 6.",
    "local": "该方法返回以字节为单位的矩阵元素大小。例如，如果矩阵类型是cv16sc3，则该方法返回3*sizeof（short）或6。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "elemSize1()",
    "local": "元素大小1（）"
  },
  {
    "origin": "size_t cv::Mat::elemSize1",
    "local": "尺寸：cv：：Mat：：elemSize1"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Returns the size of each matrix element channel in bytes.",
    "local": "返回每个矩阵元素通道的大小（字节）。"
  },
  {
    "origin": "The method returns the matrix element channel size in bytes, that is, it ignores the number of channels. For example, if the matrix type is CV_16SC3 , the method returns sizeof(short) or 2.",
    "local": "该方法以字节为单位返回矩阵元素通道大小，即忽略通道数。例如，如果矩阵类型为cv16sc3，则该方法返回sizeof（short）或2。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "empty()",
    "local": "空（）"
  },
  {
    "origin": "bool cv::Mat::empty",
    "local": "bool cv：：Mat：：空"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Returns true if the array has no elements.",
    "local": "如果数组没有元素，则返回true。"
  },
  {
    "origin": "The method returns true if",
    "local": "如果"
  },
  {
    "origin": "is 0 or if",
    "local": "为0或如果"
  },
  {
    "origin": "is NULL. Because of",
    "local": "为空。因为"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": "methods",
    "local": "方法"
  },
  {
    "origin": "does not imply that",
    "local": "并不意味着"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "end()",
    "local": "结束（）"
  },
  {
    "origin": "[1/2]",
    "local": "[1/2]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "&lt;_Tp&gt; cv::Mat::end",
    "local": "&lt_Tp&gt；cv：：材料：：结束"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Returns the matrix iterator and sets it to the after-last matrix element.",
    "local": "返回矩阵迭代器并将其设置为后一个矩阵元素。"
  },
  {
    "origin": "The methods return the matrix read-only or read-write iterators, set to the point following the last matrix element.",
    "local": "这些方法返回矩阵只读或读写迭代器，设置为最后一个矩阵元素后面的点。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "end()",
    "local": "结束（）"
  },
  {
    "origin": "[2/2]",
    "local": "[2/2]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "&lt;_Tp&gt; cv::Mat::end",
    "local": "&lt_Tp&gt；cv：：材料：：结束"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "eye()",
    "local": "眼睛（）"
  },
  {
    "origin": "[1/2]",
    "local": "[1/2]"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "cv::Mat::eye",
    "local": "简历：：材料：：眼睛"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "rows",
    "local": "排"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "cols",
    "local": "胶水"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "Returns an identity matrix of the specified size and type.",
    "local": "返回指定大小和类型的标识矩阵。"
  },
  {
    "origin": "The method returns a Matlab-style identity matrix initializer, similarly to",
    "local": "该方法返回一个Matlab风格的单位矩阵初始值设定项，类似于"
  },
  {
    "origin": ". Similarly to",
    "local": ". 类似于"
  },
  {
    "origin": ", you can use a scale operation to create a scaled identity matrix efficiently:",
    "local": "，可以使用缩放操作高效地创建缩放的单位矩阵："
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "In case of multi-channels type, identity matrix will be initialized only for the first channel, the others will be set to 0's",
    "local": "如果是多通道类型，则仅对第一个通道初始化标识矩阵，其他通道将设置为0"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "rows",
    "local": "排"
  },
  {
    "origin": "Number of rows.",
    "local": "行数。"
  },
  {
    "origin": "cols",
    "local": "胶水"
  },
  {
    "origin": "Number of columns.",
    "local": "列数。"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": "Created matrix type.",
    "local": "已创建矩阵类型。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "eye()",
    "local": "眼睛（）"
  },
  {
    "origin": "[2/2]",
    "local": "[2/2]"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "cv::Mat::eye",
    "local": "简历：：材料：：眼睛"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "size",
    "local": "大小"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "size",
    "local": "大小"
  },
  {
    "origin": "Alternative matrix size specification as Size(cols, rows) .",
    "local": "作为尺寸的替代矩阵尺寸规格（列、行）。"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": "Created matrix type.",
    "local": "已创建矩阵类型。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "forEach()",
    "local": "forEach（）"
  },
  {
    "origin": "[1/2]",
    "local": "[1/2]"
  },
  {
    "origin": "template&lt;typename _Tp , typename Functor &gt;",
    "local": "模板&lt；typename&u Tp，typename Functor&gt；"
  },
  {
    "origin": "void cv::Mat::forEach",
    "local": "void cv:：Mat:：forEach无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "operation",
    "local": "操作"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Runs the given functor over all matrix elements in parallel.",
    "local": "在所有矩阵元素上并行运行给定的函子。"
  },
  {
    "origin": "The operation passed as argument has to be a function pointer, a function object or a lambda(C++11).",
    "local": "该操作通过参数必须是函数指针、函数对象或lambda（C++ 11）。"
  },
  {
    "origin": "Example 1. All of the operations below put 0xFF the first channel of all matrix elements:",
    "local": "例1.下面的所有操作都将0xFF作为所有矩阵元素的第一个通道："
  },
  {
    "origin": "Example 2. Using the pixel's position:",
    "local": "示例2.使用像素位置："
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "forEach()",
    "local": "forEach（）"
  },
  {
    "origin": "[2/2]",
    "local": "[2/2]"
  },
  {
    "origin": "template&lt;typename _Tp , typename Functor &gt;",
    "local": "模板&lt；typename&u Tp，typename Functor&gt；"
  },
  {
    "origin": "void cv::Mat::forEach",
    "local": "void cv:：Mat:：forEach无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "operation",
    "local": "操作"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "getDefaultAllocator()",
    "local": "getDefaultAllocator（）"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "* cv::Mat::getDefaultAllocator",
    "local": "*cv:：Mat:：getDefaultAllocator"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "getStdAllocator()",
    "local": "getStdAllocator（）"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "* cv::Mat::getStdAllocator",
    "local": "*cv:：Mat:：getStdAllocator"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "and the standard allocator",
    "local": "以及标准分配器"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "getUMat()",
    "local": "格图马特（）"
  },
  {
    "origin": "cv::Mat::getUMat",
    "local": "简历：：材料：：格图马特"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "accessFlags",
    "local": "访问标志"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "usageFlags",
    "local": "未使用"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "retrieve",
    "local": "检索"
  },
  {
    "origin": "from",
    "local": "从"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "inv()",
    "local": "发票（）"
  },
  {
    "origin": "cv::Mat::inv",
    "local": "简历：：材料：：发票"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "method",
    "local": "方法"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Inverses a matrix.",
    "local": "求矩阵的逆。"
  },
  {
    "origin": "The method performs a matrix inversion by means of matrix expressions. This means that a temporary matrix inversion object is returned by the method and can be used further as a part of more complex matrix expressions or can be assigned to a matrix.",
    "local": "该方法利用矩阵表达式进行矩阵求逆。这意味着该方法返回一个临时矩阵求逆对象，可以进一步用作更复杂的矩阵表达式的一部分，也可以将其赋给矩阵。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "method",
    "local": "方法"
  },
  {
    "origin": "Matrix inversion method. One of",
    "local": "矩阵反演法。什么之中的一个"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "isContinuous()",
    "local": "isContinuous（）"
  },
  {
    "origin": "bool cv::Mat::isContinuous",
    "local": "bool cv:：Mat:：is连续"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Reports whether the matrix is continuous or not.",
    "local": "报告矩阵是否连续。"
  },
  {
    "origin": "The method returns true if the matrix elements are stored continuously without gaps at the end of each row. Otherwise, it returns false. Obviously, 1x1 or 1xN matrices are always continuous. Matrices created with",
    "local": "如果矩阵元素连续存储，且每行末尾没有间隙，则该方法返回true。否则，返回false。显然，1x1或1xN矩阵总是连续的。使用创建的矩阵"
  },
  {
    "origin": "are always continuous. But if you extract a part of the matrix using",
    "local": "总是连续的。但是如果你用"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and so on, or constructed a matrix header for externally allocated data, such matrices may no longer have this property.",
    "local": "，依此类推，或为外部分配的数据构造一个矩阵头，这样的矩阵可能不再具有此属性。"
  },
  {
    "origin": "The continuity flag is stored as a bit in the",
    "local": "连续性标志以位的形式存储在"
  },
  {
    "origin": "field and is computed automatically when you construct a matrix header. Thus, the continuity check is a very fast operation, though theoretically it could be done as follows:",
    "local": "字段，并在构造矩阵头时自动计算。因此，连续性检查是一种非常快速的操作，尽管理论上可以按以下方式进行："
  },
  {
    "origin": "The method is used in quite a few of OpenCV functions. The point is that element-wise operations (such as arithmetic and logical operations, math functions, alpha blending, color space transformations, and others) do not depend on the image geometry. Thus, if all the input and output arrays are continuous, the functions can process them as very long single-row vectors. The example below illustrates how an alpha-blending function can be implemented:",
    "local": "该方法在许多OpenCV函数中都有应用。关键是元素操作（如算术和逻辑操作、数学函数、alpha混合、颜色空间变换等）不依赖于图像几何体。因此，如果所有的输入和输出数组都是连续的，则函数可以将它们作为很长的单行向量进行处理。下面的示例说明了如何实现alpha混合函数："
  },
  {
    "origin": "This approach, while being very simple, can boost the performance of a simple element-operation by 10-20 percents, especially if the image is rather small and the operation is quite simple.",
    "local": "这种方法虽然非常简单，但可以将简单元素操作的性能提高10-20%，特别是在图像非常小且操作非常简单的情况下。"
  },
  {
    "origin": "Another OpenCV idiom in this function, a call of",
    "local": "这个函数中的另一个OpenCV习惯用法，调用"
  },
  {
    "origin": "for the destination array, that allocates the destination array unless it already has the proper size and type. And while the newly allocated arrays are always continuous, you still need to check the destination array because",
    "local": "对于目标数组，它分配目标数组，除非它已经具有适当的大小和类型。虽然新分配的数组总是连续的，但是仍然需要检查目标数组，因为"
  },
  {
    "origin": "does not always allocate a new matrix.",
    "local": "并不总是分配新的矩阵。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "isSubmatrix()",
    "local": "isSubmatrix（）"
  },
  {
    "origin": "bool cv::Mat::isSubmatrix",
    "local": "布尔cv：：Mat：：isSubmatrix"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "returns true if the matrix is a submatrix of another matrix",
    "local": "如果矩阵是另一个矩阵的子矩阵，则返回true"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "locateROI()",
    "local": "地点（）"
  },
  {
    "origin": "void cv::Mat::locateROI",
    "local": "无效cv：：Mat：：locateROI"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "wholeSize",
    "local": "批发"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "ofs",
    "local": "属于"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Locates the matrix header within a parent matrix.",
    "local": "在父矩阵中查找矩阵头。"
  },
  {
    "origin": "After you extracted a submatrix from a matrix using",
    "local": "使用从矩阵中提取子矩阵之后"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and others, the resultant submatrix points just to the part of the original big matrix. However, each submatrix contains information (represented by datastart and dataend fields) that helps reconstruct the original matrix size and the position of the extracted submatrix within the original matrix. The method locateROI does exactly that.",
    "local": "，以及其他，生成的子矩阵只指向原始大矩阵的一部分。但是，每个子矩阵都包含信息（由datastart和dataend字段表示），这些信息有助于重建原始矩阵的大小和提取的子矩阵在原始矩阵中的位置。locateROI方法正是这样做的。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "wholeSize",
    "local": "批发"
  },
  {
    "origin": "Output parameter that contains the size of the whole matrix containing",
    "local": "包含整个矩阵大小的输出参数，该矩阵包含"
  },
  {
    "origin": "this",
    "local": "这"
  },
  {
    "origin": "as a part.",
    "local": "作为一部分。"
  },
  {
    "origin": "ofs",
    "local": "属于"
  },
  {
    "origin": "Output parameter that contains an offset of",
    "local": "包含偏移量的输出参数"
  },
  {
    "origin": "this",
    "local": "这"
  },
  {
    "origin": "inside the whole matrix.",
    "local": "在整个矩阵里面。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "mul()",
    "local": "我"
  },
  {
    "origin": "cv::Mat::mul",
    "local": "简历：：材料：：材料"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "scale",
    "local": "规模"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Performs an element-wise multiplication or division of the two matrices.",
    "local": "对两个矩阵执行按元素的乘法或除法。"
  },
  {
    "origin": "The method returns a temporary object encoding per-element array multiplication, with optional scale. Note that this is not a matrix multiplication that corresponds to a simpler \"\\*\" operator.",
    "local": "该方法返回一个临时对象，对每个元素数组乘法进行编码，比例可选。请注意，这不是对应于更简单的“\\*”运算符的矩阵乘法。"
  },
  {
    "origin": "Example:",
    "local": "例子："
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": "Another array of the same type and the same size as *this, or a matrix expression.",
    "local": "与*this或矩阵表达式具有相同类型和大小的另一个数组。"
  },
  {
    "origin": "scale",
    "local": "规模"
  },
  {
    "origin": "Optional scale factor.",
    "local": "可选比例因子。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "ones()",
    "local": "个（）"
  },
  {
    "origin": "[1/3]",
    "local": "[1/3]"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "cv::Mat::ones",
    "local": "简历：：材料：：个"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "rows",
    "local": "排"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "cols",
    "local": "胶水"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "Returns an array of all 1's of the specified size and type.",
    "local": "返回指定大小和类型的所有1的数组。"
  },
  {
    "origin": "The method returns a Matlab-style 1's array initializer, similarly to",
    "local": "该方法返回MatlabStyle1的数组初始值设定项，类似于"
  },
  {
    "origin": ". Note that using this method you can initialize an array with an arbitrary value, using the following Matlab idiom:",
    "local": ". 请注意，使用此方法可以使用以下Matlab习惯用法初始化具有任意值的数组："
  },
  {
    "origin": "The above operation does not form a 100x100 matrix of 1's and then multiply it by 3. Instead, it just remembers the scale factor (3 in this case) and use it when actually invoking the matrix initializer.",
    "local": "上面的操作不会形成一个1的100x100矩阵，然后将其乘以3。相反，它只记住比例因子（在本例中为3），并在实际调用矩阵初始值设定项时使用它。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "In case of multi-channels type, only the first channel will be initialized with 1's, the others will be set to 0's.",
    "local": "如果是多通道类型，只有第一个通道将被初始化为1，其他通道将被设置为0。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "rows",
    "local": "排"
  },
  {
    "origin": "Number of rows.",
    "local": "行数。"
  },
  {
    "origin": "cols",
    "local": "胶水"
  },
  {
    "origin": "Number of columns.",
    "local": "列数。"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": "Created matrix type.",
    "local": "已创建矩阵类型。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "ones()",
    "local": "个（）"
  },
  {
    "origin": "[2/3]",
    "local": "[2/3]"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "cv::Mat::ones",
    "local": "简历：：材料：：个"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "size",
    "local": "大小"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "size",
    "local": "大小"
  },
  {
    "origin": "Alternative to the matrix size specification Size(cols, rows) .",
    "local": "矩阵大小规范大小的替代方法（列、行）。"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": "Created matrix type.",
    "local": "已创建矩阵类型。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "ones()",
    "local": "个（）"
  },
  {
    "origin": "[3/3]",
    "local": "[3/3]"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "cv::Mat::ones",
    "local": "简历：：材料：：个"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "ndims",
    "local": "数组的维数"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "sz",
    "local": "深圳"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "ndims",
    "local": "数组的维数"
  },
  {
    "origin": "Array dimensionality.",
    "local": "数组维数。"
  },
  {
    "origin": "sz",
    "local": "深圳"
  },
  {
    "origin": "Array of integers specifying the array shape.",
    "local": "指定数组形状的整数数组。"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": "Created matrix type.",
    "local": "已创建矩阵类型。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "operator Matx",
    "local": "操作员Matx"
  },
  {
    "origin": "< _Tp, m, n >()",
    "local": "<\\u Tp，m，n>（）"
  },
  {
    "origin": "template&lt;typename _Tp , int m, int n&gt;",
    "local": "模板&lt；typename\\u Tp，int m，int n&gt；"
  },
  {
    "origin": "cv::Mat::operator",
    "local": "cv:：Mat:：运算符"
  },
  {
    "origin": "&lt; _Tp, m, n &gt;",
    "local": "&lt_Tp，m，n&gt；"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "operator std::array",
    "local": "运算符std：：数组"
  },
  {
    "origin": "< _Tp, _Nm >()",
    "local": "<\\u-Tp，\\u-Nm>（）"
  },
  {
    "origin": "template&lt;typename _Tp , std::size_t _Nm&gt;",
    "local": "模板&lt；typename\\u Tp，std:：size\\u t\\u Nm&gt；"
  },
  {
    "origin": "cv::Mat::operator std::array&lt; _Tp, _Nm &gt;",
    "local": "cv:：Mat:：运算符std:：数组&lt_Tp，\\u Nm&gt；"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "operator std::vector",
    "local": "运算符std:：vector"
  },
  {
    "origin": "< _Tp >()",
    "local": "<\\u Tp>（）"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "cv::Mat::operator std::vector&lt; _Tp &gt;",
    "local": "cv:：Mat:：运算符std:：向量&lt_Tp&gt；"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "operator Vec",
    "local": "操作员Vec"
  },
  {
    "origin": "< _Tp, n >()",
    "local": "<\\u Tp，n>（）"
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": "模板&lt；类型名称&u Tp，int n&gt；"
  },
  {
    "origin": "cv::Mat::operator",
    "local": "cv:：Mat:：运算符"
  },
  {
    "origin": "&lt; _Tp, n &gt;",
    "local": "&lt_总磷，n&gt；"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "operator()()",
    "local": "运算符（）（）"
  },
  {
    "origin": "[1/4]",
    "local": "[1/4]"
  },
  {
    "origin": "cv::Mat::operator()",
    "local": "cv:：Mat:：operator（）"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "rowRange",
    "local": "罗朗"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "colRange",
    "local": "科尔兰奇"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Extracts a rectangular submatrix.",
    "local": "提取矩形子矩阵。"
  },
  {
    "origin": "The operators make a new header for the specified sub-array of *this . They are the most generalized forms of",
    "local": "运算符为*this的指定子数组创建一个新头。它们是最普遍的形式"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ". For example,",
    "local": ". 例如，"
  },
  {
    "origin": "is equivalent to",
    "local": "相当于"
  },
  {
    "origin": ". Similarly to all of the above, the operators are O(1) operations, that is, no matrix data is copied.",
    "local": ". 与上述所有操作类似，运算符是O（1）操作，即不复制任何矩阵数据。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "rowRange",
    "local": "罗朗"
  },
  {
    "origin": "Start and end row of the extracted submatrix. The upper boundary is not included. To select all the rows, use",
    "local": "提取的子矩阵的起始行和结束行。不包括上边界。要选择所有行，请使用"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "colRange",
    "local": "科尔兰奇"
  },
  {
    "origin": "Start and end column of the extracted submatrix. The upper boundary is not included. To select all the columns, use",
    "local": "提取的子矩阵的起始列和结束列。不包括上边界。要选择所有列，请使用"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "operator()()",
    "local": "运算符（）（）"
  },
  {
    "origin": "[2/4]",
    "local": "[2/4]"
  },
  {
    "origin": "cv::Mat::operator()",
    "local": "cv:：Mat:：operator（）"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "roi",
    "local": "投资回报率"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "roi",
    "local": "投资回报率"
  },
  {
    "origin": "Extracted submatrix specified as a rectangle.",
    "local": "提取指定为矩形的子矩阵。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "operator()()",
    "local": "运算符（）（）"
  },
  {
    "origin": "[3/4]",
    "local": "[3/4]"
  },
  {
    "origin": "cv::Mat::operator()",
    "local": "cv:：Mat:：operator（）"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "ranges",
    "local": "范围"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "ranges",
    "local": "范围"
  },
  {
    "origin": "Array of selected ranges along each array dimension.",
    "local": "沿每个数组维度的选定范围的数组。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "operator()()",
    "local": "运算符（）（）"
  },
  {
    "origin": "[4/4]",
    "local": "[4/4]"
  },
  {
    "origin": "cv::Mat::operator()",
    "local": "cv:：Mat:：operator（）"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const std::vector&lt;",
    "local": "常量标准：：向量&lt；"
  },
  {
    "origin": "ranges",
    "local": "范围"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "ranges",
    "local": "范围"
  },
  {
    "origin": "Array of selected ranges along each array dimension.",
    "local": "沿每个数组维度的选定范围的数组。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "operator=()",
    "local": "运算符=（）"
  },
  {
    "origin": "[1/4]",
    "local": "[1/4]"
  },
  {
    "origin": "&amp; cv::Mat::operator=",
    "local": "&amp；cv:：Mat:：运算符="
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "assignment operators",
    "local": "赋值运算符"
  },
  {
    "origin": "These are available assignment operators. Since they all are very different, make sure to read the operator parameters description.",
    "local": "这些是可用的赋值运算符。由于它们都非常不同，请务必阅读运算符参数说明。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": "Assigned, right-hand-side matrix. Matrix assignment is an O(1) operation. This means that no data is copied but the data is shared and the reference counter, if any, is incremented. Before assigning new data, the old data is de-referenced via",
    "local": "分配，右侧矩阵。矩阵赋值是一个O（1）运算。这意味着不复制数据，但共享数据，并且增加引用计数器（如果有）。在分配新数据之前，旧数据通过"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "operator=()",
    "local": "运算符=（）"
  },
  {
    "origin": "[2/4]",
    "local": "[2/4]"
  },
  {
    "origin": "&amp; cv::Mat::operator=",
    "local": "&amp；cv:：Mat:：运算符="
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "expr",
    "local": "出口"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "expr",
    "local": "出口"
  },
  {
    "origin": "Assigned matrix expression object. As opposite to the first form of the assignment operation, the second form can reuse already allocated matrix if it has the right size and type to fit the matrix expression result. It is automatically handled by the real function that the matrix expressions is expanded to. For example, C=A+B is expanded to add(A, B, C), and add takes care of automatic C reallocation.",
    "local": "指定的矩阵表达式对象。与赋值操作的第一种形式相反，第二种形式可以重用已经分配的矩阵，前提是它具有适合矩阵表达式结果的适当大小和类型。它是由实数函数自动处理的矩阵表达式被扩展到。例如，C=A+B被扩展为add（A，B，C），add负责C的自动重新分配。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "operator=()",
    "local": "运算符=（）"
  },
  {
    "origin": "[3/4]",
    "local": "[3/4]"
  },
  {
    "origin": "&amp; cv::Mat::operator=",
    "local": "&amp；cv:：Mat:：运算符="
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "s",
    "local": "s"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Sets all or some of the array elements to the specified value.",
    "local": "将所有或部分数组元素设置为指定值。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "s",
    "local": "s"
  },
  {
    "origin": "Assigned scalar converted to the actual array type.",
    "local": "指定的标量转换为实际数组类型。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "operator=()",
    "local": "运算符=（）"
  },
  {
    "origin": "[4/4]",
    "local": "[4/4]"
  },
  {
    "origin": "&amp; cv::Mat::operator=",
    "local": "&amp；cv:：Mat:：运算符="
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "pop_back()",
    "local": "向后弹出（）"
  },
  {
    "origin": "void cv::Mat::pop_back",
    "local": "void cv：：Mat：：返回"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "nelems",
    "local": "内勒姆斯"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Removes elements from the bottom of the matrix.",
    "local": "从矩阵底部移除元素。"
  },
  {
    "origin": "The method removes one or more rows from the bottom of the matrix.",
    "local": "该方法从矩阵底部删除一行或多行。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "nelems",
    "local": "内勒姆斯"
  },
  {
    "origin": "Number of removed rows. If it is greater than the total number of rows, an exception is thrown.",
    "local": "删除的行数。如果大于总行数，则抛出异常。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "ptr()",
    "local": "ptr（）"
  },
  {
    "origin": "[1/20]",
    "local": "[1/20]"
  },
  {
    "origin": "* cv::Mat::ptr",
    "local": "*cv：：材料：：ptr"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "i0",
    "local": "十"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Returns a pointer to the specified matrix row.",
    "local": "返回指向指定矩阵行的指针。"
  },
  {
    "origin": "The methods return",
    "local": "方法返回"
  },
  {
    "origin": "or typed pointer to the specified matrix row. See the sample in",
    "local": "或指向指定矩阵行的类型化指针。请参见中的示例"
  },
  {
    "origin": "to know how to use these methods.",
    "local": "知道如何使用这些方法。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "i0",
    "local": "十"
  },
  {
    "origin": "A 0-based row index.",
    "local": "基于0的行索引。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "ptr()",
    "local": "ptr（）"
  },
  {
    "origin": "[2/20]",
    "local": "[2/20]"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "* cv::Mat::ptr",
    "local": "*cv：：材料：：ptr"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "i0",
    "local": "十"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "ptr()",
    "local": "ptr（）"
  },
  {
    "origin": "[3/20]",
    "local": "[3/20]"
  },
  {
    "origin": "* cv::Mat::ptr",
    "local": "*cv：：材料：：ptr"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "row",
    "local": "行"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "col",
    "local": "列"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "row",
    "local": "行"
  },
  {
    "origin": "col",
    "local": "列"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "ptr()",
    "local": "ptr（）"
  },
  {
    "origin": "[4/20]",
    "local": "[4/20]"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "* cv::Mat::ptr",
    "local": "*cv：：材料：：ptr"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "row",
    "local": "行"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "col",
    "local": "列"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "row",
    "local": "行"
  },
  {
    "origin": "col",
    "local": "列"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "ptr()",
    "local": "ptr（）"
  },
  {
    "origin": "[5/20]",
    "local": "[5/20]"
  },
  {
    "origin": "* cv::Mat::ptr",
    "local": "*cv：：材料：：ptr"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "i0",
    "local": "十"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "i1",
    "local": "一"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "i2",
    "local": "十二"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "ptr()",
    "local": "ptr（）"
  },
  {
    "origin": "[6/20]",
    "local": "[6/20]"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "* cv::Mat::ptr",
    "local": "*cv：：材料：：ptr"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "i0",
    "local": "十"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "i1",
    "local": "一"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "i2",
    "local": "十二"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "ptr()",
    "local": "ptr（）"
  },
  {
    "origin": "[7/20]",
    "local": "[7/20]"
  },
  {
    "origin": "* cv::Mat::ptr",
    "local": "*cv：：材料：：ptr"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "idx",
    "local": "idx公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "ptr()",
    "local": "ptr（）"
  },
  {
    "origin": "[8/20]",
    "local": "[8/20]"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "* cv::Mat::ptr",
    "local": "*cv：：材料：：ptr"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "idx",
    "local": "idx公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "ptr()",
    "local": "ptr（）"
  },
  {
    "origin": "[9/20]",
    "local": "[9/20]"
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": "模板&lt；国际n&gt；"
  },
  {
    "origin": "* cv::Mat::ptr",
    "local": "*cv：：材料：：ptr"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "idx",
    "local": "idx公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "ptr()",
    "local": "ptr（）"
  },
  {
    "origin": "[10/20]",
    "local": "[10/20]"
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": "模板&lt；国际n&gt；"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "* cv::Mat::ptr",
    "local": "*cv：：材料：：ptr"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "idx",
    "local": "idx公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "ptr()",
    "local": "ptr（）"
  },
  {
    "origin": "[11/20]",
    "local": "[11/20]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "_Tp* cv::Mat::ptr",
    "local": "_Tp*cv：：Mat：：ptr"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "i0",
    "local": "十"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "ptr()",
    "local": "ptr（）"
  },
  {
    "origin": "[12/20]",
    "local": "[12/20]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "const _Tp* cv::Mat::ptr",
    "local": "常数*cv：：Mat：：ptr"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "i0",
    "local": "十"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "ptr()",
    "local": "ptr（）"
  },
  {
    "origin": "[13/20]",
    "local": "[13/20]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "_Tp* cv::Mat::ptr",
    "local": "_Tp*cv：：Mat：：ptr"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "row",
    "local": "行"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "col",
    "local": "列"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "row",
    "local": "行"
  },
  {
    "origin": "col",
    "local": "列"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "ptr()",
    "local": "ptr（）"
  },
  {
    "origin": "[14/20]",
    "local": "[14/20]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "const _Tp* cv::Mat::ptr",
    "local": "常数*cv：：Mat：：ptr"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "row",
    "local": "行"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "col",
    "local": "列"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "row",
    "local": "行"
  },
  {
    "origin": "col",
    "local": "列"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "ptr()",
    "local": "ptr（）"
  },
  {
    "origin": "[15/20]",
    "local": "[15/20]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "_Tp* cv::Mat::ptr",
    "local": "_Tp*cv：：Mat：：ptr"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "i0",
    "local": "十"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "i1",
    "local": "一"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "i2",
    "local": "十二"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "ptr()",
    "local": "ptr（）"
  },
  {
    "origin": "[16/20]",
    "local": "[16/20]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "const _Tp* cv::Mat::ptr",
    "local": "常数*cv：：Mat：：ptr"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "i0",
    "local": "十"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "i1",
    "local": "一"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "i2",
    "local": "十二"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "ptr()",
    "local": "ptr（）"
  },
  {
    "origin": "[17/20]",
    "local": "[17/20]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "_Tp* cv::Mat::ptr",
    "local": "_Tp*cv：：Mat：：ptr"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "idx",
    "local": "idx公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "ptr()",
    "local": "ptr（）"
  },
  {
    "origin": "[18/20]",
    "local": "[18/20]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "const _Tp* cv::Mat::ptr",
    "local": "常数*cv：：Mat：：ptr"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "idx",
    "local": "idx公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "ptr()",
    "local": "ptr（）"
  },
  {
    "origin": "[19/20]",
    "local": "[19/20]"
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": "模板&lt；类型名称&u Tp，int n&gt；"
  },
  {
    "origin": "_Tp* cv::Mat::ptr",
    "local": "_Tp*cv：：Mat：：ptr"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "idx",
    "local": "idx公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "ptr()",
    "local": "ptr（）"
  },
  {
    "origin": "[20/20]",
    "local": "[20/20]"
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": "模板&lt；类型名称&u Tp，int n&gt；"
  },
  {
    "origin": "const _Tp* cv::Mat::ptr",
    "local": "常数*cv：：Mat：：ptr"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "idx",
    "local": "idx公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "push_back()",
    "local": "向后推（）"
  },
  {
    "origin": "[1/4]",
    "local": "[1/4]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "void cv::Mat::push_back",
    "local": "void cv：：Mat：：推回"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "elem",
    "local": "元素"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Adds elements to the bottom of the matrix.",
    "local": "将元素添加到矩阵的底部。"
  },
  {
    "origin": "The methods add one or more elements to the bottom of the matrix. They emulate the corresponding method of the STL vector class. When elem is",
    "local": "这些方法将一个或多个元素添加到矩阵的底部。它们模拟了STL向量类的相应方法。当elem"
  },
  {
    "origin": ", its type and the number of columns must be the same as in the container matrix.",
    "local": "，其类型和列数必须与容器矩阵中的相同。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "elem",
    "local": "元素"
  },
  {
    "origin": "Added element(s).",
    "local": "添加的元素。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "push_back()",
    "local": "向后推（）"
  },
  {
    "origin": "[2/4]",
    "local": "[2/4]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "void cv::Mat::push_back",
    "local": "void cv：：Mat：：推回"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "elem",
    "local": "元素"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "elem",
    "local": "元素"
  },
  {
    "origin": "Added element(s).",
    "local": "添加的元素。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "push_back()",
    "local": "向后推（）"
  },
  {
    "origin": "[3/4]",
    "local": "[3/4]"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "void cv::Mat::push_back",
    "local": "void cv：：Mat：：推回"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "elem",
    "local": "元素"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "elem",
    "local": "元素"
  },
  {
    "origin": "Added element(s).",
    "local": "添加的元素。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "push_back()",
    "local": "向后推（）"
  },
  {
    "origin": "[4/4]",
    "local": "[4/4]"
  },
  {
    "origin": "void cv::Mat::push_back",
    "local": "void cv：：Mat：：推回"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": "Added line(s).",
    "local": "已添加行。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "push_back_()",
    "local": "向后推（）"
  },
  {
    "origin": "void cv::Mat::push_back_",
    "local": "void cv：：Mat：：推回_"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "elem",
    "local": "元素"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "internal function",
    "local": "内部功能"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "release()",
    "local": "发布（）"
  },
  {
    "origin": "void cv::Mat::release",
    "local": "无效cv：：Mat：：释放"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Decrements the reference counter and deallocates the matrix if needed.",
    "local": "如果需要，减少引用计数器并释放矩阵。"
  },
  {
    "origin": "The method decrements the reference counter associated with the matrix data. When the reference counter reaches 0, the matrix data is deallocated and the data and the reference counter pointers are set to NULL's. If the matrix header points to an external data set (see",
    "local": "该方法减少与矩阵数据相关联的参考计数器。当引用计数器达到0时，将释放矩阵数据，并将数据和引用计数器指针设置为NULL。如果矩阵头指向外部数据集（请参阅"
  },
  {
    "origin": "), the reference counter is NULL, and the method has no effect in this case.",
    "local": ")，引用计数器为空，并且该方法在这种情况下无效。"
  },
  {
    "origin": "This method can be called manually to force the matrix data deallocation. But since this method is automatically called in the destructor, or by any other method that changes the data pointer, it is usually not needed. The reference counter decrement and check for 0 is an atomic operation on the platforms that support it. Thus, it is safe to operate on the same matrices asynchronously in different threads.",
    "local": "可以手动调用此方法来强制释放矩阵数据。但是由于此方法是在析构函数中自动调用的，或者由任何其他更改数据指针的方法调用的，因此通常不需要它。0的引用计数器减量和检查是支持它的平台上的原子操作。因此，在不同的线程中异步操作相同的矩阵是安全的。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "reserve()",
    "local": "储备（）"
  },
  {
    "origin": "void cv::Mat::reserve",
    "local": "无效cv:：Mat:：reserve"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "sz",
    "local": "深圳"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Reserves space for the certain number of rows.",
    "local": "为一定数量的行保留空间。"
  },
  {
    "origin": "The method reserves space for sz rows. If the matrix already has enough space to store sz rows, nothing happens. If the matrix is reallocated, the first",
    "local": "该方法为sz行保留空间。如果矩阵已经有足够的空间来存储sz行，那么什么也不会发生。如果矩阵被重新分配，第一个"
  },
  {
    "origin": "rows are preserved. The method emulates the corresponding method of the STL vector class.",
    "local": "保留行。该方法模拟了STL向量类的相应方法。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "sz",
    "local": "深圳"
  },
  {
    "origin": "Number of rows.",
    "local": "行数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "reserveBuffer()",
    "local": "储备缓冲区（）"
  },
  {
    "origin": "void cv::Mat::reserveBuffer",
    "local": "void cv:：Mat:：reserveBuffer无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "sz",
    "local": "深圳"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Reserves space for the certain number of bytes.",
    "local": "为一定数量的字节保留空间。"
  },
  {
    "origin": "The method reserves space for sz bytes. If the matrix already has enough space to store sz bytes, nothing happens. If matrix has to be reallocated its previous content could be lost.",
    "local": "该方法为sz字节保留空间。如果矩阵已经有足够的空间来存储sz字节，那么什么也不会发生。如果矩阵必须重新分配它以前的内容可能会丢失。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "sz",
    "local": "深圳"
  },
  {
    "origin": "Number of bytes.",
    "local": "字节数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "reshape()",
    "local": "重塑（）"
  },
  {
    "origin": "[1/3]",
    "local": "[1/3]"
  },
  {
    "origin": "cv::Mat::reshape",
    "local": "cv:：Mat:：重塑"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "cn",
    "local": "中国"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "rows",
    "local": "排"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Changes the shape and/or the number of channels of a 2D matrix without copying the data.",
    "local": "在不复制数据的情况下更改2D矩阵的形状和/或通道数。"
  },
  {
    "origin": "The method makes a new matrix header for *this elements. The new matrix may have a different size and/or different number of channels. Any combination is possible if:",
    "local": "该方法为*this元素生成一个新的矩阵头。新矩阵可以具有不同的大小和/或不同的信道数。任何组合都是可能的，如果："
  },
  {
    "origin": "No extra elements are included into the new matrix and no elements are excluded. Consequently, the product rows*cols*channels() must stay the same after the transformation.",
    "local": "新矩阵中不包含额外的元素，也不排除任何元素。因此，产品行*cols*channels（）在转换后必须保持不变。"
  },
  {
    "origin": "No data is copied. That is, this is an O(1) operation. Consequently, if you change the number of rows, or the operation changes the indices of elements row in some other way, the matrix must be continuous. See",
    "local": "不复制任何数据。也就是说，这是一个O（1）操作。因此，如果更改行数，或者该操作以其他方式更改行元素的索引，则矩阵必须是连续的。看到了吗"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "For example, if there is a set of 3D points stored as an STL vector, and you want to represent the points as a 3xN matrix, do the following:",
    "local": "例如，如果有一组三维点存储为STL向量，并且要将这些点表示为3xN矩阵，请执行以下操作："
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "cn",
    "local": "中国"
  },
  {
    "origin": "New number of channels. If the parameter is 0, the number of channels remains the same.",
    "local": "新的频道数。如果参数为0，则通道数保持不变。"
  },
  {
    "origin": "rows",
    "local": "排"
  },
  {
    "origin": "New number of rows. If the parameter is 0, the number of rows remains the same.",
    "local": "新的行数。如果参数为0，则行数保持不变。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "reshape()",
    "local": "重塑（）"
  },
  {
    "origin": "[2/3]",
    "local": "[2/3]"
  },
  {
    "origin": "cv::Mat::reshape",
    "local": "cv:：Mat:：重塑"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "cn",
    "local": "中国"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "newndims",
    "local": "纽芬兰"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "newsz",
    "local": "新闻"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "reshape()",
    "local": "重塑（）"
  },
  {
    "origin": "[3/3]",
    "local": "[3/3]"
  },
  {
    "origin": "cv::Mat::reshape",
    "local": "cv:：Mat:：重塑"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "cn",
    "local": "中国"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "newshape",
    "local": "新闻形态"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "resize()",
    "local": "调整大小（）"
  },
  {
    "origin": "[1/2]",
    "local": "[1/2]"
  },
  {
    "origin": "void cv::Mat::resize",
    "local": "void cv：：Mat：：调整大小"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "sz",
    "local": "深圳"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Changes the number of matrix rows.",
    "local": "更改矩阵行数。"
  },
  {
    "origin": "The methods change the number of matrix rows. If the matrix is reallocated, the first min(Mat::rows, sz) rows are preserved. The methods emulate the corresponding methods of the STL vector class.",
    "local": "这些方法改变了矩阵行的数量。如果矩阵被重新分配，则保留第一个min（Mat:：rows，sz）行。这些方法模拟了STL向量类的相应方法。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "sz",
    "local": "深圳"
  },
  {
    "origin": "New number of rows.",
    "local": "新的行数。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "resize()",
    "local": "调整大小（）"
  },
  {
    "origin": "[2/2]",
    "local": "[2/2]"
  },
  {
    "origin": "void cv::Mat::resize",
    "local": "void cv：：Mat：：调整大小"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "sz",
    "local": "深圳"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "s",
    "local": "s"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "sz",
    "local": "深圳"
  },
  {
    "origin": "New number of rows.",
    "local": "新的行数。"
  },
  {
    "origin": "s",
    "local": "s"
  },
  {
    "origin": "Value assigned to the newly added elements.",
    "local": "分配给新添加元素的值。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "row()",
    "local": "行（）"
  },
  {
    "origin": "cv::Mat::row",
    "local": "cv:：Mat:：行"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "y",
    "local": "y"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Creates a matrix header for the specified matrix row.",
    "local": "为指定的矩阵行创建矩阵头。"
  },
  {
    "origin": "The method makes a new header for the specified matrix row and returns it. This is an O(1) operation, regardless of the matrix size. The underlying data of the new matrix is shared with the original matrix. Here is the example of one of the classical basic matrix processing operations, axpy, used by LU and many other algorithms:",
    "local": "该方法为指定的矩阵行生成一个新的头并返回它。这是一个O（1）运算，与矩阵大小无关。新矩阵的底层数据与原始矩阵共享。下面是由LU和许多其他算法使用的经典基本矩阵处理操作之一axpy的示例："
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "In the current implementation, the following code does not work as expected:",
    "local": "在当前实现中，以下代码无法按预期工作："
  },
  {
    "origin": "This happens because A.row(i) forms a temporary header that is further assigned to another header. Remember that each of these operations is O(1), that is, no data is copied. Thus, the above assignment is not true if you may have expected the j-th row to be copied to the i-th row. To achieve that, you should either turn this simple assignment into an expression or use the",
    "local": "这是因为A.row（i）形成了一个临时头，它被进一步分配给另一个头。请记住，这些操作中的每一个都是O（1），也就是说，不复制任何数据。因此，如果您可能期望将第j行复制到第i行，则上述赋值不是真的。要实现这一点，您应该将这个简单的赋值转换为表达式，或者使用"
  },
  {
    "origin": "method:",
    "local": "方法："
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "y",
    "local": "y"
  },
  {
    "origin": "A 0-based row index.",
    "local": "基于0的行索引。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "rowRange()",
    "local": "罗兰（）"
  },
  {
    "origin": "[1/2]",
    "local": "[1/2]"
  },
  {
    "origin": "cv::Mat::rowRange",
    "local": "cv:：Mat:：行范围"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "startrow",
    "local": "斯塔特罗"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "endrow",
    "local": "尾行"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Creates a matrix header for the specified row span.",
    "local": "为指定的行范围创建矩阵标头。"
  },
  {
    "origin": "The method makes a new header for the specified row span of the matrix. Similarly to",
    "local": "该方法为矩阵的指定行范围生成一个新的头。类似于"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": ", this is an O(1) operation.",
    "local": "，这是一个O（1）操作。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "startrow",
    "local": "斯塔特罗"
  },
  {
    "origin": "An inclusive 0-based start index of the row span.",
    "local": "行范围的包含性从0开始的索引。"
  },
  {
    "origin": "endrow",
    "local": "尾行"
  },
  {
    "origin": "An exclusive 0-based ending index of the row span.",
    "local": "行范围的排他的基于0的结束索引。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "rowRange()",
    "local": "罗兰（）"
  },
  {
    "origin": "[2/2]",
    "local": "[2/2]"
  },
  {
    "origin": "cv::Mat::rowRange",
    "local": "cv:：Mat:：行范围"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "r",
    "local": "r"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "r",
    "local": "r"
  },
  {
    "origin": "structure containing both the start and the end indices.",
    "local": "包含开始索引和结束索引的结构。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "setDefaultAllocator()",
    "local": "setDefaultAllocator（）"
  },
  {
    "origin": "static void cv::Mat::setDefaultAllocator",
    "local": "静态void cv:：Mat:：setDefaultAllocator"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "allocator",
    "local": "分配器"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "setTo()",
    "local": "设置为（）"
  },
  {
    "origin": "&amp; cv::Mat::setTo",
    "local": "&amp；cv：：材料：：设置"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "value",
    "local": "价值"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Sets all or some of the array elements to the specified value.",
    "local": "将所有或部分数组元素设置为指定值。"
  },
  {
    "origin": "This is an advanced variant of the",
    "local": "这是"
  },
  {
    "origin": "operator.",
    "local": "接线员。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "value",
    "local": "价值"
  },
  {
    "origin": "Assigned scalar converted to the actual array type.",
    "local": "指定的标量转换为实际数组类型。"
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "Operation mask of the same size as *this. Its non-zero elements indicate which matrix elements need to be copied. The mask has to be of type CV_8U and can have 1 or multiple channels",
    "local": "与此相同大小的操作掩码。它的非零元素表示需要复制哪些矩阵元素。掩模必须为CVƅ8U型，可以有1个或多个通道"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "step1()",
    "local": "步骤1（）"
  },
  {
    "origin": "size_t cv::Mat::step1",
    "local": "尺寸cv：：材料：：步骤1"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "i",
    "local": "我"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Returns a normalized step.",
    "local": "返回标准化步骤。"
  },
  {
    "origin": "The method returns a matrix step divided by",
    "local": "该方法返回一个矩阵步长除以"
  },
  {
    "origin": ". It can be useful to quickly access an arbitrary matrix element.",
    "local": ". 快速访问任意矩阵元素非常有用。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "t()",
    "local": "t（）"
  },
  {
    "origin": "cv::Mat::t",
    "local": "cv：：材料：：t"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Transposes a matrix.",
    "local": "变换矩阵。"
  },
  {
    "origin": "The method performs matrix transposition by means of matrix expressions. It does not perform the actual transposition but returns a temporary matrix transposition object that can be further used as a part of more complex matrix expressions or can be assigned to a matrix:",
    "local": "该方法利用矩阵表达式进行矩阵变换。它不执行实际的换位，但返回一个临时的矩阵换位对象，该对象可以进一步用作更复杂的矩阵表达式的一部分，也可以指定给矩阵："
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "total()",
    "local": "总计（）"
  },
  {
    "origin": "[1/2]",
    "local": "[1/2]"
  },
  {
    "origin": "size_t cv::Mat::total",
    "local": "总尺寸："
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Returns the total number of array elements.",
    "local": "返回数组元素的总数。"
  },
  {
    "origin": "The method returns the number of array elements (a number of pixels if the array represents an image).",
    "local": "该方法返回数组元素的数量（如果数组表示图像，则返回像素的数量）。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "total()",
    "local": "总计（）"
  },
  {
    "origin": "[2/2]",
    "local": "[2/2]"
  },
  {
    "origin": "size_t cv::Mat::total",
    "local": "总尺寸："
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "startDim",
    "local": "startDim公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "endDim",
    "local": "尾迹"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Returns the total number of array elements.",
    "local": "返回数组元素的总数。"
  },
  {
    "origin": "The method returns the number of elements within a certain sub-array slice with startDim &lt;= dim &lt; endDim",
    "local": "该方法返回某个子数组切片中的元素数，startDim&lt；=暗（&lt；尾迹"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "type()",
    "local": "类型（）"
  },
  {
    "origin": "int cv::Mat::type",
    "local": "int cv:：Mat:：type类型"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Returns the type of a matrix element.",
    "local": "返回矩阵元素的类型。"
  },
  {
    "origin": "The method returns a matrix element type. This is an identifier compatible with the CvMat type system, like CV_16SC3 or 16-bit signed 3-channel array, and so on.",
    "local": "该方法返回矩阵元素类型。这是一个与CvMat类型系统兼容的标识符，如CV\\ U 16SC3或16位有符号3通道阵列等。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "updateContinuityFlag()",
    "local": "updateContinuityFlag（）"
  },
  {
    "origin": "void cv::Mat::updateContinuityFlag",
    "local": "无效cv:：Mat:：updateContinuityFlag"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "internal use method: updates the continuity flag",
    "local": "内部使用方法：更新连续性标志"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "zeros()",
    "local": "零（）"
  },
  {
    "origin": "[1/3]",
    "local": "[1/3]"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "cv::Mat::zeros",
    "local": "cv：：Mat：：零"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "rows",
    "local": "排"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "cols",
    "local": "胶水"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "Returns a zero array of the specified size and type.",
    "local": "返回指定大小和类型的零数组。"
  },
  {
    "origin": "The method returns a Matlab-style zero array initializer. It can be used to quickly form a constant array as a function parameter, part of a matrix expression, or as a matrix initializer:",
    "local": "该方法返回一个Matlab风格的零数组初始值设定项。它可以作为函数参数、矩阵表达式的一部分或矩阵初始值设定项快速形成常量数组："
  },
  {
    "origin": "In the example above, a new matrix is allocated only if A is not a 3x3 floating-point matrix. Otherwise, the existing matrix A is filled with zeros.",
    "local": "在上例中，仅当a不是3x3浮点矩阵时才分配新矩阵。否则，现有矩阵A将被零填充。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "rows",
    "local": "排"
  },
  {
    "origin": "Number of rows.",
    "local": "行数。"
  },
  {
    "origin": "cols",
    "local": "胶水"
  },
  {
    "origin": "Number of columns.",
    "local": "列数。"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": "Created matrix type.",
    "local": "已创建矩阵类型。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "zeros()",
    "local": "零（）"
  },
  {
    "origin": "[2/3]",
    "local": "[2/3]"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "cv::Mat::zeros",
    "local": "cv：：Mat：：零"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "size",
    "local": "大小"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "size",
    "local": "大小"
  },
  {
    "origin": "Alternative to the matrix size specification Size(cols, rows) .",
    "local": "矩阵大小规范大小的替代方法（列、行）。"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": "Created matrix type.",
    "local": "已创建矩阵类型。"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "zeros()",
    "local": "零（）"
  },
  {
    "origin": "[3/3]",
    "local": "[3/3]"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "cv::Mat::zeros",
    "local": "cv：：Mat：：零"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "ndims",
    "local": "数组的维数"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "sz",
    "local": "深圳"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "ndims",
    "local": "数组的维数"
  },
  {
    "origin": "Array dimensionality.",
    "local": "数组维数。"
  },
  {
    "origin": "sz",
    "local": "深圳"
  },
  {
    "origin": "Array of integers specifying the array shape.",
    "local": "指定数组形状的整数数组。"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": "Created matrix type.",
    "local": "已创建矩阵类型。"
  },
  {
    "origin": "Member Data Documentation",
    "local": "成员数据文档"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "allocator",
    "local": "分配器"
  },
  {
    "origin": "* cv::Mat::allocator",
    "local": "*cv:：Mat:：分配器"
  },
  {
    "origin": "custom allocator",
    "local": "自定义分配器"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "cols",
    "local": "胶水"
  },
  {
    "origin": "int cv::Mat::cols",
    "local": "内部cv:：Mat:：cols"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "data",
    "local": "数据"
  },
  {
    "origin": "* cv::Mat::data",
    "local": "*cv:：Mat:：数据"
  },
  {
    "origin": "pointer to the data",
    "local": "指向数据的指针"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "dataend",
    "local": "数据"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "* cv::Mat::dataend",
    "local": "*cv:：Mat:：数据端"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "datalimit",
    "local": "数据限制"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "* cv::Mat::datalimit",
    "local": "*cv:：Mat:：数据限制"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "datastart",
    "local": "数据启动"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "* cv::Mat::datastart",
    "local": "*cv:：Mat:：数据启动"
  },
  {
    "origin": "helper fields used in locateROI and adjustROI",
    "local": "locateROI和adjustROI中使用的helper字段"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "dims",
    "local": "薄雾"
  },
  {
    "origin": "int cv::Mat::dims",
    "local": "内部cv：：材料：：尺寸"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": "int cv::Mat::flags",
    "local": "int cv：：Mat：：标志"
  },
  {
    "origin": "includes several bit-fields:",
    "local": "包括几个位字段："
  },
  {
    "origin": "the magic signature",
    "local": "神奇的签名"
  },
  {
    "origin": "continuity flag",
    "local": "连续性标志"
  },
  {
    "origin": "depth",
    "local": "深度"
  },
  {
    "origin": "number of channels",
    "local": "通道数"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "rows",
    "local": "排"
  },
  {
    "origin": "int cv::Mat::rows",
    "local": "int cv:：Mat:：行"
  },
  {
    "origin": "the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions",
    "local": "矩阵有两个以上维度时的行数和列数或（-1，-1）"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "size",
    "local": "大小"
  },
  {
    "origin": "cv::Mat::size",
    "local": "cv：：材料：：尺寸"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "step",
    "local": "步"
  },
  {
    "origin": "cv::Mat::step",
    "local": "cv：：材料：：步骤"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "u",
    "local": "u"
  },
  {
    "origin": "* cv::Mat::u",
    "local": "*cv：：材料：：u"
  },
  {
    "origin": "interaction with",
    "local": "与…互动"
  },
  {
    "origin": "The documentation for this class was generated from the following files:",
    "local": "此类的文档是从以下文件生成的："
  },
  {
    "origin": "opencv2/core/",
    "local": "opencv2/核心/"
  },
  {
    "origin": "opencv2/core/",
    "local": "opencv2/核心/"
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:43 for OpenCV by &#160;",
    "local": "2021年4月2日星期五11:36:43为OpenCV生成，&#160；"
  }
]