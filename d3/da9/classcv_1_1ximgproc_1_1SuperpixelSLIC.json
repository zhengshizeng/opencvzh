[
  {
    "origin": "OpenCV: cv::ximgproc::SuperpixelSLIC Class Reference",
    "local": "OpenCV:cv:：ximgproc:：superpix类引用"
  },
  {
    "origin": "OpenCV",
    "local": "打开CV"
  },
  {
    "origin": "Open Source Computer Vision",
    "local": "开源计算机视觉"
  },
  {
    "origin": "Public Member Functions",
    "local": "公共成员职能"
  },
  {
    "origin": "List of all members",
    "local": "所有成员的列表"
  },
  {
    "origin": "cv::ximgproc::SuperpixelSLIC Class Reference",
    "local": "cv:：ximgproc:：SuperpixelSLIC类引用"
  },
  {
    "origin": "abstract",
    "local": "摘要"
  },
  {
    "origin": "»",
    "local": "»"
  },
  {
    "origin": "Class implementing the SLIC (Simple Linear Iterative Clustering) superpixels algorithm described in",
    "local": "类实现中描述的SLIC（简单线性迭代聚类）超级像素算法"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Inheritance diagram for cv::ximgproc::SuperpixelSLIC:",
    "local": "cv:：ximgproc:：superpix的继承关系图："
  },
  {
    "origin": "Public Member Functions",
    "local": "公共成员职能"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "Enforce label connectivity.",
    "local": "强制标签连接。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "Returns the mask of the superpixel segmentation stored in",
    "local": "返回存储在中的超级像素分段的掩码"
  },
  {
    "origin": "object.",
    "local": "对象。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "Returns the segmentation labeling of the image.",
    "local": "返回图像的分割标签。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual int",
    "local": "虚拟整数"
  },
  {
    "origin": "Calculates the actual amount of superpixels on a given segmentation computed and stored in",
    "local": "计算计算并存储在中的给定分段上的超级像素的实际数量"
  },
  {
    "origin": "object.",
    "local": "对象。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "Calculates the superpixel segmentation on a given image with the initialized parameters in the",
    "local": "在给定的图像上计算超像素分割，并使用中的初始化参数"
  },
  {
    "origin": "object.",
    "local": "对象。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Public Member Functions inherited from",
    "local": "公共成员函数继承自"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "virtual",
    "local": "事实上的"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Clears the algorithm state.",
    "local": "清除算法状态。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual bool",
    "local": "虚拟布尔"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "Returns true if the",
    "local": "如果"
  },
  {
    "origin": "is empty (e.g. in the very beginning or after unsuccessful read.",
    "local": "为空（例如，在最开始或读取失败后）。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual",
    "local": "事实上的"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;fn)",
    "local": "&amp；（fn）"
  },
  {
    "origin": "Reads algorithm parameters from a file storage.",
    "local": "从文件存储器中读取算法参数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;filename) const",
    "local": "&amp；文件名）常量"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;fs) const",
    "local": "&amp；（f） 常数"
  },
  {
    "origin": "Stores algorithm parameters in a file storage.",
    "local": "将算法参数存储在文件存储器中。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;fs, const",
    "local": "&gt；gt；amp；fs，常数"
  },
  {
    "origin": "&amp;name=",
    "local": "&amp；姓名="
  },
  {
    "origin": "()) const",
    "local": "（））常数"
  },
  {
    "origin": "simplified API for language bindings This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "语言绑定的简化API这是一个重载的成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Additional Inherited Members",
    "local": "其他继承成员"
  },
  {
    "origin": "Static Public Member Functions inherited from",
    "local": "继承自的静态公共成员函数"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": "&lt_Tp&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;filename, const",
    "local": "&amp；文件名，常量"
  },
  {
    "origin": "&amp;objname=",
    "local": "&amp；对象名="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Loads algorithm from the file.",
    "local": "从文件加载算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": "&lt_Tp&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;strModel, const",
    "local": "&amp；strModel，常量"
  },
  {
    "origin": "&amp;objname=",
    "local": "&amp；对象名="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Loads algorithm from a String.",
    "local": "从字符串加载算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": "&lt_Tp&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;fn)",
    "local": "&amp；（fn）"
  },
  {
    "origin": "Reads algorithm from the file node.",
    "local": "从文件节点读取算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Protected Member Functions inherited from",
    "local": "继承自的受保护成员函数"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;fs) const",
    "local": "&amp；（f） 常数"
  },
  {
    "origin": "Detailed Description",
    "local": "详细说明"
  },
  {
    "origin": "Class implementing the SLIC (Simple Linear Iterative Clustering) superpixels algorithm described in",
    "local": "类实现中描述的SLIC（简单线性迭代聚类）超级像素算法"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "SLIC (Simple Linear Iterative Clustering) clusters pixels using pixel channels and image plane space to efficiently generate compact, nearly uniform superpixels. The simplicity of approach makes it extremely easy to use a lone parameter specifies the number of superpixels and the efficiency of the algorithm makes it very practical. Several optimizations are available for SLIC class: SLICO stands for \"Zero parameter SLIC\" and it is an optimization of baseline SLIC described in",
    "local": "SLIC（Simple Linear Iterative Clustering，简单线性迭代聚类）利用像素通道和图像平面空间对像素进行聚类，有效地生成紧凑、近似均匀的超像素。方法的简单性使得使用一个单独的参数来指定超像素的数量变得非常容易，并且算法的效率使得它非常实用。SLIC类有几种优化：SLICO代表“零参数SLIC”，它是中描述的基线SLIC的优化"
  },
  {
    "origin": ". MSLIC stands for \"Manifold SLIC\" and it is an optimization of baseline SLIC described in",
    "local": ". MSLIC代表“流形SLIC”，它是中描述的基线SLIC的优化"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Member Function Documentation",
    "local": "成员功能文档"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "enforceLabelConnectivity()",
    "local": "强制标签连接（）"
  },
  {
    "origin": "virtual void cv::ximgproc::SuperpixelSLIC::enforceLabelConnectivity",
    "local": "虚拟void cv:：ximgproc:：SuperPixeslic:：enforceLabelConnectivity"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "min_element_size",
    "local": "最小元素大小"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.ximgproc_SuperpixelSLIC.enforceLabelConnectivity(",
    "local": "Cv.ximgproc超级标签连接（"
  },
  {
    "origin": "[, min_element_size]",
    "local": "[，最小元素大小]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Enforce label connectivity.",
    "local": "强制标签连接。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "min_element_size",
    "local": "最小元素大小"
  },
  {
    "origin": "The minimum element size in percents that should be absorbed into a bigger superpixel. Given resulted average superpixel size valid value should be in 0-100 range, 25 means that less then a quarter sized superpixel should be absorbed, this is default.",
    "local": "应吸收到较大的超级像素中的最小元素大小百分比。给定结果的平均超级像素大小有效值应在0-100范围内，25表示应吸收小于四分之一大小的超级像素，这是默认值。"
  },
  {
    "origin": "The function merge component that is too small, assigning the previously found adjacent label to this component. Calling this function may change the final number of superpixels.",
    "local": "函数合并组件太小，将以前找到的相邻标签分配给该组件。调用此函数可能会更改超级像素的最终数目。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getLabelContourMask()",
    "local": "getLabelContourMask（）"
  },
  {
    "origin": "virtual void cv::ximgproc::SuperpixelSLIC::getLabelContourMask",
    "local": "虚拟void cv:：ximgproc:：SuperpixelSLIC:：getLabelContourMask"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "image",
    "local": "形象"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "thick_line",
    "local": "粗线"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "image",
    "local": "形象"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.ximgproc_SuperpixelSLIC.getLabelContourMask(",
    "local": "Cv.ximgproc superpixelslic.GetLabelOutMask（"
  },
  {
    "origin": "[, image[, thick_line]]",
    "local": "[，图像[，粗线]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Returns the mask of the superpixel segmentation stored in",
    "local": "返回存储在中的超级像素分段的掩码"
  },
  {
    "origin": "object.",
    "local": "对象。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "image",
    "local": "形象"
  },
  {
    "origin": "Return: CV_8U1 image mask where -1 indicates that the pixel is a superpixel border, and 0 otherwise.",
    "local": "Return:cv8u1image mask其中-1表示像素是超级像素边框，否则为0。"
  },
  {
    "origin": "thick_line",
    "local": "粗线"
  },
  {
    "origin": "If false, the border is only one pixel wide, otherwise all pixels at the border are masked.",
    "local": "如果为false，则边框只有一个像素宽，否则边框上的所有像素都将被遮罩。"
  },
  {
    "origin": "The function return the boundaries of the superpixel segmentation.",
    "local": "函数返回超级像素分割的边界。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getLabels()",
    "local": "getLabels（）"
  },
  {
    "origin": "virtual void cv::ximgproc::SuperpixelSLIC::getLabels",
    "local": "虚拟void cv:：ximgproc:：SuperpixelSLIC:：getLabels"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "labels_out",
    "local": "标签\\u输出"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "labels_out",
    "local": "标签\\u输出"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.ximgproc_SuperpixelSLIC.getLabels(",
    "local": "cv.ximgproc\\ U SuperpixelSLIC.GETLABLES公司("
  },
  {
    "origin": "[, labels_out]",
    "local": "[，标签输出]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Returns the segmentation labeling of the image.",
    "local": "返回图像的分割标签。"
  },
  {
    "origin": "Each label represents a superpixel, and each pixel is assigned to one superpixel label.",
    "local": "每个标签表示一个超级像素，每个像素被指定给一个超级像素标签。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "labels_out",
    "local": "标签\\u输出"
  },
  {
    "origin": "Return: A CV_32SC1 integer array containing the labels of the superpixel segmentation. The labels are in the range [0,",
    "local": "Return：包含超级像素分割标签的cv32sc1整数数组。标签在[0，"
  },
  {
    "origin": "].",
    "local": "]."
  },
  {
    "origin": "The function returns an image with the labels of the superpixel segmentation. The labels are in the range [0,",
    "local": "函数返回带有超级像素分割标签的图像。标签在[0，"
  },
  {
    "origin": "].",
    "local": "]."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getNumberOfSuperpixels()",
    "local": "getNumberOfSuperpixels（）"
  },
  {
    "origin": "virtual int cv::ximgproc::SuperpixelSLIC::getNumberOfSuperpixels",
    "local": "虚拟int cv:：ximgproc:：SuperpixelSLIC:：getNumberOfSuperpixels"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.ximgproc_SuperpixelSLIC.getNumberOfSuperpixels(",
    "local": "cv.ximgproc\\u SuperpixelSLIC.getNumberOfSuperpixels("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the actual amount of superpixels on a given segmentation computed and stored in",
    "local": "计算计算并存储在中的给定分段上的超级像素的实际数量"
  },
  {
    "origin": "object.",
    "local": "对象。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "iterate()",
    "local": "迭代（）"
  },
  {
    "origin": "virtual void cv::ximgproc::SuperpixelSLIC::iterate",
    "local": "虚拟void cv:：ximgproc:：SuperpixelSLIC:：iterate"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "num_iterations",
    "local": "迭代次数"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.ximgproc_SuperpixelSLIC.iterate(",
    "local": "cv.ximgproc\\ U SuperpixelSLIC.迭代("
  },
  {
    "origin": "[, num_iterations]",
    "local": "[，num\\u迭代次数]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the superpixel segmentation on a given image with the initialized parameters in the",
    "local": "在给定的图像上计算超像素分割，并使用中的初始化参数"
  },
  {
    "origin": "object.",
    "local": "对象。"
  },
  {
    "origin": "This function can be called again without the need of initializing the algorithm with",
    "local": "可以再次调用此函数，而无需使用初始化算法"
  },
  {
    "origin": ". This save the computational cost of allocating memory for all the structures of the algorithm.",
    "local": ". 这节省了为算法的所有结构分配内存的计算成本。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "num_iterations",
    "local": "迭代次数"
  },
  {
    "origin": "Number of iterations. Higher number improves the result.",
    "local": "迭代次数。数字越大，效果越好。"
  },
  {
    "origin": "The function computes the superpixels segmentation of an image with the parameters initialized with the function",
    "local": "该函数使用函数初始化的参数计算图像的超像素分割"
  },
  {
    "origin": ". The algorithms starts from a grid of superpixels and then refines the boundaries by proposing updates of edges boundaries.",
    "local": ". 该算法从一个超像素网格开始，然后通过提出边界更新来细化边界。"
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": "此类的文档是从以下文件生成的："
  },
  {
    "origin": "opencv2/ximgproc/",
    "local": "opencv2/ximgproc/"
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:49 for OpenCV by",
    "local": "于2021年4月2日星期五11:36:49为OpenCV生成"
  }
]