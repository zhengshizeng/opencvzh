[
  {
    "origin": "OpenCV: Structural Analysis and Shape Descriptors",
    "local": "OpenCV：结构分析和形状描述符"
  },
  {
    "origin": "OpenCV",
    "local": "打开CV"
  },
  {
    "origin": "Open Source Computer Vision",
    "local": "开源计算机视觉"
  },
  {
    "origin": "Namespaces",
    "local": "名称空间"
  },
  {
    "origin": "Classes",
    "local": "班级"
  },
  {
    "origin": "Enumerations",
    "local": "枚举"
  },
  {
    "origin": "Functions",
    "local": "功能"
  },
  {
    "origin": "Structural Analysis and Shape Descriptors",
    "local": "结构分析和形状描述符"
  },
  {
    "origin": "Namespaces",
    "local": "名称空间"
  },
  {
    "origin": "Classes",
    "local": "班级"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "finds arbitrary template in the grayscale image using Generalized Hough Transform",
    "local": "利用广义Hough变换在灰度图像中寻找任意模板"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "finds arbitrary template in the grayscale image using Generalized Hough Transform",
    "local": "利用广义Hough变换在灰度图像中寻找任意模板"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "finds arbitrary template in the grayscale image using Generalized Hough Transform",
    "local": "利用广义Hough变换在灰度图像中寻找任意模板"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "struct returned by",
    "local": "返回的结构"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Enumerations",
    "local": "枚举"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "connected components algorithm",
    "local": "连通分量算法"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "connected components statistics",
    "local": "连接组件统计"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "the contour approximation algorithm",
    "local": "轮廓逼近算法"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "types of intersection between rectangles",
    "local": "矩形之间的相交类型"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "mode of the contour retrieval algorithm",
    "local": "轮廓检索算法的模式"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "Shape matching methods.",
    "local": "形状匹配方法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Functions",
    "local": "功能"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "curve,",
    "local": "曲线，"
  },
  {
    "origin": "approxCurve, double epsilon, bool closed)",
    "local": "近似曲线，双ε，布尔闭合）"
  },
  {
    "origin": "Approximates a polygonal curve(s) with the specified precision.",
    "local": "以指定的精度近似多边形曲线。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "curve, bool closed)",
    "local": "曲线，布尔闭合）"
  },
  {
    "origin": "Calculates a contour perimeter or a curve length.",
    "local": "计算等高线周长或曲线长度。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "array)",
    "local": "（阵列）"
  },
  {
    "origin": "Calculates the up-right bounding rectangle of a point set or non-zero pixels of gray-scale image.",
    "local": "计算点集的右上边界矩形或灰度图像的非零像素。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "box,",
    "local": "盒子，"
  },
  {
    "origin": "points)",
    "local": "点数）"
  },
  {
    "origin": "Finds the four vertices of a rotated rect. Useful to draw the rotated rectangle.",
    "local": "查找旋转矩形的四个顶点。用于绘制旋转的矩形。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "image,",
    "local": "图像，"
  },
  {
    "origin": "labels, int connectivity, int ltype, int ccltype)",
    "local": "标签，int连接性，int ltype，int ccltype）"
  },
  {
    "origin": "computes the connected components labeled image of boolean image",
    "local": "计算标记为布尔图像的图像的连接组件"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "image,",
    "local": "图像，"
  },
  {
    "origin": "labels, int connectivity=8, int ltype=",
    "local": "标签，int connectivity=8，int ltype="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "image,",
    "local": "图像，"
  },
  {
    "origin": "labels,",
    "local": "标签，"
  },
  {
    "origin": "stats,",
    "local": "统计数据，"
  },
  {
    "origin": "centroids, int connectivity, int ltype, int ccltype)",
    "local": "质心，int连接性，int ltype，int ccltype）"
  },
  {
    "origin": "computes the connected components labeled image of boolean image and also produces a statistics output for each label",
    "local": "计算标记为布尔图像的图像的连接组件，并为每个标签生成统计输出"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "image,",
    "local": "图像，"
  },
  {
    "origin": "labels,",
    "local": "标签，"
  },
  {
    "origin": "stats,",
    "local": "统计数据，"
  },
  {
    "origin": "centroids, int connectivity=8, int ltype=",
    "local": "质心，int连接性=8，int ltype="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "contour, bool oriented=false)",
    "local": "轮廓，面向布尔=假）"
  },
  {
    "origin": "Calculates a contour area.",
    "local": "计算等高线面积。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "points,",
    "local": "点数，"
  },
  {
    "origin": "hull, bool clockwise=false, bool returnPoints=true)",
    "local": "船体，布尔顺时针=假，布尔返回点=真）"
  },
  {
    "origin": "Finds the convex hull of a point set.",
    "local": "查找点集的凸包。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "contour,",
    "local": "轮廓，"
  },
  {
    "origin": "convexhull,",
    "local": "凸轮，"
  },
  {
    "origin": "convexityDefects)",
    "local": "凸面缺陷）"
  },
  {
    "origin": "Finds the convexity defects of a contour.",
    "local": "找出轮廓的凸面缺陷。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Creates a smart pointer to a",
    "local": "创建指向"
  },
  {
    "origin": "class and initializes it.",
    "local": "类并对其进行初始化。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Creates a smart pointer to a",
    "local": "创建指向"
  },
  {
    "origin": "class and initializes it.",
    "local": "类并对其进行初始化。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "image,",
    "local": "图像，"
  },
  {
    "origin": "contours,",
    "local": "等高线，"
  },
  {
    "origin": "hierarchy, int mode, int method,",
    "local": "层次结构，int模式，int方法，"
  },
  {
    "origin": "offset=",
    "local": "偏移量="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Finds contours in a binary image.",
    "local": "在二值图像中查找轮廓。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "image,",
    "local": "图像，"
  },
  {
    "origin": "contours, int mode, int method,",
    "local": "等高线，int模式，int方法，"
  },
  {
    "origin": "offset=",
    "local": "偏移量="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "points)",
    "local": "点数）"
  },
  {
    "origin": "Fits an ellipse around a set of 2D points.",
    "local": "围绕一组二维点拟合椭圆。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "points)",
    "local": "点数）"
  },
  {
    "origin": "Fits an ellipse around a set of 2D points.",
    "local": "围绕一组二维点拟合椭圆。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "points)",
    "local": "点数）"
  },
  {
    "origin": "Fits an ellipse around a set of 2D points.",
    "local": "围绕一组二维点拟合椭圆。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "points,",
    "local": "点数，"
  },
  {
    "origin": ", int distType, double param, double reps, double aeps)",
    "local": "，int distType，双参数，双重复，双aeps）"
  },
  {
    "origin": "Fits a line to a 2D or 3D point set.",
    "local": "将直线拟合到二维或三维点集。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": ", double hu[7])",
    "local": "，双胡[7]）"
  },
  {
    "origin": "Calculates seven Hu invariants.",
    "local": "计算七个Hu不变量。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;m,",
    "local": "&amp；嗯，"
  },
  {
    "origin": "hu)",
    "local": "胡）"
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "_p1,",
    "local": "_第1页，"
  },
  {
    "origin": "_p2,",
    "local": "_第2页，"
  },
  {
    "origin": "_p12, bool handleNested=true)",
    "local": "bool handleNested=真）"
  },
  {
    "origin": "Finds intersection of two convex polygons.",
    "local": "求两个凸多边形的交集。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "contour)",
    "local": "等高线）"
  },
  {
    "origin": "Tests a contour convexity.",
    "local": "测试轮廓凸度。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "contour1,",
    "local": "轮廓1，"
  },
  {
    "origin": "contour2, int method, double parameter)",
    "local": "轮廓2，int方法，双参数）"
  },
  {
    "origin": "Compares two shapes.",
    "local": "比较两种形状。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "points)",
    "local": "点数）"
  },
  {
    "origin": "Finds a rotated rectangle of the minimum area enclosing the input 2D point set.",
    "local": "查找包含输入二维点集的最小区域的旋转矩形。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "points,",
    "local": "点数，"
  },
  {
    "origin": "&amp;center, float &amp;radius)",
    "local": "&amp；中心、浮动和；半径）"
  },
  {
    "origin": "Finds a circle of the minimum area enclosing a 2D point set.",
    "local": "查找包围二维点集的最小面积圆。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "points,",
    "local": "点数，"
  },
  {
    "origin": "triangle)",
    "local": "三角形）"
  },
  {
    "origin": "Finds a triangle of minimum area enclosing a 2D point set and returns its area.",
    "local": "查找包围二维点集的最小面积三角形并返回其面积。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "array, bool binaryImage=false)",
    "local": "数组，bool binaryImage=false）"
  },
  {
    "origin": "Calculates all of the moments up to the third order of a polygon or rasterized shape.",
    "local": "计算多边形或光栅化形状的三阶矩。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "contour,",
    "local": "轮廓，"
  },
  {
    "origin": "pt, bool measureDist)",
    "local": "pt、bool测量表）"
  },
  {
    "origin": "Performs a point-in-contour test.",
    "local": "执行轮廓点测试。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;rect1, const",
    "local": "&amp；矩形1，常数"
  },
  {
    "origin": "&amp;rect2,",
    "local": "&amp；大小"
  },
  {
    "origin": "intersectingRegion)",
    "local": "相交的"
  },
  {
    "origin": "Finds out if there is any intersection between two rotated rectangles.",
    "local": "找出两个旋转的矩形之间是否有交集。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Detailed Description",
    "local": "详细说明"
  },
  {
    "origin": "Enumeration Type Documentation",
    "local": "枚举类型文档"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "ConnectedComponentsAlgorithmsTypes",
    "local": "连接组件算法类型"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "connected components algorithm",
    "local": "连通分量算法"
  },
  {
    "origin": "Enumerator",
    "local": "枚举器"
  },
  {
    "origin": "CCL_DEFAULT",
    "local": "CCL\\U违约"
  },
  {
    "origin": "Python: cv.CCL_DEFAULT",
    "local": "Python:cv.CCL\\u默认值"
  },
  {
    "origin": "BBDT",
    "local": "BBDT公司"
  },
  {
    "origin": "algorithm for 8-way connectivity, SAUF algorithm for 4-way connectivity. The parallel implementation described in",
    "local": "算法为8路连通，SAUF算法为4路连通。中描述的并行实现"
  },
  {
    "origin": "is available for both BBDT and SAUF.",
    "local": "适用于BBDT和SAUF。"
  },
  {
    "origin": "CCL_WU",
    "local": "吴建中"
  },
  {
    "origin": "Python: cv.CCL_WU",
    "local": "Python:cv.CCLèu WU"
  },
  {
    "origin": "SAUF",
    "local": "除了"
  },
  {
    "origin": "algorithm for 8-way connectivity, SAUF algorithm for 4-way connectivity. The parallel implementation described in",
    "local": "算法为8路连通，SAUF算法为4路连通。中描述的并行实现"
  },
  {
    "origin": "is available for SAUF.",
    "local": "可用于SAUF。"
  },
  {
    "origin": "CCL_GRANA",
    "local": "CCL Grana"
  },
  {
    "origin": "Python: cv.CCL_GRANA",
    "local": "蟒蛇：cv.CCL\\u GRANA"
  },
  {
    "origin": "BBDT",
    "local": "BBDT公司"
  },
  {
    "origin": "algorithm for 8-way connectivity, SAUF algorithm for 4-way connectivity. The parallel implementation described in",
    "local": "算法为8路连通，SAUF算法为4路连通。中描述的并行实现"
  },
  {
    "origin": "is available for both BBDT and SAUF.",
    "local": "适用于BBDT和SAUF。"
  },
  {
    "origin": "CCL_BOLELLI",
    "local": "CCL\\u博莱利"
  },
  {
    "origin": "Python: cv.CCL_BOLELLI",
    "local": "蟒蛇：cv.CCL\\u boelli"
  },
  {
    "origin": "Spaghetti",
    "local": "意大利面"
  },
  {
    "origin": "algorithm for 8-way connectivity, SAUF algorithm for 4-way connectivity.",
    "local": "算法为8路连通，SAUF算法为4路连通。"
  },
  {
    "origin": "CCL_SAUF",
    "local": "CCL除外"
  },
  {
    "origin": "Python: cv.CCL_SAUF",
    "local": "蟒蛇：cv.CCL\\u SAUF"
  },
  {
    "origin": "Same as CCL_WU. It is preferable to use the flag with the name of the algorithm (CCL_SAUF) rather than the one with the name of the first author (CCL_WU).",
    "local": "和吴建中一样。最好使用带有算法名称（CCL\\u SAUF）的标志，而不是带有第一作者名称（CCL\\u WU）的标志。"
  },
  {
    "origin": "CCL_BBDT",
    "local": "信用证金额"
  },
  {
    "origin": "Python: cv.CCL_BBDT",
    "local": "蟒蛇：cv.CCL\\u BBDT"
  },
  {
    "origin": "Same as CCL_GRANA. It is preferable to use the flag with the name of the algorithm (CCL_BBDT) rather than the one with the name of the first author (CCL_GRANA).",
    "local": "与CCL\\ U GRANA相同。最好使用带有算法名称（CCL\\u BBDT）的标志，而不是带有第一作者名称（CCL\\u GRANA）的标志。"
  },
  {
    "origin": "CCL_SPAGHETTI",
    "local": "意大利面"
  },
  {
    "origin": "Python: cv.CCL_SPAGHETTI",
    "local": "蟒蛇：cv.CCL\\u意大利面"
  },
  {
    "origin": "Same as CCL_BOLELLI. It is preferable to use the flag with the name of the algorithm (CCL_SPAGHETTI) rather than the one with the name of the first author (CCL_BOLELLI).",
    "local": "与CCL\\u Boelli相同。最好使用带有算法名称（CCL\\u SPAGHETTI）的标志，而不是带有第一作者名称（CCL\\u boelli）的标志。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "ConnectedComponentsTypes",
    "local": "有联系的"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "connected components statistics",
    "local": "连接组件统计"
  },
  {
    "origin": "Enumerator",
    "local": "枚举器"
  },
  {
    "origin": "CC_STAT_LEFT",
    "local": "抄送状态左"
  },
  {
    "origin": "Python: cv.CC_STAT_LEFT",
    "local": "Python:cv.CC\\u STAT\\u左"
  },
  {
    "origin": "The leftmost (x) coordinate which is the inclusive start of the bounding box in the horizontal direction.",
    "local": "最左边的（x）坐标，它是水平方向上边界框的包含起点。"
  },
  {
    "origin": "CC_STAT_TOP",
    "local": "抄送状态顶部"
  },
  {
    "origin": "Python: cv.CC_STAT_TOP",
    "local": "Python:cv.CC\\u STAT\\u TOP"
  },
  {
    "origin": "The topmost (y) coordinate which is the inclusive start of the bounding box in the vertical direction.",
    "local": "最顶部（y）坐标，它是边界框在垂直方向上的包含起点。"
  },
  {
    "origin": "CC_STAT_WIDTH",
    "local": "CC\\U统计\\U宽度"
  },
  {
    "origin": "Python: cv.CC_STAT_WIDTH",
    "local": "Python:cv.CC\\u STAT\\u宽度"
  },
  {
    "origin": "The horizontal size of the bounding box.",
    "local": "边界框的水平大小。"
  },
  {
    "origin": "CC_STAT_HEIGHT",
    "local": "CC\\统计\\高度"
  },
  {
    "origin": "Python: cv.CC_STAT_HEIGHT",
    "local": "Python:cv.CC\\u STAT\\u高度"
  },
  {
    "origin": "The vertical size of the bounding box.",
    "local": "边界框的垂直大小。"
  },
  {
    "origin": "CC_STAT_AREA",
    "local": "CC\\U统计区域"
  },
  {
    "origin": "Python: cv.CC_STAT_AREA",
    "local": "Python:cv.CC\\u STAT\\u区域"
  },
  {
    "origin": "The total area (in pixels) of the connected component.",
    "local": "连接组件的总面积（以像素为单位）。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "ContourApproximationModes",
    "local": "轮廓近似模式"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "the contour approximation algorithm",
    "local": "轮廓逼近算法"
  },
  {
    "origin": "Enumerator",
    "local": "枚举器"
  },
  {
    "origin": "CHAIN_APPROX_NONE",
    "local": "链约无"
  },
  {
    "origin": "Python: cv.CHAIN_APPROX_NONE",
    "local": "Python:cv.CHAIN\\约\\无"
  },
  {
    "origin": "stores absolutely all the contour points. That is, any 2 subsequent points (x1,y1) and (x2,y2) of the contour will be either horizontal, vertical or diagonal neighbors, that is, max(abs(x1-x2),abs(y2-y1))==1.",
    "local": "绝对存储所有轮廓点。也就是说，轮廓的任何2个后续点（x1，y1）和（x2，y2）将是水平、垂直或对角线邻居，即max（abs（x1-x2），abs（y2-y1））==1。"
  },
  {
    "origin": "CHAIN_APPROX_SIMPLE",
    "local": "链\\u近似\\u简单"
  },
  {
    "origin": "Python: cv.CHAIN_APPROX_SIMPLE",
    "local": "Python:cv.CHAIN\\近似\\简单"
  },
  {
    "origin": "compresses horizontal, vertical, and diagonal segments and leaves only their end points. For example, an up-right rectangular contour is encoded with 4 points.",
    "local": "压缩水平段、垂直段和对角线段，并仅保留其端点。例如，右上的矩形轮廓用4个点编码。"
  },
  {
    "origin": "CHAIN_APPROX_TC89_L1",
    "local": "链条约为TC89 L1"
  },
  {
    "origin": "Python: cv.CHAIN_APPROX_TC89_L1",
    "local": "Python:cv.CHAIN\\u约\\u TC89\\u L1"
  },
  {
    "origin": "applies one of the flavors of the Teh-Chin chain approximation algorithm",
    "local": "应用Chin链近似算法的一种方法"
  },
  {
    "origin": "CHAIN_APPROX_TC89_KCOS",
    "local": "链约"
  },
  {
    "origin": "Python: cv.CHAIN_APPROX_TC89_KCOS",
    "local": "Python:cv.CHAIN\\u约\\u TC89\\u KCOS"
  },
  {
    "origin": "applies one of the flavors of the Teh-Chin chain approximation algorithm",
    "local": "应用Chin链近似算法的一种方法"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "RectanglesIntersectTypes",
    "local": "矩形截面类型"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "types of intersection between rectangles",
    "local": "矩形之间的相交类型"
  },
  {
    "origin": "Enumerator",
    "local": "枚举器"
  },
  {
    "origin": "INTERSECT_NONE",
    "local": "相交\\u无"
  },
  {
    "origin": "Python: cv.INTERSECT_NONE",
    "local": "Python:cv.U无"
  },
  {
    "origin": "No intersection.",
    "local": "没有交叉路口。"
  },
  {
    "origin": "INTERSECT_PARTIAL",
    "local": "部分相交"
  },
  {
    "origin": "Python: cv.INTERSECT_PARTIAL",
    "local": "Python:cv.INTERSECT\\u部分"
  },
  {
    "origin": "There is a partial intersection.",
    "local": "有一个局部交叉点。"
  },
  {
    "origin": "INTERSECT_FULL",
    "local": "交叉点已满"
  },
  {
    "origin": "Python: cv.INTERSECT_FULL",
    "local": "Python:cv.u完整"
  },
  {
    "origin": "One of the rectangle is fully enclosed in the other.",
    "local": "其中一个矩形完全封闭在另一个矩形中。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "RetrievalModes",
    "local": "检索模式"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "mode of the contour retrieval algorithm",
    "local": "轮廓检索算法的模式"
  },
  {
    "origin": "Enumerator",
    "local": "枚举器"
  },
  {
    "origin": "RETR_EXTERNAL",
    "local": "RETR\\ U外部"
  },
  {
    "origin": "Python: cv.RETR_EXTERNAL",
    "local": "Python:cv.RETR\\u外部"
  },
  {
    "origin": "retrieves only the extreme outer contours. It sets",
    "local": "仅检索最外层轮廓。它设定"
  },
  {
    "origin": "for all the contours.",
    "local": "所有的轮廓。"
  },
  {
    "origin": "RETR_LIST",
    "local": "返回列表"
  },
  {
    "origin": "Python: cv.RETR_LIST",
    "local": "Python:cv.RETR\\u列表"
  },
  {
    "origin": "retrieves all of the contours without establishing any hierarchical relationships.",
    "local": "检索所有轮廓，而不建立任何层次关系。"
  },
  {
    "origin": "RETR_CCOMP",
    "local": "重新计算"
  },
  {
    "origin": "Python: cv.RETR_CCOMP",
    "local": "Python:cv.RETR\\u CCOMP"
  },
  {
    "origin": "retrieves all of the contours and organizes them into a two-level hierarchy. At the top level, there are external boundaries of the components. At the second level, there are boundaries of the holes. If there is another contour inside a hole of a connected component, it is still put at the top level.",
    "local": "检索所有轮廓并将其组织为两级层次结构。在顶层，有组件的外部边界。在第二层，有洞的边界。如果在连接部件的孔内有另一个轮廓，则仍将其放置在顶层。"
  },
  {
    "origin": "RETR_TREE",
    "local": "再生树"
  },
  {
    "origin": "Python: cv.RETR_TREE",
    "local": "Python:cv.RETR\\u树"
  },
  {
    "origin": "retrieves all of the contours and reconstructs a full hierarchy of nested contours.",
    "local": "检索所有轮廓并重建嵌套轮廓的完整层次结构。"
  },
  {
    "origin": "RETR_FLOODFILL",
    "local": "回填"
  },
  {
    "origin": "Python: cv.RETR_FLOODFILL",
    "local": "蟒蛇：cv.RETR\\u FLOODFILL"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "ShapeMatchModes",
    "local": "形状码"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "Shape matching methods.",
    "local": "形状匹配方法。"
  },
  {
    "origin": "\\(A\\) denotes object1, \\(B\\) denotes object2",
    "local": "\\（A\\）表示对象1，\\（B\\）表示对象2"
  },
  {
    "origin": "\\(\\begin{array}{l} m^A_i = \\mathrm{sign} (h^A_i) \\cdot \\log{h^A_i} \\\\ m^B_i = \\mathrm{sign} (h^B_i) \\cdot \\log{h^B_i} \\end{array}\\)",
    "local": "\\（\\begin{array}{l}m^A\\u i=\\mathrm{sign}（h^A\\u i）\\cdot\\log{h^A\\u i}\\\\m^B\\u i=\\mathrm{sign}（h^B\\u i）\\cdot\\log{h^B\\u i}\\end{array}\\）"
  },
  {
    "origin": "and \\(h^A_i, h^B_i\\) are the Hu moments of \\(A\\) and \\(B\\) , respectively.",
    "local": "和\\（h^A\\u i，h^B\\u i\\）分别是\\（A\\）和\\（B\\）的Hu矩。"
  },
  {
    "origin": "Enumerator",
    "local": "枚举器"
  },
  {
    "origin": "CONTOURS_MATCH_I1",
    "local": "轮廓匹配"
  },
  {
    "origin": "Python: cv.CONTOURS_MATCH_I1",
    "local": "Python:cv.CONTOURS\\u MATCH\\u I1"
  },
  {
    "origin": "\\[I_1(A,B) = \\sum _{i=1...7} \\left | \\frac{1}{m^A_i} - \\frac{1}{m^B_i} \\right |\\]",
    "local": "\\[I{1（A，B）=\\sum{I=1…7}\\左{frac{1}{m^A{I}-\\frac{1}{m^B{I}\\右}]"
  },
  {
    "origin": "CONTOURS_MATCH_I2",
    "local": "轮廓匹配"
  },
  {
    "origin": "Python: cv.CONTOURS_MATCH_I2",
    "local": "Python:cv.CONTOURS\\u MATCH\\u I2"
  },
  {
    "origin": "\\[I_2(A,B) = \\sum _{i=1...7} \\left | m^A_i - m^B_i \\right |\\]",
    "local": "\\[I|2（A，B）=\\sum{I=1…7}\\左| m^A|I-m^B|I\\右| \\]"
  },
  {
    "origin": "CONTOURS_MATCH_I3",
    "local": "轮廓匹配3"
  },
  {
    "origin": "Python: cv.CONTOURS_MATCH_I3",
    "local": "Python:cv.CONTOURS\\u MATCH\\u I3"
  },
  {
    "origin": "\\[I_3(A,B) = \\max _{i=1...7} \\frac{ \\left| m^A_i - m^B_i \\right| }{ \\left| m^A_i \\right| }\\]",
    "local": "\\[I|3（A，B）=\\max |{I=1…7}\\frac{\\左| m^A|I-m^B|I\\右|}{\\左| m^A|I\\右|}\\]"
  },
  {
    "origin": "Function Documentation",
    "local": "功能文档"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "approxPolyDP()",
    "local": "近似聚合（）"
  },
  {
    "origin": "void cv::approxPolyDP",
    "local": "void cv：：近似聚合"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "curve",
    "local": "曲线"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "approxCurve",
    "local": "近似曲线"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "epsilon",
    "local": "ε"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "closed",
    "local": "关闭"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "approxCurve",
    "local": "近似曲线"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.approxPolyDP(",
    "local": "cv.approxPolyDP公司("
  },
  {
    "origin": "curve, epsilon, closed[, approxCurve]",
    "local": "闭合的ε曲线[，近似曲线]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Approximates a polygonal curve(s) with the specified precision.",
    "local": "以指定的精度近似多边形曲线。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "approximates a curve or a polygon with another curve/polygon with less vertices so that the distance between them is less or equal to the specified precision. It uses the Douglas-Peucker algorithm",
    "local": "用另一条顶点较少的曲线/多边形近似曲线或多边形，使它们之间的距离小于或等于指定的精度。它使用Douglas-Peucker算法"
  },
  {
    "origin": "http://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm",
    "local": "http://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "curve",
    "local": "曲线"
  },
  {
    "origin": "Input vector of a 2D point stored in std::vector or",
    "local": "存储在std：：vector或"
  },
  {
    "origin": "approxCurve",
    "local": "近似曲线"
  },
  {
    "origin": "Result of the approximation. The type should match the type of the input curve.",
    "local": "近似结果。类型应与输入曲线的类型匹配。"
  },
  {
    "origin": "epsilon",
    "local": "ε"
  },
  {
    "origin": "Parameter specifying the approximation accuracy. This is the maximum distance between the original curve and its approximation.",
    "local": "指定近似精度的参数。这是原始曲线与其近似值之间的最大距离。"
  },
  {
    "origin": "closed",
    "local": "关闭"
  },
  {
    "origin": "If true, the approximated curve is closed (its first and last vertices are connected). Otherwise, it is not closed.",
    "local": "如果为true，则近似曲线是闭合的（其第一个顶点和最后一个顶点是连接的）。否则不关闭。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "arcLength()",
    "local": "弧长（）"
  },
  {
    "origin": "double cv::arcLength",
    "local": "双cv：：弧长"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "curve",
    "local": "曲线"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "closed",
    "local": "关闭"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.arcLength(",
    "local": "cv弧长("
  },
  {
    "origin": "curve, closed",
    "local": "曲线，闭合"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates a contour perimeter or a curve length.",
    "local": "计算等高线周长或曲线长度。"
  },
  {
    "origin": "The function computes a curve length or a closed contour perimeter.",
    "local": "该函数计算曲线长度或闭合轮廓周长。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "curve",
    "local": "曲线"
  },
  {
    "origin": "Input vector of 2D points, stored in std::vector or",
    "local": "二维点的输入向量，存储在std:：vector或"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "closed",
    "local": "关闭"
  },
  {
    "origin": "Flag indicating whether the curve is closed or not.",
    "local": "指示曲线是否闭合的标志。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "boundingRect()",
    "local": "边界矩形（）"
  },
  {
    "origin": "cv::boundingRect",
    "local": "cv：：边界矩形"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "array",
    "local": "数组"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.boundingRect(",
    "local": "等速边界矩形("
  },
  {
    "origin": "array",
    "local": "数组"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the up-right bounding rectangle of a point set or non-zero pixels of gray-scale image.",
    "local": "计算点集的右上边界矩形或灰度图像的非零像素。"
  },
  {
    "origin": "The function calculates and returns the minimal up-right bounding rectangle for the specified point set or non-zero pixels of gray-scale image.",
    "local": "该函数计算并返回指定点集或灰度图像非零像素的最小右上边界矩形。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "array",
    "local": "数组"
  },
  {
    "origin": "Input gray-scale image or 2D point set, stored in std::vector or",
    "local": "输入灰度图像或二维点集，存储在std：：vector或"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "boxPoints()",
    "local": "箱点（）"
  },
  {
    "origin": "void cv::boxPoints",
    "local": "void cv:：箱点"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "box",
    "local": "箱"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "points",
    "local": "点数"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "points",
    "local": "点数"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.boxPoints(",
    "local": "cv.箱点("
  },
  {
    "origin": "box[, points]",
    "local": "方框[，点]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Finds the four vertices of a rotated rect. Useful to draw the rotated rectangle.",
    "local": "查找旋转矩形的四个顶点。用于绘制旋转的矩形。"
  },
  {
    "origin": "The function finds the four vertices of a rotated rectangle. This function is useful to draw the rectangle. In C++, instead of using this function, you can directly use",
    "local": "该函数用于查找旋转矩形的四个顶点。此函数用于绘制矩形。在C++中，不用使用这个函数，可以直接使用"
  },
  {
    "origin": "method. Please visit the",
    "local": "方法。请访问"
  },
  {
    "origin": "for more information.",
    "local": "更多信息。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "box",
    "local": "箱"
  },
  {
    "origin": "The input rotated rectangle. It may be the output of",
    "local": "输入旋转矩形。它可能是"
  },
  {
    "origin": "points",
    "local": "点数"
  },
  {
    "origin": "The output array of four vertices of rectangles.",
    "local": "矩形的四个顶点的输出数组。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "connectedComponents()",
    "local": "connectedComponents（）"
  },
  {
    "origin": "[1/2]",
    "local": "[1/2]"
  },
  {
    "origin": "int cv::connectedComponents",
    "local": "int cv：：连接的组件"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "image",
    "local": "形象"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "labels",
    "local": "标签"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "connectivity",
    "local": "连通性"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ltype",
    "local": "L类型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ccltype",
    "local": "CCL类型"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval, labels",
    "local": "检索，标签"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.connectedComponents(",
    "local": "cv.连接部件("
  },
  {
    "origin": "image[, labels[, connectivity[, ltype]]]",
    "local": "图像[，标签[，连接性[，ltype]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "retval, labels",
    "local": "检索，标签"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.connectedComponentsWithAlgorithm(",
    "local": "cv.连接组件("
  },
  {
    "origin": "image, connectivity, ltype, ccltype[, labels]",
    "local": "图像，连接，ltype，ccltype[，标签]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "computes the connected components labeled image of boolean image",
    "local": "计算标记为布尔图像的图像的连接组件"
  },
  {
    "origin": "image with 4 or 8 way connectivity - returns N, the total number of labels [0, N-1] where 0 represents the background label. ltype specifies the output label image type, an important consideration based on the total number of labels or alternatively the total number of pixels in the source image. ccltype specifies the connected components labeling algorithm to use, currently Grana (BBDT) and Wu's (SAUF)",
    "local": "具有4路或8路连接的图像-返回N，标签总数[0，N-1]，其中0表示背景标签。ltype指定输出标签图像类型，这是基于标签总数或源图像中像素总数的重要考虑因素。ccltype指定要使用的连接组件标记算法，当前是Grana（BBDT）和Wu（SAUF）"
  },
  {
    "origin": "algorithms are supported, see the",
    "local": "支持算法，请参阅"
  },
  {
    "origin": "for details. Note that SAUF algorithm forces a row major ordering of labels while BBDT does not. This function uses parallel version of both Grana and Wu's algorithms if at least one allowed parallel framework is enabled and if the rows of the image are at least twice the number returned by",
    "local": "详情。注意，SAUF算法强制对标签进行行主排序，而BBDT不强制。如果至少启用了一个允许的并行框架，并且图像的行数至少是"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "image",
    "local": "形象"
  },
  {
    "origin": "the 8-bit single-channel image to be labeled",
    "local": "要标记的8位单通道图像"
  },
  {
    "origin": "labels",
    "local": "标签"
  },
  {
    "origin": "destination labeled image",
    "local": "目标标记图像"
  },
  {
    "origin": "connectivity",
    "local": "连通性"
  },
  {
    "origin": "8 or 4 for 8-way or 4-way connectivity respectively",
    "local": "8路或4路连接分别为8路或4路"
  },
  {
    "origin": "ltype",
    "local": "L类型"
  },
  {
    "origin": "output image label type. Currently CV_32S and CV_16U are supported.",
    "local": "输出图像标签类型。目前支持CV\\ U 32S和CV\\ U 16U。"
  },
  {
    "origin": "ccltype",
    "local": "CCL类型"
  },
  {
    "origin": "connected components algorithm type (see the",
    "local": "连接组件算法类型（请参见"
  },
  {
    "origin": ").",
    "local": ")."
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "connectedComponents()",
    "local": "connectedComponents（）"
  },
  {
    "origin": "[2/2]",
    "local": "[2/2]"
  },
  {
    "origin": "int cv::connectedComponents",
    "local": "int cv：：连接的组件"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "image",
    "local": "形象"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "labels",
    "local": "标签"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "connectivity",
    "local": "连通性"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ltype",
    "local": "L类型"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval, labels",
    "local": "检索，标签"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.connectedComponents(",
    "local": "cv.连接部件("
  },
  {
    "origin": "image[, labels[, connectivity[, ltype]]]",
    "local": "图像[，标签[，连接性[，ltype]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "retval, labels",
    "local": "检索，标签"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.connectedComponentsWithAlgorithm(",
    "local": "cv.连接组件("
  },
  {
    "origin": "image, connectivity, ltype, ccltype[, labels]",
    "local": "图像，连接，ltype，ccltype[，标签]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "image",
    "local": "形象"
  },
  {
    "origin": "the 8-bit single-channel image to be labeled",
    "local": "要标记的8位单通道图像"
  },
  {
    "origin": "labels",
    "local": "标签"
  },
  {
    "origin": "destination labeled image",
    "local": "目标标记图像"
  },
  {
    "origin": "connectivity",
    "local": "连通性"
  },
  {
    "origin": "8 or 4 for 8-way or 4-way connectivity respectively",
    "local": "8路或4路连接分别为8路或4路"
  },
  {
    "origin": "ltype",
    "local": "L类型"
  },
  {
    "origin": "output image label type. Currently CV_32S and CV_16U are supported.",
    "local": "输出图像标签类型。目前支持CV\\ U 32S和CV\\ U 16U。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "connectedComponentsWithStats()",
    "local": "ConnectedComponentsWithStats（）"
  },
  {
    "origin": "[1/2]",
    "local": "[1/2]"
  },
  {
    "origin": "int cv::connectedComponentsWithStats",
    "local": "int cv：：连接的组件swithstats"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "image",
    "local": "形象"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "labels",
    "local": "标签"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "stats",
    "local": "统计数据"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "centroids",
    "local": "质心"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "connectivity",
    "local": "连通性"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ltype",
    "local": "L类型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ccltype",
    "local": "CCL类型"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval, labels, stats, centroids",
    "local": "返回、标签、统计、质心"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.connectedComponentsWithStats(",
    "local": "cv.连接组件状态"
  },
  {
    "origin": "image[, labels[, stats[, centroids[, connectivity[, ltype]]]]]",
    "local": "图像[，标签[，统计信息[，质心[，连接性[，ltype]]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "retval, labels, stats, centroids",
    "local": "返回、标签、统计、质心"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.connectedComponentsWithStatsWithAlgorithm(",
    "local": "cv.connectedComponentsWithStatsWithAlgorithm连接组件("
  },
  {
    "origin": "image, connectivity, ltype, ccltype[, labels[, stats[, centroids]]]",
    "local": "图像，连接性，ltype，ccltype[，标签[，统计信息[，质心]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "computes the connected components labeled image of boolean image and also produces a statistics output for each label",
    "local": "计算标记为布尔图像的图像的连接组件，并为每个标签生成统计输出"
  },
  {
    "origin": "image with 4 or 8 way connectivity - returns N, the total number of labels [0, N-1] where 0 represents the background label. ltype specifies the output label image type, an important consideration based on the total number of labels or alternatively the total number of pixels in the source image. ccltype specifies the connected components labeling algorithm to use, currently Grana's (BBDT) and Wu's (SAUF)",
    "local": "具有4路或8路连接的图像-返回N，标签总数[0，N-1]，其中0表示背景标签。ltype指定输出标签图像类型，这是基于标签总数或源图像中像素总数的重要考虑因素。ccltype指定要使用的连接组件标记算法，当前是Grana的（BBDT）和Wu的（SAUF）"
  },
  {
    "origin": "algorithms are supported, see the",
    "local": "支持算法，请参阅"
  },
  {
    "origin": "for details. Note that SAUF algorithm forces a row major ordering of labels while BBDT does not. This function uses parallel version of both Grana and Wu's algorithms (statistics included) if at least one allowed parallel framework is enabled and if the rows of the image are at least twice the number returned by",
    "local": "详情。注意，SAUF算法强制对标签进行行主排序，而BBDT不强制。如果至少启用了一个允许的并行框架，并且图像的行数至少是所返回的行数的两倍，则此函数将使用Grana和Wu算法的并行版本（包括统计信息）"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "image",
    "local": "形象"
  },
  {
    "origin": "the 8-bit single-channel image to be labeled",
    "local": "要标记的8位单通道图像"
  },
  {
    "origin": "labels",
    "local": "标签"
  },
  {
    "origin": "destination labeled image",
    "local": "目标标记图像"
  },
  {
    "origin": "stats",
    "local": "统计数据"
  },
  {
    "origin": "statistics output for each label, including the background label. Statistics are accessed via stats(label, COLUMN) where COLUMN is one of",
    "local": "每个标签的统计输出，包括背景标签。通过stats（label，COLUMN）访问统计信息，其中COLUMN是"
  },
  {
    "origin": ", selecting the statistic. The data type is CV_32S.",
    "local": "，选择统计信息。数据类型为CVň32S。"
  },
  {
    "origin": "centroids",
    "local": "质心"
  },
  {
    "origin": "centroid output for each label, including the background label. Centroids are accessed via centroids(label, 0) for x and centroids(label, 1) for y. The data type CV_64F.",
    "local": "每个标签的质心输出，包括背景标签。质心可以通过质心（标签，0）访问x，质心（标签，1）访问y。数据类型cv64f。"
  },
  {
    "origin": "connectivity",
    "local": "连通性"
  },
  {
    "origin": "8 or 4 for 8-way or 4-way connectivity respectively",
    "local": "8路或4路连接分别为8路或4路"
  },
  {
    "origin": "ltype",
    "local": "L类型"
  },
  {
    "origin": "output image label type. Currently CV_32S and CV_16U are supported.",
    "local": "输出图像标签类型。目前支持CV\\ U 32S和CV\\ U 16U。"
  },
  {
    "origin": "ccltype",
    "local": "CCL类型"
  },
  {
    "origin": "connected components algorithm type (see",
    "local": "连接组件算法类型（请参见"
  },
  {
    "origin": ").",
    "local": ")."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "connectedComponentsWithStats()",
    "local": "ConnectedComponentsWithStats（）"
  },
  {
    "origin": "[2/2]",
    "local": "[2/2]"
  },
  {
    "origin": "int cv::connectedComponentsWithStats",
    "local": "int cv：：连接的组件swithstats"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "image",
    "local": "形象"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "labels",
    "local": "标签"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "stats",
    "local": "统计数据"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "centroids",
    "local": "质心"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "connectivity",
    "local": "连通性"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ltype",
    "local": "L类型"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval, labels, stats, centroids",
    "local": "返回、标签、统计、质心"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.connectedComponentsWithStats(",
    "local": "cv.连接组件状态"
  },
  {
    "origin": "image[, labels[, stats[, centroids[, connectivity[, ltype]]]]]",
    "local": "图像[，标签[，统计信息[，质心[，连接性[，ltype]]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "retval, labels, stats, centroids",
    "local": "返回、标签、统计、质心"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.connectedComponentsWithStatsWithAlgorithm(",
    "local": "cv.connectedComponentsWithStatsWithAlgorithm连接组件("
  },
  {
    "origin": "image, connectivity, ltype, ccltype[, labels[, stats[, centroids]]]",
    "local": "图像，连接性，ltype，ccltype[，标签[，统计信息[，质心]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "image",
    "local": "形象"
  },
  {
    "origin": "the 8-bit single-channel image to be labeled",
    "local": "要标记的8位单通道图像"
  },
  {
    "origin": "labels",
    "local": "标签"
  },
  {
    "origin": "destination labeled image",
    "local": "目标标记图像"
  },
  {
    "origin": "stats",
    "local": "统计数据"
  },
  {
    "origin": "statistics output for each label, including the background label. Statistics are accessed via stats(label, COLUMN) where COLUMN is one of",
    "local": "每个标签的统计输出，包括背景标签。通过stats（label，COLUMN）访问统计信息，其中COLUMN是"
  },
  {
    "origin": ", selecting the statistic. The data type is CV_32S.",
    "local": "，选择统计信息。数据类型为CVň32S。"
  },
  {
    "origin": "centroids",
    "local": "质心"
  },
  {
    "origin": "centroid output for each label, including the background label. Centroids are accessed via centroids(label, 0) for x and centroids(label, 1) for y. The data type CV_64F.",
    "local": "每个标签的质心输出，包括背景标签。质心可以通过质心（标签，0）访问x，质心（标签，1）访问y。数据类型cv64f。"
  },
  {
    "origin": "connectivity",
    "local": "连通性"
  },
  {
    "origin": "8 or 4 for 8-way or 4-way connectivity respectively",
    "local": "8路或4路连接分别为8路或4路"
  },
  {
    "origin": "ltype",
    "local": "L类型"
  },
  {
    "origin": "output image label type. Currently CV_32S and CV_16U are supported.",
    "local": "输出图像标签类型。目前支持CV\\ U 32S和CV\\ U 16U。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "contourArea()",
    "local": "轮廓面积（）"
  },
  {
    "origin": "double cv::contourArea",
    "local": "双等高线面积"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "contour",
    "local": "轮廓"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "oriented",
    "local": "面向的"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.contourArea(",
    "local": "等高线面积("
  },
  {
    "origin": "contour[, oriented]",
    "local": "轮廓[，定向]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates a contour area.",
    "local": "计算等高线面积。"
  },
  {
    "origin": "The function computes a contour area. Similarly to moments , the area is computed using the Green formula. Thus, the returned area and the number of non-zero pixels, if you draw the contour using",
    "local": "该函数计算等高线面积。与矩类似，面积使用格林公式计算。因此，如果使用"
  },
  {
    "origin": "or",
    "local": "或"
  },
  {
    "origin": ", can be different. Also, the function will most certainly give a wrong results for contours with self-intersections.",
    "local": "，可以不同。此外，对于具有自相交的等高线，该函数肯定会给出错误的结果。"
  },
  {
    "origin": "Example:",
    "local": "例子："
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "contour",
    "local": "轮廓"
  },
  {
    "origin": "Input vector of 2D points (contour vertices), stored in std::vector or",
    "local": "二维点（轮廓顶点）的输入向量，存储在std：：vector或"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "oriented",
    "local": "面向的"
  },
  {
    "origin": "Oriented area flag. If it is true, the function returns a signed area value, depending on the contour orientation (clockwise or counter-clockwise). Using this feature you can determine orientation of a contour by taking the sign of an area. By default, the parameter is false, which means that the absolute value is returned.",
    "local": "定向区域标志。如果为true，函数将根据轮廓方向（顺时针或逆时针）返回带符号的区域值。使用此功能，可以通过获取某个区域的符号来确定轮廓的方向。默认情况下，参数为false，这意味着返回绝对值。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "convexHull()",
    "local": "凸轮（）"
  },
  {
    "origin": "void cv::convexHull",
    "local": "void cv：：凸形"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "points",
    "local": "点数"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "hull",
    "local": "船体"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "clockwise",
    "local": "顺时针方向的"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "returnPoints",
    "local": "返回点"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "hull",
    "local": "船体"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.convexHull(",
    "local": "cv.convexHull公司("
  },
  {
    "origin": "points[, hull[, clockwise[, returnPoints]]]",
    "local": "点[，外壳[，顺时针[，返回点]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Finds the convex hull of a point set.",
    "local": "查找点集的凸包。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "finds the convex hull of a 2D point set using the Sklansky's algorithm",
    "local": "用Sklansky算法求二维点集的凸包"
  },
  {
    "origin": "that has",
    "local": "那已经"
  },
  {
    "origin": "O(N logN)",
    "local": "O（N对数）"
  },
  {
    "origin": "complexity in the current implementation.",
    "local": "当前实现的复杂性。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "points",
    "local": "点数"
  },
  {
    "origin": "Input 2D point set, stored in std::vector or",
    "local": "输入二维点集，存储在std:：vector或"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "hull",
    "local": "船体"
  },
  {
    "origin": "Output convex hull. It is either an integer vector of indices or vector of points. In the first case, the hull elements are 0-based indices of the convex hull points in the original array (since the set of convex hull points is a subset of the original point set). In the second case, hull elements are the convex hull points themselves.",
    "local": "输出凸包。它要么是指数的整数向量，要么是点的向量。在第一种情况下，壳元素是原始数组中凸壳点的基于0的索引（因为凸壳点集是原始点集的子集）。在第二种情况下，壳元素本身就是凸壳点。"
  },
  {
    "origin": "clockwise",
    "local": "顺时针方向的"
  },
  {
    "origin": "Orientation flag. If it is true, the output convex hull is oriented clockwise. Otherwise, it is oriented counter-clockwise. The assumed coordinate system has its X axis pointing to the right, and its Y axis pointing upwards.",
    "local": "方向标志。如果为真，则输出凸包是顺时针方向的。否则，它是逆时针方向的。假定坐标系的X轴指向右侧，Y轴指向上方。"
  },
  {
    "origin": "returnPoints",
    "local": "返回点"
  },
  {
    "origin": "Operation flag. In case of a matrix, when the flag is true, the function returns convex hull points. Otherwise, it returns indices of the convex hull points. When the output array is std::vector, the flag is ignored, and the output depends on the type of the vector: std::vector&lt;int&gt; implies returnPoints=false, std::vector&lt;Point&gt; implies returnPoints=true.",
    "local": "操作标志。对于矩阵，当标志为真时，函数返回凸包点。否则，它返回凸包点的索引。当输出数组为std:：vector时，将忽略该标志，并且输出取决于向量的类型：std:：vector&lt；内部&gt；表示returnPoints=false，std:：vector&lt；点&gt；表示返回点=真。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": "should be different arrays, inplace processing isn't supported.",
    "local": "应该是不同的数组，不支持就地处理。"
  },
  {
    "origin": "Check",
    "local": "检查"
  },
  {
    "origin": "for more details.",
    "local": "更多细节。"
  },
  {
    "origin": "useful links:",
    "local": "有用的链接："
  },
  {
    "origin": "https://www.learnopencv.com/convex-hull-using-opencv-in-python-and-c/",
    "local": "https://www.learnopencv.com/convex-hull-using-opencv-in-python-and-c/"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "convexityDefects()",
    "local": "凸面缺陷（）"
  },
  {
    "origin": "void cv::convexityDefects",
    "local": "void cv:：凸面缺陷"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "contour",
    "local": "轮廓"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "convexhull",
    "local": "凸包"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "convexityDefects",
    "local": "凸性缺陷"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "convexityDefects",
    "local": "凸性缺陷"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.convexityDefects(",
    "local": "cv.凸面缺陷("
  },
  {
    "origin": "contour, convexhull[, convexityDefects]",
    "local": "等高线，凸面圆角[，凸面缺陷]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Finds the convexity defects of a contour.",
    "local": "找出轮廓的凸面缺陷。"
  },
  {
    "origin": "The figure below displays convexity defects of a hand contour:",
    "local": "下图显示了手部轮廓的凸出缺陷："
  },
  {
    "origin": "image",
    "local": "形象"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "contour",
    "local": "轮廓"
  },
  {
    "origin": "Input contour.",
    "local": "输入轮廓。"
  },
  {
    "origin": "convexhull",
    "local": "凸包"
  },
  {
    "origin": "Convex hull obtained using convexHull that should contain indices of the contour points that make the hull.",
    "local": "凸包是用凸包得到的，它应该包含构成外壳的轮廓点的索引。"
  },
  {
    "origin": "convexityDefects",
    "local": "凸性缺陷"
  },
  {
    "origin": "The output vector of convexity defects. In C++ and the new Python/Java interface each convexity defect is represented as 4-element integer vector (a.k.a.",
    "local": "凸性缺陷的输出向量。在C++和新的Python／java接口中，每个凸性缺陷被表示为4元整数向量（A.K.A）。"
  },
  {
    "origin": "): (start_index, end_index, farthest_pt_index, fixpt_depth), where indices are 0-based indices in the original contour of the convexity defect beginning, end and the farthest point, and fixpt_depth is fixed-point approximation (with 8 fractional bits) of the distance between the farthest contour point and the hull. That is, to get the floating-point value of the depth will be fixpt_depth/256.0.",
    "local": ")：（起点指数、终点指数、最远点指数、固定点深度），其中指数是凸度缺陷起点、终点和最远点的原始轮廓中基于0的指数，固定点深度是最远轮廓点和外壳之间距离的定点近似值（8个分数位）。也就是说，得到的浮点值的深度将是fixpt_depth/256.0。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "createGeneralizedHoughBallard()",
    "local": "CreateGeneralizedHaughBallard（）"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; cv::createGeneralizedHoughBallard",
    "local": "&燃气轮机；简历：CreateGeneratedHaughtBallard"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.createGeneralizedHoughBallard(",
    "local": "坎巴拉德简历("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Creates a smart pointer to a",
    "local": "创建指向"
  },
  {
    "origin": "class and initializes it.",
    "local": "类并对其进行初始化。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "createGeneralizedHoughGuil()",
    "local": "rcetateGneraliedHouge Gil）"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; cv::createGeneralizedHoughGuil",
    "local": "一分t；ge；cv：crerateGneralizedHoge_il"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.createGeneralizedHoughGuil(",
    "local": "cV.crerateneralideHouhgel"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Creates a smart pointer to a",
    "local": "创建指向"
  },
  {
    "origin": "class and initializes it.",
    "local": "类并对其进行初始化。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "findContours()",
    "local": "findContours（）"
  },
  {
    "origin": "[1/2]",
    "local": "[1/2]"
  },
  {
    "origin": "void cv::findContours",
    "local": "void cv:：findContours"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "image",
    "local": "形象"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "contours",
    "local": "等高线"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "hierarchy",
    "local": "等级制度"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "mode",
    "local": "模式"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "method",
    "local": "方法"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "offset",
    "local": "抵消"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "contours, hierarchy",
    "local": "等高线，层次"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.findContours(",
    "local": "简历findContours("
  },
  {
    "origin": "image, mode, method[, contours[, hierarchy[, offset]]]",
    "local": "图像，模式，方法[，轮廓[，层次结构[，偏移]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Finds contours in a binary image.",
    "local": "在二值图像中查找轮廓。"
  },
  {
    "origin": "The function retrieves contours from the binary image using the algorithm",
    "local": "该函数使用该算法从二值图像中检索轮廓"
  },
  {
    "origin": ". The contours are a useful tool for shape analysis and object detection and recognition. See squares.cpp in the OpenCV sample directory.",
    "local": ". 轮廓线是形状分析和目标检测与识别的有用工具。请参见OpenCV示例目录中的squares.cpp。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "Since opencv 3.2 source image is not modified by this function.",
    "local": "由于opencv3.2源图像不被此函数修改。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "image",
    "local": "形象"
  },
  {
    "origin": "Source, an 8-bit single-channel image. Non-zero pixels are treated as 1's. Zero pixels remain 0's, so the image is treated as binary . You can use",
    "local": "源，8位单通道图像。非零像素被视为1。零像素保持为0，因此图像被视为二进制。你可以用"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and others to create a binary image out of a grayscale or color one. If mode equals to",
    "local": "，和其他创建一个二进制图像的灰度或彩色之一。如果mode等于"
  },
  {
    "origin": "or",
    "local": "或"
  },
  {
    "origin": ", the input can also be a 32-bit integer image of labels (CV_32SC1).",
    "local": "，输入也可以是标签的32位整数图像（cv32sc1）。"
  },
  {
    "origin": "contours",
    "local": "等高线"
  },
  {
    "origin": "Detected contours. Each contour is stored as a vector of points (e.g. std::vector&lt;std::vector&lt;cv::Point&gt; &gt;).",
    "local": "检测到的轮廓。每个等高线存储为点的向量（例如std：：vector&lt；标准：：向量&lt；cv：：点&gt&gt；）。"
  },
  {
    "origin": "hierarchy",
    "local": "等级制度"
  },
  {
    "origin": "Optional output vector (e.g. std::vector&lt;cv::Vec4i&gt;), containing information about the image topology. It has as many elements as the number of contours. For each i-th contour contours[i], the elements hierarchy[i][0] , hierarchy[i][1] , hierarchy[i][2] , and hierarchy[i][3] are set to 0-based indices in contours of the next and previous contours at the same hierarchical level, the first child contour and the parent contour, respectively. If for the contour i there are no next, previous, parent, or nested contours, the corresponding elements of hierarchy[i] will be negative.",
    "local": "可选输出向量（例如std：：vector&lt；cv：：Vec4i&gt；），包含有关图像拓扑的信息。它的元素和轮廓的数量一样多。对于每个第i个等高线[i]，元素层次[i][0]、层次[i][1]、层次[i][2]和层次[i][3]分别设置为同一层次的下一个和上一个等高线的等高线、第一个子等高线和父等高线中基于0的索引。如果等高线i没有下一个、上一个、父等高线或嵌套等高线，则层次结构[i]的相应元素将为负。"
  },
  {
    "origin": "mode",
    "local": "模式"
  },
  {
    "origin": "Contour retrieval mode, see",
    "local": "轮廓检索模式，请参见"
  },
  {
    "origin": "method",
    "local": "方法"
  },
  {
    "origin": "Contour approximation method, see",
    "local": "轮廓近似方法，请参见"
  },
  {
    "origin": "offset",
    "local": "抵消"
  },
  {
    "origin": "Optional offset by which every contour point is shifted. This is useful if the contours are extracted from the image ROI and then they should be analyzed in the whole image context.",
    "local": "可选偏移量，每个轮廓点偏移量。如果从图像ROI中提取轮廓，然后在整个图像上下文中对其进行分析，这将非常有用。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "findContours()",
    "local": "findContours（）"
  },
  {
    "origin": "[2/2]",
    "local": "[2/2]"
  },
  {
    "origin": "void cv::findContours",
    "local": "void cv:：findContours"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "image",
    "local": "形象"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "contours",
    "local": "等高线"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "mode",
    "local": "模式"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "method",
    "local": "方法"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "offset",
    "local": "抵消"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "contours, hierarchy",
    "local": "等高线，层次"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.findContours(",
    "local": "简历findContours("
  },
  {
    "origin": "image, mode, method[, contours[, hierarchy[, offset]]]",
    "local": "图像，模式，方法[，轮廓[，层次结构[，偏移]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "fitEllipse()",
    "local": "fitEllipse（）"
  },
  {
    "origin": "cv::fitEllipse",
    "local": "cv：：椭圆"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "points",
    "local": "点数"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.fitEllipse(",
    "local": "等速椭圆("
  },
  {
    "origin": "points",
    "local": "点数"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Fits an ellipse around a set of 2D points.",
    "local": "围绕一组二维点拟合椭圆。"
  },
  {
    "origin": "The function calculates the ellipse that fits (in a least-squares sense) a set of 2D points best of all. It returns the rotated rectangle in which the ellipse is inscribed. The first algorithm described by",
    "local": "该函数计算最适合（在最小二乘意义上）一组2D点的椭圆。它返回椭圆内接的旋转矩形。第一个算法由"
  },
  {
    "origin": "is used. Developer should keep in mind that it is possible that the returned ellipse/rotatedRect data contains negative indices, due to the data points being close to the border of the containing",
    "local": "已使用。开发人员应该记住，返回的椭圆/旋转方向图数据可能包含负索引，因为数据点靠近包含对象的边界"
  },
  {
    "origin": "element.",
    "local": "元素。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "points",
    "local": "点数"
  },
  {
    "origin": "Input 2D point set, stored in std::vector&lt;&gt; or",
    "local": "输入二维点集，存储在std:：vector&lt&燃气轮机；或"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "fitEllipseAMS()",
    "local": "fitEllipseAMS（）"
  },
  {
    "origin": "cv::fitEllipseAMS",
    "local": "简历：fitEllipseAMS"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "points",
    "local": "点数"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.fitEllipseAMS(",
    "local": "fitEllipseAMS简历("
  },
  {
    "origin": "points",
    "local": "点数"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Fits an ellipse around a set of 2D points.",
    "local": "围绕一组二维点拟合椭圆。"
  },
  {
    "origin": "The function calculates the ellipse that fits a set of 2D points. It returns the rotated rectangle in which the ellipse is inscribed. The Approximate Mean Square (AMS) proposed by",
    "local": "该函数计算拟合一组二维点的椭圆。它返回椭圆内接的旋转矩形。近似均方（AMS）由"
  },
  {
    "origin": "is used.",
    "local": "已使用。"
  },
  {
    "origin": "For an ellipse, this basis set is \\( \\chi= \\left(x^2, x y, y^2, x, y, 1\\right) \\), which is a set of six free coefficients \\( A^T=\\left\\{A_{\\text{xx}},A_{\\text{xy}},A_{\\text{yy}},A_x,A_y,A_0\\right\\} \\). However, to specify an ellipse, all that is needed is five numbers; the major and minor axes lengths \\( (a,b) \\), the position \\( (x_0,y_0) \\), and the orientation \\( \\theta \\). This is because the basis set includes lines, quadratics, parabolic and hyperbolic functions as well as elliptical functions as possible fits. If the fit is found to be a parabolic or hyperbolic function then the standard",
    "local": "对于椭圆，这个基集是\\（\\chi=\\ left（x^2，x y，y^2，x，y，1\\ right）\\），这是一组六个自由系数\\（a^T=\\ left\\{a{\\text{xx}，a{\\text{xy}，a{\\text{yy}，a{x，a{y，a{0\\ right\\}）。然而，要指定一个椭圆，只需要五个数字；长轴和短轴长度\\（（a，b）\\）、位置\\（（x\\u 0，y\\u 0）\\）和方向\\（\\theta\\）。这是因为基集包括直线、二次函数、抛物线函数、双曲函数以及椭圆函数。如果发现拟合是抛物线函数或双曲函数，则标准"
  },
  {
    "origin": "method is used. The AMS method restricts the fit to parabolic, hyperbolic and elliptical curves by imposing the condition that \\( A^T ( D_x^T D_x + D_y^T D_y) A = 1 \\) where the matrices \\( Dx \\) and \\( Dy \\) are the partial derivatives of the design matrix \\( D \\) with respect to x and y. The matrices are formed row by row applying the following to each of the points in the set:",
    "local": "方法。AMS方法通过施加条件\\（A^T（D\\u x^T D\\u x+D\\u y^T D\\u y）A=1\\）来限制对抛物线、双曲线和椭圆曲线的拟合，其中矩阵\\（Dx\\）和\\（Dy\\）是设计矩阵\\（D\\）对x和y的偏导数。矩阵逐行形成，将以下内容应用于集合中的每个点："
  },
  {
    "origin": "\\begin{align*} D(i,:)&amp;=\\left\\{x_i^2, x_i y_i, y_i^2, x_i, y_i, 1\\right\\} &amp; D_x(i,:)&amp;=\\left\\{2 x_i,y_i,0,1,0,0\\right\\} &amp; D_y(i,:)&amp;=\\left\\{0,x_i,2 y_i,0,1,0\\right\\} \\end{align*}",
    "local": "\\开始{align*}D（i，：）&amp=\\左\\{x\\u i^2，x\\u i y\\u i，y\\u i^2，x\\u i，y\\u i，1\\右\\}&amp；D_x（i，：）&amp=\\左\\{2 x\\u i，y\\u i，0,1,0,0\\右\\}&amp；是（i，：）&amp=\\左\\{0，x\\u i，2 y\\u i，0,1,0\\右\\}\\结束{align*}"
  },
  {
    "origin": "The AMS method minimizes the cost function",
    "local": "AMS方法使成本函数最小化"
  },
  {
    "origin": "\\begin{equation*} \\epsilon ^2=\\frac{ A^T D^T D A }{ A^T (D_x^T D_x + D_y^T D_y) A^T } \\end{equation*}",
    "local": "\\ begin{equation*}\\ epsilon ^ 2=\\ frac{a ^ t d ^ t da}{a ^ t（d x ^ t d x+d y ^ t d y）a ^ t}\\ end{equation*}"
  },
  {
    "origin": "The minimum cost is found by solving the generalized eigenvalue problem.",
    "local": "通过求解广义特征值问题，找到了最小代价。"
  },
  {
    "origin": "\\begin{equation*} D^T D A = \\lambda \\left( D_x^T D_x + D_y^T D_y\\right) A \\end{equation*}",
    "local": "\\开始{等式*}D^T D A=\\lambda\\左（D\\u x^T D\\u x+D\\u y^T D\\u y\\右）结束{等式*}"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "points",
    "local": "点数"
  },
  {
    "origin": "Input 2D point set, stored in std::vector&lt;&gt; or",
    "local": "输入二维点集，存储在std:：vector&lt&燃气轮机；或"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "fitEllipseDirect()",
    "local": "fitEllipseDirect（）"
  },
  {
    "origin": "cv::fitEllipseDirect",
    "local": "cv：：fitEllipseDirect公司"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "points",
    "local": "点数"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.fitEllipseDirect(",
    "local": "fitEllipseDirect简历("
  },
  {
    "origin": "points",
    "local": "点数"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Fits an ellipse around a set of 2D points.",
    "local": "围绕一组二维点拟合椭圆。"
  },
  {
    "origin": "The function calculates the ellipse that fits a set of 2D points. It returns the rotated rectangle in which the ellipse is inscribed. The Direct least square (Direct) method by",
    "local": "该函数计算拟合一组二维点的椭圆。它返回椭圆内接的旋转矩形。直接最小二乘法"
  },
  {
    "origin": "is used.",
    "local": "已使用。"
  },
  {
    "origin": "For an ellipse, this basis set is \\( \\chi= \\left(x^2, x y, y^2, x, y, 1\\right) \\), which is a set of six free coefficients \\( A^T=\\left\\{A_{\\text{xx}},A_{\\text{xy}},A_{\\text{yy}},A_x,A_y,A_0\\right\\} \\). However, to specify an ellipse, all that is needed is five numbers; the major and minor axes lengths \\( (a,b) \\), the position \\( (x_0,y_0) \\), and the orientation \\( \\theta \\). This is because the basis set includes lines, quadratics, parabolic and hyperbolic functions as well as elliptical functions as possible fits. The Direct method confines the fit to ellipses by ensuring that \\( 4 A_{xx} A_{yy}- A_{xy}^2 &gt; 0 \\). The condition imposed is that \\( 4 A_{xx} A_{yy}- A_{xy}^2=1 \\) which satisfies the inequality and as the coefficients can be arbitrarily scaled is not overly restrictive.",
    "local": "对于椭圆，这个基集是\\（\\chi=\\ left（x^2，x y，y^2，x，y，1\\ right）\\），这是一组六个自由系数\\（a^T=\\ left\\{a{\\text{xx}，a{\\text{xy}，a{\\text{yy}，a{x，a{y，a{0\\ right\\}）。然而，要指定一个椭圆，只需要五个数字；长轴和短轴长度\\（（a，b）\\）、位置\\（（x\\u 0，y\\u 0）\\）和方向\\（\\theta\\）。这是因为基集包括直线、二次函数、抛物线函数、双曲函数以及椭圆函数。直接方法通过确保\\（4 A{xx}A{yy}-A{xy}^2&gt；0 \\). 所施加的条件是满足不等式的\\（4 A{xx}A{yy}-A{xy}^2=1\\），因为系数可以任意缩放，所以没有过度限制。"
  },
  {
    "origin": "\\begin{equation*} \\epsilon ^2= A^T D^T D A \\quad \\text{with} \\quad A^T C A =1 \\quad \\text{and} \\quad C=\\left(\\begin{matrix} 0 &amp; 0 &amp; 2 &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; -1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\\\ 2 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\end{matrix} \\right) \\end{equation*}",
    "local": "\\begin{equation*}\\epsilon^2=A^T D^T D A\\quad\\text{with}\\quad A^T C A=1\\quad\\text{and}\\quad C=\\ left（\\begin{matrix}0&amp；0&amp；2和；0&amp；0&amp；0\\\\0和-1和；0&amp；0&amp；0&amp；0\\\\2和；0&amp；0&amp；0&amp；0&amp；0\\\\0和；0&amp；0&amp；0&amp；0&amp；0\\\\0和；0&amp；0&amp；0&amp；0&amp；0\\\\0和；0&amp；0&amp；0&amp；0&amp；0\\end{matrix}\\right）\\end{equation*}"
  },
  {
    "origin": "The minimum cost is found by solving the generalized eigenvalue problem.",
    "local": "通过求解广义特征值问题，找到了最小代价。"
  },
  {
    "origin": "\\begin{equation*} D^T D A = \\lambda \\left( C\\right) A \\end{equation*}",
    "local": "\\开始{等式*}D^T D A=\\lambda\\左（C\\右）A\\结束{等式*}"
  },
  {
    "origin": "The system produces only one positive eigenvalue \\( \\lambda\\) which is chosen as the solution with its eigenvector \\(\\mathbf{u}\\). These are used to find the coefficients",
    "local": "系统只产生一个正特征值\\（\\lambda\\），并用其特征向量\\（\\mathbf{u}\\）作为解。这些是用来求系数的"
  },
  {
    "origin": "\\begin{equation*} A = \\sqrt{\\frac{1}{\\mathbf{u}^T C \\mathbf{u}}} \\mathbf{u} \\end{equation*}",
    "local": "\\begin{equation*}A=\\sqrt{\\frac{1}{\\mathbf{u}^T C\\mathbf{u}}}\\mathbf{u}\\end{equation*}"
  },
  {
    "origin": "The scaling factor guarantees that \\(A^T C A =1\\).",
    "local": "比例因子保证\\（A^T C A=1\\）。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "points",
    "local": "点数"
  },
  {
    "origin": "Input 2D point set, stored in std::vector&lt;&gt; or",
    "local": "输入二维点集，存储在std:：vector&lt&燃气轮机；或"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "fitLine()",
    "local": "fitLine（）"
  },
  {
    "origin": "void cv::fitLine",
    "local": "无效cv：：fitLine"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "points",
    "local": "点数"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "line",
    "local": "线"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "distType",
    "local": "离散型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "param",
    "local": "住手"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "reps",
    "local": "代表"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "aeps",
    "local": "aeps公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "line",
    "local": "线"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.fitLine(",
    "local": "cv.fitLine公司("
  },
  {
    "origin": "points, distType, param, reps, aeps[, line]",
    "local": "点，距离类型，参数，重复，aeps[，线]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Fits a line to a 2D or 3D point set.",
    "local": "将直线拟合到二维或三维点集。"
  },
  {
    "origin": "The function fitLine fits a line to a 2D or 3D point set by minimizing \\(\\sum_i \\rho(r_i)\\) where \\(r_i\\) is a distance between the \\(i^{th}\\) point, the line and \\(\\rho(r)\\) is a distance function, one of the following:",
    "local": "函数fitLine通过最小化\\（\\sum\\u i\\rho（r\\u i）\\）将直线拟合到二维或三维点集，其中\\（r\\u i\\）是\\（i^{th}\\）点之间的距离，直线和\\（\\rho（r）\\）是距离函数，如下之一："
  },
  {
    "origin": "DIST_L2",
    "local": "距离L2"
  },
  {
    "origin": "\\[\\rho (r) = r^2/2 \\quad \\text{(the simplest and the fastest least-squares method)}\\]",
    "local": "\\[\\rho（r）=r^2/2\\quad\\text{（最简单最快的最小二乘法）}\\]"
  },
  {
    "origin": "DIST_L1",
    "local": "距离L1"
  },
  {
    "origin": "\\[\\rho (r) = r\\]",
    "local": "\\[\\rho（r）=r\\]"
  },
  {
    "origin": "DIST_L12",
    "local": "距离12"
  },
  {
    "origin": "\\[\\rho (r) = 2 \\cdot ( \\sqrt{1 + \\frac{r^2}{2}} - 1)\\]",
    "local": "\\[\\rho（r）=2\\cdot（\\sqrt{1+\\frac{r^2}{2}}-1）\\]"
  },
  {
    "origin": "DIST_FAIR",
    "local": "分销市场"
  },
  {
    "origin": "\\[\\rho \\left (r \\right ) = C^2 \\cdot \\left ( \\frac{r}{C} - \\log{\\left(1 + \\frac{r}{C}\\right)} \\right ) \\quad \\text{where} \\quad C=1.3998\\]",
    "local": "\\[\\rho\\left（r\\right）=C^2\\cdot\\left（\\frac{r}{C}-\\log{\\left（1+\\frac{r}{C}\\right）}\\right）\\quad\\text{where}\\quad C=1.3998\\]"
  },
  {
    "origin": "DIST_WELSCH",
    "local": "韦尔希区"
  },
  {
    "origin": "\\[\\rho \\left (r \\right ) = \\frac{C^2}{2} \\cdot \\left ( 1 - \\exp{\\left(-\\left(\\frac{r}{C}\\right)^2\\right)} \\right ) \\quad \\text{where} \\quad C=2.9846\\]",
    "local": "\\[\\rho\\left（r\\right）=\\frac{C^2}{2}\\cdot\\left（1-\\exp{\\left（\\frac{r}{C}\\right）^2\\right）}\\right）\\quad\\text{where}\\quad C=2.9846\\]"
  },
  {
    "origin": "DIST_HUBER",
    "local": "胡伯区"
  },
  {
    "origin": "\\[\\rho (r) = \\fork{r^2/2}{if \\(r &lt; C\\)}{C \\cdot (r-C/2)}{otherwise} \\quad \\text{where} \\quad C=1.345\\]",
    "local": "\\[\\rho（r）=\\fork{r^2/2}{if\\（r&lt；C\\）}{C\\cdot（r-C/2）}{否则}\\quad\\text{其中}\\quad C=1.345\\]"
  },
  {
    "origin": "The algorithm is based on the M-estimator (",
    "local": "该算法基于M估计("
  },
  {
    "origin": "http://en.wikipedia.org/wiki/M-estimator",
    "local": "http://en.wikipedia.org/wiki/M-estimator"
  },
  {
    "origin": ") technique that iteratively fits the line using the weighted least-squares algorithm. After each iteration the weights \\(w_i\\) are adjusted to be inversely proportional to \\(\\rho(r_i)\\) .",
    "local": ")使用加权最小二乘法迭代拟合直线的技术。在每次迭代之后，权值\\（wu i\\）被调整成与\\（\\rho（ru i）\\）成反比。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "points",
    "local": "点数"
  },
  {
    "origin": "Input vector of 2D or 3D points, stored in std::vector&lt;&gt; or",
    "local": "二维或三维点的输入向量，存储在std:：vector&lt&燃气轮机；或"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "line",
    "local": "线"
  },
  {
    "origin": "Output line parameters. In case of 2D fitting, it should be a vector of 4 elements (like Vec4f) - (vx, vy, x0, y0), where (vx, vy) is a normalized vector collinear to the line and (x0, y0) is a point on the line. In case of 3D fitting, it should be a vector of 6 elements (like Vec6f) - (vx, vy, vz, x0, y0, z0), where (vx, vy, vz) is a normalized vector collinear to the line and (x0, y0, z0) is a point on the line.",
    "local": "输出线参数。在二维拟合的情况下，它应该是由4个元素组成的向量（如Vec4f）-（vx，vy，x0，y0），其中（vx，vy）是与直线共线的标准化向量，（x0，y0）是直线上的点。在三维拟合的情况下，它应该是由6个元素组成的向量（如Vec6f）-（vx，vy，vz，x0，y0，z0），其中（vx，vy，vz）是与直线共线的标准化向量，（x0，y0，z0）是直线上的点。"
  },
  {
    "origin": "distType",
    "local": "离散型"
  },
  {
    "origin": "Distance used by the M-estimator, see",
    "local": "M-估计器使用的距离，参见"
  },
  {
    "origin": "param",
    "local": "住手"
  },
  {
    "origin": "Numerical parameter ( C ) for some types of distances. If it is 0, an optimal value is chosen.",
    "local": "某些距离类型的数值参数（C）。如果为0，则选择最佳值。"
  },
  {
    "origin": "reps",
    "local": "代表"
  },
  {
    "origin": "Sufficient accuracy for the radius (distance between the coordinate origin and the line).",
    "local": "足够精确的半径（坐标原点和直线之间的距离）。"
  },
  {
    "origin": "aeps",
    "local": "aeps公司"
  },
  {
    "origin": "Sufficient accuracy for the angle. 0.01 would be a good default value for reps and aeps.",
    "local": "足够精确的角度。对于reps和aeps，0.01是一个很好的默认值。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "HuMoments()",
    "local": "腐殖质（）"
  },
  {
    "origin": "[1/2]",
    "local": "[1/2]"
  },
  {
    "origin": "void cv::HuMoments",
    "local": "void cv：：休谟"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "moments",
    "local": "瞬间"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "hu",
    "local": "胡"
  },
  {
    "origin": "[7]",
    "local": "[7]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "hu",
    "local": "胡"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.HuMoments(",
    "local": "腐殖质("
  },
  {
    "origin": "m[, hu]",
    "local": "米[，胡]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates seven Hu invariants.",
    "local": "计算七个Hu不变量。"
  },
  {
    "origin": "The function calculates seven Hu invariants (introduced in",
    "local": "该函数计算七个Hu不变量（在中介绍）"
  },
  {
    "origin": "; see also",
    "local": "; 另请参见"
  },
  {
    "origin": "http://en.wikipedia.org/wiki/Image_moment",
    "local": "http://en.wikipedia.org/wiki/Image_moment"
  },
  {
    "origin": ") defined as:",
    "local": ")定义为："
  },
  {
    "origin": "\\[\\begin{array}{l} hu[0]= \\eta _{20}+ \\eta _{02} \\\\ hu[1]=( \\eta _{20}- \\eta _{02})^{2}+4 \\eta _{11}^{2} \\\\ hu[2]=( \\eta _{30}-3 \\eta _{12})^{2}+ (3 \\eta _{21}- \\eta _{03})^{2} \\\\ hu[3]=( \\eta _{30}+ \\eta _{12})^{2}+ ( \\eta _{21}+ \\eta _{03})^{2} \\\\ hu[4]=( \\eta _{30}-3 \\eta _{12})( \\eta _{30}+ \\eta _{12})[( \\eta _{30}+ \\eta _{12})^{2}-3( \\eta _{21}+ \\eta _{03})^{2}]+(3 \\eta _{21}- \\eta _{03})( \\eta _{21}+ \\eta _{03})[3( \\eta _{30}+ \\eta _{12})^{2}-( \\eta _{21}+ \\eta _{03})^{2}] \\\\ hu[5]=( \\eta _{20}- \\eta _{02})[( \\eta _{30}+ \\eta _{12})^{2}- ( \\eta _{21}+ \\eta _{03})^{2}]+4 \\eta _{11}( \\eta _{30}+ \\eta _{12})( \\eta _{21}+ \\eta _{03}) \\\\ hu[6]=(3 \\eta _{21}- \\eta _{03})( \\eta _{21}+ \\eta _{03})[3( \\eta _{30}+ \\eta _{12})^{2}-( \\eta _{21}+ \\eta _{03})^{2}]-( \\eta _{30}-3 \\eta _{12})( \\eta _{21}+ \\eta _{03})[3( \\eta _{30}+ \\eta _{12})^{2}-( \\eta _{21}+ \\eta _{03})^{2}] \\\\ \\end{array}\\]",
    "local": "\\\\开始{开始{开始{开始{开始{开始{开始{开始{开始{开始{开始{开始{开始{开始{开始{开始{开始{开始{开始{开始{数组{1}胡[0]=\\和{20}}\\和{20}和{02}胡[1]=（\\和{20}-\\和{20}{和{20}和{2}{2}}4\\和{1{1}{1}1}{1}1}1}胡[2]====={{2{2{2{2{2{2{}）^{2}\\\\hu[3]=（\\和{30}）+\\和{12}）^{2}+（\\和{21}+\\和{03}）^{2}\\\\hu[4]=（\\和{30}-3\\和{12}）（\\和{30}+\\和{12}）[（\\和{30}+\\和{12}）^{2}-3（\\和_{21}{21}{{21}{{21}{21}{21}}{{21}{{}}{}{}{{21}{}{{{21}{{}{3\\和{21}}}}}{{}{}{{{}{}}{{30}{}}}{}{}}{}}{}{}}{}}{}{}}{}}{}21}+\\和{03}）^{2}]+4\\和{11}（\\和{30}+\\和{12}）（\\和{21}+\\和{03}）\\\\hu[6]=（3\\和{21}-\\和{03}）（\\和{21}++\\\\和{03}）[3（\\和{30}+\\和{12}）^{2}-（\\和{21}+\\和{03}）^{2}]（\\和{30}-3\\和{12}）（\\和{21}+\\和{03}）[3（\\和{30}+\\和{12}）^{2}-（\\和{21}+\\和{03}）^{2}]\\\\\\end{array}]"
  },
  {
    "origin": "where \\(\\eta_{ji}\\) stands for \\(\\texttt{Moments::nu}_{ji}\\) .",
    "local": "其中\\（\\eta{ji}\\）代表\\（\\texttt{Moments:：nu}{ji}\\）。"
  },
  {
    "origin": "These values are proved to be invariants to the image scale, rotation, and reflection except the seventh one, whose sign is changed by reflection. This invariance is proved with the assumption of infinite image resolution. In case of raster images, the computed Hu invariants for the original and transformed images are a bit different.",
    "local": "除第七个值因反射而改变符号外，这些值对图像的尺度、旋转和反射都是不变量。在无限图像分辨率的假设下，证明了这种不变性。对于光栅图像，原始图像和变换图像的计算Hu不变量略有不同。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "moments",
    "local": "瞬间"
  },
  {
    "origin": "Input moments computed with moments .",
    "local": "用矩计算的输入矩。"
  },
  {
    "origin": "hu",
    "local": "胡"
  },
  {
    "origin": "Output Hu invariants.",
    "local": "输出Hu不变量。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "HuMoments()",
    "local": "腐殖质（）"
  },
  {
    "origin": "[2/2]",
    "local": "[2/2]"
  },
  {
    "origin": "void cv::HuMoments",
    "local": "void cv：：休谟"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "hu",
    "local": "胡"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "hu",
    "local": "胡"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.HuMoments(",
    "local": "腐殖质("
  },
  {
    "origin": "m[, hu]",
    "local": "米[，胡]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "intersectConvexConvex()",
    "local": "相交凸（）"
  },
  {
    "origin": "float cv::intersectConvexConvex",
    "local": "浮点cv:：intersectConvxConvex"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "_p1",
    "local": "_第1页"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "_p2",
    "local": "_第2页"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "_p12",
    "local": "_第12页"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "handleNested",
    "local": "嵌套的"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval, _p12",
    "local": "接待处"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.intersectConvexConvex(",
    "local": "等截面凸("
  },
  {
    "origin": "_p1, _p2[, _p12[, handleNested]]",
    "local": "_p1、\\u p2[，\\u p12[，手持]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Finds intersection of two convex polygons.",
    "local": "求两个凸多边形的交集。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "_p1",
    "local": "_第1页"
  },
  {
    "origin": "First polygon",
    "local": "第一多边形"
  },
  {
    "origin": "_p2",
    "local": "_第2页"
  },
  {
    "origin": "Second polygon",
    "local": "第二多边形"
  },
  {
    "origin": "_p12",
    "local": "_第12页"
  },
  {
    "origin": "Output polygon describing the intersecting area",
    "local": "描述相交区域的输出多边形"
  },
  {
    "origin": "handleNested",
    "local": "嵌套的"
  },
  {
    "origin": "When true, an intersection is found if one of the polygons is fully enclosed in the other. When false, no intersection is found. If the polygons share a side or the vertex of one polygon lies on an edge of the other, they are not considered nested and an intersection will be found regardless of the value of handleNested.",
    "local": "为true时，如果其中一个多边形完全封闭在另一个多边形中，则会找到交点。如果为false，则找不到交点。如果多边形共享一条边或一个多边形的顶点位于另一个多边形的边上，则不认为它们是嵌套的，并且无论handleNested的值是多少，都会找到一个交点。"
  },
  {
    "origin": "Returns",
    "local": "退换商品"
  },
  {
    "origin": "Absolute value of area of intersecting polygon",
    "local": "相交多边形面积绝对值"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "intersectConvexConvex doesn't confirm that both polygons are convex and will return invalid results if they aren't.",
    "local": "intersectConvexConvex不确认两个多边形都是凸的，如果不是，则返回无效结果。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "isContourConvex()",
    "local": "isContourConvex（）"
  },
  {
    "origin": "bool cv::isContourConvex",
    "local": "布尔cv：：isContourConvex"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "contour",
    "local": "轮廓"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.isContourConvex(",
    "local": "cv.isContourConvex公司("
  },
  {
    "origin": "contour",
    "local": "轮廓"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Tests a contour convexity.",
    "local": "测试轮廓凸度。"
  },
  {
    "origin": "The function tests whether the input contour is convex or not. The contour must be simple, that is, without self-intersections. Otherwise, the function output is undefined.",
    "local": "函数测试输入轮廓是否凸。轮廓必须简单，即没有自相交。否则，函数输出未定义。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "contour",
    "local": "轮廓"
  },
  {
    "origin": "Input vector of 2D points, stored in std::vector&lt;&gt; or",
    "local": "二维点的输入向量，存储在std:：vector&lt&燃气轮机；或"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "matchShapes()",
    "local": "匹配形状（）"
  },
  {
    "origin": "double cv::matchShapes",
    "local": "双简历：：匹配形状"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "contour1",
    "local": "轮廓1"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "contour2",
    "local": "轮廓2"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "method",
    "local": "方法"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "parameter",
    "local": "参数"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.matchShapes(",
    "local": "cv.匹配形状("
  },
  {
    "origin": "contour1, contour2, method, parameter",
    "local": "轮廓1，轮廓2，方法，参数"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Compares two shapes.",
    "local": "比较两种形状。"
  },
  {
    "origin": "The function compares two shapes. All three implemented methods use the Hu invariants (see",
    "local": "函数比较两个形状。所有三个实现的方法都使用Hu不变量（参见"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "contour1",
    "local": "轮廓1"
  },
  {
    "origin": "First contour or grayscale image.",
    "local": "第一个轮廓或灰度图像。"
  },
  {
    "origin": "contour2",
    "local": "轮廓2"
  },
  {
    "origin": "Second contour or grayscale image.",
    "local": "第二个轮廓或灰度图像。"
  },
  {
    "origin": "method",
    "local": "方法"
  },
  {
    "origin": "Comparison method, see",
    "local": "比较法，见"
  },
  {
    "origin": "parameter",
    "local": "参数"
  },
  {
    "origin": "Method-specific parameter (not supported now).",
    "local": "方法特定的参数（现在不支持）。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "minAreaRect()",
    "local": "Minarearct（）"
  },
  {
    "origin": "cv::minAreaRect",
    "local": "简历：Minarearct"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "points",
    "local": "点数"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.minAreaRect(",
    "local": "Minarealect简历("
  },
  {
    "origin": "points",
    "local": "点数"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Finds a rotated rectangle of the minimum area enclosing the input 2D point set.",
    "local": "查找包含输入二维点集的最小区域的旋转矩形。"
  },
  {
    "origin": "The function calculates and returns the minimum-area bounding rectangle (possibly rotated) for a specified point set. Developer should keep in mind that the returned",
    "local": "该函数计算并返回指定点集的最小区域边界矩形（可能已旋转）。开发人员应该记住"
  },
  {
    "origin": "can contain negative indices when data is close to the containing",
    "local": "当数据接近包含索引时，可以包含负索引"
  },
  {
    "origin": "element boundary.",
    "local": "元素边界。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "points",
    "local": "点数"
  },
  {
    "origin": "Input vector of 2D points, stored in std::vector&lt;&gt; or",
    "local": "二维点的输入向量，存储在std:：vector&lt&燃气轮机；或"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "minEnclosingCircle()",
    "local": "minEnclosingCircle（）"
  },
  {
    "origin": "void cv::minEnclosingCircle",
    "local": "void cv:：minEnclosingCircle无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "points",
    "local": "点数"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "center",
    "local": "居中"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "float &amp;",
    "local": "浮动（&A）；"
  },
  {
    "origin": "radius",
    "local": "半径"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "center, radius",
    "local": "中心，半径"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.minEnclosingCircle(",
    "local": "cv.minEnclosingCircle公司("
  },
  {
    "origin": "points",
    "local": "点数"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Finds a circle of the minimum area enclosing a 2D point set.",
    "local": "查找包围二维点集的最小面积圆。"
  },
  {
    "origin": "The function finds the minimal enclosing circle of a 2D point set using an iterative algorithm.",
    "local": "该函数使用迭代算法寻找二维点集的最小封闭圆。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "points",
    "local": "点数"
  },
  {
    "origin": "Input vector of 2D points, stored in std::vector&lt;&gt; or",
    "local": "二维点的输入向量，存储在std:：vector&lt&燃气轮机；或"
  },
  {
    "origin": "center",
    "local": "居中"
  },
  {
    "origin": "Output center of the circle.",
    "local": "输出圆的中心。"
  },
  {
    "origin": "radius",
    "local": "半径"
  },
  {
    "origin": "Output radius of the circle.",
    "local": "圆的输出半径。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "minEnclosingTriangle()",
    "local": "minEnclosingTriangle（）"
  },
  {
    "origin": "double cv::minEnclosingTriangle",
    "local": "双cv：：minEnclosingTriangle"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "points",
    "local": "点数"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "triangle",
    "local": "三角形"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval, triangle",
    "local": "方向，三角形"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.minEnclosingTriangle(",
    "local": "cv.minEnclosingTriangle三角("
  },
  {
    "origin": "points[, triangle]",
    "local": "点[，三角形]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Finds a triangle of minimum area enclosing a 2D point set and returns its area.",
    "local": "查找包围二维点集的最小面积三角形并返回其面积。"
  },
  {
    "origin": "The function finds a triangle of minimum area enclosing the given set of 2D points and returns its area. The output for a given 2D point set is shown in the image below. 2D points are depicted in red* and the enclosing triangle in",
    "local": "函数找到一个最小面积的三角形，包围给定的二维点集，并返回其面积。给定2D点集的输出如下图所示。二维点用红色*表示，封闭三角形用红色表示"
  },
  {
    "origin": "yellow",
    "local": "黄色的"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Sample output of the minimum enclosing triangle function",
    "local": "最小封闭三角形函数的样本输出"
  },
  {
    "origin": "The implementation of the algorithm is based on O'Rourke's",
    "local": "算法的实现是基于O'Rourke的"
  },
  {
    "origin": "and Klee and Laskowski's",
    "local": "还有克莱和拉斯科夫斯基的"
  },
  {
    "origin": "papers. O'Rourke provides a \\(\\theta(n)\\) algorithm for finding the minimal enclosing triangle of a 2D convex polygon with n vertices. Since the",
    "local": "文件。O'Rourke提供了一个\\（\\theta（n）\\）算法来寻找具有n个顶点的二维凸多边形的最小封闭三角形。自从"
  },
  {
    "origin": "function takes a 2D point set as input an additional preprocessing step of computing the convex hull of the 2D point set is required. The complexity of the",
    "local": "函数以二维点集作为输入，需要额外的预处理步骤来计算二维点集的凸包。问题的复杂性"
  },
  {
    "origin": "function is \\(O(n log(n))\\) which is higher than \\(\\theta(n)\\). Thus the overall complexity of the function is \\(O(n log(n))\\).",
    "local": "函数为\\（O（n log（n））\\），高于\\（\\theta（n）\\）。因此，函数的总体复杂度是\\（O（n log（n））\\）。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "points",
    "local": "点数"
  },
  {
    "origin": "Input vector of 2D points with depth CV_32S or CV_32F, stored in std::vector&lt;&gt; or",
    "local": "具有深度cv32s或cv32f的二维点的输入向量，存储在std：：vector&lt&燃气轮机；或"
  },
  {
    "origin": "triangle",
    "local": "三角形"
  },
  {
    "origin": "Output vector of three 2D points defining the vertices of the triangle. The depth of the OutputArray must be CV_32F.",
    "local": "定义三角形顶点的三个2D点的输出向量。输出阵列的深度必须为CV32f。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "moments()",
    "local": "力矩（）"
  },
  {
    "origin": "cv::moments",
    "local": "cv：：时刻"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "array",
    "local": "数组"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "binaryImage",
    "local": "_图像"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.moments(",
    "local": "cv.力矩("
  },
  {
    "origin": "array[, binaryImage]",
    "local": "数组[，二进制图像]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates all of the moments up to the third order of a polygon or rasterized shape.",
    "local": "计算多边形或光栅化形状的三阶矩。"
  },
  {
    "origin": "The function computes moments, up to the 3rd order, of a vector shape or a rasterized shape. The results are returned in the structure",
    "local": "该函数计算向量形状或光栅化形状的最大3阶矩。结果将在结构中返回"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "array",
    "local": "数组"
  },
  {
    "origin": "Raster image (single-channel, 8-bit or floating-point 2D array) or an array ( \\(1 \\times N\\) or \\(N \\times 1\\) ) of 2D points (Point or Point2f ).",
    "local": "光栅图像（单通道、8位或浮点二维数组）或二维点（点或点2f）的数组（\\（1×N\\）或\\（N×1\\）。"
  },
  {
    "origin": "binaryImage",
    "local": "_图像"
  },
  {
    "origin": "If it is true, all non-zero image pixels are treated as 1's. The parameter is used for images only.",
    "local": "如果为真，则将所有非零图像像素视为1。此参数仅用于图像。"
  },
  {
    "origin": "Returns",
    "local": "退换商品"
  },
  {
    "origin": "moments.",
    "local": "时刻。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "Only applicable to contour moments calculations from Python bindings: Note that the numpy type for the input array should be either np.int32 or np.float32.",
    "local": "仅适用于Python绑定的轮廓矩计算：请注意，输入数组的numpy类型应为np.int32或np.float32。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "pointPolygonTest()",
    "local": "多边形测试（）"
  },
  {
    "origin": "double cv::pointPolygonTest",
    "local": "双cv：：点多边形测试"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "contour",
    "local": "轮廓"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "pt",
    "local": "pt公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "measureDist",
    "local": "测量员"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.pointPolygonTest(",
    "local": "cv.pointPolygonTest公司("
  },
  {
    "origin": "contour, pt, measureDist",
    "local": "等高线，pt，测量列表"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Performs a point-in-contour test.",
    "local": "执行轮廓点测试。"
  },
  {
    "origin": "The function determines whether the point is inside a contour, outside, or lies on an edge (or coincides with a vertex). It returns positive (inside), negative (outside), or zero (on an edge) value, correspondingly. When measureDist=false , the return value is +1, -1, and 0, respectively. Otherwise, the return value is a signed distance between the point and the nearest contour edge.",
    "local": "该函数确定点是在轮廓内部、外部还是位于边上（或与顶点重合）。它相应地返回正值（内部）、负值（外部）或零值（在边上）。当measureDist=false时，返回值分别为+1、-1和0。否则，返回值是点和最近轮廓边之间的有符号距离。"
  },
  {
    "origin": "See below a sample output of the function where each image pixel is tested against the contour:",
    "local": "请参见下面的函数输出示例，其中每个图像像素都根据轮廓进行了测试："
  },
  {
    "origin": "sample output",
    "local": "样本输出"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "contour",
    "local": "轮廓"
  },
  {
    "origin": "Input contour.",
    "local": "输入轮廓。"
  },
  {
    "origin": "pt",
    "local": "pt公司"
  },
  {
    "origin": "Point tested against the contour.",
    "local": "根据轮廓测试的点。"
  },
  {
    "origin": "measureDist",
    "local": "测量员"
  },
  {
    "origin": "If true, the function estimates the signed distance from the point to the nearest contour edge. Otherwise, the function only checks if the point is inside a contour or not.",
    "local": "如果为真，该函数估计从点到最近轮廓边的有符号距离。否则，函数只检查点是否在轮廓内。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "rotatedRectangleIntersection()",
    "local": "旋转驱动器和中间部分（）"
  },
  {
    "origin": "int cv::rotatedRectangleIntersection",
    "local": "int cv：：旋转"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "rect1",
    "local": "大小"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "rect2",
    "local": "大小"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "intersectingRegion",
    "local": "相交区域"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval, intersectingRegion",
    "local": "返回，相交区域"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.rotatedRectangleIntersection(",
    "local": "等速旋转直角交点("
  },
  {
    "origin": "rect1, rect2[, intersectingRegion]",
    "local": "rect1，rect2[，相交区域]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Finds out if there is any intersection between two rotated rectangles.",
    "local": "找出两个旋转的矩形之间是否有交集。"
  },
  {
    "origin": "If there is then the vertices of the intersecting region are returned as well.",
    "local": "如果存在，则相交区域的顶点也会返回。"
  },
  {
    "origin": "Below are some examples of intersection configurations. The hatched pattern indicates the intersecting region and the red vertices are returned by the function.",
    "local": "下面是一些交叉口配置的示例。阴影图案表示相交区域，红色顶点由函数返回。"
  },
  {
    "origin": "intersection examples",
    "local": "交叉口示例"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "rect1",
    "local": "大小"
  },
  {
    "origin": "First rectangle",
    "local": "第一个矩形"
  },
  {
    "origin": "rect2",
    "local": "大小"
  },
  {
    "origin": "Second rectangle",
    "local": "第二个矩形"
  },
  {
    "origin": "intersectingRegion",
    "local": "相交区域"
  },
  {
    "origin": "The output array of the vertices of the intersecting region. It returns at most 8 vertices. Stored as std::vector&lt;",
    "local": "相交区域顶点的输出数组。它最多返回8个顶点。存储为std：：vector&lt；"
  },
  {
    "origin": "&gt; or",
    "local": "&燃气轮机；或"
  },
  {
    "origin": "as Mx1 of type CV_32FC2.",
    "local": "与CV\\ U 32FC2型Mx1相同。"
  },
  {
    "origin": "Returns",
    "local": "退换商品"
  },
  {
    "origin": "One of",
    "local": "什么之中的一个"
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:40 for OpenCV by",
    "local": "于2021年4月2日星期五11:36:40为OpenCV生成"
  }
]