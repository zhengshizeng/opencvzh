[
  {
    "origin": "OpenCV: Hough Circle Transform",
    "local": "OpenCV:霍夫圆变换"
  },
  {
    "origin": "Open Source Computer Vision",
    "local": "开源计算机视觉"
  },
  {
    "origin": "Hough Circle Transform",
    "local": "霍夫圆变换"
  },
  {
    "origin": "Goal",
    "local": "目标"
  },
  {
    "origin": "We will learn to use Hough Transform to find circles in an image.",
    "local": "我们将学习使用霍夫变换在图像中寻找圆。"
  },
  {
    "origin": "We will learn these functions:",
    "local": "我们将学习这些功能："
  },
  {
    "origin": "Theory",
    "local": "理论"
  },
  {
    "origin": "A circle is represented mathematically as \\((x-x_{center})^2 + (y - y_{center})^2 = r^2\\) where \\((x_{center},y_{center})\\) is the center of the circle, and \\(r\\) is the radius of the circle. From equation, we can see we have 3 parameters, so we need a 3D accumulator for hough transform, which would be highly ineffective. So OpenCV uses more trickier method,",
    "local": "圆在数学上表示为“（（x-x{center}）^2+（y-y{center}）^2=r^2”，其中“（（x{center}，y{center}）”是圆的中心，“（r”）是圆的半径。从方程中可以看出，我们有3个参数，所以我们需要一个三维累加器进行霍夫变换，这将是非常无效的。所以OpenCV使用了更复杂的方法，"
  },
  {
    "origin": "Hough Gradient Method",
    "local": "霍夫梯度法"
  },
  {
    "origin": "which uses the gradient information of edges.",
    "local": "它利用了边缘的梯度信息。"
  },
  {
    "origin": "We use the function:",
    "local": "我们使用函数："
  },
  {
    "origin": "(image, circles, method, dp, minDist, param1 = 100, param2 = 100, minRadius = 0, maxRadius = 0)",
    "local": "（图像，圆，方法，dp，minDist，param1=100，param2=100，minRadius=0，maxRadius=0）"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "image",
    "local": "形象"
  },
  {
    "origin": "8-bit, single-channel, grayscale input image.",
    "local": "8位，单通道，灰度输入图像。"
  },
  {
    "origin": "circles",
    "local": "圈子"
  },
  {
    "origin": "output vector of found circles(cv.CV_32FC3 type). Each vector is encoded as a 3-element floating-point vector (x,y,radius) .",
    "local": "找到的圆的输出向量（cv.CV32fc3类型）。每个向量被编码为一个三元素浮点向量（x，y，半径）。"
  },
  {
    "origin": "method",
    "local": "方法"
  },
  {
    "origin": "detection method(see",
    "local": "检测方法（见"
  },
  {
    "origin": "). Currently, the only implemented method is HOUGH_GRADIENT",
    "local": "). 目前，唯一实现的方法是HOUGH\\u梯度法"
  },
  {
    "origin": "dp",
    "local": "dp公司"
  },
  {
    "origin": "inverse ratio of the accumulator resolution to the image resolution. For example, if dp = 1 , the accumulator has the same resolution as the input image. If dp = 2 , the accumulator has half as big width and height.",
    "local": "累加器分辨率与图像分辨率的反比。例如，如果dp=1，累加器的分辨率与输入图像相同。如果dp=2，则蓄能器的宽度和高度为原来的一半。"
  },
  {
    "origin": "minDist",
    "local": "正念者"
  },
  {
    "origin": "minimum distance between the centers of the detected circles. If the parameter is too small, multiple neighbor circles may be falsely detected in addition to a true one. If it is too large, some circles may be missed.",
    "local": "检测到的圆的中心之间的最小距离。如果参数太小，除了一个真实的圆外，还可能错误地检测到多个相邻圆。如果太大，可能会漏掉一些圆。"
  },
  {
    "origin": "param1",
    "local": "参数1"
  },
  {
    "origin": "first method-specific parameter. In case of HOUGH_GRADIENT , it is the higher threshold of the two passed to the Canny edge detector (the lower one is twice smaller).",
    "local": "第一个方法特定参数。在HOUGH\\u梯度的情况下，它是传递给Canny边缘检测器的两个阈值中的较高阈值（较低的阈值是较小的两倍）。"
  },
  {
    "origin": "param2",
    "local": "参数2"
  },
  {
    "origin": "second method-specific parameter. In case of HOUGH_GRADIENT , it is the accumulator threshold for the circle centers at the detection stage. The smaller it is, the more false circles may be detected. Circles, corresponding to the larger accumulator values, will be returned first.",
    "local": "第二个方法特定参数。在HOUGH\\u梯度的情况下，它是检测阶段圆心的累加器阈值。它越小，检测到的假圆就越多。与较大累加器值相对应的圆将首先返回。"
  },
  {
    "origin": "minRadius",
    "local": "最小半径"
  },
  {
    "origin": "minimum circle radius.",
    "local": "最小圆半径。"
  },
  {
    "origin": "maxRadius",
    "local": "最大半径"
  },
  {
    "origin": "maximum circle radius.",
    "local": "最大圆半径。"
  },
  {
    "origin": "Try it",
    "local": "试试看"
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:37 for OpenCV by &#160;",
    "local": "2021年4月2日星期五11:36:37为OpenCV生成，&#160；"
  }
]