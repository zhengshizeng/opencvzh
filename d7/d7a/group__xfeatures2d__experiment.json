[
  {
    "origin": "OpenCV: Experimental 2D Features Algorithms",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "Experimental 2D Features Algorithms",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Class implementing affine adaptation for key points.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class implementing",
    "local": ""
  },
  {
    "origin": "(Boosted Efficient Binary Local Image Descriptor), described in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class implementing",
    "local": ""
  },
  {
    "origin": "(Learning Image Descriptors with Boosting), described in",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class for computing BRIEF descriptors described in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class implementing",
    "local": ""
  },
  {
    "origin": "descriptor, described in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Elliptic region around an interest point.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class implementing the",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "Fast Retina Keypoint",
    "local": ""
  },
  {
    "origin": ") keypoint descriptor, described in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class implementing the Harris-Laplace feature detector as described in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class implementing the locally uniform comparison image descriptor, described in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class implementing the MSD (",
    "local": ""
  },
  {
    "origin": "Maximal Self-Dissimilarity",
    "local": ""
  },
  {
    "origin": ") keypoint detector, described in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class implementing PCT (position-color-texture) signature extraction as described in",
    "local": ""
  },
  {
    "origin": ". The algorithm is divided to a feature sampler and a clusterizer. Feature sampler produces samples at given set of coordinates. Clusterizer then produces clusters of these samples using k-means algorithm. Resulting set of clusters is the signature of the input image.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class implementing Signature Quadratic Form Distance (SQFD).",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "The class implements the keypoint detector introduced by",
    "local": ""
  },
  {
    "origin": ", synonym of",
    "local": ""
  },
  {
    "origin": ". :",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class implementing the Tree Based Morse Regions (",
    "local": ""
  },
  {
    "origin": ") as described in",
    "local": ""
  },
  {
    "origin": "extended with scaled extraction ability.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class implementing",
    "local": ""
  },
  {
    "origin": "(Oxford Visual Geometry Group) descriptor trained end to end using \"Descriptor Learning Using Convex Optimisation\" (DLCO) aparatus described in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;keypoints, int",
    "local": ""
  },
  {
    "origin": ", bool nonmaxSuppression=true,",
    "local": ""
  },
  {
    "origin": "type=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Estimates cornerness for prespecified KeyPoints using the FAST algorithm.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "This section describes experimental algorithms for 2d feature detection.",
    "local": ""
  },
  {
    "origin": "Function Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "FASTForPointSet()",
    "local": ""
  },
  {
    "origin": "void cv::xfeatures2d::FASTForPointSet",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "keypoints",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "threshold",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "nonmaxSuppression",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "type",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Estimates cornerness for prespecified KeyPoints using the FAST algorithm.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "grayscale image where keypoints (corners) are detected.",
    "local": ""
  },
  {
    "origin": "keypoints",
    "local": ""
  },
  {
    "origin": "keypoints which should be tested to fit the FAST criteria. Keypoints not being detected as corners are removed.",
    "local": ""
  },
  {
    "origin": "threshold",
    "local": ""
  },
  {
    "origin": "threshold on difference between intensity of the central pixel and pixels of a circle around this pixel.",
    "local": ""
  },
  {
    "origin": "nonmaxSuppression",
    "local": ""
  },
  {
    "origin": "if true, non-maximum suppression is applied to detected corners (keypoints).",
    "local": ""
  },
  {
    "origin": "type",
    "local": ""
  },
  {
    "origin": "one of the three neighborhoods as defined in the paper:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Detects corners using the FAST algorithm by",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:42 for OpenCV by &#160;",
    "local": ""
  }
]