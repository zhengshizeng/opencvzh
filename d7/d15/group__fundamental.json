[
  {
    "origin": "OpenCV: Fundamental",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "Fundamental",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "x1,",
    "local": ""
  },
  {
    "origin": "x2,",
    "local": ""
  },
  {
    "origin": "R,",
    "local": ""
  },
  {
    "origin": "t, double s)",
    "local": ""
  },
  {
    "origin": "Computes Absolute or Exterior Orientation (Pose Estimation) between 2 sets of 3D point.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "F,",
    "local": ""
  },
  {
    "origin": "K1,",
    "local": ""
  },
  {
    "origin": "K2,",
    "local": ""
  },
  {
    "origin": "E)",
    "local": ""
  },
  {
    "origin": "Get Essential matrix from Fundamental and Camera matrices.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "R1,",
    "local": ""
  },
  {
    "origin": "t1,",
    "local": ""
  },
  {
    "origin": "R2,",
    "local": ""
  },
  {
    "origin": "t2,",
    "local": ""
  },
  {
    "origin": "E)",
    "local": ""
  },
  {
    "origin": "Get Essential matrix from Motion (R's and t's ).",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "E,",
    "local": ""
  },
  {
    "origin": "K1,",
    "local": ""
  },
  {
    "origin": "K2,",
    "local": ""
  },
  {
    "origin": "F)",
    "local": ""
  },
  {
    "origin": "Get Essential matrix from Fundamental and Camera matrices.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "P1,",
    "local": ""
  },
  {
    "origin": "P2,",
    "local": ""
  },
  {
    "origin": "F)",
    "local": ""
  },
  {
    "origin": "Get Fundamental matrix from Projection matrices.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "E,",
    "local": ""
  },
  {
    "origin": "Rs,",
    "local": ""
  },
  {
    "origin": "ts)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "Rs,",
    "local": ""
  },
  {
    "origin": "ts,",
    "local": ""
  },
  {
    "origin": "K1,",
    "local": ""
  },
  {
    "origin": "x1,",
    "local": ""
  },
  {
    "origin": "K2,",
    "local": ""
  },
  {
    "origin": "x2)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "x1,",
    "local": ""
  },
  {
    "origin": "x2,",
    "local": ""
  },
  {
    "origin": "F)",
    "local": ""
  },
  {
    "origin": "Estimate the fundamental matrix between two dataset of 2D point (image coords space).",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "F,",
    "local": ""
  },
  {
    "origin": "F_normalized)",
    "local": ""
  },
  {
    "origin": "Normalizes the Fundamental matrix.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "F,",
    "local": ""
  },
  {
    "origin": "P1,",
    "local": ""
  },
  {
    "origin": "P2)",
    "local": ""
  },
  {
    "origin": "Get projection matrices from Fundamental matrix.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "R1,",
    "local": ""
  },
  {
    "origin": "t1,",
    "local": ""
  },
  {
    "origin": "R2,",
    "local": ""
  },
  {
    "origin": "t2,",
    "local": ""
  },
  {
    "origin": "R,",
    "local": ""
  },
  {
    "origin": "t)",
    "local": ""
  },
  {
    "origin": "Computes the relative camera motion between two cameras.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Function Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "computeOrientation()",
    "local": ""
  },
  {
    "origin": "void cv::sfm::computeOrientation",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "x1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "x2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "R",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "t",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "s",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Computes Absolute or Exterior Orientation (Pose Estimation) between 2 sets of 3D point.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "x1",
    "local": ""
  },
  {
    "origin": "Input first 3xN or 2xN array of points.",
    "local": ""
  },
  {
    "origin": "x2",
    "local": ""
  },
  {
    "origin": "Input second 3xN or 2xN array of points.",
    "local": ""
  },
  {
    "origin": "R",
    "local": ""
  },
  {
    "origin": "Output 3x3 computed rotation matrix.",
    "local": ""
  },
  {
    "origin": "t",
    "local": ""
  },
  {
    "origin": "Output 3x1 computed translation vector.",
    "local": ""
  },
  {
    "origin": "s",
    "local": ""
  },
  {
    "origin": "Output computed scale factor.",
    "local": ""
  },
  {
    "origin": "Find the best transformation such that xp=projection*(s*R*x+t) (same as Pose Estimation, ePNP). The routines below are only for the orthographic case for now.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "essentialFromFundamental()",
    "local": ""
  },
  {
    "origin": "void cv::sfm::essentialFromFundamental",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "F",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "K1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "K2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "E",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Get Essential matrix from Fundamental and Camera matrices.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "F",
    "local": ""
  },
  {
    "origin": "Input 3x3 fundamental matrix.",
    "local": ""
  },
  {
    "origin": "K1",
    "local": ""
  },
  {
    "origin": "Input 3x3 first camera matrix \\(K = \\vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1}\\).",
    "local": ""
  },
  {
    "origin": "K2",
    "local": ""
  },
  {
    "origin": "Input 3x3 second camera matrix. The parameters are similar to K1.",
    "local": ""
  },
  {
    "origin": "E",
    "local": ""
  },
  {
    "origin": "Output 3x3 essential matrix.",
    "local": ""
  },
  {
    "origin": "Reference:",
    "local": ""
  },
  {
    "origin": "9.6 pag 257 (formula 9.12)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "essentialFromRt()",
    "local": ""
  },
  {
    "origin": "void cv::sfm::essentialFromRt",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "R1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "t1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "R2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "t2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "E",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Get Essential matrix from Motion (R's and t's ).",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "R1",
    "local": ""
  },
  {
    "origin": "Input 3x3 first camera rotation matrix.",
    "local": ""
  },
  {
    "origin": "t1",
    "local": ""
  },
  {
    "origin": "Input 3x1 first camera translation vector.",
    "local": ""
  },
  {
    "origin": "R2",
    "local": ""
  },
  {
    "origin": "Input 3x3 second camera rotation matrix.",
    "local": ""
  },
  {
    "origin": "t2",
    "local": ""
  },
  {
    "origin": "Input 3x1 second camera translation vector.",
    "local": ""
  },
  {
    "origin": "E",
    "local": ""
  },
  {
    "origin": "Output 3x3 essential matrix.",
    "local": ""
  },
  {
    "origin": "Reference:",
    "local": ""
  },
  {
    "origin": "9.6 pag 257 (formula 9.12)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "fundamentalFromEssential()",
    "local": ""
  },
  {
    "origin": "void cv::sfm::fundamentalFromEssential",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "E",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "K1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "K2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "F",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Get Essential matrix from Fundamental and Camera matrices.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "E",
    "local": ""
  },
  {
    "origin": "Input 3x3 essential matrix.",
    "local": ""
  },
  {
    "origin": "K1",
    "local": ""
  },
  {
    "origin": "Input 3x3 first camera matrix \\(K = \\vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1}\\).",
    "local": ""
  },
  {
    "origin": "K2",
    "local": ""
  },
  {
    "origin": "Input 3x3 second camera matrix. The parameters are similar to K1.",
    "local": ""
  },
  {
    "origin": "F",
    "local": ""
  },
  {
    "origin": "Output 3x3 fundamental matrix.",
    "local": ""
  },
  {
    "origin": "Reference:",
    "local": ""
  },
  {
    "origin": "9.6 pag 257 (formula 9.12) or",
    "local": ""
  },
  {
    "origin": "http://ai.stanford.edu/~birch/projective/node20.html",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "fundamentalFromProjections()",
    "local": ""
  },
  {
    "origin": "void cv::sfm::fundamentalFromProjections",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "P1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "P2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "F",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Get Fundamental matrix from Projection matrices.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "P1",
    "local": ""
  },
  {
    "origin": "Input 3x4 first projection matrix.",
    "local": ""
  },
  {
    "origin": "P2",
    "local": ""
  },
  {
    "origin": "Input 3x4 second projection matrix.",
    "local": ""
  },
  {
    "origin": "F",
    "local": ""
  },
  {
    "origin": "Output 3x3 fundamental matrix.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "motionFromEssential()",
    "local": ""
  },
  {
    "origin": "void cv::sfm::motionFromEssential",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "E",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Rs",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "ts",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Get Motion (R's and t's ) from Essential matrix.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "E",
    "local": ""
  },
  {
    "origin": "Input 3x3 essential matrix.",
    "local": ""
  },
  {
    "origin": "Rs",
    "local": ""
  },
  {
    "origin": "Output vector of 3x3 rotation matrices.",
    "local": ""
  },
  {
    "origin": "ts",
    "local": ""
  },
  {
    "origin": "Output vector of 3x1 translation vectors.",
    "local": ""
  },
  {
    "origin": "Reference:",
    "local": ""
  },
  {
    "origin": "9.6 pag 259 (Result 9.19)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "motionFromEssentialChooseSolution()",
    "local": ""
  },
  {
    "origin": "int cv::sfm::motionFromEssentialChooseSolution",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "Rs",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "ts",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "K1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "x1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "K2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "x2",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Choose one of the four possible motion solutions from an essential matrix.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "Rs",
    "local": ""
  },
  {
    "origin": "Input vector of 3x3 rotation matrices.",
    "local": ""
  },
  {
    "origin": "ts",
    "local": ""
  },
  {
    "origin": "Input vector of 3x1 translation vectors.",
    "local": ""
  },
  {
    "origin": "K1",
    "local": ""
  },
  {
    "origin": "Input 3x3 first camera matrix \\(K = \\vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1}\\).",
    "local": ""
  },
  {
    "origin": "x1",
    "local": ""
  },
  {
    "origin": "Input 2x1 vector with first 2d point.",
    "local": ""
  },
  {
    "origin": "K2",
    "local": ""
  },
  {
    "origin": "Input 3x3 second camera matrix. The parameters are similar to K1.",
    "local": ""
  },
  {
    "origin": "x2",
    "local": ""
  },
  {
    "origin": "Input 2x1 vector with second 2d point.",
    "local": ""
  },
  {
    "origin": "Decides the right solution by checking that the triangulation of a match x1&ndash;x2 lies in front of the cameras. Return index of the right solution or -1 if no solution.",
    "local": ""
  },
  {
    "origin": "Reference: See",
    "local": ""
  },
  {
    "origin": "9.6 pag 259 (9.6.3 Geometrical interpretation of the 4 solutions).",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "normalizedEightPointSolver()",
    "local": ""
  },
  {
    "origin": "void cv::sfm::normalizedEightPointSolver",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "x1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "x2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "F",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Estimate the fundamental matrix between two dataset of 2D point (image coords space).",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "x1",
    "local": ""
  },
  {
    "origin": "Input 2xN Array of 2D points in view 1.",
    "local": ""
  },
  {
    "origin": "x2",
    "local": ""
  },
  {
    "origin": "Input 2xN Array of 2D points in view 2.",
    "local": ""
  },
  {
    "origin": "F",
    "local": ""
  },
  {
    "origin": "Output 3x3 fundamental matrix.",
    "local": ""
  },
  {
    "origin": "Uses the normalized 8-point fundamental matrix solver. Reference:",
    "local": ""
  },
  {
    "origin": "11.2 pag.281 (x1 = x, x2 = x')",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "normalizeFundamental()",
    "local": ""
  },
  {
    "origin": "void cv::sfm::normalizeFundamental",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "F",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "F_normalized",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Normalizes the Fundamental matrix.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "F",
    "local": ""
  },
  {
    "origin": "Input 3x3 fundamental matrix.",
    "local": ""
  },
  {
    "origin": "F_normalized",
    "local": ""
  },
  {
    "origin": "Output 3x3 normalized fundamental matrix.",
    "local": ""
  },
  {
    "origin": "By default divides the fundamental matrix by its",
    "local": ""
  },
  {
    "origin": "norm.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "projectionsFromFundamental()",
    "local": ""
  },
  {
    "origin": "void cv::sfm::projectionsFromFundamental",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "F",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "P1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "P2",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Get projection matrices from Fundamental matrix.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "F",
    "local": ""
  },
  {
    "origin": "Input 3x3 fundamental matrix.",
    "local": ""
  },
  {
    "origin": "P1",
    "local": ""
  },
  {
    "origin": "Output 3x4 one possible projection matrix.",
    "local": ""
  },
  {
    "origin": "P2",
    "local": ""
  },
  {
    "origin": "Output 3x4 another possible projection matrix.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "relativeCameraMotion()",
    "local": ""
  },
  {
    "origin": "void cv::sfm::relativeCameraMotion",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "R1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "t1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "R2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "t2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "R",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "t",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Computes the relative camera motion between two cameras.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "R1",
    "local": ""
  },
  {
    "origin": "Input 3x3 first camera rotation matrix.",
    "local": ""
  },
  {
    "origin": "t1",
    "local": ""
  },
  {
    "origin": "Input 3x1 first camera translation vector.",
    "local": ""
  },
  {
    "origin": "R2",
    "local": ""
  },
  {
    "origin": "Input 3x3 second camera rotation matrix.",
    "local": ""
  },
  {
    "origin": "t2",
    "local": ""
  },
  {
    "origin": "Input 3x1 second camera translation vector.",
    "local": ""
  },
  {
    "origin": "R",
    "local": ""
  },
  {
    "origin": "Output 3x3 relative rotation matrix.",
    "local": ""
  },
  {
    "origin": "t",
    "local": ""
  },
  {
    "origin": "Output 3x1 relative translation vector.",
    "local": ""
  },
  {
    "origin": "Given the motion parameters of two cameras, computes the motion parameters of the second one assuming the first one to be at the origin. If T1 and T2 are the camera motions, the computed relative motion is \\(T = T_2 T_1^{-1}\\)",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:41 for OpenCV by &#160;",
    "local": ""
  }
]