[
  {
    "origin": "OpenCV: Softfloat support",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "Variables",
    "local": ""
  },
  {
    "origin": "Softfloat support",
    "local": ""
  },
  {
    "origin": "Â»",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "struct",
    "local": ""
  },
  {
    "origin": "struct",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Default constructor.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;c)",
    "local": ""
  },
  {
    "origin": "Copy constructor.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Construct from integer.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "(const double a)",
    "local": ""
  },
  {
    "origin": "Construct from double.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Default constructor.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;c)",
    "local": ""
  },
  {
    "origin": "Copy constructor.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Construct from integer.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "(const float a)",
    "local": ""
  },
  {
    "origin": "Construct from float.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a)",
    "local": ""
  },
  {
    "origin": "Absolute value.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;a)",
    "local": ""
  },
  {
    "origin": "Cube root.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;a)",
    "local": ""
  },
  {
    "origin": "Cosine.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Difference between 1 and next representable value.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Difference between 1 and next representable value.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;a)",
    "local": ""
  },
  {
    "origin": "Exponent.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;a)",
    "local": ""
  },
  {
    "origin": "static const",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "a)",
    "local": ""
  },
  {
    "origin": "Construct from raw.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "a)",
    "local": ""
  },
  {
    "origin": "Construct from raw.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Get 0-based exponent.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Get 0-based exponent.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Get a fraction part.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Get a fraction part.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Get sign bit.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Get sign bit.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Positive infinity constant.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Positive infinity constant.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Inf state indicator.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Inf state indicator.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "NaN state indicator.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "NaN state indicator.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Subnormal number indicator.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Subnormal number indicator.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;a)",
    "local": ""
  },
  {
    "origin": "Natural logarithm.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;a)",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Biggest finite value.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Biggest finite value.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;a, const",
    "local": ""
  },
  {
    "origin": "&amp;b)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;a, const",
    "local": ""
  },
  {
    "origin": "&amp;b)",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Smallest normalized value.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Smallest normalized value.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;a, const",
    "local": ""
  },
  {
    "origin": "&amp;b)",
    "local": ""
  },
  {
    "origin": "Min and Max functions.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;a, const",
    "local": ""
  },
  {
    "origin": "&amp;b)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;a, const",
    "local": ""
  },
  {
    "origin": "&amp;b, const",
    "local": ""
  },
  {
    "origin": "&amp;c)",
    "local": ""
  },
  {
    "origin": "Fused Multiplication and Addition.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;a, const",
    "local": ""
  },
  {
    "origin": "&amp;b, const",
    "local": ""
  },
  {
    "origin": "&amp;c)",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Default NaN constant.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Default NaN constant.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "One constant.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "One constant.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Type casts.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Type casts.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;) const",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;) const",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;) const",
    "local": ""
  },
  {
    "origin": "Remainder operator.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;) const",
    "local": ""
  },
  {
    "origin": "Remainder operator.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;a)",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;a)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;) const",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;) const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;a)",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;a)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;) const",
    "local": ""
  },
  {
    "origin": "Basic arithmetics.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;) const",
    "local": ""
  },
  {
    "origin": "Basic arithmetics.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;a)",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;a)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;) const",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;) const",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;a)",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;a)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;) const",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;) const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;a)",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;a)",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;) const",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;) const",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;) const",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;) const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;c)",
    "local": ""
  },
  {
    "origin": "Assign constructor.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;c)",
    "local": ""
  },
  {
    "origin": "Assign constructor.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;) const",
    "local": ""
  },
  {
    "origin": "Comparison operations.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;) const",
    "local": ""
  },
  {
    "origin": "Comparison operations.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;) const",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;) const",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;) const",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;) const",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Correct pi approximation.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Correct pi approximation.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;a, const",
    "local": ""
  },
  {
    "origin": "&amp;b)",
    "local": ""
  },
  {
    "origin": "Raising to the power.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;a, const",
    "local": ""
  },
  {
    "origin": "&amp;b)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static _Tp",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a)",
    "local": ""
  },
  {
    "origin": "Saturate casts.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static _Tp",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "short",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "short",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "unsigned",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a)",
    "local": ""
  },
  {
    "origin": "Saturate cast to unsigned integer and unsigned long long integer We intentionally do not clip negative numbers, to make -1 become 0xffffffff etc.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "unsigned",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a)",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a)",
    "local": ""
  },
  {
    "origin": "(int e) const",
    "local": ""
  },
  {
    "origin": "Construct a copy with new 0-based exponent.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int e) const",
    "local": ""
  },
  {
    "origin": "Construct a copy with new 0-based exponent.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;s) const",
    "local": ""
  },
  {
    "origin": "Construct a copy with provided significand.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;s) const",
    "local": ""
  },
  {
    "origin": "Construct a copy with provided significand.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(bool sign) const",
    "local": ""
  },
  {
    "origin": "Construct a copy with new sign bit.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(bool sign) const",
    "local": ""
  },
  {
    "origin": "Construct a copy with new sign bit.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;a)",
    "local": ""
  },
  {
    "origin": "Sine.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;a)",
    "local": ""
  },
  {
    "origin": "Square root.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;a)",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Zero constant.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Zero constant.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Variables",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "SoftFloat",
    "local": ""
  },
  {
    "origin": "is a software implementation of floating-point calculations according to IEEE 754 standard. All calculations are done in integers, that's why they are machine-independent and bit-exact. This library can be useful in accuracy-critical parts like look-up tables generation, tests, etc. OpenCV contains a subset of SoftFloat partially rewritten to C++.",
    "local": ""
  },
  {
    "origin": "Types",
    "local": ""
  },
  {
    "origin": "There are two basic types:",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": ". These types are binary compatible with float and double types respectively and support conversions to/from them. Other types from original SoftFloat library like fp16 or fp128 were thrown away as well as quiet/signaling NaN support, on-the-fly rounding mode switch and exception flags (though exceptions can be implemented in the future).",
    "local": ""
  },
  {
    "origin": "Operations",
    "local": ""
  },
  {
    "origin": "Both types support the following:",
    "local": ""
  },
  {
    "origin": "Construction from signed and unsigned 32-bit and 64 integers, float/double or raw binary representation",
    "local": ""
  },
  {
    "origin": "Conversions between each other, to float or double and to int using",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "or a bunch of saturate_cast functions",
    "local": ""
  },
  {
    "origin": "Add, subtract, multiply, divide, remainder, square root, FMA with absolute precision",
    "local": ""
  },
  {
    "origin": "Comparison operations",
    "local": ""
  },
  {
    "origin": "Explicit sign, exponent and significand manipulation through get/set methods, number state indicators (isInf, isNan, isSubnormal)",
    "local": ""
  },
  {
    "origin": "Type-specific constants like eps, minimum/maximum value, best pi approximation, etc.",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "functions",
    "local": ""
  },
  {
    "origin": "Function Documentation",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "softdouble()",
    "local": ""
  },
  {
    "origin": "[1/7]",
    "local": ""
  },
  {
    "origin": "cv::softdouble::softdouble",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Default constructor.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "softdouble()",
    "local": ""
  },
  {
    "origin": "[2/7]",
    "local": ""
  },
  {
    "origin": "cv::softdouble::softdouble",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Copy constructor.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "softdouble()",
    "local": ""
  },
  {
    "origin": "[3/7]",
    "local": ""
  },
  {
    "origin": "cv::softdouble::softdouble",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "explicit",
    "local": ""
  },
  {
    "origin": "Construct from integer.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "softdouble()",
    "local": ""
  },
  {
    "origin": "[4/7]",
    "local": ""
  },
  {
    "origin": "cv::softdouble::softdouble",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "explicit",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "softdouble()",
    "local": ""
  },
  {
    "origin": "[5/7]",
    "local": ""
  },
  {
    "origin": "cv::softdouble::softdouble",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "explicit",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "softdouble()",
    "local": ""
  },
  {
    "origin": "[6/7]",
    "local": ""
  },
  {
    "origin": "cv::softdouble::softdouble",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "explicit",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "softdouble()",
    "local": ""
  },
  {
    "origin": "[7/7]",
    "local": ""
  },
  {
    "origin": "cv::softdouble::softdouble",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const double",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "explicit",
    "local": ""
  },
  {
    "origin": "Construct from double.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "softfloat()",
    "local": ""
  },
  {
    "origin": "[1/7]",
    "local": ""
  },
  {
    "origin": "cv::softfloat::softfloat",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Default constructor.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "softfloat()",
    "local": ""
  },
  {
    "origin": "[2/7]",
    "local": ""
  },
  {
    "origin": "cv::softfloat::softfloat",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Copy constructor.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "softfloat()",
    "local": ""
  },
  {
    "origin": "[3/7]",
    "local": ""
  },
  {
    "origin": "cv::softfloat::softfloat",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "explicit",
    "local": ""
  },
  {
    "origin": "Construct from integer.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "softfloat()",
    "local": ""
  },
  {
    "origin": "[4/7]",
    "local": ""
  },
  {
    "origin": "cv::softfloat::softfloat",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "explicit",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "softfloat()",
    "local": ""
  },
  {
    "origin": "[5/7]",
    "local": ""
  },
  {
    "origin": "cv::softfloat::softfloat",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "explicit",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "softfloat()",
    "local": ""
  },
  {
    "origin": "[6/7]",
    "local": ""
  },
  {
    "origin": "cv::softfloat::softfloat",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "explicit",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "softfloat()",
    "local": ""
  },
  {
    "origin": "[7/7]",
    "local": ""
  },
  {
    "origin": "cv::softfloat::softfloat",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const float",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "explicit",
    "local": ""
  },
  {
    "origin": "Construct from float.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "abs()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "cv::abs",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Absolute value.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "abs()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "cv::abs",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "cbrt()",
    "local": ""
  },
  {
    "origin": "cv::cbrt",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Cube root.",
    "local": ""
  },
  {
    "origin": "Special cases:",
    "local": ""
  },
  {
    "origin": "cbrt(NaN) is NaN",
    "local": ""
  },
  {
    "origin": "cbrt(+/-Inf) is +/-Inf",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "cos()",
    "local": ""
  },
  {
    "origin": "cv::cos",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Cosine.",
    "local": ""
  },
  {
    "origin": "Special cases:",
    "local": ""
  },
  {
    "origin": "cos(Inf) or cos(NaN) is NaN",
    "local": ""
  },
  {
    "origin": "cos(x) == +/- 1 when cos(x) is close to +/- 1",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "eps()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::softfloat::eps",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Difference between 1 and next representable value.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "eps()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::softdouble::eps",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Difference between 1 and next representable value.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "exp()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "cv::exp",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.exp(",
    "local": ""
  },
  {
    "origin": "src[, dst]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Exponent.",
    "local": ""
  },
  {
    "origin": "Special cases:",
    "local": ""
  },
  {
    "origin": "exp(NaN) is NaN",
    "local": ""
  },
  {
    "origin": "exp(+Inf) == +Inf",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "exp()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "cv::exp",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.exp(",
    "local": ""
  },
  {
    "origin": "src[, dst]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "fromRaw()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "static const",
    "local": ""
  },
  {
    "origin": "cv::softfloat::fromRaw",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Construct from raw.",
    "local": ""
  },
  {
    "origin": "Builds new value from raw binary representation",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "fromRaw()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::softdouble::fromRaw",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Construct from raw.",
    "local": ""
  },
  {
    "origin": "Builds new value from raw binary representation",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "getExp()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "int cv::softfloat::getExp",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Get 0-based exponent.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "getExp()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "int cv::softdouble::getExp",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Get 0-based exponent.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "getFrac()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "cv::softfloat::getFrac",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Get a fraction part.",
    "local": ""
  },
  {
    "origin": "Returns a number 1 &lt;= x &lt; 2 with the same significand",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "getFrac()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "cv::softdouble::getFrac",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Get a fraction part.",
    "local": ""
  },
  {
    "origin": "Returns a number 1 &lt;= x &lt; 2 with the same significand",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "getSign()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "bool cv::softfloat::getSign",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Get sign bit.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "getSign()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "bool cv::softdouble::getSign",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Get sign bit.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "inf()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::softfloat::inf",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Positive infinity constant.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "inf()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::softdouble::inf",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Positive infinity constant.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "isInf()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "bool cv::softfloat::isInf",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Inf state indicator.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "isInf()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "bool cv::softdouble::isInf",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Inf state indicator.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "isNaN()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "bool cv::softfloat::isNaN",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "NaN state indicator.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "isNaN()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "bool cv::softdouble::isNaN",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "NaN state indicator.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "isSubnormal()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "bool cv::softfloat::isSubnormal",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Subnormal number indicator.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "isSubnormal()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "bool cv::softdouble::isSubnormal",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Subnormal number indicator.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "log()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "cv::log",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.log(",
    "local": ""
  },
  {
    "origin": "src[, dst]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Natural logarithm.",
    "local": ""
  },
  {
    "origin": "Special cases:",
    "local": ""
  },
  {
    "origin": "log(NaN), log(x &lt; 0) are NaN",
    "local": ""
  },
  {
    "origin": "log(0) == -Inf",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "log()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "cv::log",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.log(",
    "local": ""
  },
  {
    "origin": "src[, dst]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "max()",
    "local": ""
  },
  {
    "origin": "[1/4]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::softfloat::max",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Biggest finite value.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "max()",
    "local": ""
  },
  {
    "origin": "[2/4]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::softdouble::max",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Biggest finite value.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "max()",
    "local": ""
  },
  {
    "origin": "[3/4]",
    "local": ""
  },
  {
    "origin": "cv::max",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.max(",
    "local": ""
  },
  {
    "origin": "src1, src2[, dst]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "max()",
    "local": ""
  },
  {
    "origin": "[4/4]",
    "local": ""
  },
  {
    "origin": "cv::max",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.max(",
    "local": ""
  },
  {
    "origin": "src1, src2[, dst]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "min()",
    "local": ""
  },
  {
    "origin": "[1/4]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::softfloat::min",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Smallest normalized value.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "min()",
    "local": ""
  },
  {
    "origin": "[2/4]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::softdouble::min",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Smallest normalized value.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "min()",
    "local": ""
  },
  {
    "origin": "[3/4]",
    "local": ""
  },
  {
    "origin": "cv::min",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.min(",
    "local": ""
  },
  {
    "origin": "src1, src2[, dst]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Min and Max functions.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "min()",
    "local": ""
  },
  {
    "origin": "[4/4]",
    "local": ""
  },
  {
    "origin": "cv::min",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.min(",
    "local": ""
  },
  {
    "origin": "src1, src2[, dst]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "mulAdd()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "cv::mulAdd",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Fused Multiplication and Addition.",
    "local": ""
  },
  {
    "origin": "Computes (a*b)+c with single rounding",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "mulAdd()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "cv::mulAdd",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "nan()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::softfloat::nan",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Default NaN constant.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "nan()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::softdouble::nan",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Default NaN constant.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "one()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::softfloat::one",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "One constant.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "one()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::softdouble::one",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "One constant.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator double()",
    "local": ""
  },
  {
    "origin": "cv::softdouble::operator double",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator float()",
    "local": ""
  },
  {
    "origin": "cv::softfloat::operator float",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator softdouble()",
    "local": ""
  },
  {
    "origin": "cv::softfloat::operator",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Type casts.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator softfloat()",
    "local": ""
  },
  {
    "origin": "cv::softdouble::operator",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Type casts.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator!=()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "bool cv::softfloat::operator!=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator!=()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "bool cv::softdouble::operator!=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator%()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "cv::softfloat::operator%",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Remainder operator.",
    "local": ""
  },
  {
    "origin": "A quote from original SoftFloat manual:",
    "local": ""
  },
  {
    "origin": "The IEEE Standard remainder operation computes the value a - n * b, where n is the integer closest to a / b. If a / b is exactly halfway between two integers, n is the even integer closest to a / b. The IEEE Standardâs remainder operation is always exact and so requires no rounding. Depending on the relative magnitudes of the operands, the remainder functions can take considerably longer to execute than the other SoftFloat functions. This is an inherent characteristic of the remainder operation itself and is not a flaw in the SoftFloat implementation.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator%()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "cv::softdouble::operator%",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Remainder operator.",
    "local": ""
  },
  {
    "origin": "A quote from original SoftFloat manual:",
    "local": ""
  },
  {
    "origin": "The IEEE Standard remainder operation computes the value a - n * b, where n is the integer closest to a / b. If a / b is exactly halfway between two integers, n is the even integer closest to a / b. The IEEE Standardâs remainder operation is always exact and so requires no rounding. Depending on the relative magnitudes of the operands, the remainder functions can take considerably longer to execute than the other SoftFloat functions. This is an inherent characteristic of the remainder operation itself and is not a flaw in the SoftFloat implementation.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator%=()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "&amp; cv::softfloat::operator%=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator%=()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "&amp; cv::softdouble::operator%=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator*()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "cv::softfloat::operator*",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator*()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "cv::softdouble::operator*",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator*=()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "&amp; cv::softfloat::operator*=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator*=()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "&amp; cv::softdouble::operator*=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator+()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "cv::softfloat::operator+",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Basic arithmetics.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator+()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "cv::softdouble::operator+",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Basic arithmetics.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator+=()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "&amp; cv::softfloat::operator+=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator+=()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "&amp; cv::softdouble::operator+=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator-()",
    "local": ""
  },
  {
    "origin": "[1/4]",
    "local": ""
  },
  {
    "origin": "cv::softfloat::operator-",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator-()",
    "local": ""
  },
  {
    "origin": "[2/4]",
    "local": ""
  },
  {
    "origin": "cv::softfloat::operator-",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator-()",
    "local": ""
  },
  {
    "origin": "[3/4]",
    "local": ""
  },
  {
    "origin": "cv::softdouble::operator-",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator-()",
    "local": ""
  },
  {
    "origin": "[4/4]",
    "local": ""
  },
  {
    "origin": "cv::softdouble::operator-",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator-=()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "&amp; cv::softfloat::operator-=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator-=()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "&amp; cv::softdouble::operator-=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator/()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "cv::softfloat::operator/",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator/()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "cv::softdouble::operator/",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator/=()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "&amp; cv::softfloat::operator/=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator/=()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "&amp; cv::softdouble::operator/=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator&lt;()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "bool cv::softfloat::operator&lt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator&lt;()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "bool cv::softdouble::operator&lt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator&lt;=()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "bool cv::softfloat::operator&lt;=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator&lt;=()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "bool cv::softdouble::operator&lt;=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator=()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "&amp; cv::softfloat::operator=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Assign constructor.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator=()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "&amp; cv::softdouble::operator=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Assign constructor.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator==()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "bool cv::softfloat::operator==",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Comparison operations.",
    "local": ""
  },
  {
    "origin": "Any operation with NaN produces false",
    "local": ""
  },
  {
    "origin": "The only exception is when x is NaN: x != y for any y.",
    "local": ""
  },
  {
    "origin": "Positive and negative zeros are equal",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator==()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "bool cv::softdouble::operator==",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Comparison operations.",
    "local": ""
  },
  {
    "origin": "Any operation with NaN produces false",
    "local": ""
  },
  {
    "origin": "The only exception is when x is NaN: x != y for any y.",
    "local": ""
  },
  {
    "origin": "Positive and negative zeros are equal",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator&gt;()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "bool cv::softfloat::operator&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator&gt;()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "bool cv::softdouble::operator&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator&gt;=()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "bool cv::softfloat::operator&gt;=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "operator&gt;=()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "bool cv::softdouble::operator&gt;=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "pi()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::softfloat::pi",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Correct pi approximation.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "pi()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::softdouble::pi",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Correct pi approximation.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "pow()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "cv::pow",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.pow(",
    "local": ""
  },
  {
    "origin": "src, power[, dst]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Raising to the power.",
    "local": ""
  },
  {
    "origin": "Special cases:",
    "local": ""
  },
  {
    "origin": "x**NaN is NaN for any x",
    "local": ""
  },
  {
    "origin": "( |x| == 1 )**Inf is NaN",
    "local": ""
  },
  {
    "origin": "( |x| &gt; 1 )**+Inf or ( |x| &lt; 1 )**-Inf is +Inf",
    "local": ""
  },
  {
    "origin": "x ** 0 == 1 for any x",
    "local": ""
  },
  {
    "origin": "x ** 1 == 1 for any x",
    "local": ""
  },
  {
    "origin": "NaN ** y is NaN for any other y",
    "local": ""
  },
  {
    "origin": "Inf ** y is +Inf for any other y",
    "local": ""
  },
  {
    "origin": "(x &lt; 0)**y is NaN for any other y if x can't be correctly rounded to integer",
    "local": ""
  },
  {
    "origin": "0 ** 0 == 1",
    "local": ""
  },
  {
    "origin": "0 ** (y &lt; 0) is +Inf",
    "local": ""
  },
  {
    "origin": "0 ** (y &gt; 0) is 0",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "pow()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "cv::pow",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.pow(",
    "local": ""
  },
  {
    "origin": "src, power[, dst]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "saturate_cast()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static _Tp cv::saturate_cast",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Saturate casts.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "saturate_cast()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static _Tp cv::saturate_cast",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; int64_t &gt;()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; int64_t &gt;()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; schar &gt;()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; schar &gt;()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; short &gt;()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "short",
    "local": ""
  },
  {
    "origin": "&lt; short &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; short &gt;()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "short",
    "local": ""
  },
  {
    "origin": "&lt; short &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; uchar &gt;()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; uchar &gt;()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; uint64_t &gt;()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; uint64_t &gt;()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; unsigned &gt;()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "unsigned",
    "local": ""
  },
  {
    "origin": "&lt; unsigned &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Saturate cast to unsigned integer and unsigned long long integer We intentionally do not clip negative numbers, to make -1 become 0xffffffff etc.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; unsigned &gt;()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "unsigned",
    "local": ""
  },
  {
    "origin": "&lt; unsigned &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; ushort &gt;()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "saturate_cast&lt; ushort &gt;()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "setExp()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "cv::softfloat::setExp",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "e",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Construct a copy with new 0-based exponent.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "setExp()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "cv::softdouble::setExp",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "e",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Construct a copy with new 0-based exponent.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "setFrac()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "cv::softfloat::setFrac",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "s",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Construct a copy with provided significand.",
    "local": ""
  },
  {
    "origin": "Constructs a copy of a number with significand taken from parameter",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "setFrac()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "cv::softdouble::setFrac",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "s",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Construct a copy with provided significand.",
    "local": ""
  },
  {
    "origin": "Constructs a copy of a number with significand taken from parameter",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "setSign()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "cv::softfloat::setSign",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "sign",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Construct a copy with new sign bit.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "setSign()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "cv::softdouble::setSign",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "sign",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Construct a copy with new sign bit.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "sin()",
    "local": ""
  },
  {
    "origin": "cv::sin",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Sine.",
    "local": ""
  },
  {
    "origin": "Special cases:",
    "local": ""
  },
  {
    "origin": "sin(Inf) or sin(NaN) is NaN",
    "local": ""
  },
  {
    "origin": "sin(x) == x when sin(x) is close to zero",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "sqrt()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "cv::sqrt",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.sqrt(",
    "local": ""
  },
  {
    "origin": "src[, dst]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Square root.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "sqrt()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "cv::sqrt",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.sqrt(",
    "local": ""
  },
  {
    "origin": "src[, dst]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "zero()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::softfloat::zero",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Zero constant.",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "zero()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::softdouble::zero",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Zero constant.",
    "local": ""
  },
  {
    "origin": "Variable Documentation",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "cv::softfloat::v",
    "local": ""
  },
  {
    "origin": "â",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "cv::softdouble::v",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:40 for OpenCV by",
    "local": ""
  }
]