[
  {
    "origin": "OpenCV: Mask operations on matrices",
    "local": "OpenCV：矩阵的掩码操作"
  },
  {
    "origin": "Open Source Computer Vision",
    "local": "Open Source Computer Vision"
  },
  {
    "origin": "Mask operations on matrices",
    "local": "Mask operations on matrices(矩阵的掩码运算)"
  },
  {
    "origin": "Prev Tutorial:",
    "local": "上一个教程："
  },
  {
    "origin": "Next Tutorial:",
    "local": "下一个教程："
  },
  {
    "origin": "Original author",
    "local": "原作者"
  },
  {
    "origin": "Bernát Gábor",
    "local": "Bernát Gábor"
  },
  {
    "origin": "Compatibility",
    "local": "兼容性"
  },
  {
    "origin": "OpenCV &gt;= 3.0",
    "local": "OpenCV &gt;= 3.0"
  },
  {
    "origin": "Mask operations on matrices are quite simple. The idea is that we recalculate each pixel's value in an image according to a mask matrix (also known as kernel). This mask holds values that will adjust how much influence neighboring pixels (and the current pixel) have on the new pixel value. From a mathematical point of view we make a weighted average, with our specified values.",
    "local": "矩阵上的掩码操作非常简单。其思想是我们根据掩模矩阵（也称为内核）重新计算图像中每个像素的值。此遮罩包含的值将调整相邻像素（和当前像素）对新像素值的影响程度。从数学的观点来看，我们用指定的值作加权平均。"
  },
  {
    "origin": "Our test case",
    "local": "我们的测试用例"
  },
  {
    "origin": "Let's consider the issue of an image contrast enhancement method. Basically we want to apply for every pixel of the image the following formula:",
    "local": "让我们考虑一下图像对比度增强方法的问题。基本上，我们要对图像的每个像素应用以下公式："
  },
  {
    "origin": "\\[I(i,j) = 5*I(i,j) - [ I(i-1,j) + I(i+1,j) + I(i,j-1) + I(i,j+1)]\\]",
    "local": "\\[I(i,j) = 5*I(i,j) - [ I(i-1,j) + I(i+1,j) + I(i,j-1) + I(i,j+1)]\\]"
  },
  {
    "origin": "\\[\\iff I(i,j)*M, \\text{where } M = \\bordermatrix{ _i\\backslash ^j &amp; -1 &amp; 0 &amp; +1 \\cr -1 &amp; 0 &amp; -1 &amp; 0 \\cr 0 &amp; -1 &amp; 5 &amp; -1 \\cr +1 &amp; 0 &amp; -1 &amp; 0 \\cr }\\]",
    "local": "\\[\\iff I(i,j)*M, \\text{where } M = \\bordermatrix{ _i\\backslash ^j &amp; -1 &amp; 0 &amp; +1 \\cr -1 &amp; 0 &amp; -1 &amp; 0 \\cr 0 &amp; -1 &amp; 5 &amp; -1 \\cr +1 &amp; 0 &amp; -1 &amp; 0 \\cr }\\]"
  },
  {
    "origin": "The first notation is by using a formula, while the second is a compacted version of the first by using a mask. You use the mask by putting the center of the mask matrix (in the upper case noted by the zero-zero index) on the pixel you want to calculate and sum up the pixel values multiplied with the overlapped matrix values. It's the same thing, however in case of large matrices the latter notation is a lot easier to look over.",
    "local": "第一种表示法是使用公式，而第二种表示法是使用掩码的第一种表示法的压缩版本。使用遮罩的方法是将遮罩矩阵的中心（大写时用零索引表示）放在要计算的像素上，然后将像素值乘以重叠的矩阵值求和。这是同样的事情，但是在大矩阵的情况下，后一种表示法更容易查看。"
  },
  {
    "origin": "Code",
    "local": "代码"
  },
  {
    "origin": "C++",
    "local": "C++"
  },
  {
    "origin": "You can download this source code from",
    "local": "您可以从下载此源代码"
  },
  {
    "origin": "here",
    "local": "在这里"
  },
  {
    "origin": "or look in the OpenCV source code libraries sample directory at",
    "local": "或者查看OpenCV源代码库示例目录"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Java",
    "local": "Java"
  },
  {
    "origin": "You can download this source code from",
    "local": "您可以从下载此源代码"
  },
  {
    "origin": "here",
    "local": "在这里"
  },
  {
    "origin": "or look in the OpenCV source code libraries sample directory at",
    "local": "或者查看OpenCV源代码库示例目录"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Python",
    "local": "Python"
  },
  {
    "origin": "You can download this source code from",
    "local": "您可以从下载此源代码"
  },
  {
    "origin": "here",
    "local": "在这里"
  },
  {
    "origin": "or look in the OpenCV source code libraries sample directory at",
    "local": "或者查看OpenCV源代码库示例目录"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "The Basic Method",
    "local": "基本方法"
  },
  {
    "origin": "Now let us see how we can make this happen by using the basic pixel access method or by using the",
    "local": "现在让我们看看如何通过使用基本像素访问方法或使用"
  },
  {
    "origin": "function.",
    "local": "功能。"
  },
  {
    "origin": "Here's a function that will do this:",
    "local": "下面是一个函数："
  },
  {
    "origin": "C++",
    "local": "C++"
  },
  {
    "origin": "At first we make sure that the input images data is in unsigned char format. For this we use the",
    "local": "首先，我们要确保输入的图像数据是无符号字符格式。为此，我们使用"
  },
  {
    "origin": "function that throws an error when the expression inside it is false.",
    "local": "函数中的表达式为false时抛出错误。"
  },
  {
    "origin": "Java",
    "local": "Java"
  },
  {
    "origin": "At first we make sure that the input images data in unsigned 8 bit format.",
    "local": "首先，我们要确保输入的图像数据是无符号的8位格式。"
  },
  {
    "origin": "Python",
    "local": "Python"
  },
  {
    "origin": "At first we make sure that the input images data in unsigned 8 bit format.",
    "local": "首先，我们要确保输入的图像数据是无符号的8位格式。"
  },
  {
    "origin": "We create an output image with the same size and the same type as our input. As you can see in the",
    "local": "我们创建一个与输入大小和类型相同的输出图像。正如你在照片中看到的"
  },
  {
    "origin": "section, depending on the number of channels we may have one or more subcolumns.",
    "local": "节，根据频道的数量，我们可能有一个或多个子列。"
  },
  {
    "origin": "C++",
    "local": "C++"
  },
  {
    "origin": "We will iterate through them via pointers so the total number of elements depends on this number.",
    "local": "我们将通过指针遍历它们，因此元素的总数取决于这个数。"
  },
  {
    "origin": "Java",
    "local": "Java"
  },
  {
    "origin": "Python",
    "local": "Python"
  },
  {
    "origin": "C++",
    "local": "C++"
  },
  {
    "origin": "We'll use the plain C [] operator to access pixels. Because we need to access multiple rows at the same time we'll acquire the pointers for each of them (a previous, a current and a next line). We need another pointer to where we're going to save the calculation. Then simply access the right items with the [] operator. For moving the output pointer ahead we simply increase this (with one byte) after each operation:",
    "local": "我们将使用纯C[]操作符来访问像素。因为我们需要同时访问多行，所以我们将获取每一行的指针（前一行、当前行和下一行）。我们需要另一个指针指向保存计算的位置。然后只需使用[]操作符访问正确的项。为了将输出指针向前移动，我们只需在每次操作后增加（一个字节）："
  },
  {
    "origin": "On the borders of the image the upper notation results inexistent pixel locations (like minus one - minus one). In these points our formula is undefined. A simple solution is to not apply the kernel in these points and, for example, set the pixels on the borders to zeros:",
    "local": "在图像的边界上，上面的符号表示不存在的像素位置（比如负一-负一）。在这几点上，我们的公式是没有定义的。一个简单的解决方案是不在这些点上应用内核，例如，将边界上的像素设置为零："
  },
  {
    "origin": "Java",
    "local": "Java"
  },
  {
    "origin": "We need to access multiple rows and columns which can be done by adding or subtracting 1 to the current center (i,j). Then we apply the sum and put the new value in the Result matrix.",
    "local": "我们需要访问多个行和列，这可以通过向当前中心（i，j）加1或减1来完成。然后我们应用和，并将新值放入结果矩阵中。"
  },
  {
    "origin": "On the borders of the image the upper notation results in inexistent pixel locations (like (-1,-1)). In these points our formula is undefined. A simple solution is to not apply the kernel in these points and, for example, set the pixels on the borders to zeros:",
    "local": "在图像的边界上，上面的符号导致不存在像素位置（如（-1，-1））。在这几点上，我们的公式是没有定义的。一个简单的解决方案是不在这些点上应用内核，例如，将边界上的像素设置为零："
  },
  {
    "origin": "Python",
    "local": "Python"
  },
  {
    "origin": "We need to access multiple rows and columns which can be done by adding or subtracting 1 to the current center (i,j). Then we apply the sum and put the new value in the Result matrix.",
    "local": "我们需要访问多个行和列，这可以通过向当前中心（i，j）加1或减1来完成。然后我们应用和，并将新值放入结果矩阵中。"
  },
  {
    "origin": "The filter2D function",
    "local": "filter2D函数"
  },
  {
    "origin": "Applying such filters are so common in image processing that in OpenCV there is a function that will take care of applying the mask (also called a kernel in some places). For this you first need to define an object that holds the mask:",
    "local": "应用这样的过滤器在图像处理中非常常见，以至于在OpenCV中有一个函数负责应用掩码（在某些地方也称为内核）。为此，首先需要定义一个包含遮罩的对象："
  },
  {
    "origin": "C++",
    "local": "C++"
  },
  {
    "origin": "Java",
    "local": "Java"
  },
  {
    "origin": "Python",
    "local": "Python"
  },
  {
    "origin": "Then call the",
    "local": "然后打电话给"
  },
  {
    "origin": "function specifying the input, the output image and the kernel to use:",
    "local": "函数指定要使用的输入、输出图像和内核："
  },
  {
    "origin": "C++",
    "local": "C++"
  },
  {
    "origin": "Java",
    "local": "Java"
  },
  {
    "origin": "Python",
    "local": "Python"
  },
  {
    "origin": "The function even has a fifth optional argument to specify the center of the kernel, a sixth for adding an optional value to the filtered pixels before storing them in K and a seventh one for determining what to do in the regions where the operation is undefined (borders).",
    "local": "该函数甚至有第五个可选参数来指定内核的中心，第六个用于在将过滤后的像素存储到K中之前向其添加可选值，第七个用于确定在操作未定义的区域（边界）中执行什么操作。"
  },
  {
    "origin": "This function is shorter, less verbose and, because there are some optimizations, it is usually faster than the",
    "local": "这个函数更短，更不冗长，而且由于有一些优化，它通常比"
  },
  {
    "origin": "hand-coded method",
    "local": "手工编码法"
  },
  {
    "origin": ". For example in my test while the second one took only 13 milliseconds the first took around 31 milliseconds. Quite some difference.",
    "local": ". 例如，在我的测试中，第二个只花了13毫秒，而第一个只花了31毫秒。有点不同。"
  },
  {
    "origin": "For example:",
    "local": "例如："
  },
  {
    "origin": "C++",
    "local": "C++"
  },
  {
    "origin": "Check out an instance of running the program on our",
    "local": "查看在我们的计算机上运行程序的实例"
  },
  {
    "origin": "YouTube channel",
    "local": "YouTube频道"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:34 for OpenCV by &#160;",
    "local": "Generated on Fri Apr 2 2021 11:36:34 for OpenCV by zsz"
  }
]