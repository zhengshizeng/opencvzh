[
  {
    "origin": "OpenCV: High-level GUI",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Modules",
    "local": ""
  },
  {
    "origin": "Typedefs",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "High-level GUI",
    "local": ""
  },
  {
    "origin": "Modules",
    "local": ""
  },
  {
    "origin": "Typedefs",
    "local": ""
  },
  {
    "origin": "typedef void(*",
    "local": ""
  },
  {
    "origin": ") (int state, void *userdata)",
    "local": ""
  },
  {
    "origin": "Callback function for a button created by",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef void(*",
    "local": ""
  },
  {
    "origin": ") (int event, int x, int y, int flags, void *userdata)",
    "local": ""
  },
  {
    "origin": "Callback function for mouse events. see",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef void(*",
    "local": ""
  },
  {
    "origin": ") (void *userdata)",
    "local": ""
  },
  {
    "origin": "Callback function defined to be called every frame. See",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef void(*",
    "local": ""
  },
  {
    "origin": ") (int pos, void *userdata)",
    "local": ""
  },
  {
    "origin": "Callback function for Trackbar see",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;trackbarname, const",
    "local": ""
  },
  {
    "origin": "&amp;winname, int *value, int count,",
    "local": ""
  },
  {
    "origin": "onChange=0, void *userdata=0)",
    "local": ""
  },
  {
    "origin": "Creates a trackbar and attaches it to the specified window.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Destroys all of the HighGUI windows.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;winname)",
    "local": ""
  },
  {
    "origin": "Destroys the specified window.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "(int flags)",
    "local": ""
  },
  {
    "origin": "Gets the mouse-wheel motion delta, when handling mouse-wheel events",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;trackbarname, const",
    "local": ""
  },
  {
    "origin": "&amp;winname)",
    "local": ""
  },
  {
    "origin": "Returns the trackbar position.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;winname)",
    "local": ""
  },
  {
    "origin": "Provides rectangle of image in the window.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;winname, int prop_id)",
    "local": ""
  },
  {
    "origin": "Provides parameters of a window.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;winname,",
    "local": ""
  },
  {
    "origin": "mat)",
    "local": ""
  },
  {
    "origin": "Displays an image in the specified window.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;winname, int x, int y)",
    "local": ""
  },
  {
    "origin": "Moves the window to the specified position.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;winname, int flags=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Creates a window.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Polls for a pressed key.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;winname, int width, int height)",
    "local": ""
  },
  {
    "origin": "Resizes the window to the specified size.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;winname, const",
    "local": ""
  },
  {
    "origin": "&amp;size)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;windowName,",
    "local": ""
  },
  {
    "origin": "img, bool showCrosshair=true, bool fromCenter=false)",
    "local": ""
  },
  {
    "origin": "Allows users to select a ROI on the given image.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img, bool showCrosshair=true, bool fromCenter=false)",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;windowName,",
    "local": ""
  },
  {
    "origin": "img, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;boundingBoxes, bool showCrosshair=true, bool fromCenter=false)",
    "local": ""
  },
  {
    "origin": "Allows users to select multiple ROIs on the given image.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;winname,",
    "local": ""
  },
  {
    "origin": "onMouse, void *userdata=0)",
    "local": ""
  },
  {
    "origin": "Sets mouse handler for the specified window.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;trackbarname, const",
    "local": ""
  },
  {
    "origin": "&amp;winname, int maxval)",
    "local": ""
  },
  {
    "origin": "Sets the trackbar maximum position.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;trackbarname, const",
    "local": ""
  },
  {
    "origin": "&amp;winname, int minval)",
    "local": ""
  },
  {
    "origin": "Sets the trackbar minimum position.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;trackbarname, const",
    "local": ""
  },
  {
    "origin": "&amp;winname, int pos)",
    "local": ""
  },
  {
    "origin": "Sets the trackbar position.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;winname, int prop_id, double prop_value)",
    "local": ""
  },
  {
    "origin": "Changes parameters of a window dynamically.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;winname, const",
    "local": ""
  },
  {
    "origin": "&amp;title)",
    "local": ""
  },
  {
    "origin": "Updates window title.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "(int delay=0)",
    "local": ""
  },
  {
    "origin": "Waits for a pressed key.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "(int delay=0)",
    "local": ""
  },
  {
    "origin": "Similar to",
    "local": ""
  },
  {
    "origin": ", but returns full key code.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "While OpenCV was designed for use in full-scale applications and can be used within functionally rich UI frameworks (such as Qt*, WinForms*, or Cocoa*) or without any UI at all, sometimes there it is required to try functionality quickly and visualize the results. This is what the HighGUI module has been designed for.",
    "local": ""
  },
  {
    "origin": "It provides easy interface to:",
    "local": ""
  },
  {
    "origin": "Create and manipulate windows that can display images and \"remember\" their content (no need to handle repaint events from OS).",
    "local": ""
  },
  {
    "origin": "Add trackbars to the windows, handle simple mouse events as well as keyboard commands.",
    "local": ""
  },
  {
    "origin": "Typedef Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "ButtonCallback",
    "local": ""
  },
  {
    "origin": "typedef void(* cv::ButtonCallback) (int state, void *userdata)",
    "local": ""
  },
  {
    "origin": "Callback function for a button created by",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "state",
    "local": ""
  },
  {
    "origin": "current state of the button. It could be -1 for a push button, 0 or 1 for a check/radio box button.",
    "local": ""
  },
  {
    "origin": "userdata",
    "local": ""
  },
  {
    "origin": "The optional parameter.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "MouseCallback",
    "local": ""
  },
  {
    "origin": "typedef void(* cv::MouseCallback) (int event, int x, int y, int flags, void *userdata)",
    "local": ""
  },
  {
    "origin": "Callback function for mouse events. see",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "event",
    "local": ""
  },
  {
    "origin": "one of the",
    "local": ""
  },
  {
    "origin": "constants.",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "The x-coordinate of the mouse event.",
    "local": ""
  },
  {
    "origin": "y",
    "local": ""
  },
  {
    "origin": "The y-coordinate of the mouse event.",
    "local": ""
  },
  {
    "origin": "flags",
    "local": ""
  },
  {
    "origin": "one of the",
    "local": ""
  },
  {
    "origin": "constants.",
    "local": ""
  },
  {
    "origin": "userdata",
    "local": ""
  },
  {
    "origin": "The optional parameter.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "OpenGlDrawCallback",
    "local": ""
  },
  {
    "origin": "typedef void(* cv::OpenGlDrawCallback) (void *userdata)",
    "local": ""
  },
  {
    "origin": "Callback function defined to be called every frame. See",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "userdata",
    "local": ""
  },
  {
    "origin": "The optional parameter.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "TrackbarCallback",
    "local": ""
  },
  {
    "origin": "typedef void(* cv::TrackbarCallback) (int pos, void *userdata)",
    "local": ""
  },
  {
    "origin": "Callback function for Trackbar see",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "pos",
    "local": ""
  },
  {
    "origin": "current position of the specified trackbar.",
    "local": ""
  },
  {
    "origin": "userdata",
    "local": ""
  },
  {
    "origin": "The optional parameter.",
    "local": ""
  },
  {
    "origin": "Function Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "createTrackbar()",
    "local": ""
  },
  {
    "origin": "int cv::createTrackbar",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "trackbarname",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int *",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "count",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "onChange",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "void *",
    "local": ""
  },
  {
    "origin": "userdata",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Creates a trackbar and attaches it to the specified window.",
    "local": ""
  },
  {
    "origin": "The function createTrackbar creates a trackbar (a slider or range control) with the specified name and range, assigns a variable value to be a position synchronized with the trackbar and specifies the callback function onChange to be called on the trackbar position change. The created trackbar is displayed in the specified window winname.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "[",
    "local": ""
  },
  {
    "origin": "Qt Backend Only",
    "local": ""
  },
  {
    "origin": "] winname can be empty if the trackbar should be attached to the control panel.",
    "local": ""
  },
  {
    "origin": "Clicking the label of each trackbar enables editing the trackbar values manually.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "trackbarname",
    "local": ""
  },
  {
    "origin": "Name of the created trackbar.",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": "Name of the window that will be used as a parent of the created trackbar.",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": "Optional pointer to an integer variable whose value reflects the position of the slider. Upon creation, the slider position is defined by this variable.",
    "local": ""
  },
  {
    "origin": "count",
    "local": ""
  },
  {
    "origin": "onChange",
    "local": ""
  },
  {
    "origin": "Pointer to the function to be called every time the slider changes position. This function should be prototyped as void Foo(int,void*); , where the first parameter is the trackbar position and the second parameter is the user data (see the next parameter). If the callback is the NULL pointer, no callbacks are called, but only value is updated.",
    "local": ""
  },
  {
    "origin": "userdata",
    "local": ""
  },
  {
    "origin": "User data that is passed as is to the callback. It can be used to handle trackbar events without using global variables.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "destroyAllWindows()",
    "local": ""
  },
  {
    "origin": "void cv::destroyAllWindows",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.destroyAllWindows(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Destroys all of the HighGUI windows.",
    "local": ""
  },
  {
    "origin": "The function destroyAllWindows destroys all of the opened HighGUI windows.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "destroyWindow()",
    "local": ""
  },
  {
    "origin": "void cv::destroyWindow",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.destroyWindow(",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Destroys the specified window.",
    "local": ""
  },
  {
    "origin": "The function destroyWindow destroys the window with the given name.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": "Name of the window to be destroyed.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getMouseWheelDelta()",
    "local": ""
  },
  {
    "origin": "int cv::getMouseWheelDelta",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "flags",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Gets the mouse-wheel motion delta, when handling mouse-wheel events",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "For regular mice with a scroll-wheel, delta will be a multiple of 120. The value 120 corresponds to a one notch rotation of the wheel or the threshold for action to be taken and one such action should occur for each delta. Some high-precision mice with higher-resolution freely-rotating wheels may generate smaller values.",
    "local": ""
  },
  {
    "origin": "For",
    "local": ""
  },
  {
    "origin": "positive and negative values mean forward and backward scrolling, respectively. For",
    "local": ""
  },
  {
    "origin": ", where available, positive and negative values mean right and left scrolling, respectively.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Mouse-wheel events are currently supported only on Windows.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "flags",
    "local": ""
  },
  {
    "origin": "The mouse callback flags parameter.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getTrackbarPos()",
    "local": ""
  },
  {
    "origin": "int cv::getTrackbarPos",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "trackbarname",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.getTrackbarPos(",
    "local": ""
  },
  {
    "origin": "trackbarname, winname",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns the trackbar position.",
    "local": ""
  },
  {
    "origin": "The function returns the current position of the specified trackbar.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "[",
    "local": ""
  },
  {
    "origin": "Qt Backend Only",
    "local": ""
  },
  {
    "origin": "] winname can be empty if the trackbar is attached to the control panel.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "trackbarname",
    "local": ""
  },
  {
    "origin": "Name of the trackbar.",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": "Name of the window that is the parent of the trackbar.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getWindowImageRect()",
    "local": ""
  },
  {
    "origin": "cv::getWindowImageRect",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.getWindowImageRect(",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Provides rectangle of image in the window.",
    "local": ""
  },
  {
    "origin": "The function getWindowImageRect returns the client screen coordinates, width and height of the image rendering area.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": "Name of the window.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getWindowProperty()",
    "local": ""
  },
  {
    "origin": "double cv::getWindowProperty",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "prop_id",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.getWindowProperty(",
    "local": ""
  },
  {
    "origin": "winname, prop_id",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Provides parameters of a window.",
    "local": ""
  },
  {
    "origin": "The function getWindowProperty returns properties of a window.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": "Name of the window.",
    "local": ""
  },
  {
    "origin": "prop_id",
    "local": ""
  },
  {
    "origin": "Window property to retrieve. The following operation flags are available: (",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "imshow()",
    "local": ""
  },
  {
    "origin": "void cv::imshow",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "mat",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.imshow(",
    "local": ""
  },
  {
    "origin": "winname, mat",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Displays an image in the specified window.",
    "local": ""
  },
  {
    "origin": "The function imshow displays an image in the specified window. If the window was created with the",
    "local": ""
  },
  {
    "origin": "flag, the image is shown with its original size, however it is still limited by the screen resolution. Otherwise, the image is scaled to fit the window. The function may scale the image, depending on its depth:",
    "local": ""
  },
  {
    "origin": "If the image is 8-bit unsigned, it is displayed as is.",
    "local": ""
  },
  {
    "origin": "If the image is 16-bit unsigned or 32-bit integer, the pixels are divided by 256. That is, the value range [0,255*256] is mapped to [0,255].",
    "local": ""
  },
  {
    "origin": "If the image is 32-bit or 64-bit floating-point, the pixel values are multiplied by 255. That is, the value range [0,1] is mapped to [0,255].",
    "local": ""
  },
  {
    "origin": "If window was created with OpenGL support,",
    "local": ""
  },
  {
    "origin": "also support",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "as input.",
    "local": ""
  },
  {
    "origin": "If the window was not created before this function, it is assumed creating a window with",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "If you need to show an image that is bigger than the screen resolution, you will need to call namedWindow(\"\", WINDOW_NORMAL) before the imshow.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "This function should be followed by a call to",
    "local": ""
  },
  {
    "origin": "or",
    "local": ""
  },
  {
    "origin": "to perform GUI housekeeping tasks that are necessary to actually show the given image and make the window respond to mouse and keyboard events. Otherwise, it won't display the image and the window might lock up. For example,",
    "local": ""
  },
  {
    "origin": "waitKey(0)",
    "local": ""
  },
  {
    "origin": "will display the window infinitely until any keypress (it is suitable for image display).",
    "local": ""
  },
  {
    "origin": "waitKey(25)",
    "local": ""
  },
  {
    "origin": "will display a frame and wait approximately 25 ms for a key press (suitable for displaying a video frame-by-frame). To remove the window, use",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "[",
    "local": ""
  },
  {
    "origin": "Windows Backend Only",
    "local": ""
  },
  {
    "origin": "] Pressing Ctrl+C will copy the image to the clipboard.",
    "local": ""
  },
  {
    "origin": "[",
    "local": ""
  },
  {
    "origin": "Windows Backend Only",
    "local": ""
  },
  {
    "origin": "] Pressing Ctrl+S will show a dialog to save the image.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": "Name of the window.",
    "local": ""
  },
  {
    "origin": "mat",
    "local": ""
  },
  {
    "origin": "Image to be shown.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "moveWindow()",
    "local": ""
  },
  {
    "origin": "void cv::moveWindow",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "y",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.moveWindow(",
    "local": ""
  },
  {
    "origin": "winname, x, y",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Moves the window to the specified position.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": "Name of the window.",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "The new x-coordinate of the window.",
    "local": ""
  },
  {
    "origin": "y",
    "local": ""
  },
  {
    "origin": "The new y-coordinate of the window.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "namedWindow()",
    "local": ""
  },
  {
    "origin": "void cv::namedWindow",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "flags",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.namedWindow(",
    "local": ""
  },
  {
    "origin": "winname[, flags]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Creates a window.",
    "local": ""
  },
  {
    "origin": "The function namedWindow creates a window that can be used as a placeholder for images and trackbars. Created windows are referred to by their names.",
    "local": ""
  },
  {
    "origin": "If a window with the same name already exists, the function does nothing.",
    "local": ""
  },
  {
    "origin": "You can call",
    "local": ""
  },
  {
    "origin": "or",
    "local": ""
  },
  {
    "origin": "to close the window and de-allocate any associated memory usage. For a simple program, you do not really have to call these functions because all the resources and windows of the application are closed automatically by the operating system upon exit.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Qt backend supports additional flags:",
    "local": ""
  },
  {
    "origin": "WINDOW_NORMAL or WINDOW_AUTOSIZE:",
    "local": ""
  },
  {
    "origin": "WINDOW_NORMAL enables you to resize the window, whereas WINDOW_AUTOSIZE adjusts automatically the window size to fit the displayed image (see imshow ), and you cannot change the window size manually.",
    "local": ""
  },
  {
    "origin": "WINDOW_FREERATIO or WINDOW_KEEPRATIO:",
    "local": ""
  },
  {
    "origin": "WINDOW_FREERATIO adjusts the image with no respect to its ratio, whereas WINDOW_KEEPRATIO keeps the image ratio.",
    "local": ""
  },
  {
    "origin": "WINDOW_GUI_NORMAL or WINDOW_GUI_EXPANDED:",
    "local": ""
  },
  {
    "origin": "WINDOW_GUI_NORMAL is the old way to draw the window without statusbar and toolbar, whereas WINDOW_GUI_EXPANDED is a new enhanced GUI. By default, flags == WINDOW_AUTOSIZE | WINDOW_KEEPRATIO | WINDOW_GUI_EXPANDED",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": "Name of the window in the window caption that may be used as a window identifier.",
    "local": ""
  },
  {
    "origin": "flags",
    "local": ""
  },
  {
    "origin": "Flags of the window. The supported flags are: (",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "pollKey()",
    "local": ""
  },
  {
    "origin": "int cv::pollKey",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.pollKey(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Polls for a pressed key.",
    "local": ""
  },
  {
    "origin": "The function pollKey polls for a key event without waiting. It returns the code of the pressed key or -1 if no key was pressed since the last invocation. To wait until a key was pressed, use",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "The functions",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "are the only methods in HighGUI that can fetch and handle GUI events, so one of them needs to be called periodically for normal event processing unless HighGUI is used within an environment that takes care of event processing.",
    "local": ""
  },
  {
    "origin": "The function only works if there is at least one HighGUI window created and the window is active. If there are several HighGUI windows, any of them can be active.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "resizeWindow()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "void cv::resizeWindow",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "width",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "height",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.resizeWindow(",
    "local": ""
  },
  {
    "origin": "winname, width, height",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.resizeWindow(",
    "local": ""
  },
  {
    "origin": "winname, size",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Resizes the window to the specified size.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "The specified window size is for the image area. Toolbars are not counted.",
    "local": ""
  },
  {
    "origin": "Only windows created without",
    "local": ""
  },
  {
    "origin": "flag can be resized.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": "Window name.",
    "local": ""
  },
  {
    "origin": "width",
    "local": ""
  },
  {
    "origin": "The new window width.",
    "local": ""
  },
  {
    "origin": "height",
    "local": ""
  },
  {
    "origin": "The new window height.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "resizeWindow()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "void cv::resizeWindow",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "size",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.resizeWindow(",
    "local": ""
  },
  {
    "origin": "winname, width, height",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.resizeWindow(",
    "local": ""
  },
  {
    "origin": "winname, size",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": "Window name.",
    "local": ""
  },
  {
    "origin": "size",
    "local": ""
  },
  {
    "origin": "The new window size.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "selectROI()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "cv::selectROI",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "windowName",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "showCrosshair",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "fromCenter",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.selectROI(",
    "local": ""
  },
  {
    "origin": "windowName, img[, showCrosshair[, fromCenter]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.selectROI(",
    "local": ""
  },
  {
    "origin": "img[, showCrosshair[, fromCenter]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Allows users to select a ROI on the given image.",
    "local": ""
  },
  {
    "origin": "The function creates a window and allows users to select a ROI using the mouse. Controls: use",
    "local": ""
  },
  {
    "origin": "or",
    "local": ""
  },
  {
    "origin": "to finish selection, use key",
    "local": ""
  },
  {
    "origin": "to cancel selection (function will return the zero",
    "local": ""
  },
  {
    "origin": ").",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "windowName",
    "local": ""
  },
  {
    "origin": "name of the window where selection process will be shown.",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "image to select a ROI.",
    "local": ""
  },
  {
    "origin": "showCrosshair",
    "local": ""
  },
  {
    "origin": "if true crosshair of selection rectangle will be shown.",
    "local": ""
  },
  {
    "origin": "fromCenter",
    "local": ""
  },
  {
    "origin": "if true center of selection will match initial mouse position. In opposite case a corner of selection rectangle will correspont to the initial mouse position.",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "selected ROI or empty rect if selection canceled.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "The function sets it's own mouse callback for specified window using",
    "local": ""
  },
  {
    "origin": "(windowName, ...). After finish of work an empty callback will be set for the used window.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "selectROI()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "cv::selectROI",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "showCrosshair",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "fromCenter",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.selectROI(",
    "local": ""
  },
  {
    "origin": "windowName, img[, showCrosshair[, fromCenter]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.selectROI(",
    "local": ""
  },
  {
    "origin": "img[, showCrosshair[, fromCenter]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "selectROIs()",
    "local": ""
  },
  {
    "origin": "void cv::selectROIs",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "windowName",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "boundingBoxes",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "showCrosshair",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "fromCenter",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "boundingBoxes",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.selectROIs(",
    "local": ""
  },
  {
    "origin": "windowName, img[, showCrosshair[, fromCenter]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Allows users to select multiple ROIs on the given image.",
    "local": ""
  },
  {
    "origin": "The function creates a window and allows users to select multiple ROIs using the mouse. Controls: use",
    "local": ""
  },
  {
    "origin": "or",
    "local": ""
  },
  {
    "origin": "to finish current selection and start a new one, use",
    "local": ""
  },
  {
    "origin": "to terminate multiple ROI selection process.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "windowName",
    "local": ""
  },
  {
    "origin": "name of the window where selection process will be shown.",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "image to select a ROI.",
    "local": ""
  },
  {
    "origin": "boundingBoxes",
    "local": ""
  },
  {
    "origin": "selected ROIs.",
    "local": ""
  },
  {
    "origin": "showCrosshair",
    "local": ""
  },
  {
    "origin": "if true crosshair of selection rectangle will be shown.",
    "local": ""
  },
  {
    "origin": "fromCenter",
    "local": ""
  },
  {
    "origin": "if true center of selection will match initial mouse position. In opposite case a corner of selection rectangle will correspont to the initial mouse position.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "The function sets it's own mouse callback for specified window using",
    "local": ""
  },
  {
    "origin": "(windowName, ...). After finish of work an empty callback will be set for the used window.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "setMouseCallback()",
    "local": ""
  },
  {
    "origin": "void cv::setMouseCallback",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "onMouse",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "void *",
    "local": ""
  },
  {
    "origin": "userdata",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Sets mouse handler for the specified window.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": "Name of the window.",
    "local": ""
  },
  {
    "origin": "onMouse",
    "local": ""
  },
  {
    "origin": "Callback function for mouse events. See OpenCV samples on how to specify and use the callback.",
    "local": ""
  },
  {
    "origin": "userdata",
    "local": ""
  },
  {
    "origin": "The optional parameter passed to the callback.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "setTrackbarMax()",
    "local": ""
  },
  {
    "origin": "void cv::setTrackbarMax",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "trackbarname",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "maxval",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.setTrackbarMax(",
    "local": ""
  },
  {
    "origin": "trackbarname, winname, maxval",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Sets the trackbar maximum position.",
    "local": ""
  },
  {
    "origin": "The function sets the maximum position of the specified trackbar in the specified window.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "[",
    "local": ""
  },
  {
    "origin": "Qt Backend Only",
    "local": ""
  },
  {
    "origin": "] winname can be empty if the trackbar is attached to the control panel.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "trackbarname",
    "local": ""
  },
  {
    "origin": "Name of the trackbar.",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": "Name of the window that is the parent of trackbar.",
    "local": ""
  },
  {
    "origin": "maxval",
    "local": ""
  },
  {
    "origin": "New maximum position.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "setTrackbarMin()",
    "local": ""
  },
  {
    "origin": "void cv::setTrackbarMin",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "trackbarname",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "minval",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.setTrackbarMin(",
    "local": ""
  },
  {
    "origin": "trackbarname, winname, minval",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Sets the trackbar minimum position.",
    "local": ""
  },
  {
    "origin": "The function sets the minimum position of the specified trackbar in the specified window.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "[",
    "local": ""
  },
  {
    "origin": "Qt Backend Only",
    "local": ""
  },
  {
    "origin": "] winname can be empty if the trackbar is attached to the control panel.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "trackbarname",
    "local": ""
  },
  {
    "origin": "Name of the trackbar.",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": "Name of the window that is the parent of trackbar.",
    "local": ""
  },
  {
    "origin": "minval",
    "local": ""
  },
  {
    "origin": "New minimum position.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "setTrackbarPos()",
    "local": ""
  },
  {
    "origin": "void cv::setTrackbarPos",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "trackbarname",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "pos",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.setTrackbarPos(",
    "local": ""
  },
  {
    "origin": "trackbarname, winname, pos",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Sets the trackbar position.",
    "local": ""
  },
  {
    "origin": "The function sets the position of the specified trackbar in the specified window.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "[",
    "local": ""
  },
  {
    "origin": "Qt Backend Only",
    "local": ""
  },
  {
    "origin": "] winname can be empty if the trackbar is attached to the control panel.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "trackbarname",
    "local": ""
  },
  {
    "origin": "Name of the trackbar.",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": "Name of the window that is the parent of trackbar.",
    "local": ""
  },
  {
    "origin": "pos",
    "local": ""
  },
  {
    "origin": "New position.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "setWindowProperty()",
    "local": ""
  },
  {
    "origin": "void cv::setWindowProperty",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "prop_id",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "prop_value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.setWindowProperty(",
    "local": ""
  },
  {
    "origin": "winname, prop_id, prop_value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Changes parameters of a window dynamically.",
    "local": ""
  },
  {
    "origin": "The function setWindowProperty enables changing properties of a window.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": "Name of the window.",
    "local": ""
  },
  {
    "origin": "prop_id",
    "local": ""
  },
  {
    "origin": "Window property to edit. The supported operation flags are: (",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "prop_value",
    "local": ""
  },
  {
    "origin": "New value of the window property. The supported flags are: (",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "setWindowTitle()",
    "local": ""
  },
  {
    "origin": "void cv::setWindowTitle",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "title",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.setWindowTitle(",
    "local": ""
  },
  {
    "origin": "winname, title",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Updates window title.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "winname",
    "local": ""
  },
  {
    "origin": "Name of the window.",
    "local": ""
  },
  {
    "origin": "title",
    "local": ""
  },
  {
    "origin": "New title.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "startWindowThread()",
    "local": ""
  },
  {
    "origin": "int cv::startWindowThread",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.startWindowThread(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "waitKey()",
    "local": ""
  },
  {
    "origin": "int cv::waitKey",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "delay",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.waitKey(",
    "local": ""
  },
  {
    "origin": "[, delay]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Waits for a pressed key.",
    "local": ""
  },
  {
    "origin": "The function waitKey waits for a key event infinitely (when \\(\\texttt{delay}\\leq 0\\) ) or for delay milliseconds, when it is positive. Since the OS has a minimum time between switching threads, the function will not wait exactly delay ms, it will wait at least delay ms, depending on what else is running on your computer at that time. It returns the code of the pressed key or -1 if no key was pressed before the specified time had elapsed. To check for a key press but not wait for it, use",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "The functions",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "are the only methods in HighGUI that can fetch and handle GUI events, so one of them needs to be called periodically for normal event processing unless HighGUI is used within an environment that takes care of event processing.",
    "local": ""
  },
  {
    "origin": "The function only works if there is at least one HighGUI window created and the window is active. If there are several HighGUI windows, any of them can be active.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "delay",
    "local": ""
  },
  {
    "origin": "Delay in milliseconds. 0 is the special value that means \"forever\".",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "waitKeyEx()",
    "local": ""
  },
  {
    "origin": "int cv::waitKeyEx",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "delay",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.waitKeyEx(",
    "local": ""
  },
  {
    "origin": "[, delay]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Similar to",
    "local": ""
  },
  {
    "origin": ", but returns full key code.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Key code is implementation specific and depends on used backend: QT/GTK/Win32/etc",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:40 for OpenCV by",
    "local": ""
  }
]