[
  {
    "origin": "OpenCV: Reading Geospatial Raster files with GDAL",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Reading Geospatial Raster files with GDAL",
    "local": ""
  },
  {
    "origin": "Prev Tutorial:",
    "local": ""
  },
  {
    "origin": "Next Tutorial:",
    "local": ""
  },
  {
    "origin": "Original author",
    "local": ""
  },
  {
    "origin": "Marvin Smith",
    "local": ""
  },
  {
    "origin": "Compatibility",
    "local": ""
  },
  {
    "origin": "OpenCV &gt;= 3.0",
    "local": ""
  },
  {
    "origin": "Geospatial raster data is a heavily used product in Geographic Information Systems and Photogrammetry. Raster data typically can represent imagery and Digital Elevation Models (DEM). The standard library for loading GIS imagery is the Geographic Data Abstraction Library",
    "local": ""
  },
  {
    "origin": "(GDAL)",
    "local": ""
  },
  {
    "origin": ". In this example, we will show techniques for loading GIS raster formats using native OpenCV functions. In addition, we will show some an example of how OpenCV can use this data for novel and interesting purposes.",
    "local": ""
  },
  {
    "origin": "Goals",
    "local": ""
  },
  {
    "origin": "The primary objectives for this tutorial:",
    "local": ""
  },
  {
    "origin": "How to use OpenCV",
    "local": ""
  },
  {
    "origin": "to load satellite imagery.",
    "local": ""
  },
  {
    "origin": "How to use OpenCV",
    "local": ""
  },
  {
    "origin": "to load SRTM Digital Elevation Models",
    "local": ""
  },
  {
    "origin": "Given the corner coordinates of both the image and DEM, correlate the elevation data to the image to find elevations for each pixel.",
    "local": ""
  },
  {
    "origin": "Show a basic, easy-to-implement example of a terrain heat map.",
    "local": ""
  },
  {
    "origin": "Show a basic use of DEM data coupled with ortho-rectified imagery.",
    "local": ""
  },
  {
    "origin": "To implement these goals, the following code takes a Digital Elevation Model as well as a GeoTiff image of San Francisco as input. The image and DEM data is processed and generates a terrain heat map of the image as well as labels areas of the city which would be affected should the water level of the bay rise 10, 50, and 100 meters.",
    "local": ""
  },
  {
    "origin": "Code",
    "local": ""
  },
  {
    "origin": "How to Read Raster Data using GDAL",
    "local": ""
  },
  {
    "origin": "This demonstration uses the default OpenCV imread function. The primary difference is that in order to force GDAL to load the image, you must use the appropriate flag.",
    "local": ""
  },
  {
    "origin": "When loading digital elevation models, the actual numeric value of each pixel is essential and cannot be scaled or truncated. For example, with image data a pixel represented as a double with a value of 1 has an equal appearance to a pixel which is represented as an unsigned character with a value of 255. With terrain data, the pixel value represents the elevation in meters. In order to ensure that OpenCV preserves the native value, use the GDAL flag in imread with the ANYDEPTH flag.",
    "local": ""
  },
  {
    "origin": "If you know beforehand the type of DEM model you are loading, then it may be a safe bet to test the Mat::type() or",
    "local": ""
  },
  {
    "origin": "using an assert or other mechanism. NASA or DOD specification documents can provide the input types for various elevation models. The major types, SRTM and DTED, are both signed shorts.",
    "local": ""
  },
  {
    "origin": "Notes",
    "local": ""
  },
  {
    "origin": "Lat/Lon (Geographic) Coordinates should normally be avoided",
    "local": ""
  },
  {
    "origin": "The Geographic Coordinate System is a spherical coordinate system, meaning that using them with Cartesian mathematics is technically incorrect. This demo uses them to increase the readability and is accurate enough to make the point. A better coordinate system would be Universal Transverse Mercator.",
    "local": ""
  },
  {
    "origin": "Finding the corner coordinates",
    "local": ""
  },
  {
    "origin": "One easy method to find the corner coordinates of an image is to use the command-line tool gdalinfo. For imagery which is ortho-rectified and contains the projection information, you can use the",
    "local": ""
  },
  {
    "origin": "USGS EarthExplorer",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Results",
    "local": ""
  },
  {
    "origin": "Below is the output of the program. Use the first image as the input. For the DEM model, download the SRTM file located at the USGS here.",
    "local": ""
  },
  {
    "origin": "http://dds.cr.usgs.gov/srtm/version2_1/SRTM1/Region_04/N37W123.hgt.zip",
    "local": ""
  },
  {
    "origin": "Input Image",
    "local": ""
  },
  {
    "origin": "Heat Map",
    "local": ""
  },
  {
    "origin": "Heat Map Overlay",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:34 for OpenCV by &#160;",
    "local": ""
  }
]