[
  {
    "origin": "OpenCV: Rotation Estimation",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "Rotation Estimation",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Affine transformation based estimator.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Bundle adjuster that expects affine transformation represented in homogeneous coordinates in R for each camera param. Implements camera parameters refinement algorithm which minimizes sum of the reprojection error squares.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Bundle adjuster that expects affine transformation with 4 DOF represented in homogeneous coordinates in R for each camera param. Implements camera parameters refinement algorithm which minimizes sum of the reprojection error squares.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Base class for all camera parameters refinement methods.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Implementation of the camera parameters refinement algorithm which minimizes sum of the distances between the rays passing through the camera center and a feature. :",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Implementation of the camera parameters refinement algorithm which minimizes sum of the reprojection error squares.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Rotation estimator base class.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Homography based rotation estimator.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Stub bundle adjuster that does nothing.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;rmats)",
    "local": ""
  },
  {
    "origin": "Tries to detect the wave correction kind depending on whether a panorama spans horizontally or vertically.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(int num_images, const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;pairwise_matches,",
    "local": ""
  },
  {
    "origin": "&amp;span_tree, std::vector&lt; int &gt; &amp;centers)",
    "local": ""
  },
  {
    "origin": "std::vector&lt; int &gt;",
    "local": ""
  },
  {
    "origin": "(std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;features, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;pairwise_matches, float conf_threshold)",
    "local": ""
  },
  {
    "origin": "(std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;pathes, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;pairwise_matches, float conf_threshold)",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;rmats,",
    "local": ""
  },
  {
    "origin": "kind)",
    "local": ""
  },
  {
    "origin": "Tries to make panorama more horizontal (or vertical).",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Enumeration Type Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "WaveCorrectKind",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "WAVE_CORRECT_HORIZ",
    "local": ""
  },
  {
    "origin": "Python: cv.detail.WAVE_CORRECT_HORIZ",
    "local": ""
  },
  {
    "origin": "WAVE_CORRECT_VERT",
    "local": ""
  },
  {
    "origin": "Python: cv.detail.WAVE_CORRECT_VERT",
    "local": ""
  },
  {
    "origin": "WAVE_CORRECT_AUTO",
    "local": ""
  },
  {
    "origin": "Python: cv.detail.WAVE_CORRECT_AUTO",
    "local": ""
  },
  {
    "origin": "Function Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "autoDetectWaveCorrectKind()",
    "local": ""
  },
  {
    "origin": "cv::detail::autoDetectWaveCorrectKind",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "rmats",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Tries to detect the wave correction kind depending on whether a panorama spans horizontally or vertically.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "rmats",
    "local": ""
  },
  {
    "origin": "Camera rotation matrices.",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "The correction kind to use for this panorama",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "findMaxSpanningTree()",
    "local": ""
  },
  {
    "origin": "void cv::detail::findMaxSpanningTree",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "num_images",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "pairwise_matches",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "span_tree",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt; int &gt; &amp;",
    "local": ""
  },
  {
    "origin": "centers",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "leaveBiggestComponent()",
    "local": ""
  },
  {
    "origin": "std::vector&lt;int&gt; cv::detail::leaveBiggestComponent",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "features",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "pairwise_matches",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "conf_threshold",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.detail.leaveBiggestComponent(",
    "local": ""
  },
  {
    "origin": "features, pairwise_matches, conf_threshold",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "matchesGraphAsString()",
    "local": ""
  },
  {
    "origin": "cv::detail::matchesGraphAsString",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "pathes",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "pairwise_matches",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "conf_threshold",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.detail.matchesGraphAsString(",
    "local": ""
  },
  {
    "origin": "pathes, pairwise_matches, conf_threshold",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "waveCorrect()",
    "local": ""
  },
  {
    "origin": "void cv::detail::waveCorrect",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "rmats",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "kind",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "rmats",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.detail.waveCorrect(",
    "local": ""
  },
  {
    "origin": "rmats, kind",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Tries to make panorama more horizontal (or vertical).",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "rmats",
    "local": ""
  },
  {
    "origin": "Camera rotation matrices.",
    "local": ""
  },
  {
    "origin": "kind",
    "local": ""
  },
  {
    "origin": "Correction kind, see",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:41 for OpenCV by",
    "local": ""
  }
]