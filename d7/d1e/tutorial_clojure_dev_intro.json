[
  {
    "origin": "OpenCV: Introduction to OpenCV Development with Clojure",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Introduction to OpenCV Development with Clojure",
    "local": ""
  },
  {
    "origin": "Prev Tutorial:",
    "local": ""
  },
  {
    "origin": "Next Tutorial:",
    "local": ""
  },
  {
    "origin": "Original author",
    "local": ""
  },
  {
    "origin": "Mimmo Cosenza",
    "local": ""
  },
  {
    "origin": "Compatibility",
    "local": ""
  },
  {
    "origin": "OpenCV &gt;= 3.0",
    "local": ""
  },
  {
    "origin": "Warning",
    "local": ""
  },
  {
    "origin": "This tutorial can contain obsolete information.",
    "local": ""
  },
  {
    "origin": "As of OpenCV 2.4.4, OpenCV supports desktop Java development using nearly the same interface as for Android development.",
    "local": ""
  },
  {
    "origin": "Clojure",
    "local": ""
  },
  {
    "origin": "is a contemporary LISP dialect hosted by the Java Virtual Machine and it offers a complete interoperability with the underlying JVM. This means that we should even be able to use the Clojure REPL (Read Eval Print Loop) as and interactive programmable interface to the underlying OpenCV engine.",
    "local": ""
  },
  {
    "origin": "What we'll do in this tutorial",
    "local": ""
  },
  {
    "origin": "This tutorial will help you in setting up a basic Clojure environment for interactively learning OpenCV within the fully programmable CLojure REPL.",
    "local": ""
  },
  {
    "origin": "Tutorial source code",
    "local": ""
  },
  {
    "origin": "You can find a runnable source code of the sample in the",
    "local": ""
  },
  {
    "origin": "folder of the OpenCV repository. After having installed OpenCV and Clojure as explained in the tutorial, issue the following command to run the sample from the command line.",
    "local": ""
  },
  {
    "origin": "Preamble",
    "local": ""
  },
  {
    "origin": "For detailed instruction on installing OpenCV with desktop Java support refer to the",
    "local": ""
  },
  {
    "origin": "tutorial\".",
    "local": ""
  },
  {
    "origin": "If you are in hurry, here is a minimum quick start guide to install OpenCV on Mac OS X:",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "I'm assuming you already installed",
    "local": ""
  },
  {
    "origin": "xcode",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "jdk",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "Cmake",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Install Leiningen",
    "local": ""
  },
  {
    "origin": "Once you installed OpenCV with desktop java support the only other requirement is to install",
    "local": ""
  },
  {
    "origin": "Leiningeng",
    "local": ""
  },
  {
    "origin": "which allows you to manage the entire life cycle of your CLJ projects.",
    "local": ""
  },
  {
    "origin": "The available",
    "local": ""
  },
  {
    "origin": "installation guide",
    "local": ""
  },
  {
    "origin": "is very easy to be followed:",
    "local": ""
  },
  {
    "origin": "Download the script",
    "local": ""
  },
  {
    "origin": "Place it on your $PATH (cf./bin is a good choice if it is on your path.)",
    "local": ""
  },
  {
    "origin": "Set the script to be executable. (i.e. chmod 755/bin/lein).",
    "local": ""
  },
  {
    "origin": "If you work on Windows, follow",
    "local": ""
  },
  {
    "origin": "this instruction",
    "local": ""
  },
  {
    "origin": "You now have both the OpenCV library and a fully installed basic Clojure environment. What is now needed is to configure the Clojure environment to interact with the OpenCV library.",
    "local": ""
  },
  {
    "origin": "Install the localrepo Leiningen plugin",
    "local": ""
  },
  {
    "origin": "The set of commands (tasks in Leiningen parlance) natively supported by Leiningen can be very easily extended by various plugins. One of them is the",
    "local": ""
  },
  {
    "origin": "lein-localrepo",
    "local": ""
  },
  {
    "origin": "plugin which allows to install any jar lib as an artifact in the local maven repository of your machine (typically in the /.m2/repository directory of your username).",
    "local": ""
  },
  {
    "origin": "We're going to use this lein plugin to add to the local maven repository the opencv components needed by Java and Clojure to use the opencv lib.",
    "local": ""
  },
  {
    "origin": "Generally speaking, if you want to use a plugin on project base only, it can be added directly to a CLJ project created by lein.",
    "local": ""
  },
  {
    "origin": "Instead, when you want a plugin to be available to any CLJ project in your username space, you can add it to the profiles.clj in the/.lein/ directory.",
    "local": ""
  },
  {
    "origin": "The lein-localrepo plugin will be useful to me in other CLJ projects where I need to call native libs wrapped by a Java interface. So I decide to make it available to any CLJ project:",
    "local": ""
  },
  {
    "origin": "Create a file named profiles.clj in the/.lein directory and copy into it the following content:",
    "local": ""
  },
  {
    "origin": "Here we're saying that the version release \"0.5.2\" of the lein-localrepo plugin will be available to the :user profile for any CLJ project created by lein.",
    "local": ""
  },
  {
    "origin": "You do not need to do anything else to install the plugin because it will be automatically downloaded from a remote repository the very first time you issue any lein task.",
    "local": ""
  },
  {
    "origin": "Install the java specific libs as local repository",
    "local": ""
  },
  {
    "origin": "If you followed the standard documentation for installing OpenCV on your computer, you should find the following two libs under the directory where you built OpenCV:",
    "local": ""
  },
  {
    "origin": "the build/bin/opencv-247.jar java lib",
    "local": ""
  },
  {
    "origin": "the build/lib/libopencv_java247.dylib native lib (or .so in you built OpenCV a GNU/Linux OS)",
    "local": ""
  },
  {
    "origin": "They are the only opencv libs needed by the JVM to interact with OpenCV.",
    "local": ""
  },
  {
    "origin": "Take apart the needed opencv libs",
    "local": ""
  },
  {
    "origin": "Create a new directory to store in the above two libs. Start by copying into it the opencv-247.jar lib.",
    "local": ""
  },
  {
    "origin": "First lib done.",
    "local": ""
  },
  {
    "origin": "Now, to be able to add the libopencv_java247.dylib shared native lib to the local maven repository, we first need to package it as a jar file.",
    "local": ""
  },
  {
    "origin": "The native lib has to be copied into a directories layout which mimics the names of your operating system and architecture. I'm using a Mac OS X with a X86 64 bit architecture. So my layout will be the following:",
    "local": ""
  },
  {
    "origin": "Copy into the x86_64 directory the libopencv_java247.dylib lib.",
    "local": ""
  },
  {
    "origin": "If you're running OpenCV from a different OS/Architecture pair, here is a summary of the mapping you can choose from.",
    "local": ""
  },
  {
    "origin": "Package the native lib as a jar",
    "local": ""
  },
  {
    "origin": "Next you need to package the native lib in a jar file by using the jar command to create a new jar file from a directory.",
    "local": ""
  },
  {
    "origin": "Note that ehe M option instructs the jar command to not create a MANIFEST file for the artifact.",
    "local": ""
  },
  {
    "origin": "Your directories layout should look like the following:",
    "local": ""
  },
  {
    "origin": "Locally install the jars",
    "local": ""
  },
  {
    "origin": "We are now ready to add the two jars as artifacts to the local maven repository with the help of the lein-localrepo plugin.",
    "local": ""
  },
  {
    "origin": "Here the localrepo install task creates the 2.4.7. release of the opencv/opencv maven artifact from the opencv-247.jar lib and then installs it into the local maven repository. The opencv/opencv artifact will then be available to any maven compliant project (Leiningen is internally based on maven).",
    "local": ""
  },
  {
    "origin": "Do the same thing with the native lib previously wrapped in a new jar file.",
    "local": ""
  },
  {
    "origin": "Note that the groupId, opencv, of the two artifacts is the same. We are now ready to create a new CLJ project to start interacting with OpenCV.",
    "local": ""
  },
  {
    "origin": "Create a project",
    "local": ""
  },
  {
    "origin": "Create a new CLJ project by using the lein new task from the terminal.",
    "local": ""
  },
  {
    "origin": "The above task creates the following simple-sample directories layout:",
    "local": ""
  },
  {
    "origin": "We need to add the two opencv artifacts as dependencies of the newly created project. Open the project.clj and modify its dependencies section as follows:",
    "local": ""
  },
  {
    "origin": "Note that The Clojure Programming Language is a jar artifact too. This is why Clojure is called an hosted language.",
    "local": ""
  },
  {
    "origin": "To verify that everything went right issue the lein deps task. The very first time you run a lein task it will take sometime to download all the required dependencies before executing the task itself.",
    "local": ""
  },
  {
    "origin": "The deps task reads and merges from the project.clj and the/.lein/profiles.clj files all the dependencies of the simple-sample project and verifies if they have already been cached in the local maven repository. If the task returns without messages about not being able to retrieve the two new artifacts your installation is correct, otherwise go back and double check that you did everything right.",
    "local": ""
  },
  {
    "origin": "REPLing with OpenCV",
    "local": ""
  },
  {
    "origin": "Now cd in the simple-sample directory and issue the following lein task:",
    "local": ""
  },
  {
    "origin": "You can immediately interact with the REPL by issuing any CLJ expression to be evaluated.",
    "local": ""
  },
  {
    "origin": "When ran from the home directory of a lein based project, even if the lein repl task automatically loads all the project dependencies, you still need to load the opencv native library to be able to interact with the OpenCV.",
    "local": ""
  },
  {
    "origin": "Then you can start interacting with OpenCV by just referencing the fully qualified names of its classes.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Here",
    "local": ""
  },
  {
    "origin": "you can find the full OpenCV Java API.",
    "local": ""
  },
  {
    "origin": "Here we created a two dimensions opencv Point instance. Even if all the java packages included within the java interface to OpenCV are immediately available from the CLJ REPL, it's very annoying to prefix the Point. instance constructors with the fully qualified package name.",
    "local": ""
  },
  {
    "origin": "Fortunately CLJ offer a very easy way to overcome this annoyance by directly importing the Point class.",
    "local": ""
  },
  {
    "origin": "We can even inspect the class of an instance and verify if the value of a symbol is an instance of a Point java class.",
    "local": ""
  },
  {
    "origin": "If we now want to use the opencv Rect class to create a rectangle, we again have to fully qualify its constructor even if it leaves in the same org.opencv.core package of the Point class.",
    "local": ""
  },
  {
    "origin": "Again, the CLJ importing facilities is very handy and let you to map more symbols in one shot.",
    "local": ""
  },
  {
    "origin": "Obviously you can call methods on instances as well.",
    "local": ""
  },
  {
    "origin": "Or modify the value of a member field.",
    "local": ""
  },
  {
    "origin": "If you find yourself not remembering a OpenCV class behavior, the REPL gives you the opportunity to easily search the corresponding javadoc documentation:",
    "local": ""
  },
  {
    "origin": "Mimic the OpenCV Java Tutorial Sample in the REPL",
    "local": ""
  },
  {
    "origin": "Let's now try to port to Clojure the",
    "local": ""
  },
  {
    "origin": ". Instead of writing it in a source file we're going to evaluate it at the REPL.",
    "local": ""
  },
  {
    "origin": "Following is the original Java source code of the cited sample.",
    "local": ""
  },
  {
    "origin": "Add injections to the project",
    "local": ""
  },
  {
    "origin": "Before start coding, we'd like to eliminate the boring need of interactively loading the native opencv lib any time we start a new REPL to interact with it.",
    "local": ""
  },
  {
    "origin": "First, stop the REPL by evaluating the (exit) expression at the REPL prompt.",
    "local": ""
  },
  {
    "origin": "Then open your project.clj file and edit it as follows:",
    "local": ""
  },
  {
    "origin": "Here we're saying to load the opencv native lib anytime we run the REPL in such a way that we have not anymore to remember to manually do it.",
    "local": ""
  },
  {
    "origin": "Rerun the lein repl task",
    "local": ""
  },
  {
    "origin": "Import the interested OpenCV java interfaces.",
    "local": ""
  },
  {
    "origin": "We're going to mimic almost verbatim the original OpenCV java tutorial to:",
    "local": ""
  },
  {
    "origin": "create a 5x10 matrix with all its elements initialized to 0",
    "local": ""
  },
  {
    "origin": "change the value of every element of the 6th column to 5",
    "local": ""
  },
  {
    "origin": "print the content of the obtained matrix",
    "local": ""
  },
  {
    "origin": "If you are accustomed to a functional language all those abused and mutating nouns are going to irritate your preference for verbs. Even if the CLJ interop syntax is very handy and complete, there is still an impedance mismatch between any OOP language and any FP language (bein Scala a mixed paradigms programming language).",
    "local": ""
  },
  {
    "origin": "To exit the REPL type (exit), ctr-D or (quit) at the REPL prompt.",
    "local": ""
  },
  {
    "origin": "Interactively load and blur an image",
    "local": ""
  },
  {
    "origin": "In the next sample you will learn how to interactively load and blur and image from the REPL by using the following OpenCV methods:",
    "local": ""
  },
  {
    "origin": "the imread static method from the Highgui class to read an image from a file",
    "local": ""
  },
  {
    "origin": "the imwrite static method from the Highgui class to write an image to a file",
    "local": ""
  },
  {
    "origin": "the GaussianBlur static method from the Imgproc class to apply to blur the original image",
    "local": ""
  },
  {
    "origin": "We're also going to use the Mat class which is returned from the imread method and accepted as the main argument to both the GaussianBlur and the imwrite methods.",
    "local": ""
  },
  {
    "origin": "Add an image to the project",
    "local": ""
  },
  {
    "origin": "First we want to add an image file to a newly create directory for storing static resources of the project.",
    "local": ""
  },
  {
    "origin": "Read the image",
    "local": ""
  },
  {
    "origin": "Now launch the REPL as usual and start by importing all the OpenCV classes we're going to use:",
    "local": ""
  },
  {
    "origin": "Now read the image from the resources/images/lena.png file.",
    "local": ""
  },
  {
    "origin": "As you see, by simply evaluating the lena symbol we know that lena.png is a 512x512 matrix of CV_8UC3 elements type. Let's create a new Mat instance of the same dimensions and elements type.",
    "local": ""
  },
  {
    "origin": "Now apply a GaussianBlur filter using lena as the source matrix and blurred as the destination matrix.",
    "local": ""
  },
  {
    "origin": "As a last step just save the blurred matrix in a new image file.",
    "local": ""
  },
  {
    "origin": "Following is the new blurred image of Lena.",
    "local": ""
  },
  {
    "origin": "Next Steps",
    "local": ""
  },
  {
    "origin": "This tutorial only introduces the very basic environment set up to be able to interact with OpenCV in a CLJ REPL.",
    "local": ""
  },
  {
    "origin": "I recommend any Clojure newbie to read the",
    "local": ""
  },
  {
    "origin": "Clojure Java Interop chapter",
    "local": ""
  },
  {
    "origin": "to get all you need to know to interoperate with any plain java lib that has not been wrapped in Clojure to make it usable in a more idiomatic and functional way within Clojure.",
    "local": ""
  },
  {
    "origin": "The OpenCV Java API does not wrap the highgui module functionalities depending on Qt (e.g. namedWindow and imshow. If you want to create windows and show images into them while interacting with OpenCV from the REPL, at the moment you're left at your own. You could use Java Swing to fill the gap.",
    "local": ""
  },
  {
    "origin": "License",
    "local": ""
  },
  {
    "origin": "Copyright © 2013 Giacomo (Mimmo) Cosenza aka Magomimmo",
    "local": ""
  },
  {
    "origin": "Distributed under the BSD 3-clause License.",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:36 for OpenCV by &#160;",
    "local": ""
  }
]