[
  {
    "origin": "OpenCV: Optical Flow Algorithms",
    "local": "OpenCV：光流算法"
  },
  {
    "origin": "OpenCV",
    "local": "打开CV"
  },
  {
    "origin": "Open Source Computer Vision",
    "local": "开源计算机视觉"
  },
  {
    "origin": "Classes",
    "local": "班级"
  },
  {
    "origin": "Typedefs",
    "local": "类型定义"
  },
  {
    "origin": "Enumerations",
    "local": "枚举"
  },
  {
    "origin": "Functions",
    "local": "功能"
  },
  {
    "origin": "Optical Flow Algorithms",
    "local": "光流算法"
  },
  {
    "origin": "Classes",
    "local": "班级"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "Fast dense optical flow computation based on robust local optical flow (RLOF) algorithms and sparse-to-dense interpolation scheme.",
    "local": "基于鲁棒局部光流（RLOF）算法和稀疏到稠密插值方法的快速稠密光流计算。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "\"Dual TV L1\" Optical Flow",
    "local": "“双电视L1”光流"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "struct",
    "local": "结构"
  },
  {
    "origin": "Class encapsulating matching parameters.",
    "local": "封装匹配参数的类。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "struct",
    "local": "结构"
  },
  {
    "origin": "struct",
    "local": "结构"
  },
  {
    "origin": "struct",
    "local": "结构"
  },
  {
    "origin": "Class encapsulating training parameters.",
    "local": "类封装训练参数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "Class encapsulating training samples.",
    "local": "类封装训练样本。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "Class for individual tree.",
    "local": "单个树的类。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "PCAFlow algorithm.",
    "local": "PCAFlow算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "This class can be used for imposing a learned prior on the resulting optical flow. Solution will be regularized according to this prior. You need to generate appropriate prior file with \"learn_prior.py\" script beforehand.",
    "local": "该类可用于对产生的光流施加已学习的先验知识。解将根据这个先验规则化。您需要事先用“learn\\u prior.py”脚本生成适当的prior文件。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "This is used store and set up the parameters of the robust local optical flow (RLOF) algoritm.",
    "local": "这是用来存储和设置鲁棒局部光流（RLOF）算法的参数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "Class used for calculation sparse optical flow and feature tracking with robust local optical flow (RLOF) algorithms.",
    "local": "类用于计算稀疏光流和具有鲁棒局部光流（RLOF）算法的特征跟踪。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Typedefs",
    "local": "类型定义"
  },
  {
    "origin": "typedef std::vector&lt;",
    "local": "typedef std：：向量&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "Enumerations",
    "local": "枚举"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "Descriptor types for the Global Patch Collider.",
    "local": "全局面片碰撞器的描述符类型。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "Functions",
    "local": "功能"
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "orientation,",
    "local": "方向，"
  },
  {
    "origin": "mask,",
    "local": "面具，"
  },
  {
    "origin": "mhi, double timestamp, double duration)",
    "local": "mhi，双时间戳，双持续时间）"
  },
  {
    "origin": "Calculates a global motion orientation in a selected region.",
    "local": "计算选定区域中的全局运动方向。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "mhi,",
    "local": "不，"
  },
  {
    "origin": "mask,",
    "local": "面具，"
  },
  {
    "origin": "orientation, double delta1, double delta2, int apertureSize=3)",
    "local": "方向，双增量1，双增量2，int apertureSize=3）"
  },
  {
    "origin": "Calculates a gradient orientation of a motion history image.",
    "local": "计算运动历史图像的梯度方向。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "I0,",
    "local": "十年前，"
  },
  {
    "origin": "I1,",
    "local": "I1号，"
  },
  {
    "origin": "flow,",
    "local": "流量，"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; rlofParam=",
    "local": "&燃气轮机；rlofParam公司="
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "gridStep=",
    "local": "网格步骤"
  },
  {
    "origin": "(6, 6),",
    "local": "(6, 6),"
  },
  {
    "origin": "interp_type=InterpolationType::INTERP_EPIC, int epicK=128, float epicSigma=0.05f, float epicLambda=100.f, int ricSPSize=15, int ricSLICType=100, bool use_post_proc=true, float fgsLambda=500.0f, float fgsSigma=1.5f, bool use_variational_refinement=false)",
    "local": "interp\\u type=InterpolationType：：interp\\u EPIC，int epicK=128，float epicSigma=0.05f，float epicLambda=100.f，int ricSPSize=15，int ricSLICType=100，bool use\\u post\\u proc=true，float fgsLambda=500.0f，float fgsSigma=1.5f，bool use\\u variation\\u definition=false）"
  },
  {
    "origin": "Fast dense optical flow computation based on robust local optical flow (RLOF) algorithms and sparse-to-dense interpolation scheme.",
    "local": "基于鲁棒局部光流（RLOF）算法和稀疏到稠密插值方法的快速稠密光流计算。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "from,",
    "local": "从，"
  },
  {
    "origin": "to,",
    "local": "到，"
  },
  {
    "origin": "flow, int layers, int averaging_block_size, int max_flow)",
    "local": "流，int层，int平均（块大小，int最大流）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "from,",
    "local": "从，"
  },
  {
    "origin": "to,",
    "local": "到，"
  },
  {
    "origin": "flow, int layers, int averaging_block_size, int max_flow, double sigma_dist, double sigma_color, int postprocess_window, double sigma_dist_fix, double sigma_color_fix, double occ_thr, int upscale_averaging_radius, double upscale_sigma_dist, double upscale_sigma_color, double speed_up_thr)",
    "local": "流，int layers，int averaging\\u block\\u size，int max\\u flow，double sigma\\u dist，double sigma\\u color，int postprocess\\u window，double sigma\\u dist\\u fix，double sigma\\u color\\u fix，double occ\\u thr，int upscale\\u averaging\\u radius，double upscale\\u sigma\\u dist，double upscale\\u color，double speed\\u thr）"
  },
  {
    "origin": "Calculate an optical flow using \"SimpleFlow\" algorithm.",
    "local": "使用“SimpleFlow”算法计算光流。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "prevImg,",
    "local": "预防，"
  },
  {
    "origin": "nextImg,",
    "local": "下一步，"
  },
  {
    "origin": "prevPts,",
    "local": "普雷夫茨，"
  },
  {
    "origin": "nextPts,",
    "local": "下一步"
  },
  {
    "origin": "status,",
    "local": "状态，"
  },
  {
    "origin": "err,",
    "local": "呃，"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; rlofParam=",
    "local": "&燃气轮机；rlofParam公司="
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;(), float forwardBackwardThreshold=0)",
    "local": "&gt；（），前浮后浮（阈值=0）"
  },
  {
    "origin": "Calculates fast optical flow for a sparse feature set using the robust local optical flow (RLOF) similar to",
    "local": "使用类似于的鲁棒局部光流（RLOF）计算稀疏特征集的快速光流"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "from,",
    "local": "从，"
  },
  {
    "origin": "to,",
    "local": "到，"
  },
  {
    "origin": "flow, int grid_step=8, int k=128, float sigma=0.05f, bool use_post_proc=true, float fgs_lambda=500.0f, float fgs_sigma=1.5f)",
    "local": "flow，int grid\\u step=8，int k=128，float sigma=0.05f，bool use\\u post\\u proc=true，float fgs\\u lambda=500.0f，float fgs\\u sigma=1.5f）"
  },
  {
    "origin": "Fast dense optical flow based on PyrLK sparse matches interpolation.",
    "local": "基于PyrLK稀疏匹配插值的快速稠密光流。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "DeepFlow optical flow algorithm implementation.",
    "local": "DeepFlow光流算法的实现。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Additional interface to the Dense RLOF algorithm -",
    "local": "密集RLOF算法的附加接口-"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Creates instance of",
    "local": "创建的实例"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Additional interface to the Farneback's algorithm -",
    "local": "Farneback算法的附加接口-"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Creates an instance of PCAFlow.",
    "local": "创建PCAFlow的实例。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Additional interface to the SimpleFlow algorithm -",
    "local": "SimpleFlow算法的附加接口-"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Additional interface to the Sparse RLOF algorithm -",
    "local": "稀疏RLOF算法的附加接口-"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Additional interface to the SparseToDenseFlow algorithm -",
    "local": "SparseToDenseFlow算法的附加接口-"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "imgFrom,",
    "local": "imgFrom公司，"
  },
  {
    "origin": "imgTo, std::vector&lt; std::pair&lt;",
    "local": "imgTo，std：：向量&lt；标准：：成对&lt；"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&gt; &gt; &amp;corr, const",
    "local": "&gt；&个&gt；安培；更正，常量"
  },
  {
    "origin": "params=",
    "local": "参数="
  },
  {
    "origin": "()) const",
    "local": "（））常数"
  },
  {
    "origin": "Find correspondences between two images.",
    "local": "找出两个图像之间的对应关系。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "mhi,",
    "local": "不，"
  },
  {
    "origin": "segmask, std::vector&lt;",
    "local": "segmask，std：：向量&lt；"
  },
  {
    "origin": "&gt; &amp;boundingRects, double timestamp, double segThresh)",
    "local": "&燃气轮机&amp；边界矩形，双时间戳，双分段阈值）"
  },
  {
    "origin": "Splits a motion history image into a few parts corresponding to separate independent motions (for example, left hand, right hand).",
    "local": "将运动历史图像分割为与独立运动相对应的几个部分（例如，左手、右手）。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "silhouette,",
    "local": "轮廓，"
  },
  {
    "origin": "mhi, double timestamp, double duration)",
    "local": "mhi，双时间戳，双持续时间）"
  },
  {
    "origin": "Updates the motion history image by a moving silhouette.",
    "local": "通过移动轮廓更新运动历史图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Detailed Description",
    "local": "详细说明"
  },
  {
    "origin": "Dense optical flow algorithms compute motion for each point:",
    "local": "密集光流算法计算每个点的运动："
  },
  {
    "origin": "Motion templates is alternative technique for detecting motion and computing its direction. See samples/motempl.py.",
    "local": "运动模板是检测运动和计算运动方向的另一种技术。参见示例/motempl.py。"
  },
  {
    "origin": "Functions reading and writing .flo files in \"Middlebury\" format, see:",
    "local": "函数以“Middlebury”格式读取和写入.flo文件，请参见："
  },
  {
    "origin": "http://vision.middlebury.edu/flow/code/flow-code/README.txt",
    "local": "http://vision.middlebury.edu/flow/code/flow-code/README.txt"
  },
  {
    "origin": "cv::optflow::readOpticalFlow",
    "local": "cv：：optflow：：readOpticalFlow"
  },
  {
    "origin": "cv::optflow::writeOpticalFlow",
    "local": "cv：：optflow：：writeOpticalFlow"
  },
  {
    "origin": "Typedef Documentation",
    "local": "Typedef文档"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "GPCSamplesVector",
    "local": "GPC样本向量"
  },
  {
    "origin": "typedef std::vector&lt;",
    "local": "typedef std：：向量&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "Enumeration Type Documentation",
    "local": "枚举类型文档"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "GPCDescType",
    "local": "GPCDescType型"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "Descriptor types for the Global Patch Collider.",
    "local": "全局面片碰撞器的描述符类型。"
  },
  {
    "origin": "Enumerator",
    "local": "枚举器"
  },
  {
    "origin": "GPC_DESCRIPTOR_DCT",
    "local": "GPC\\U描述符\\U DCT"
  },
  {
    "origin": "Python: cv.optflow.GPC_DESCRIPTOR_DCT",
    "local": "Python:cv.optflow.GPC\\u描述符\\u DCT"
  },
  {
    "origin": "Better quality but slow.",
    "local": "质量更好，但速度慢。"
  },
  {
    "origin": "GPC_DESCRIPTOR_WHT",
    "local": "GPC\\U描述符\\U WHT"
  },
  {
    "origin": "Python: cv.optflow.GPC_DESCRIPTOR_WHT",
    "local": "Python:cv.optflow.GPC\\u描述符\\u WHT"
  },
  {
    "origin": "Worse quality but much faster.",
    "local": "质量差但速度快得多。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "InterpolationType",
    "local": "插值类型"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "Enumerator",
    "local": "枚举器"
  },
  {
    "origin": "INTERP_GEO",
    "local": "国际地理"
  },
  {
    "origin": "Python: cv.optflow.INTERP_GEO",
    "local": "Python:cv.optflow.INTERP\\u地理"
  },
  {
    "origin": "Fast geodesic interpolation, see",
    "local": "快速测地插值，请参见"
  },
  {
    "origin": "INTERP_EPIC",
    "local": "国际史诗"
  },
  {
    "origin": "Python: cv.optflow.INTERP_EPIC",
    "local": "Python:cv.optflow.INTERP\\u史诗"
  },
  {
    "origin": "Edge-preserving interpolation using",
    "local": "边缘保持插值"
  },
  {
    "origin": ", see",
    "local": "，请参见"
  },
  {
    "origin": ",Geistert2016.",
    "local": "，比勒费尔德。"
  },
  {
    "origin": "INTERP_RIC",
    "local": "内部"
  },
  {
    "origin": "Python: cv.optflow.INTERP_RIC",
    "local": "Python:cv.optflow.INTERP\\u RIC"
  },
  {
    "origin": "SLIC based robust interpolation using",
    "local": "基于SLIC的鲁棒插值算法"
  },
  {
    "origin": ", see",
    "local": "，请参见"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "SolverType",
    "local": "解算器类型"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "Enumerator",
    "local": "枚举器"
  },
  {
    "origin": "ST_STANDART",
    "local": "标准"
  },
  {
    "origin": "Python: cv.optflow.ST_STANDART",
    "local": "Python:cv.optflow.ST\\u标准"
  },
  {
    "origin": "Apply standard iterative refinement",
    "local": "应用标准迭代求精"
  },
  {
    "origin": "ST_BILINEAR",
    "local": "双线性"
  },
  {
    "origin": "Python: cv.optflow.ST_BILINEAR",
    "local": "Python:cv.optflow.ST\\u双线性"
  },
  {
    "origin": "Apply optimized iterative refinement based bilinear equation solutions as described in",
    "local": "应用优化的基于迭代求精的双线性方程解，如中所述"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "SupportRegionType",
    "local": "支持区域类型"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "Enumerator",
    "local": "枚举器"
  },
  {
    "origin": "SR_FIXED",
    "local": "SR\\ U固定"
  },
  {
    "origin": "Python: cv.optflow.SR_FIXED",
    "local": "Python:cv.optflow.SR\\u已修复"
  },
  {
    "origin": "Apply a constant support region",
    "local": "应用恒定支撑区域"
  },
  {
    "origin": "SR_CROSS",
    "local": "十字交叉"
  },
  {
    "origin": "Python: cv.optflow.SR_CROSS",
    "local": "Python:cv.optflow.SR\\u交叉"
  },
  {
    "origin": "Apply a adaptive support region obtained by cross-based segmentation as described in",
    "local": "应用通过基于交叉的分割获得的自适应支持区域，如中所述"
  },
  {
    "origin": "Function Documentation",
    "local": "功能文档"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "calcGlobalOrientation()",
    "local": "全球定位（）"
  },
  {
    "origin": "double cv::motempl::calcGlobalOrientation",
    "local": "双cv:：motempl:：calcGlobalOrientation"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "orientation",
    "local": "方向"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mhi",
    "local": "最小"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "timestamp",
    "local": "时间戳"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "duration",
    "local": "期间"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.motempl.calcGlobalOrientation(",
    "local": "cv.motempl.calcGlobalOrientation公司("
  },
  {
    "origin": "orientation, mask, mhi, timestamp, duration",
    "local": "方向，掩码，mhi，时间戳，持续时间"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates a global motion orientation in a selected region.",
    "local": "计算选定区域中的全局运动方向。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "orientation",
    "local": "方向"
  },
  {
    "origin": "Motion gradient orientation image calculated by the function calcMotionGradient",
    "local": "用calcMotionGradient函数计算运动梯度方向像"
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "Mask image. It may be a conjunction of a valid gradient mask, also calculated by calcMotionGradient , and the mask of a region whose direction needs to be calculated.",
    "local": "遮罩图像。它可以是也由calcMotionGradient计算的有效渐变遮罩和需要计算其方向的区域的遮罩的结合。"
  },
  {
    "origin": "mhi",
    "local": "最小"
  },
  {
    "origin": "Motion history image calculated by updateMotionHistory .",
    "local": "由updateMotionHistory计算的运动历史图像。"
  },
  {
    "origin": "timestamp",
    "local": "时间戳"
  },
  {
    "origin": "Timestamp passed to updateMotionHistory .",
    "local": "传递给updateMotionHistory的时间戳。"
  },
  {
    "origin": "duration",
    "local": "期间"
  },
  {
    "origin": "Maximum duration of a motion track in milliseconds, passed to updateMotionHistory",
    "local": "传递给updateMotionHistory的运动轨迹的最大持续时间（毫秒）"
  },
  {
    "origin": "The function calculates an average motion direction in the selected region and returns the angle between 0 degrees and 360 degrees. The average direction is computed from the weighted orientation histogram, where a recent motion has a larger weight and the motion occurred in the past has a smaller weight, as recorded in mhi .",
    "local": "该函数计算选定区域中的平均运动方向，并返回0度到360度之间的角度。根据加权方向直方图计算平均方向，其中最近的运动具有较大的权重，而过去发生的运动具有较小的权重，如mhi中记录的那样。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "calcMotionGradient()",
    "local": "计算运动半径（）"
  },
  {
    "origin": "void cv::motempl::calcMotionGradient",
    "local": "无效cv:：motempl:：calcMotionGradient"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "mhi",
    "local": "最小"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "orientation",
    "local": "方向"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "delta1",
    "local": "三角洲1"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "delta2",
    "local": "三角洲2"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "apertureSize",
    "local": "光圈尺寸"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "mask, orientation",
    "local": "遮罩，方向"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.motempl.calcMotionGradient(",
    "local": "cv.motempl.calcMotionGradient公司("
  },
  {
    "origin": "mhi, delta1, delta2[, mask[, orientation[, apertureSize]]]",
    "local": "mhi，增量1，增量2[，掩码[，方向[，光圈大小]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates a gradient orientation of a motion history image.",
    "local": "计算运动历史图像的梯度方向。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "mhi",
    "local": "最小"
  },
  {
    "origin": "Motion history single-channel floating-point image.",
    "local": "运动历史单通道浮点图像。"
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "Output mask image that has the type CV_8UC1 and the same size as mhi . Its non-zero elements mark pixels where the motion gradient data is correct.",
    "local": "输出具有CV8uc1类型和与mhi相同大小的遮罩图像。它的非零元素标记运动梯度数据正确的像素。"
  },
  {
    "origin": "orientation",
    "local": "方向"
  },
  {
    "origin": "Output motion gradient orientation image that has the same type and the same size as mhi . Each pixel of the image is a motion orientation, from 0 to 360 degrees.",
    "local": "输出与mhi类型和大小相同的运动梯度方向图像。图像的每个像素都是一个运动方向，从0到360度。"
  },
  {
    "origin": "delta1",
    "local": "三角洲1"
  },
  {
    "origin": "Minimal (or maximal) allowed difference between mhi values within a pixel neighborhood.",
    "local": "像素邻域内mhi值之间允许的最小（或最大）差异。"
  },
  {
    "origin": "delta2",
    "local": "三角洲2"
  },
  {
    "origin": "Maximal (or minimal) allowed difference between mhi values within a pixel neighborhood. That is, the function finds the minimum ( \\(m(x,y)\\) ) and maximum ( \\(M(x,y)\\) ) mhi values over \\(3 \\times 3\\) neighborhood of each pixel and marks the motion orientation at \\((x, y)\\) as valid only if",
    "local": "像素邻域内mhi值之间允许的最大（或最小）差异。也就是说，该函数在每个像素的\\（3乘以3）邻域上查找最小值（\\（m（x，y）\\）和最大值（\\（m（x，y）\\））mhi值，并仅在以下情况下将\\（（x，y）\\）处的运动方向标记为有效"
  },
  {
    "origin": "\\[\\min ( \\texttt{delta1} , \\texttt{delta2} ) \\le M(x,y)-m(x,y) \\le \\max ( \\texttt{delta1} , \\texttt{delta2} ).\\]",
    "local": "\\[\\ min（\\ texttt{delta1}，\\ texttt{delta2}）\\ le m（x，y）-m（x，y）\\ le \\ max（\\ texttt{delta1}，\\ texttt{delta2}）。"
  },
  {
    "origin": "apertureSize",
    "local": "光圈尺寸"
  },
  {
    "origin": "Aperture size of the Sobel operator.",
    "local": "Sobel运算符的孔径大小。"
  },
  {
    "origin": "The function calculates a gradient orientation at each pixel \\((x, y)\\) as:",
    "local": "该函数计算每个像素处的梯度方向\\（（x，y）\\），如下所示："
  },
  {
    "origin": "\\[\\texttt{orientation} (x,y)= \\arctan{\\frac{d\\texttt{mhi}/dy}{d\\texttt{mhi}/dx}}\\]",
    "local": "\\\\[\\texttt{orientation}（x，y）=\\arctan{\\frac{d\\texttt{mhi}/dy}{d\\texttt{mhi}/dx}\\]"
  },
  {
    "origin": "In fact, fastAtan2 and phase are used so that the computed angle is measured in degrees and covers the full range 0..360. Also, the mask is filled to indicate pixels where the computed angle is valid.",
    "local": "事实上，使用了fastAtan2和phase，因此计算的角度以度为单位进行测量，并覆盖整个范围0..360。此外，填充遮罩以指示计算角度有效的像素。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "(Python) An example on how to perform a motion template technique can be found at opencv_source_code/samples/python2/motempl.py",
    "local": "（Python）关于如何执行运动模板技术的示例可以在opencv\\u source\\u code/samples/python2/motempl.py中找到"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "calcOpticalFlowDenseRLOF()",
    "local": "计算光学"
  },
  {
    "origin": "void cv::optflow::calcOpticalFlowDenseRLOF",
    "local": "void cv:：optflow:：calcOpticalFlowDenseRLOF无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "I0",
    "local": "十"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "I1",
    "local": "一"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "flow",
    "local": "流"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "rlofParam",
    "local": "参数"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "forwardBackwardThreshold",
    "local": "前后阈值"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "gridStep",
    "local": "网格步骤"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "interp_type",
    "local": "内部类型"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "epicK",
    "local": "埃皮克"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "epicSigma",
    "local": "表西格玛"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "epicLambda",
    "local": "表lambda"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ricSPSize",
    "local": "大米大小"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ricSLICType",
    "local": "ricslictype"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "use_post_proc",
    "local": "使用后处理"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "fgsLambda",
    "local": "fgsLambda公司"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "fgsSigma",
    "local": "fgsSigma公司"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "use_variational_refinement",
    "local": "使用变分求精"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "flow",
    "local": "流"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow.calcOpticalFlowDenseRLOF(",
    "local": "cv.optflow.calcopticalflowdenserlof（"
  },
  {
    "origin": "I0, I1, flow[, rlofParam[, forwardBackwardThreshold[, gridStep[, interp_type[, epicK[, epicSigma[, epicLambda[, ricSPSize[, ricSLICType[, use_post_proc[, fgsLambda[, fgsSigma[, use_variational_refinement]]]]]]]]]]]]]",
    "local": "I0，I1，flow[，rlofParam[，forwardbackardthreshold[，gridStep[，interp\\u type[，epicK[，epicSigma[，epicLambda[，ricSPSize[，ricSLICType[，use\\u post\\u proc[，fgsLambda[，fgsSigma[，use\\u variation\\u definition]]]]]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Fast dense optical flow computation based on robust local optical flow (RLOF) algorithms and sparse-to-dense interpolation scheme.",
    "local": "基于鲁棒局部光流（RLOF）算法和稀疏到稠密插值方法的快速稠密光流计算。"
  },
  {
    "origin": "The RLOF is a fast local optical flow approach described in",
    "local": "RLOF是一种快速局部光流方法，如中所述"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": "similar to the pyramidal iterative Lucas-Kanade method as proposed by",
    "local": "类似于"
  },
  {
    "origin": ". More details and experiments can be found in the following thesis",
    "local": ". 更多的细节和实验可以在下面的论文中找到"
  },
  {
    "origin": ". The implementation is derived from",
    "local": ". 实现源于"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "The sparse-to-dense interpolation scheme allows for fast computation of dense optical flow using RLOF (see",
    "local": "稀疏到稠密插值方案允许使用RLOF快速计算稠密光流（参见"
  },
  {
    "origin": "). For this scheme the following steps are applied:",
    "local": "). 此方案采用以下步骤："
  },
  {
    "origin": "motion vector seeded at a regular sampled grid are computed. The sparsity of this grid can be configured with setGridStep",
    "local": "计算在规则采样网格上的运动矢量。这个网格的稀疏性可以用setGridStep配置"
  },
  {
    "origin": "(optinally) errornous motion vectors are filter based on the forward backward confidence. The threshold can be configured with setForwardBackward. The filter is only applied if the threshold &gt;0 but than the runtime is doubled due to the estimation of the backward flow.",
    "local": "（可选）基于前后置信度对错误运动矢量进行滤波。可以使用setForwardBackward配置阈值。仅当阈值大于；但是由于对反向流的估计，运行时增加了一倍。"
  },
  {
    "origin": "Vector field interpolation is applied to the motion vector set to obtain a dense vector field.",
    "local": "对运动矢量集进行矢量场插值，得到稠密的矢量场。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "I0",
    "local": "十"
  },
  {
    "origin": "first 8-bit input image. If The cross-based RLOF is used (by selecting",
    "local": "第一个8位输入图像。如果使用基于交叉的RLOF（通过选择"
  },
  {
    "origin": "= SupportRegionType::SR_CROSS) image has to be a 8-bit 3 channel image.",
    "local": "=SupportRegionType:：SR_CROSS）映像必须是8位3通道映像。"
  },
  {
    "origin": "I1",
    "local": "一"
  },
  {
    "origin": "second 8-bit input image. If The cross-based RLOF is used (by selecting",
    "local": "第二个8位输入图像。如果使用基于交叉的RLOF（通过选择"
  },
  {
    "origin": "= SupportRegionType::SR_CROSS) image has to be a 8-bit 3 channel image.",
    "local": "=SupportRegionType:：SR_CROSS）映像必须是8位3通道映像。"
  },
  {
    "origin": "flow",
    "local": "流"
  },
  {
    "origin": "computed flow image that has the same size as I0 and type CV_32FC2.",
    "local": "与I0大小相同且类型为cv32fc2的计算流图像。"
  },
  {
    "origin": "rlofParam",
    "local": "参数"
  },
  {
    "origin": "see",
    "local": "看见"
  },
  {
    "origin": "forwardBackwardThreshold",
    "local": "前后阈值"
  },
  {
    "origin": "Threshold for the forward backward confidence check. For each grid point \\( \\mathbf{x} \\) a motion vector \\( d_{I0,I1}(\\mathbf{x}) \\) is computed. If the forward backward error",
    "local": "前后置信度检查的阈值。对于每个网格点\\（\\mathbf{x}\\），计算运动矢量\\（d{I0，I1}（\\mathbf{x}）\\）。如果向前向后错误"
  },
  {
    "origin": "\\[ EP_{FB} = || d_{I0,I1} + d_{I1,I0} || \\]",
    "local": "\\\\EP{FB}=.d{I0，I1}+d{I1，I0}。"
  },
  {
    "origin": "is larger than threshold given by this function then the motion vector will not be used by the following vector field interpolation. \\( d_{I1,I0} \\) denotes the backward flow. Note, the forward backward test will only be applied if the threshold &gt; 0. This may results into a doubled runtime for the motion estimation.",
    "local": "大于此函数给定的阈值，则运动矢量将不用于以下矢量场插值。\\（d{I1，I0}\\）表示反向流。注意，只有在阈值大于；0。这可能导致运动估计的运行时间加倍。"
  },
  {
    "origin": "gridStep",
    "local": "网格步骤"
  },
  {
    "origin": "Size of the grid to spawn the motion vectors. For each grid point a motion vector is computed. Some motion vectors will be removed due to the forwatd backward threshold (if set &gt;0). The rest will be the base of the vector field interpolation.",
    "local": "生成运动矢量的栅格大小。为每个网格点计算一个运动矢量。某些运动矢量将由于前向后向阈值（如果设置了&gt；0). 其余部分将作为矢量场插值的基础。"
  },
  {
    "origin": "interp_type",
    "local": "内部类型"
  },
  {
    "origin": "interpolation method used to compute the dense optical flow. Two interpolation algorithms are supported:",
    "local": "用于计算稠密光流的插值方法。支持两种插值算法："
  },
  {
    "origin": "INTERP_GEO",
    "local": "国际地理"
  },
  {
    "origin": "applies the fast geodesic interpolation, see",
    "local": "应用快速测地插值，请参见"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "INTERP_EPIC_RESIDUAL",
    "local": "内部剩余"
  },
  {
    "origin": "applies the edge-preserving interpolation, see",
    "local": "应用保边插值，请参见"
  },
  {
    "origin": ",Geistert2016.",
    "local": "，比勒费尔德。"
  },
  {
    "origin": "epicK",
    "local": "埃皮克"
  },
  {
    "origin": "see",
    "local": "看见"
  },
  {
    "origin": "sets the respective parameter.",
    "local": "设置相应的参数。"
  },
  {
    "origin": "epicSigma",
    "local": "表西格玛"
  },
  {
    "origin": "see",
    "local": "看见"
  },
  {
    "origin": "sets the respective parameter.",
    "local": "设置相应的参数。"
  },
  {
    "origin": "epicLambda",
    "local": "表lambda"
  },
  {
    "origin": "see",
    "local": "看见"
  },
  {
    "origin": "sets the respective parameter.",
    "local": "设置相应的参数。"
  },
  {
    "origin": "ricSPSize",
    "local": "大米大小"
  },
  {
    "origin": "see",
    "local": "看见"
  },
  {
    "origin": "sets the respective parameter.",
    "local": "设置相应的参数。"
  },
  {
    "origin": "ricSLICType",
    "local": "ricslictype"
  },
  {
    "origin": "see",
    "local": "看见"
  },
  {
    "origin": "sets the respective parameter.",
    "local": "设置相应的参数。"
  },
  {
    "origin": "use_post_proc",
    "local": "使用后处理"
  },
  {
    "origin": "enables",
    "local": "使能够"
  },
  {
    "origin": "parameter.",
    "local": "参数。"
  },
  {
    "origin": "fgsLambda",
    "local": "fgsLambda公司"
  },
  {
    "origin": "sets the respective",
    "local": "设置相应的"
  },
  {
    "origin": "parameter.",
    "local": "参数。"
  },
  {
    "origin": "fgsSigma",
    "local": "fgsSigma公司"
  },
  {
    "origin": "sets the respective",
    "local": "设置相应的"
  },
  {
    "origin": "parameter.",
    "local": "参数。"
  },
  {
    "origin": "use_variational_refinement",
    "local": "使用变分求精"
  },
  {
    "origin": "enables",
    "local": "使能够"
  },
  {
    "origin": "Parameters have been described in",
    "local": "参数已在中描述"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ". For the RLOF configuration see",
    "local": ". 有关RLOF配置，请参阅"
  },
  {
    "origin": "for further details.",
    "local": "更多细节。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "If the grid size is set to (1,1) and the forward backward threshold &lt;= 0 that the dense optical flow field is purely computed with the RLOF.",
    "local": "如果网格大小设置为（1,1）且前后阈值&lt；=说明稠密光流场是用RLOF方法计算的。"
  },
  {
    "origin": "SIMD parallelization is only available when compiling with SSE4.1.",
    "local": "SIMD并行化仅在使用SSE4.1编译时可用。"
  },
  {
    "origin": "Note that in output, if no correspondences are found between",
    "local": "注意，在输出中，如果在"
  },
  {
    "origin": "I0",
    "local": "十"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": "I1",
    "local": "一"
  },
  {
    "origin": ", the",
    "local": "，的"
  },
  {
    "origin": "flow",
    "local": "流"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "calcOpticalFlowSF()",
    "local": "CalcOpticalFlowSF（）"
  },
  {
    "origin": "[1/2]",
    "local": "[1/2]"
  },
  {
    "origin": "void cv::optflow::calcOpticalFlowSF",
    "local": "void cv:：optflow:：calcOpticalFlowSF无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "from",
    "local": "从"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "to",
    "local": "到"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "flow",
    "local": "流"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "layers",
    "local": "层"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "averaging_block_size",
    "local": "平均块大小"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "max_flow",
    "local": "最大流量"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "flow",
    "local": "流"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow.calcOpticalFlowSF(",
    "local": "cv.optflow.calcOpticalFlowSF流量("
  },
  {
    "origin": "from, to, layers, averaging_block_size, max_flow[, flow]",
    "local": "从，到，层，平均块大小，最大流[，流]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "flow",
    "local": "流"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow.calcOpticalFlowSF(",
    "local": "cv.optflow.calcOpticalFlowSF流量("
  },
  {
    "origin": "from, to, layers, averaging_block_size, max_flow, sigma_dist, sigma_color, postprocess_window, sigma_dist_fix, sigma_color_fix, occ_thr, upscale_averaging_radius, upscale_sigma_dist, upscale_sigma_color, speed_up_thr[, flow]",
    "local": "从、到、层、平均块大小、最大流、sigma距离、sigma颜色、后处理窗口、sigma距离、sigma颜色、occ thr、高档平均半径、高档sigma距离、高档sigma颜色、加速thr[，流]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "calcOpticalFlowSF()",
    "local": "CalcOpticalFlowSF（）"
  },
  {
    "origin": "[2/2]",
    "local": "[2/2]"
  },
  {
    "origin": "void cv::optflow::calcOpticalFlowSF",
    "local": "void cv:：optflow:：calcOpticalFlowSF无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "from",
    "local": "从"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "to",
    "local": "到"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "flow",
    "local": "流"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "layers",
    "local": "层"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "averaging_block_size",
    "local": "平均块大小"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "max_flow",
    "local": "最大流量"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "sigma_dist",
    "local": "西格玛分布"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "sigma_color",
    "local": "sigma\\U颜色"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "postprocess_window",
    "local": "后处理窗口"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "sigma_dist_fix",
    "local": "西格玛距离固定"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "sigma_color_fix",
    "local": "sigma\\u颜色\\u固定"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "occ_thr",
    "local": "控制中心"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "upscale_averaging_radius",
    "local": "高标度平均半径"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "upscale_sigma_dist",
    "local": "高档西格玛距离"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "upscale_sigma_color",
    "local": "高档颜色"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "speed_up_thr",
    "local": "加速"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "flow",
    "local": "流"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow.calcOpticalFlowSF(",
    "local": "cv.optflow.calcOpticalFlowSF流量("
  },
  {
    "origin": "from, to, layers, averaging_block_size, max_flow[, flow]",
    "local": "从，到，层，平均块大小，最大流[，流]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "flow",
    "local": "流"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow.calcOpticalFlowSF(",
    "local": "cv.optflow.calcOpticalFlowSF流量("
  },
  {
    "origin": "from, to, layers, averaging_block_size, max_flow, sigma_dist, sigma_color, postprocess_window, sigma_dist_fix, sigma_color_fix, occ_thr, upscale_averaging_radius, upscale_sigma_dist, upscale_sigma_color, speed_up_thr[, flow]",
    "local": "从、到、层、平均块大小、最大流、sigma距离、sigma颜色、后处理窗口、sigma距离、sigma颜色、occ thr、高档平均半径、高档sigma距离、高档sigma颜色、加速thr[，流]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculate an optical flow using \"SimpleFlow\" algorithm.",
    "local": "使用“SimpleFlow”算法计算光流。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "from",
    "local": "从"
  },
  {
    "origin": "First 8-bit 3-channel image.",
    "local": "第一个8位3通道图像。"
  },
  {
    "origin": "to",
    "local": "到"
  },
  {
    "origin": "Second 8-bit 3-channel image of the same size as prev",
    "local": "第二个8位3通道图像，大小与上一个相同"
  },
  {
    "origin": "flow",
    "local": "流"
  },
  {
    "origin": "computed flow image that has the same size as prev and type CV_32FC2",
    "local": "与prev大小相同且类型为cv32fc2的计算流图像"
  },
  {
    "origin": "layers",
    "local": "层"
  },
  {
    "origin": "Number of layers",
    "local": "层数"
  },
  {
    "origin": "averaging_block_size",
    "local": "平均块大小"
  },
  {
    "origin": "Size of block through which we sum up when calculate cost function for pixel",
    "local": "计算像素的代价函数时求和的块大小"
  },
  {
    "origin": "max_flow",
    "local": "最大流量"
  },
  {
    "origin": "maximal flow that we search at each level",
    "local": "我们在每个层次上搜索的最大流"
  },
  {
    "origin": "sigma_dist",
    "local": "西格玛分布"
  },
  {
    "origin": "vector smooth spatial sigma parameter",
    "local": "向量平滑空间sigma参数"
  },
  {
    "origin": "sigma_color",
    "local": "sigma\\U颜色"
  },
  {
    "origin": "vector smooth color sigma parameter",
    "local": "向量平滑颜色sigma参数"
  },
  {
    "origin": "postprocess_window",
    "local": "后处理窗口"
  },
  {
    "origin": "window size for postprocess cross bilateral filter",
    "local": "后处理交叉双边滤波器的窗口大小"
  },
  {
    "origin": "sigma_dist_fix",
    "local": "西格玛距离固定"
  },
  {
    "origin": "spatial sigma for postprocess cross bilateralf filter",
    "local": "后处理交叉双边lf滤波器的空间sigma算法"
  },
  {
    "origin": "sigma_color_fix",
    "local": "sigma\\u颜色\\u固定"
  },
  {
    "origin": "color sigma for postprocess cross bilateral filter",
    "local": "后处理交叉双边滤波器的彩色sigma"
  },
  {
    "origin": "occ_thr",
    "local": "控制中心"
  },
  {
    "origin": "threshold for detecting occlusions",
    "local": "闭塞检测阈值"
  },
  {
    "origin": "upscale_averaging_radius",
    "local": "高标度平均半径"
  },
  {
    "origin": "window size for bilateral upscale operation",
    "local": "用于双向高档操作的窗口大小"
  },
  {
    "origin": "upscale_sigma_dist",
    "local": "高档西格玛距离"
  },
  {
    "origin": "spatial sigma for bilateral upscale operation",
    "local": "双向高标度运算的空间sigma"
  },
  {
    "origin": "upscale_sigma_color",
    "local": "高档颜色"
  },
  {
    "origin": "color sigma for bilateral upscale operation",
    "local": "用于双向高档操作的彩色西格玛"
  },
  {
    "origin": "speed_up_thr",
    "local": "加速"
  },
  {
    "origin": "threshold to detect point with irregular flow - where flow should be recalculated after upscale",
    "local": "用于检测不规则流量点的阈值-上升后应重新计算流量的位置"
  },
  {
    "origin": "See",
    "local": "看到了吗"
  },
  {
    "origin": ". And site of project -",
    "local": ". 项目名称和地点-"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "An example using the simpleFlow algorithm can be found at samples/simpleflow_demo.cpp",
    "local": "可以在samples/simpleFlow\\ u demo.cpp中找到使用simpleFlow算法的示例"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "calcOpticalFlowSparseRLOF()",
    "local": "计算光学"
  },
  {
    "origin": "void cv::optflow::calcOpticalFlowSparseRLOF",
    "local": "void cv:：optflow:：calcOpticalFlowSparseRLOF"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "prevImg",
    "local": "预防"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "nextImg",
    "local": "下一个"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "prevPts",
    "local": "前文"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "nextPts",
    "local": "下一步"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "status",
    "local": "地位"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "err",
    "local": "呃"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "rlofParam",
    "local": "参数"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "forwardBackwardThreshold",
    "local": "前后阈值"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "nextPts, status, err",
    "local": "下一步，状态，错误"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow.calcOpticalFlowSparseRLOF(",
    "local": "cv.optflow.calcopticalflowsparserlof（"
  },
  {
    "origin": "prevImg, nextImg, prevPts, nextPts[, status[, err[, rlofParam[, forwardBackwardThreshold]]]]",
    "local": "prevImg，nextImg，prevPts，nextPts[，status[，err[，rlofParam[，forwardBackwardThreshold]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates fast optical flow for a sparse feature set using the robust local optical flow (RLOF) similar to",
    "local": "使用类似于的鲁棒局部光流（RLOF）计算稀疏特征集的快速光流"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "The RLOF is a fast local optical flow approach described in",
    "local": "RLOF是一种快速局部光流方法，如中所述"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": "similar to the pyramidal iterative Lucas-Kanade method as proposed by",
    "local": "类似于"
  },
  {
    "origin": ". More details and experiments can be found in the following thesis",
    "local": ". 更多的细节和实验可以在下面的论文中找到"
  },
  {
    "origin": ". The implementation is derived from",
    "local": ". 实现源于"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "prevImg",
    "local": "预防"
  },
  {
    "origin": "first 8-bit input image. If The cross-based RLOF is used (by selecting",
    "local": "第一个8位输入图像。如果使用基于交叉的RLOF（通过选择"
  },
  {
    "origin": "= SupportRegionType::SR_CROSS) image has to be a 8-bit 3 channel image.",
    "local": "=SupportRegionType:：SR_CROSS）映像必须是8位3通道映像。"
  },
  {
    "origin": "nextImg",
    "local": "下一个"
  },
  {
    "origin": "second 8-bit input image. If The cross-based RLOF is used (by selecting",
    "local": "第二个8位输入图像。如果使用基于交叉的RLOF（通过选择"
  },
  {
    "origin": "= SupportRegionType::SR_CROSS) image has to be a 8-bit 3 channel image.",
    "local": "=SupportRegionType:：SR_CROSS）映像必须是8位3通道映像。"
  },
  {
    "origin": "prevPts",
    "local": "前文"
  },
  {
    "origin": "vector of 2D points for which the flow needs to be found; point coordinates must be single-precision floating-point numbers.",
    "local": "需要求流的二维点的向量；点坐标必须是单精度浮点数。"
  },
  {
    "origin": "nextPts",
    "local": "下一步"
  },
  {
    "origin": "output vector of 2D points (with single-precision floating-point coordinates) containing the calculated new positions of input features in the second image; when",
    "local": "包含第二图像中输入特征的计算新位置的2D点（具有单精度浮点坐标）的输出向量；什么时候"
  },
  {
    "origin": "variable is true the vector must have the same size as in the input and contain the initialization point correspondences.",
    "local": "变量为true时，向量必须与输入中的大小相同，并且包含初始化点对应关系。"
  },
  {
    "origin": "status",
    "local": "地位"
  },
  {
    "origin": "output status vector (of unsigned chars); each element of the vector is set to 1 if the flow for the corresponding features has passed the forward backward check.",
    "local": "输出状态向量（无符号字符）；如果对应特征的流已通过向前向后检查，则向量的每个元素都设置为1。"
  },
  {
    "origin": "err",
    "local": "呃"
  },
  {
    "origin": "output vector of errors; each element of the vector is set to the forward backward error for the corresponding feature.",
    "local": "误差输出矢量；向量的每个元素被设置为对应特征的前后误差。"
  },
  {
    "origin": "rlofParam",
    "local": "参数"
  },
  {
    "origin": "see",
    "local": "看见"
  },
  {
    "origin": "forwardBackwardThreshold",
    "local": "前后阈值"
  },
  {
    "origin": "Threshold for the forward backward confidence check. If forewardBackwardThreshold &lt;=0 the forward",
    "local": "前后置信度检查的阈值。如果前后阈值&lt=0向前"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "SIMD parallelization is only available when compiling with SSE4.1.",
    "local": "SIMD并行化仅在使用SSE4.1编译时可用。"
  },
  {
    "origin": "Parameters have been described in",
    "local": "参数已在中描述"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": ". For the RLOF configuration see",
    "local": ". 有关RLOF配置，请参阅"
  },
  {
    "origin": "for further details.",
    "local": "更多细节。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "calcOpticalFlowSparseToDense()",
    "local": "CalcOpticalFlowSparseToDense（）"
  },
  {
    "origin": "void cv::optflow::calcOpticalFlowSparseToDense",
    "local": "void cv:：optflow:：calcOpticalFlowSparseToDense无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "from",
    "local": "从"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "to",
    "local": "到"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "flow",
    "local": "流"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "grid_step",
    "local": "网格\\u步骤"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "k",
    "local": "k"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "sigma",
    "local": "西格玛"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "use_post_proc",
    "local": "使用后处理"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "fgs_lambda",
    "local": "fgs\\u lambda公司"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "fgs_sigma",
    "local": "fgs\\U西格玛"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "flow",
    "local": "流"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow.calcOpticalFlowSparseToDense(",
    "local": "cv.optflow.calcOpticalFlowSparseToDense公司("
  },
  {
    "origin": "from, to[, flow[, grid_step[, k[, sigma[, use_post_proc[, fgs_lambda[, fgs_sigma]]]]]]]",
    "local": "from、to[、flow[、grid\\u step[、k[、sigma[、use\\u post\\u proc[、fgs\\u lambda[、fgs\\u sigma]]]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Fast dense optical flow based on PyrLK sparse matches interpolation.",
    "local": "基于PyrLK稀疏匹配插值的快速稠密光流。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "from",
    "local": "从"
  },
  {
    "origin": "first 8-bit 3-channel or 1-channel image.",
    "local": "第一个8位3通道或1通道图像。"
  },
  {
    "origin": "to",
    "local": "到"
  },
  {
    "origin": "second 8-bit 3-channel or 1-channel image of the same size as from",
    "local": "第二个8位3通道或1通道图像，大小与来自"
  },
  {
    "origin": "flow",
    "local": "流"
  },
  {
    "origin": "computed flow image that has the same size as from and CV_32FC2 type",
    "local": "与from和CV32fc2类型具有相同大小的计算流图像"
  },
  {
    "origin": "grid_step",
    "local": "网格\\u步骤"
  },
  {
    "origin": "stride used in sparse match computation. Lower values usually result in higher quality but slow down the algorithm.",
    "local": "用于稀疏匹配计算的步长。较低的值通常会导致较高的质量，但会减慢算法的速度。"
  },
  {
    "origin": "k",
    "local": "k"
  },
  {
    "origin": "number of nearest-neighbor matches considered, when fitting a locally affine model. Lower values can make the algorithm noticeably faster at the cost of some quality degradation.",
    "local": "拟合局部仿射模型时考虑的最近邻匹配数。较低的值可以使算法明显更快，但代价是一些质量下降。"
  },
  {
    "origin": "sigma",
    "local": "西格玛"
  },
  {
    "origin": "parameter defining how fast the weights decrease in the locally-weighted affine fitting. Higher values can help preserve fine details, lower values can help to get rid of the noise in the output flow.",
    "local": "定义局部加权仿射拟合中权重减少速度的参数。较高的值有助于保留细节，较低的值有助于消除输出流中的噪声。"
  },
  {
    "origin": "use_post_proc",
    "local": "使用后处理"
  },
  {
    "origin": "defines whether the",
    "local": "定义"
  },
  {
    "origin": "is used for post-processing after interpolation",
    "local": "用于插值后的后处理"
  },
  {
    "origin": "fgs_lambda",
    "local": "fgs\\u lambda公司"
  },
  {
    "origin": "see the respective parameter of the",
    "local": "请参见的相应参数"
  },
  {
    "origin": "fgs_sigma",
    "local": "fgs\\U西格玛"
  },
  {
    "origin": "see the respective parameter of the",
    "local": "请参见的相应参数"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "createOptFlow_DeepFlow()",
    "local": "createOptFlow\\u DeepFlow（）"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; cv::optflow::createOptFlow_DeepFlow",
    "local": "&燃气轮机；cv:：optflow:：createOptFlow\\u深流"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow.createOptFlow_DeepFlow(",
    "local": "cv.optflow.createOptFlow\\u深流("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "DeepFlow optical flow algorithm implementation.",
    "local": "DeepFlow光流算法的实现。"
  },
  {
    "origin": "The class implements the DeepFlow optical flow algorithm described in",
    "local": "类实现了中描述的DeepFlow光流算法"
  },
  {
    "origin": ". See also",
    "local": ". 另请参见"
  },
  {
    "origin": "http://lear.inrialpes.fr/src/deepmatching/",
    "local": "http://lear.inrialpes.fr/src/deepmatching/"
  },
  {
    "origin": ". Parameters - class fields - that may be modified after creating a class instance:",
    "local": ". 参数-类字段-创建类实例后可以修改的参数："
  },
  {
    "origin": "member float alpha Smoothness assumption weight",
    "local": "成员浮点alpha平滑度假设权重"
  },
  {
    "origin": "member float delta Color constancy assumption weight",
    "local": "成员浮动增量颜色恒定性假设权重"
  },
  {
    "origin": "member float gamma Gradient constancy weight",
    "local": "成员浮动gamma梯度恒定权重"
  },
  {
    "origin": "member float sigma Gaussian smoothing parameter",
    "local": "成员浮点sigma高斯平滑参数"
  },
  {
    "origin": "member int minSize Minimal dimension of an image in the pyramid (next, smaller images in the pyramid are generated until one of the dimensions reaches this size)",
    "local": "member int minSize金字塔中图像的最小尺寸（下一步，生成金字塔中较小的图像，直到其中一个尺寸达到此尺寸）"
  },
  {
    "origin": "member float downscaleFactor Scaling factor in the image pyramid (must be &lt; 1)",
    "local": "图像金字塔中的成员浮动缩小比例因子缩放比例因子（必须为&lt；1)"
  },
  {
    "origin": "member int fixedPointIterations How many iterations on each level of the pyramid",
    "local": "member int fixedPointIterations金字塔的每个级别上有多少次迭代"
  },
  {
    "origin": "member int sorIterations Iterations of Succesive Over-Relaxation (solver)",
    "local": "连续超松弛迭代的成员（解算器）"
  },
  {
    "origin": "member float omega Relaxation factor in SOR",
    "local": "SOR中的欧米茄松弛因子"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "createOptFlow_DenseRLOF()",
    "local": "createoptflow denserlof（）"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; cv::optflow::createOptFlow_DenseRLOF",
    "local": "&gt；CV：：optflow：：createoptflow denserlof"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow.createOptFlow_DenseRLOF(",
    "local": "cv.optflow.createOptFlow\\u DenseRLOF创建("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Additional interface to the Dense RLOF algorithm -",
    "local": "密集RLOF算法的附加接口-"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "createOptFlow_DualTVL1()",
    "local": "createOptFlow\\u DualTVL1（）"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; cv::optflow::createOptFlow_DualTVL1",
    "local": "&燃气轮机；cv:：optflow:：createOptFlow\\u双TVL1"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow.createOptFlow_DualTVL1(",
    "local": "cv.optflow.createOptFlow\\ U双TVL1("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Creates instance of",
    "local": "创建的实例"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "createOptFlow_Farneback()",
    "local": "createOptFlow Farneback（）"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; cv::optflow::createOptFlow_Farneback",
    "local": "&燃气轮机；cv:：optflow:：createOptFlow\\u Farneback公司"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow.createOptFlow_Farneback(",
    "local": "cv.optflow.createOptFlow\\u Farneback公司("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Additional interface to the Farneback's algorithm -",
    "local": "Farneback算法的附加接口-"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "createOptFlow_PCAFlow()",
    "local": "createoptflow pcaflow（）"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; cv::optflow::createOptFlow_PCAFlow",
    "local": "&燃气轮机；cv:：optflow:：创建optflow"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow.createOptFlow_PCAFlow(",
    "local": "cv.optflow.createOptFlow\\u PCAFlow文件("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Creates an instance of PCAFlow.",
    "local": "创建PCAFlow的实例。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "createOptFlow_SimpleFlow()",
    "local": "createOptFlow\\u SimpleFlow（）"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; cv::optflow::createOptFlow_SimpleFlow",
    "local": "&燃气轮机；cv:：optflow:：createOptFlow\\u SimpleFlow"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow.createOptFlow_SimpleFlow(",
    "local": "cv.optflow.createOptFlow\\u SimpleFlow文件("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Additional interface to the SimpleFlow algorithm -",
    "local": "SimpleFlow算法的附加接口-"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "createOptFlow_SparseRLOF()",
    "local": "createoptflow sparserlof（）"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; cv::optflow::createOptFlow_SparseRLOF",
    "local": "&gt；CV：：optflow：：createoptflow sparserlof"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow.createOptFlow_SparseRLOF(",
    "local": "cv.optflow.createOptFlow\\u SparseRLOF文件("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Additional interface to the Sparse RLOF algorithm -",
    "local": "稀疏RLOF算法的附加接口-"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "createOptFlow_SparseToDense()",
    "local": "createOptFlow\\u SparseToDense（）"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; cv::optflow::createOptFlow_SparseToDense",
    "local": "&gt；CV:：OptFlow:：CreateOptFlow Sparsetodense"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow.createOptFlow_SparseToDense(",
    "local": "cv.optflow.createOptFlow\\u SparseToDense创建("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Additional interface to the SparseToDenseFlow algorithm -",
    "local": "SparseToDenseFlow算法的附加接口-"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "findCorrespondences()",
    "local": "findCorrespondences（）"
  },
  {
    "origin": "template&lt;int T&gt;",
    "local": "模板&lt；内部T&gt；"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "&lt; T &gt;::findCorrespondences",
    "local": "&lt；&gt；：：查找相关响应"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "imgFrom",
    "local": "imgFrom公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "imgTo",
    "local": "imgTo公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "std::vector&lt; std::pair&lt;",
    "local": "标准：：向量&lt；标准：：成对&lt；"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&gt; &gt; &amp;",
    "local": "&燃气轮机&燃气轮机&amp；"
  },
  {
    "origin": "corr",
    "local": "更正"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "params",
    "local": "参数"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Find correspondences between two images.",
    "local": "找出两个图像之间的对应关系。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "[in]",
    "local": "[英寸]"
  },
  {
    "origin": "imgFrom",
    "local": "imgFrom公司"
  },
  {
    "origin": "First image in a sequence.",
    "local": "序列中的第一个图像。"
  },
  {
    "origin": "[in]",
    "local": "[英寸]"
  },
  {
    "origin": "imgTo",
    "local": "imgTo公司"
  },
  {
    "origin": "Second image in a sequence.",
    "local": "序列中的第二个图像。"
  },
  {
    "origin": "[out]",
    "local": "[输出]"
  },
  {
    "origin": "corr",
    "local": "更正"
  },
  {
    "origin": "Output vector with pairs of corresponding points.",
    "local": "对应点对的输出向量。"
  },
  {
    "origin": "[in]",
    "local": "[英寸]"
  },
  {
    "origin": "params",
    "local": "参数"
  },
  {
    "origin": "Additional matching parameters for fine-tuning.",
    "local": "用于微调的其他匹配参数。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "segmentMotion()",
    "local": "分段（）"
  },
  {
    "origin": "void cv::motempl::segmentMotion",
    "local": "void cv:：motempl:：segmentMotion无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "mhi",
    "local": "最小"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "segmask",
    "local": "segmask公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "std::vector&lt;",
    "local": "标准：：向量&lt；"
  },
  {
    "origin": "&gt; &amp;",
    "local": "&燃气轮机&amp；"
  },
  {
    "origin": "boundingRects",
    "local": "边界矩形"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "timestamp",
    "local": "时间戳"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "segThresh",
    "local": "宗派"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "segmask, boundingRects",
    "local": "分段掩码，边界矩形"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.motempl.segmentMotion(",
    "local": "cv.motempl.segmentMotion公司("
  },
  {
    "origin": "mhi, timestamp, segThresh[, segmask]",
    "local": "mm，时间戳，segThresh[，segmask]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Splits a motion history image into a few parts corresponding to separate independent motions (for example, left hand, right hand).",
    "local": "将运动历史图像分割为与独立运动相对应的几个部分（例如，左手、右手）。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "mhi",
    "local": "最小"
  },
  {
    "origin": "Motion history image.",
    "local": "运动历史图像。"
  },
  {
    "origin": "segmask",
    "local": "segmask公司"
  },
  {
    "origin": "Image where the found mask should be stored, single-channel, 32-bit floating-point.",
    "local": "找到的掩码应该存储的图像，单通道，32位浮点。"
  },
  {
    "origin": "boundingRects",
    "local": "边界矩形"
  },
  {
    "origin": "Vector containing ROIs of motion connected components.",
    "local": "包含运动连接组件的roi的向量。"
  },
  {
    "origin": "timestamp",
    "local": "时间戳"
  },
  {
    "origin": "Current time in milliseconds or other units.",
    "local": "以毫秒或其他单位表示的当前时间。"
  },
  {
    "origin": "segThresh",
    "local": "宗派"
  },
  {
    "origin": "Segmentation threshold that is recommended to be equal to the interval between motion history \"steps\" or greater.",
    "local": "分割阈值，建议等于或大于运动历史“步长”之间的间隔。"
  },
  {
    "origin": "The function finds all of the motion segments and marks them in segmask with individual values (1,2,...). It also computes a vector with ROIs of motion connected components. After that the motion direction for every component can be calculated with calcGlobalOrientation using the extracted mask of the particular component.",
    "local": "该函数查找所有运动段，并在segmask中用单个值（1,2，…）标记它们。它还计算具有运动连接组件的roi的向量。然后利用提取出的特定分量的掩模，通过calcGlobalOrientation计算出每个分量的运动方向。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "updateMotionHistory()",
    "local": "updateMotionHistory（）"
  },
  {
    "origin": "void cv::motempl::updateMotionHistory",
    "local": "Void CV：：Motempl：：UpdateMotionHistory"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "silhouette",
    "local": "轮廓"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mhi",
    "local": "最小"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "timestamp",
    "local": "时间戳"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "duration",
    "local": "期间"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "mhi",
    "local": "最小"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.motempl.updateMotionHistory(",
    "local": "CV.Motempl.UpdateMotionHistory（"
  },
  {
    "origin": "silhouette, mhi, timestamp, duration",
    "local": "轮廓，mhi，时间戳，持续时间"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Updates the motion history image by a moving silhouette.",
    "local": "通过移动轮廓更新运动历史图像。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "silhouette",
    "local": "轮廓"
  },
  {
    "origin": "Silhouette mask that has non-zero pixels where the motion occurs.",
    "local": "在运动发生的位置具有非零像素的轮廓遮罩。"
  },
  {
    "origin": "mhi",
    "local": "最小"
  },
  {
    "origin": "Motion history image that is updated by the function (single-channel, 32-bit floating-point).",
    "local": "由函数更新的运动历史图像（单通道，32位浮点）。"
  },
  {
    "origin": "timestamp",
    "local": "时间戳"
  },
  {
    "origin": "Current time in milliseconds or other units.",
    "local": "以毫秒或其他单位表示的当前时间。"
  },
  {
    "origin": "duration",
    "local": "期间"
  },
  {
    "origin": "Maximal duration of the motion track in the same units as timestamp .",
    "local": "以与时间戳相同的单位表示的运动轨迹的最大持续时间。"
  },
  {
    "origin": "The function updates the motion history image as follows:",
    "local": "该函数更新运动历史图像如下："
  },
  {
    "origin": "\\[\\texttt{mhi} (x,y)= \\forkthree{\\texttt{timestamp}}{if \\(\\texttt{silhouette}(x,y) \\ne 0\\)}{0}{if \\(\\texttt{silhouette}(x,y) = 0\\) and \\(\\texttt{mhi} &lt; (\\texttt{timestamp} - \\texttt{duration})\\)}{\\texttt{mhi}(x,y)}{otherwise}\\]",
    "local": "\\[\\texttt{mhi}（x，y）=\\forkthree{\\texttt{timestamp}}{if\\（\\texttt{substrate}（x，y）\\ne 0\\）}{0}{if\\（\\texttt{substrate}（x，y）=0\\）和\\（\\texttt{mhi}&lt(\\texttt{timestamp}-\\texttt{duration}）\\）}{\\texttt{mhi}（x，y）}{否则}\\]"
  },
  {
    "origin": "That is, MHI pixels where the motion occurs are set to the current timestamp , while the pixels where the motion happened last time a long time ago are cleared.",
    "local": "也就是说，运动发生的MHI像素被设置为当前时间戳，而运动很久以前上次发生的像素被清除。"
  },
  {
    "origin": "The function, together with calcMotionGradient and calcGlobalOrientation , implements a motion templates technique described in",
    "local": "该函数与calcMotionGradient和calcGlobalOrientation一起实现了中描述的运动模板技术"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:41 for OpenCV by",
    "local": "于2021年4月2日星期五11:36:41为OpenCV生成"
  }
]