[
  {
    "origin": "OpenCV: cv::hfs::HfsSegment Class Reference",
    "local": "OpenCV:cv:：hfs:：HfsSegment类引用"
  },
  {
    "origin": "OpenCV",
    "local": "打开CV"
  },
  {
    "origin": "Open Source Computer Vision",
    "local": "开源计算机视觉"
  },
  {
    "origin": "Public Member Functions",
    "local": "公共成员职能"
  },
  {
    "origin": "Static Public Member Functions",
    "local": "静态公共成员函数"
  },
  {
    "origin": "List of all members",
    "local": "所有成员的列表"
  },
  {
    "origin": "cv::hfs::HfsSegment Class Reference",
    "local": "cv:：hfs:：hfs段类引用"
  },
  {
    "origin": "abstract",
    "local": "摘要"
  },
  {
    "origin": "Inheritance diagram for cv::hfs::HfsSegment:",
    "local": "cv:：hfs:：hfs段的继承关系图："
  },
  {
    "origin": "Public Member Functions",
    "local": "公共成员职能"
  },
  {
    "origin": "virtual int",
    "local": "虚拟整数"
  },
  {
    "origin": "virtual int",
    "local": "虚拟整数"
  },
  {
    "origin": "virtual int",
    "local": "虚拟整数"
  },
  {
    "origin": "virtual float",
    "local": "虚拟浮动"
  },
  {
    "origin": "virtual float",
    "local": "虚拟浮动"
  },
  {
    "origin": "virtual int",
    "local": "虚拟整数"
  },
  {
    "origin": "virtual float",
    "local": "虚拟浮动"
  },
  {
    "origin": "virtual",
    "local": "事实上的"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "do segmentation with cpu This method is only implemented for reference. It is highly NOT recommanded to use it.",
    "local": "用cpu做分割此方法实现仅供参考。强烈建议不要使用它。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual",
    "local": "事实上的"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "do segmentation gpu",
    "local": "执行gpu分割"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": ": set and get the parameter minRegionSizeI. This parameter is used in the second stage mentioned above. After the EGB segmentation, regions that have fewer pixels then this parameter will be merged into it's adjacent region.",
    "local": "：设置并获取参数minRegionSizeI。此参数用于上述第二阶段。在EGB分割之后，像素数少于该参数的区域将被合并到相邻区域中。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": ": set and get the parameter minRegionSizeII. This parameter is used in the third stage mentioned above. It serves the same purpose as minRegionSizeI",
    "local": "：设置并获取参数minRegionSizeII。此参数用于上述第三阶段。它的作用与民区四子相同"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": ": set and get the parameter numSlicIter. This parameter is used in the first stage. It describes how many iteration to perform when executing SLIC.",
    "local": "：设置并获取参数numSlicIter。此参数用于第一阶段。它描述了在执行SLIC时要执行多少次迭代。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": ": set and get the parameter segEgbThresholdI. This parameter is used in the second stage mentioned above. It is a constant used to threshold weights of the edge when merging adjacent nodes when applying EGB algorithm. The segmentation result tends to have more regions remained if this value is large and vice versa.",
    "local": "：设置并获取参数segEgbThresholdI。此参数用于上述第二阶段。在应用EGB算法合并相邻节点时，它是一个用来确定边缘权值的常数。如果该值较大，分割结果往往会保留更多的区域，反之亦然。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": ": set and get the parameter segEgbThresholdII. This parameter is used in the third stage mentioned above. It serves the same purpose as segEgbThresholdI. The segmentation result tends to have more regions remained if this value is large and vice versa.",
    "local": "：设置并获取参数segEgbThresholdII。此参数用于上述第三阶段。它的作用与segEgbThresholdI相同。如果该值较大，分割结果往往会保留更多的区域，反之亦然。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": ": set and get the parameter slicSpixelSize. This parameter is used in the first stage mentioned above(the SLIC stage). It describes the size of each superpixel when initializing SLIC. Every superpixel approximately has \\(slicSpixelSize \\times slicSpixelSize\\) pixels in the beginning.",
    "local": "：设置并获取参数slicPixelSize。此参数用于上述第一阶段（SLIC阶段）。它描述了初始化SLIC时每个超级像素的大小。每个超级像素的开头大约有\\（slicPixelSize\\times slicPixelSize\\）个像素。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": ": set and get the parameter spatialWeight. This parameter is used in the first stage mentioned above(the SLIC stage). It describes how important is the role of position when calculating the distance between each pixel and it's center. The exact formula to calculate the distance is \\(colorDistance + spatialWeight \\times spatialDistance\\). The segmentation result tends to have more local consistency if this value is larger.",
    "local": "：设置并获取参数spatialWeight。此参数用于上述第一阶段（SLIC阶段）。它描述了位置在计算每个像素与其中心之间的距离时的重要性。计算距离的精确公式是\\（colorDistance+spatialWeight\\ times spatialDistance\\）。该值越大，分割结果的局部一致性越强。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Public Member Functions inherited from",
    "local": "公共成员函数继承自"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "virtual",
    "local": "事实上的"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Clears the algorithm state.",
    "local": "清除算法状态。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual bool",
    "local": "虚拟布尔"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "Returns true if the",
    "local": "如果"
  },
  {
    "origin": "is empty (e.g. in the very beginning or after unsuccessful read.",
    "local": "为空（例如，在最开始或读取失败后）。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual",
    "local": "事实上的"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;fn)",
    "local": "&amp；（fn）"
  },
  {
    "origin": "Reads algorithm parameters from a file storage.",
    "local": "从文件存储器中读取算法参数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;filename) const",
    "local": "&amp；文件名）常量"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;fs) const",
    "local": "&amp；（f） 常数"
  },
  {
    "origin": "Stores algorithm parameters in a file storage.",
    "local": "将算法参数存储在文件存储器中。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;fs, const",
    "local": "&gt；gt；amp；fs，常数"
  },
  {
    "origin": "&amp;name=",
    "local": "&amp；姓名="
  },
  {
    "origin": "()) const",
    "local": "（））常数"
  },
  {
    "origin": "simplified API for language bindings This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "语言绑定的简化API这是一个重载的成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Static Public Member Functions",
    "local": "静态公共成员函数"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(int height, int width, float segEgbThresholdI=0.08f, int minRegionSizeI=100, float segEgbThresholdII=0.28f, int minRegionSizeII=200, float spatialWeight=0.6f, int slicSpixelSize=8, int numSlicIter=5)",
    "local": "（int height，int width，float segEgbThresholdI=0.08f，int minRegionSizeI=100，float segEgbThresholdI=0.28f，int minRegionSizeII=200，float spaceweight=0.6f，int slicpixelsize=8，int numSlicIter=5）"
  },
  {
    "origin": ": create a hfs object",
    "local": "：创建hfs对象"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Static Public Member Functions inherited from",
    "local": "继承自的静态公共成员函数"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": "&lt_Tp&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;filename, const",
    "local": "&amp；文件名，常量"
  },
  {
    "origin": "&amp;objname=",
    "local": "&amp；对象名="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Loads algorithm from the file.",
    "local": "从文件加载算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": "&lt_Tp&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;strModel, const",
    "local": "&amp；strModel，常量"
  },
  {
    "origin": "&amp;objname=",
    "local": "&amp；对象名="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Loads algorithm from a String.",
    "local": "从字符串加载算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": "&lt_Tp&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;fn)",
    "local": "&amp；（fn）"
  },
  {
    "origin": "Reads algorithm from the file node.",
    "local": "从文件节点读取算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Additional Inherited Members",
    "local": "其他继承成员"
  },
  {
    "origin": "Protected Member Functions inherited from",
    "local": "继承自的受保护成员函数"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;fs) const",
    "local": "&amp；（f） 常数"
  },
  {
    "origin": "Member Function Documentation",
    "local": "成员功能文档"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "create()",
    "local": "创建（）"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; cv::hfs::HfsSegment::create",
    "local": "&燃气轮机；cv:：hfs:：hfs段：：创建"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "height",
    "local": "高度"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "width",
    "local": "宽度"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "segEgbThresholdI",
    "local": "分段阈值"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "minRegionSizeI",
    "local": "民治四段"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "segEgbThresholdII",
    "local": "segEgbThresholdII段"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "minRegionSizeII",
    "local": "明治寺"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "spatialWeight",
    "local": "空间权重"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "slicSpixelSize",
    "local": "SlicSixelSize"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "numSlicIter",
    "local": "数字"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.hfs.HfsSegment_create(",
    "local": "cv.hfs.hfs段\\创建("
  },
  {
    "origin": "height, width[, segEgbThresholdI[, minRegionSizeI[, segEgbThresholdII[, minRegionSizeII[, spatialWeight[, slicSpixelSize[, numSlicIter]]]]]]]",
    "local": "高度、宽度[、segEgbThresholdI[、minRegionSizeI[、segEgbThresholdI[、minRegionSizeII[、空间权重[、slicpixelsize[、numSlicIter]]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": ": create a hfs object",
    "local": "：创建hfs对象"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "height",
    "local": "高度"
  },
  {
    "origin": "the height of the input image",
    "local": "输入图像的高度"
  },
  {
    "origin": "width",
    "local": "宽度"
  },
  {
    "origin": "the width of the input image",
    "local": "输入图像的宽度"
  },
  {
    "origin": "segEgbThresholdI",
    "local": "分段阈值"
  },
  {
    "origin": "parameter segEgbThresholdI",
    "local": "参数segEgbThresholdI"
  },
  {
    "origin": "minRegionSizeI",
    "local": "民治四段"
  },
  {
    "origin": "parameter minRegionSizeI",
    "local": "参数minRegionSizeI"
  },
  {
    "origin": "segEgbThresholdII",
    "local": "segEgbThresholdII段"
  },
  {
    "origin": "parameter segEgbThresholdII",
    "local": "参数segegbthresholdi"
  },
  {
    "origin": "minRegionSizeII",
    "local": "明治寺"
  },
  {
    "origin": "parameter minRegionSizeII",
    "local": "参数minRegionSizeII"
  },
  {
    "origin": "spatialWeight",
    "local": "空间权重"
  },
  {
    "origin": "parameter spatialWeight",
    "local": "参数空间权重"
  },
  {
    "origin": "slicSpixelSize",
    "local": "SlicSixelSize"
  },
  {
    "origin": "parameter slicSpixelSize",
    "local": "小尺寸"
  },
  {
    "origin": "numSlicIter",
    "local": "数字"
  },
  {
    "origin": "parameter numSlicIter",
    "local": "参数编号"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getMinRegionSizeI()",
    "local": "getMinRegionSizeI（）"
  },
  {
    "origin": "virtual int cv::hfs::HfsSegment::getMinRegionSizeI",
    "local": "虚拟int cv:：hfs:：HfsSegment:：getMinRegionSizeI"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.hfs_HfsSegment.getMinRegionSizeI(",
    "local": "简历：hfs\\u HfsSegment.getMinRegionSizeI("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getMinRegionSizeII()",
    "local": "getMinRegionSizeII（）"
  },
  {
    "origin": "virtual int cv::hfs::HfsSegment::getMinRegionSizeII",
    "local": "虚拟int cv:：hfs:：HfsSegment:：getMinRegionSizeII"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.hfs_HfsSegment.getMinRegionSizeII(",
    "local": "简历：hfs\\u HfsSegment.getMinRegionSizeII("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getNumSlicIter()",
    "local": "getNumSlicIter（）"
  },
  {
    "origin": "virtual int cv::hfs::HfsSegment::getNumSlicIter",
    "local": "虚拟int cv:：hfs:：HfsSegment:：getNumSlicIter"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.hfs_HfsSegment.getNumSlicIter(",
    "local": "简历：hfs\\u HfsSegment.getNumSlicIter("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getSegEgbThresholdI()",
    "local": "getSegEgbThresholdI（）"
  },
  {
    "origin": "virtual float cv::hfs::HfsSegment::getSegEgbThresholdI",
    "local": "虚拟浮点cv:：hfs:：HfsSegment:：getSegEgbThresholdI"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.hfs_HfsSegment.getSegEgbThresholdI(",
    "local": "简历：hfs\\u HfsSegment.getSegEgbThresholdI("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getSegEgbThresholdII()",
    "local": "getSegEgbThresholdII（）"
  },
  {
    "origin": "virtual float cv::hfs::HfsSegment::getSegEgbThresholdII",
    "local": "虚拟浮点cv:：hfs:：HfsSegment:：getSegEgbThresholdII"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.hfs_HfsSegment.getSegEgbThresholdII(",
    "local": "简历：hfs\\u HfsSegment.getSegEgbThresholdII("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getSlicSpixelSize()",
    "local": "getslicPixelSize（）"
  },
  {
    "origin": "virtual int cv::hfs::HfsSegment::getSlicSpixelSize",
    "local": "虚拟int cv:：hfs:：HfsSegment:：getslicpixelsize"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.hfs_HfsSegment.getSlicSpixelSize(",
    "local": "cv.hfs\\u HfsSegment.getslicpixelsize文件("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getSpatialWeight()",
    "local": "getSpatialWeight（）"
  },
  {
    "origin": "virtual float cv::hfs::HfsSegment::getSpatialWeight",
    "local": "虚拟浮点cv:：hfs:：HfsSegment:：getSpatialWeight"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.hfs_HfsSegment.getSpatialWeight(",
    "local": "cv.hfs\\u HfsSegment.getSpatialWeight文件("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "performSegmentCpu()",
    "local": "performSegmentCpu（）"
  },
  {
    "origin": "virtual",
    "local": "事实上的"
  },
  {
    "origin": "cv::hfs::HfsSegment::performSegmentCpu",
    "local": "cv:：hfs:：hfs段：：performSegmentCpu"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "ifDraw",
    "local": "ifDraw公司"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.hfs_HfsSegment.performSegmentCpu(",
    "local": "cv.hfs\\u HfsSegment.performSegmentCpu("
  },
  {
    "origin": "src[, ifDraw]",
    "local": "src[，ifDraw]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "do segmentation with cpu This method is only implemented for reference. It is highly NOT recommanded to use it.",
    "local": "用cpu做分割此方法实现仅供参考。强烈建议不要使用它。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "performSegmentGpu()",
    "local": "performSegmentGpu（）"
  },
  {
    "origin": "virtual",
    "local": "事实上的"
  },
  {
    "origin": "cv::hfs::HfsSegment::performSegmentGpu",
    "local": "cv:：hfs:：hfs段：：performSegmentGpu"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "ifDraw",
    "local": "ifDraw公司"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.hfs_HfsSegment.performSegmentGpu(",
    "local": "cv.hfs\\ hfs段.performSegmentGpu("
  },
  {
    "origin": "src[, ifDraw]",
    "local": "src[，ifDraw]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "do segmentation gpu",
    "local": "执行gpu分割"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "the input image",
    "local": "输入图像"
  },
  {
    "origin": "ifDraw",
    "local": "ifDraw公司"
  },
  {
    "origin": "if draw the image in the returned",
    "local": "如果在返回的"
  },
  {
    "origin": ". if this parameter is false, then the content of the returned",
    "local": ". 如果此参数为false，则返回"
  },
  {
    "origin": "is a matrix of index, describing the region each pixel belongs to. And it's data type is CV_16U. If this parameter is true, then the returned",
    "local": "是一个索引矩阵，描述每个像素所属的区域。它的数据类型是CV\\ U 16U。如果此参数为true，则返回"
  },
  {
    "origin": "is a segmented picture, and color of each region is the average color of all pixels in that region. And it's data type is the same as the input image",
    "local": "是一个分段的图片，每个区域的颜色是该区域中所有像素的平均颜色。它的数据类型与输入图像相同"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "setMinRegionSizeI()",
    "local": "setMinRegionSizeI（）"
  },
  {
    "origin": "virtual void cv::hfs::HfsSegment::setMinRegionSizeI",
    "local": "虚拟void cv:：hfs:：HfsSegment:：setMinRegionSizeI"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "n",
    "local": "n"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.hfs_HfsSegment.setMinRegionSizeI(",
    "local": "简历：hfs\\u HfsSegment.setMinRegionSizeI("
  },
  {
    "origin": "n",
    "local": "n"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": ": set and get the parameter minRegionSizeI. This parameter is used in the second stage mentioned above. After the EGB segmentation, regions that have fewer pixels then this parameter will be merged into it's adjacent region.",
    "local": "：设置并获取参数minRegionSizeI。此参数用于上述第二阶段。在EGB分割之后，像素数少于该参数的区域将被合并到相邻区域中。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "setMinRegionSizeII()",
    "local": "setMinRegionSizeII（）"
  },
  {
    "origin": "virtual void cv::hfs::HfsSegment::setMinRegionSizeII",
    "local": "虚拟void cv:：hfs:：HfsSegment:：setMinRegionSizeII"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "n",
    "local": "n"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.hfs_HfsSegment.setMinRegionSizeII(",
    "local": "cv.hfs\\u HfsSegment.setMinRegionSizeII文件("
  },
  {
    "origin": "n",
    "local": "n"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": ": set and get the parameter minRegionSizeII. This parameter is used in the third stage mentioned above. It serves the same purpose as minRegionSizeI",
    "local": "：设置并获取参数minRegionSizeII。此参数用于上述第三阶段。它的作用与民区四子相同"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "setNumSlicIter()",
    "local": "setNumSlicIter（）"
  },
  {
    "origin": "virtual void cv::hfs::HfsSegment::setNumSlicIter",
    "local": "虚拟void cv:：hfs:：HfsSegment:：setNumSlicIter"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "n",
    "local": "n"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.hfs_HfsSegment.setNumSlicIter(",
    "local": "cv.hfs\\u HfsSegment.setNumSlicIter文件("
  },
  {
    "origin": "n",
    "local": "n"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": ": set and get the parameter numSlicIter. This parameter is used in the first stage. It describes how many iteration to perform when executing SLIC.",
    "local": "：设置并获取参数numSlicIter。此参数用于第一阶段。它描述了在执行SLIC时要执行多少次迭代。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "setSegEgbThresholdI()",
    "local": "设置EGBGBSThresholdi（）"
  },
  {
    "origin": "virtual void cv::hfs::HfsSegment::setSegEgbThresholdI",
    "local": "虚空cv：：hfs：：HfsSegment：：setSegEgbThresholdI"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "c",
    "local": "c"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.hfs_HfsSegment.setSegEgbThresholdI(",
    "local": "cv.hfs\\U hfs段.setSegEgbThresholdI("
  },
  {
    "origin": "c",
    "local": "c"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": ": set and get the parameter segEgbThresholdI. This parameter is used in the second stage mentioned above. It is a constant used to threshold weights of the edge when merging adjacent nodes when applying EGB algorithm. The segmentation result tends to have more regions remained if this value is large and vice versa.",
    "local": "：设置并获取参数segEgbThresholdI。此参数用于上述第二阶段。在应用EGB算法合并相邻节点时，它是一个用来确定边缘权值的常数。如果该值较大，分割结果往往会保留更多的区域，反之亦然。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "setSegEgbThresholdII()",
    "local": "设置EGBGBSThresholdII（）"
  },
  {
    "origin": "virtual void cv::hfs::HfsSegment::setSegEgbThresholdII",
    "local": "虚空cv：：hfs：：HfsSegment：：setSegEgbThresholdII"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "c",
    "local": "c"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.hfs_HfsSegment.setSegEgbThresholdII(",
    "local": "cv.hfs\\U hfs段.设置EGGBThresholdII("
  },
  {
    "origin": "c",
    "local": "c"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": ": set and get the parameter segEgbThresholdII. This parameter is used in the third stage mentioned above. It serves the same purpose as segEgbThresholdI. The segmentation result tends to have more regions remained if this value is large and vice versa.",
    "local": "：设置并获取参数segEgbThresholdII。此参数用于上述第三阶段。它的作用与segEgbThresholdI相同。如果该值较大，分割结果往往会保留更多的区域，反之亦然。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "setSlicSpixelSize()",
    "local": "setSilcSpixelSize（）"
  },
  {
    "origin": "virtual void cv::hfs::HfsSegment::setSlicSpixelSize",
    "local": "虚拟空cv:：hfs:：HfsSegment:：setSlicSpixelSize"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "n",
    "local": "n"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.hfs_HfsSegment.setSlicSpixelSize(",
    "local": "cv.hfs\\U hfs段.setSlicSpixelSize("
  },
  {
    "origin": "n",
    "local": "n"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": ": set and get the parameter slicSpixelSize. This parameter is used in the first stage mentioned above(the SLIC stage). It describes the size of each superpixel when initializing SLIC. Every superpixel approximately has \\(slicSpixelSize \\times slicSpixelSize\\) pixels in the beginning.",
    "local": "：设置并获取参数slicPixelSize。此参数用于上述第一阶段（SLIC阶段）。它描述了初始化SLIC时每个超级像素的大小。每个超级像素的开头大约有\\（slicPixelSize\\times slicPixelSize\\）个像素。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "setSpatialWeight()",
    "local": "设置空间权重（）"
  },
  {
    "origin": "virtual void cv::hfs::HfsSegment::setSpatialWeight",
    "local": "虚拟空cv:：hfs:：HfsSegment:：setSpatialWeight"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "w",
    "local": "w"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.hfs_HfsSegment.setSpatialWeight(",
    "local": "cv.hfs\\U hfs段设置空间重量("
  },
  {
    "origin": "w",
    "local": "w"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": ": set and get the parameter spatialWeight. This parameter is used in the first stage mentioned above(the SLIC stage). It describes how important is the role of position when calculating the distance between each pixel and it's center. The exact formula to calculate the distance is \\(colorDistance + spatialWeight \\times spatialDistance\\). The segmentation result tends to have more local consistency if this value is larger.",
    "local": "：设置并获取参数spatialWeight。此参数用于上述第一阶段（SLIC阶段）。它描述了位置在计算每个像素与其中心之间的距离时的重要性。计算距离的精确公式是\\（colorDistance+spatialWeight\\ times spatialDistance\\）。该值越大，分割结果的局部一致性越强。"
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": "此类的文档是从以下文件生成的："
  },
  {
    "origin": "opencv2/",
    "local": "打开CV2/"
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:47 for OpenCV by",
    "local": "于2021年4月2日星期五11:36:47为OpenCV生成"
  }
]