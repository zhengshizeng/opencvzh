[
  {
    "origin": "OpenCV: opencv2/calib3d.hpp File Reference",
    "local": "OpenCV:opencv2/calib3d.hpp文件参考"
  },
  {
    "origin": "Open Source Computer Vision",
    "local": "开源计算机视觉"
  },
  {
    "origin": "Classes",
    "local": "班级"
  },
  {
    "origin": "Namespaces",
    "local": "名称空间"
  },
  {
    "origin": "Typedefs",
    "local": "类型定义"
  },
  {
    "origin": "Enumerations",
    "local": "枚举"
  },
  {
    "origin": "Functions",
    "local": "功能"
  },
  {
    "origin": "calib3d.hpp File Reference",
    "local": "calib3d.hpp文件参考"
  },
  {
    "origin": "Classes",
    "local": "班级"
  },
  {
    "origin": "Class for computing stereo correspondence using the block matching algorithm, introduced and contributed to OpenCV by K. Konolige.",
    "local": "类中使用块匹配算法计算立体对应关系，介绍并贡献给OpenCV的K。科诺里奇。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "The base class for stereo correspondence algorithms.",
    "local": "立体对应算法的基类。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "The class implements the modified H. Hirschmuller algorithm",
    "local": "类实现了修改后的H。赫氏算法"
  },
  {
    "origin": "that differs from the original one as follows:",
    "local": "与原来的不同之处如下："
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Namespaces",
    "local": "名称空间"
  },
  {
    "origin": "\"black box\" representation of the file storage associated with a file on disk.",
    "local": "“黑盒”表示与磁盘上的文件相关联的文件存储。"
  },
  {
    "origin": "The methods in this namespace use a so-called fisheye camera model.",
    "local": "这个名称空间中的方法使用所谓的鱼眼相机模型。"
  },
  {
    "origin": "Typedefs",
    "local": "类型定义"
  },
  {
    "origin": "Enumerations",
    "local": "枚举"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 16,",
    "local": "= 16,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "type of the robust estimation algorithm",
    "local": "鲁棒估计算法的类型"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 16,",
    "local": "= 16,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 18,",
    "local": "= 18,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 0x00001,",
    "local": "=0x00001，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 0x00002,",
    "local": "=0x00002，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 0x00004,",
    "local": "=0x00004，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 0x00008,",
    "local": "=0x00008，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 0x00010,",
    "local": "=0x00010，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 0x00020,",
    "local": "=0x00020，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 0x00040,",
    "local": "=0x00040，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 0x00080,",
    "local": "=0x00080，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 0x00800,",
    "local": "=0x00800，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 0x01000,",
    "local": "=0x01000，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 0x02000,",
    "local": "=0x02000，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 0x04000,",
    "local": "=0x04000，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 0x08000,",
    "local": "=0x08000，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 0x10000,",
    "local": "=0x10000，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 0x40000,",
    "local": "=0x40000，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 0x80000,",
    "local": "=0x80000，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 0x100000,",
    "local": "=0x100000，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 0x200000,",
    "local": "=0x200000，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 0x00100,",
    "local": "=0x00100，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 0x00200,",
    "local": "=0x00200，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 0x00400,",
    "local": "=0x00400，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= (1 &lt;&lt; 17),",
    "local": "=1&lt；>；书信电报；17),"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= (1 &lt;&lt; 22)",
    "local": "=1&lt；>；书信电报；22)"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "the algorithm for finding fundamental matrix",
    "local": "求基本矩阵的算法"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 1 &lt;&lt; 0,",
    "local": "=1&lt；&lt；书信电报；0,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 1 &lt;&lt; 1,",
    "local": "=1&lt；&lt；书信电报；1,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 1 &lt;&lt; 2,",
    "local": "=1&lt；&lt；书信电报；2,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 1 &lt;&lt; 3,",
    "local": "=1&lt；&lt；书信电报；三，"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 1 &lt;&lt; 4,",
    "local": "=1&lt；&lt；书信电报；4,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 1 &lt;&lt; 5,",
    "local": "=1&lt；&lt；书信电报；5,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 1 &lt;&lt; 6,",
    "local": "=1&lt；&lt；书信电报；6,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 1 &lt;&lt; 7,",
    "local": "=1&lt；&lt；书信电报；7,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 1 &lt;&lt; 8,",
    "local": "=1&lt；&lt；书信电报；8,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 1 &lt;&lt; 9,",
    "local": "=1&lt；&lt；书信电报；9,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 1 &lt;&lt; 10,",
    "local": "=1&lt；&lt；书信电报；10,"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 1 &lt;&lt; 11",
    "local": "=1&lt；&lt；书信电报；11"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "mode",
    "local": "模式"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Functions",
    "local": "功能"
  },
  {
    "origin": "(InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, const Size &amp;image_size, InputOutputArray K, InputOutputArray D, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 100, DBL_EPSILON))",
    "local": "（InputArrayOfArrays对象点、InputArrayOfArrays图像点、常量大小和；图像大小，InputOutputArray K，InputOutputArray D，OutputArrayOfArrays rvecs，OutputArrayOfArrays tvecs，int flags=0，TermCriteria=TermCriteria（TermCriteria:：COUNT+TermCriteria:：EPS，100，DBL\\u EPSILON））"
  },
  {
    "origin": "Performs camera calibaration.",
    "local": "执行相机校准。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray stdDeviationsIntrinsics, OutputArray stdDeviationsExtrinsics, OutputArray perViewErrors, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))",
    "local": "（InputArrayOfArrays objectPoints，InputArrayOfArrays imagePoints，Size imageSize，InputOutputArray cameraMatrix，InputOutputArray distcoefs，OutputArrayOfArrays rvecs，OutputArrayOfArrays tvecs，OutputArray stdDeviationsIntrinsics，OutputArray stddeviationsTrinsics，OutputArray perViewErrors，int flags=0，TermCriteria=TermCriteria（TermCriteria:：COUNT+TermCriteria:：EPS，30，DBL\\u EPSILON））"
  },
  {
    "origin": "Finds the camera intrinsic and extrinsic parameters from several views of a calibration pattern.",
    "local": "从校准模式的多个视图中查找相机的内在和外在参数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))",
    "local": "（InputArrayOfArrays objectPoints，InputArrayOfArrays imagePoints，Size imageSize，InputOutputArray cameraMatrix，InputOutputArray distcoefs，OutputArrayOfArrays rvecs，OutputArrayOfArrays tvecs，int flags=0，TermCriteria criteria=TermCriteria（TermCriteria:：COUNT+TermCriteria:：EPS，30，DBL\\u EPSILON））"
  },
  {
    "origin": "(InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, int iFixedPoint, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray newObjPoints, OutputArray stdDeviationsIntrinsics, OutputArray stdDeviationsExtrinsics, OutputArray stdDeviationsObjPoints, OutputArray perViewErrors, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))",
    "local": "（InputArrayOfArrays objectPoints、InputArrayOfArrays imagePoints、Size imageSize、int ifexedpoint、InputOutputArray cameraMatrix、InputOutputArray distcoefs、OutputArrayOfArrays rvecs、OutputArrayOfArrays tvecs、OutputArray newObjPoints、OutputArray stdDeviationsIntrinsics、OutputArray stdDeviationsTrinsics、OutputArray stdDeviationsObjPoints、，OutputArray perViewErrors，int flags=0，TermCriteria=TermCriteria（TermCriteria:：COUNT+TermCriteria:：EPS，30，DBL\\u EPSILON））"
  },
  {
    "origin": "Finds the camera intrinsic and extrinsic parameters from several views of a calibration pattern.",
    "local": "从校准模式的多个视图中查找相机的内在和外在参数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, int iFixedPoint, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray newObjPoints, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))",
    "local": "（InputArrayOfArrays objectPoints、InputArrayOfArrays imagePoints、Size imageSize、int ifexedpoint、InputOutputArray cameraMatrix、InputOutputArray distcoefs、OutputArrayOfArrays rvecs、OutputArrayOfArrays tvecs、OutputArray newObjPoints、int flags=0、TermCriteria criteria=TermCriteria（TermCriteria:：COUNT+TermCriteria:：EPS、30、DBL\\u EPSILON））"
  },
  {
    "origin": "(InputArrayOfArrays R_gripper2base, InputArrayOfArrays t_gripper2base, InputArrayOfArrays R_target2cam, InputArrayOfArrays t_target2cam, OutputArray R_cam2gripper, OutputArray t_cam2gripper, HandEyeCalibrationMethod method=CALIB_HAND_EYE_TSAI)",
    "local": "（InputArrayOfArrays RïU gripper2base、InputArrayOfArrays tïU gripper2base、InputArrayOfArrays RïU target2cam、InputArrayOfArrays tïU target2cam、OutputArray Rïcam2gripper、OutputArray tïcam2gripper、HandeyeCalificationMethod=CALIBïU HANDïEYE TSAI）"
  },
  {
    "origin": "Computes Hand-Eye calibration: \\(_{}^{g}\\textrm{T}_c\\).",
    "local": "计算手眼校准：\\（\\u{}^{g}\\textrm{T}\\u c\\）。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArrayOfArrays R_world2cam, InputArrayOfArrays t_world2cam, InputArrayOfArrays R_base2gripper, InputArrayOfArrays t_base2gripper, OutputArray R_base2world, OutputArray t_base2world, OutputArray R_gripper2cam, OutputArray t_gripper2cam, RobotWorldHandEyeCalibrationMethod method=CALIB_ROBOT_WORLD_HAND_EYE_SHAH)",
    "local": "（InputArrayOfArrays R\\u world2cam，InputArrayOfArrays t\\u world2cam，InputArrayOfArrays R\\u base2gripper，InputArrayOfArrays t\\u base2gripper，OutputArray R\\u base2world，OutputArray t\\u base2world，OutputArray R\\u gripper2cam，OutputArray t\\u gripper2cam，RobotworldHandeyCalibrationMethod=CALIB\\u ROBOT\\u WORLD\\u HAND\\u EYE\\u SHAH）"
  },
  {
    "origin": "Computes Robot-World/Hand-Eye calibration: \\(_{}^{w}\\textrm{T}_b\\) and \\(_{}^{c}\\textrm{T}_g\\).",
    "local": "计算机器人世界/手眼校准：\\（{}^{w}\\textrm{T}U b\\）和\\（{}^{c}\\textrm{T}U g\\）。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray cameraMatrix, Size imageSize, double apertureWidth, double apertureHeight, double &amp;fovx, double &amp;fovy, double &amp;focalLength, Point2d &amp;principalPoint, double &amp;aspectRatio)",
    "local": "（InputArray cameraMatrix，Size imageSize，双光圈宽度，双光圈高度，双&amp；fovx，双；fovy、double和；焦距，点2D&amp；主点、双点和；aspectRatio公司）"
  },
  {
    "origin": "Computes useful camera characteristics from the camera intrinsic matrix.",
    "local": "从相机内在矩阵计算有用的相机特征。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray img, Size size)",
    "local": "（输入IMG，大小）"
  },
  {
    "origin": "(InputArray rvec1, InputArray tvec1, InputArray rvec2, InputArray tvec2, OutputArray rvec3, OutputArray tvec3, OutputArray dr3dr1=noArray(), OutputArray dr3dt1=noArray(), OutputArray dr3dr2=noArray(), OutputArray dr3dt2=noArray(), OutputArray dt3dr1=noArray(), OutputArray dt3dt1=noArray(), OutputArray dt3dr2=noArray(), OutputArray dt3dt2=noArray())",
    "local": "OutputArray dt3dr2=noArray（），OutputArray dr3dt2=noArray（），OutputArray dt3dr1=noArray（），OutputArray dt3dr1=noArray（），OutputArray dt3dt1=noArray（），OutputArray dt3dr2=noArray（），OutputArray dt3dt2=noArray（））"
  },
  {
    "origin": "Combines two rotation-and-shift transformations.",
    "local": "组合两个旋转和平移变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray points, int whichImage, InputArray F, OutputArray lines)",
    "local": "（输入数组点、整数whichImage、输入数组F、输出数组Arlines）"
  },
  {
    "origin": "For points in an image of a stereo pair, computes the corresponding epilines in the other image.",
    "local": "对于立体对图像中的点，计算另一个图像中相应的轮廓线。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst)",
    "local": "（输入阵列src，输出阵列dst）"
  },
  {
    "origin": "Converts points from homogeneous to Euclidean space.",
    "local": "将点从齐次空间转换为欧氏空间。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst)",
    "local": "（输入阵列src，输出阵列dst）"
  },
  {
    "origin": "Converts points to/from homogeneous coordinates.",
    "local": "将点转换为齐次坐标。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst)",
    "local": "（输入阵列src，输出阵列dst）"
  },
  {
    "origin": "Converts points from Euclidean to homogeneous space.",
    "local": "将点从欧氏空间转换为齐次空间。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray F, InputArray points1, InputArray points2, OutputArray newPoints1, OutputArray newPoints2)",
    "local": "（输入阵列F、输入阵列点1、输入阵列点2、输出阵列新点1、输出阵列新点2）"
  },
  {
    "origin": "Refines coordinates of corresponding points.",
    "local": "细化相应点的坐标。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray E, OutputArray R1, OutputArray R2, OutputArray t)",
    "local": "（输入阵列E、输出阵列R1、输出阵列R2、输出阵列t）"
  },
  {
    "origin": "Decompose an essential matrix to possible rotations and translation.",
    "local": "将基本矩阵分解为可能的旋转和平移。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray H, InputArray K, OutputArrayOfArrays rotations, OutputArrayOfArrays translations, OutputArrayOfArrays normals)",
    "local": "（输入阵列H、输入阵列K、输出阵列Y射线旋转、输出阵列Y射线平移、输出阵列Y射线法线）"
  },
  {
    "origin": "Decompose a homography matrix to rotation(s), translation(s) and plane normal(s).",
    "local": "将单应矩阵分解为旋转、平移和平面法线。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray projMatrix, OutputArray cameraMatrix, OutputArray rotMatrix, OutputArray transVect, OutputArray rotMatrixX=noArray(), OutputArray rotMatrixY=noArray(), OutputArray rotMatrixZ=noArray(), OutputArray eulerAngles=noArray())",
    "local": "（InputArray projMatrix，OutputArray cameraMatrix，OutputArray rotMatrix，OutputArray transVect，OutputArray rotMatrixX=noArray（），OutputArray rotMatrixY=noArray（），OutputArray rotMatrixZ=noArray（），OutputArray eulerAngles=noArray（））"
  },
  {
    "origin": "Decomposes a projection matrix into a rotation matrix and a camera intrinsic matrix.",
    "local": "将投影矩阵分解为旋转矩阵和相机内禀矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray undistorted, OutputArray distorted, InputArray K, InputArray D, double alpha=0)",
    "local": "（InputArray无失真，InputArray失真，InputArray K，InputArray D，Double Alpha=0）"
  },
  {
    "origin": "Distorts 2D points using fisheye model.",
    "local": "使用鱼眼模型扭曲2D点。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputOutputArray image, Size patternSize, InputArray corners, bool patternWasFound)",
    "local": "（InputOutputArray图像，大小patternSize，InputArray角点，bool patternWasFound）"
  },
  {
    "origin": "Renders the detected chessboard corners.",
    "local": "渲染检测到的棋盘转角。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputOutputArray image, InputArray cameraMatrix, InputArray distCoeffs, InputArray rvec, InputArray tvec, float length, int thickness=3)",
    "local": "（InputOutputArray图像、InputArray摄影机矩阵、InputArray Distceffs、InputArray rvec、InputArray tvec、float length、int thickness=3）"
  },
  {
    "origin": "Draw axes of the world/object coordinate system from pose estimation.",
    "local": "从姿态估计绘制世界/对象坐标系的轴。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray from, InputArray to, OutputArray inliers=noArray(), int method=RANSAC, double ransacReprojThreshold=3, size_t maxIters=2000, double confidence=0.99, size_t refineIters=10)",
    "local": "（InputArray from，InputArray to，OutputArray inliers=noArray（），int method=RANSAC，double ransacReprojThreshold=3，size\\t maxIters=2000，double confidence=0.99，size\\t refineters=10）"
  },
  {
    "origin": "Computes an optimal affine transformation between two 2D point sets.",
    "local": "计算两个二维点集之间的最佳仿射变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray pts1, InputArray pts2, OutputArray inliers, const UsacParams &amp;params)",
    "local": "（InputArray pts1、InputArray pts2、OutputArray inliers、const UsacParams&amp；参数）"
  },
  {
    "origin": "(InputArray src, InputArray dst, OutputArray out, OutputArray inliers, double ransacThreshold=3, double confidence=0.99)",
    "local": "（InputArray src、InputArray dst、OutputArray out、OutputArray inliers、double ransacThreshold=3、double confidence=0.99）"
  },
  {
    "origin": "Computes an optimal affine transformation between two 3D point sets.",
    "local": "计算两个三维点集之间的最佳仿射变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray from, InputArray to, OutputArray inliers=noArray(), int method=RANSAC, double ransacReprojThreshold=3, size_t maxIters=2000, double confidence=0.99, size_t refineIters=10)",
    "local": "（InputArray from，InputArray to，OutputArray inliers=noArray（），int method=RANSAC，double ransacReprojThreshold=3，size\\t maxIters=2000，double confidence=0.99，size\\t refineters=10）"
  },
  {
    "origin": "Computes an optimal limited affine transformation with 4 degrees of freedom between two 2D point sets.",
    "local": "计算两个二维点集之间具有4个自由度的最优有限仿射变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray image, Size patternSize, InputArray corners, float rise_distance=0.8F, bool vertical=false, OutputArray sharpness=noArray())",
    "local": "（InputArray image，Size patternSize，InputArray corners，float rise\\u distance=0.8F，bool vertical=false，OutputArray sharpness=noArray（））"
  },
  {
    "origin": "Estimates the sharpness of a detected chessboard.",
    "local": "估计检测到的棋盘的锐度。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray K, InputArray D, const Size &amp;image_size, InputArray R, OutputArray P, double balance=0.0, const Size &amp;new_size=Size(), double fov_scale=1.0)",
    "local": "（InputArray K、InputArray D、const Size和；图像大小，输入数组R，输出数组P，双平衡=0.0，常量大小&amp；新尺寸=尺寸（），双视场比例=1.0）"
  },
  {
    "origin": "Estimates new camera intrinsic matrix for undistortion or rectification.",
    "local": "估计新的摄像机内禀矩阵的不失真或校正。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, InputArray dst, OutputArray out, OutputArray inliers, double ransacThreshold=3, double confidence=0.99)",
    "local": "（InputArray src、InputArray dst、OutputArray out、OutputArray inliers、double ransacThreshold=3、double confidence=0.99）"
  },
  {
    "origin": "Computes an optimal translation between two 3D point sets.",
    "local": "计算两个三维点集之间的最佳平移。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArrayOfArrays rotations, InputArrayOfArrays normals, InputArray beforePoints, InputArray afterPoints, OutputArray possibleSolutions, InputArray pointsMask=noArray())",
    "local": "（InputArrayOfArrays旋转，InputArrayOfArrays法线，InputArray前点，InputArray后点，OutputArray可能解决方案，InputArray点掩码=Arnoray（））"
  },
  {
    "origin": "Filters homography decompositions based on additional information.",
    "local": "基于附加信息过滤单应分解。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputOutputArray img, double newVal, int maxSpeckleSize, double maxDiff, InputOutputArray buf=noArray())",
    "local": "（InputOutputArray img，double newVal，int maxspecksize，double maxDiff，InputOutputArray buf=noArray（））"
  },
  {
    "origin": "Filters off small noise blobs (speckles) in the disparity map.",
    "local": "滤除视差图中的小噪声点（斑点）。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray img, InputOutputArray corners, Size region_size)",
    "local": "（InputArray img，InputOutputArray corners，Size region\\u Size）"
  },
  {
    "origin": "finds subpixel-accurate positions of the chessboard corners",
    "local": "找到棋盘转角的亚像素精确位置"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray image, Size patternSize, OutputArray corners, int flags=CALIB_CB_ADAPTIVE_THRESH+CALIB_CB_NORMALIZE_IMAGE)",
    "local": "（InputArray image，Size patternSize，OutputArray corners，int flags=CALIB\\u CB\\u ADAPTIVE\\u THRESH+CALIB\\u CB\\u NORMALIZE\\u image）"
  },
  {
    "origin": "Finds the positions of internal corners of the chessboard.",
    "local": "查找棋盘内角的位置。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray image, Size patternSize, OutputArray corners, int flags, OutputArray meta)",
    "local": "（InputArray图像、Size patternSize、OutputArray角点、int标志、OutputArray meta）"
  },
  {
    "origin": "Finds the positions of internal corners of the chessboard using a sector based approach.",
    "local": "使用基于扇区的方法查找棋盘内角的位置。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray image, Size patternSize, OutputArray corners, int flags=0)",
    "local": "（InputArray image，Size patternSize，OutputArray corners，int flags=0）"
  },
  {
    "origin": "(InputArray image, Size patternSize, OutputArray centers, int flags, const Ptr&lt; FeatureDetector &gt; &amp;blobDetector, const CirclesGridFinderParameters &amp;parameters)",
    "local": "（InputArray image、Size patternSize、OutputArray centers、int flags、const Ptr&lt；功能检测器&gt&amp；blobDetector、const CirclesGridFinderParameters和；（参数）"
  },
  {
    "origin": "Finds centers in the grid of circles.",
    "local": "在圆的网格中查找中心。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray image, Size patternSize, OutputArray centers, int flags=CALIB_CB_SYMMETRIC_GRID, const Ptr&lt; FeatureDetector &gt; &amp;blobDetector=SimpleBlobDetector::create())",
    "local": "（InputArray image，Size patternSize，OutputArray centers，int flags=CALIB\\u CB\\u SYMMETRIC\\u GRID，const Ptr&lt；功能检测器&gt&amp；blobDetector=SimpleBlobDetector:：create（））"
  },
  {
    "origin": "(InputArray points1, InputArray points2, InputArray cameraMatrix, int method=RANSAC, double prob=0.999, double threshold=1.0, OutputArray mask=noArray())",
    "local": "（InputArray点1，InputArray点2，InputArray cameraMatrix，int method=RANSAC，double prob=0.999，double threshold=1.0，OutputArray mask=noArray（））"
  },
  {
    "origin": "Calculates an essential matrix from the corresponding points in two images.",
    "local": "从两幅图像中的对应点计算基本矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray points1, InputArray points2, double focal=1.0, Point2d pp=Point2d(0, 0), int method=RANSAC, double prob=0.999, double threshold=1.0, OutputArray mask=noArray())",
    "local": "（InputArray点1，InputArray点2，双焦点=1.0，Point2d pp=Point2d（0，0），int method=RANSAC，双prob=0.999，双阈值=1.0，OutputArray mask=noArray（））"
  },
  {
    "origin": "(InputArray points1, InputArray points2, InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, int method=RANSAC, double prob=0.999, double threshold=1.0, OutputArray mask=noArray())",
    "local": "（InputArray points1，InputArray points2，InputArray cameraMatrix1，InputArray distCoeffs1，InputArray cameraMatrix2，InputArray distCoeffs2，int method=RANSAC，double prob=0.999，double threshold=1.0，OutputArray mask=noArray（））"
  },
  {
    "origin": "Calculates an essential matrix from the corresponding points in two images from potentially two different cameras.",
    "local": "从可能来自两个不同相机的两幅图像中的对应点计算基本矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray points1, InputArray points2, InputArray cameraMatrix1, InputArray cameraMatrix2, InputArray dist_coeff1, InputArray dist_coeff2, OutputArray mask, const UsacParams &amp;params)",
    "local": "（InputArray点1、InputArray点2、InputArray cameraMatrix1、InputArray cameraMatrix2、InputArray dist\\u coeff1、InputArray dist\\u coeff2、OutputArray mask、const UsacParams&amp；参数）"
  },
  {
    "origin": "(InputArray points1, InputArray points2, int method, double ransacReprojThreshold, double confidence, int maxIters, OutputArray mask=noArray())",
    "local": "（InputArray points1，InputArray points2，int method，double ransacreProjectThreshold，double confidence，int maxIters，OutputArray mask=noArray（））"
  },
  {
    "origin": "Calculates a fundamental matrix from the corresponding points in two images.",
    "local": "从两幅图像中的对应点计算基本矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray points1, InputArray points2, int method=FM_RANSAC, double ransacReprojThreshold=3., double confidence=0.99, OutputArray mask=noArray())",
    "local": "（InputArray点1，InputArray点2，int method=FM\\u RANSAC，double ransacreprojectthreshold=3，double confidence=0.99，OutputArray mask=noArray（））"
  },
  {
    "origin": "(InputArray points1, InputArray points2, OutputArray mask, int method=FM_RANSAC, double ransacReprojThreshold=3., double confidence=0.99)",
    "local": "（输入数组点1，输入数组点2，输出数组掩码，int method=FM\\u RANSAC，double ransacReprojThreshold=3，double confidence=0.99）"
  },
  {
    "origin": "(InputArray points1, InputArray points2, OutputArray mask, const UsacParams &amp;params)",
    "local": "（输入阵列点1、输入阵列点2、输出阵列掩码、常量UsacParams&amp；参数）"
  },
  {
    "origin": "(InputArray srcPoints, InputArray dstPoints, int method=0, double ransacReprojThreshold=3, OutputArray mask=noArray(), const int maxIters=2000, const double confidence=0.995)",
    "local": "（InputArray srcPoints，InputArray dstPoints，int method=0，double ransacReprojThreshold=3，OutputArray mask=noArray（），const int maxIters=2000，const double confidence=0.995）"
  },
  {
    "origin": "Finds a perspective transformation between two planes.",
    "local": "在两个平面之间查找透视变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray srcPoints, InputArray dstPoints, OutputArray mask, int method=0, double ransacReprojThreshold=3)",
    "local": "（InputArray srcPoints，InputArray dstPoints，OutputArray mask，int method=0，double ransacReprojThreshold=3）"
  },
  {
    "origin": "(InputArray srcPoints, InputArray dstPoints, OutputArray mask, const UsacParams &amp;params)",
    "local": "（InputArray srcPoints、InputArray dstPoints、OutputArray mask、const UsacParams&amp；参数）"
  },
  {
    "origin": "(InputArray cameraMatrix, Size imgsize=Size(), bool centerPrincipalPoint=false)",
    "local": "（InputArray cameraMatrix，Size imgsize=Size（），bool centerprisicalpoint=false）"
  },
  {
    "origin": "Returns the default new camera matrix.",
    "local": "返回默认的新摄影机矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray cameraMatrix, InputArray distCoeffs, Size imageSize, double alpha, Size newImgSize=Size(), Rect *validPixROI=0, bool centerPrincipalPoint=false)",
    "local": "（InputArray cameraMatrix，InputArray distcoefs，Size imageSize，double alpha，Size newImgSize=Size（），Rect*validPixROI=0，bool centerPrincipalPoint=false）"
  },
  {
    "origin": "Returns the new camera intrinsic matrix based on the free scaling parameter.",
    "local": "基于自由缩放参数返回新的摄影机内在矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(Rect roi1, Rect roi2, int minDisparity, int numberOfDisparities, int blockSize)",
    "local": "（Rect roi1，Rect roi2，int minDisparity，int numberofdisparencies，int blockSize）"
  },
  {
    "origin": "computes valid disparity ROI from the valid ROIs of the rectified images (that are returned by",
    "local": "从校正图像的有效ROI计算有效视差ROI（由"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, double aspectRatio=1.0)",
    "local": "（InputArray对象点，InputArray图像点，Size图像大小，Double AspectRatio=1.0）"
  },
  {
    "origin": "Finds an initial camera intrinsic matrix from 3D-2D point correspondences.",
    "local": "从3D-2D点对应中查找初始相机内在矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray cameraMatrix, InputArray distCoeffs, InputArray R, InputArray newCameraMatrix, Size size, int m1type, OutputArray map1, OutputArray map2)",
    "local": "（InputArray cameraMatrix、InputArray distcoefs、InputArray R、InputArray newCameraMatrix、Size Size、int m1 type、OutputArray map1、OutputArray map2）"
  },
  {
    "origin": "Computes the undistortion and rectification transformation map.",
    "local": "计算不失真和校正变换图。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray K, InputArray D, InputArray R, InputArray P, const",
    "local": "输入数组K、输入数组D、输入数组R、输入数组P、常量"
  },
  {
    "origin": "&amp;size, int m1type, OutputArray map1, OutputArray map2)",
    "local": "&amp；大小，int m1类型，OutputArray map1，OutputArray map2）"
  },
  {
    "origin": "Computes undistortion and rectification maps for image transform by",
    "local": "通过计算图像变换的不失真和校正贴图"
  },
  {
    "origin": ". If D is empty zero distortion is used, if R or P is empty identity matrixes are used.",
    "local": ". 如果D为空，则使用零失真，如果R或P为空，则使用单位矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray cameraMatrix, InputArray distCoeffs, Size imageSize, int destImageWidth, int m1type, OutputArray map1, OutputArray map2, enum UndistortTypes projType=PROJ_SPHERICAL_EQRECT, double alpha=0)",
    "local": "（InputArray cameraMatrix，InputArray distcoefs，Size imageSize，int destImageWidth，int m1type，OutputArray map1，OutputArray map2，enum undorttypes projType=PROJ\\u sphere\\u EQRECT，double alpha=0）"
  },
  {
    "origin": "initializes maps for",
    "local": "初始化的映射"
  },
  {
    "origin": "for wide-angle",
    "local": "对于广角"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray cameraMatrix, InputArray distCoeffs, Size imageSize, int destImageWidth, int m1type, OutputArray map1, OutputArray map2, int projType, double alpha=0)",
    "local": "（InputArray cameraMatrix，InputArray distcoefs，Size imageSize，int destImageWidth，int m1type，OutputArray map1，OutputArray map2，int projType，double alpha=0）"
  },
  {
    "origin": "(InputArray A, InputArray B, OutputArray dABdA, OutputArray dABdB)",
    "local": "（输入阵列A、输入阵列B、输出阵列dABdA、输出阵列dABdB）"
  },
  {
    "origin": "Computes partial derivatives of the matrix product for each multiplied matrix.",
    "local": "计算每个相乘矩阵的矩阵积的偏导数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray objectPoints, InputArray rvec, InputArray tvec, InputArray cameraMatrix, InputArray distCoeffs, OutputArray imagePoints, OutputArray jacobian=noArray(), double aspectRatio=0)",
    "local": "（InputArray objectPoints、InputArray rvec、InputArray tvec、InputArray cameraMatrix、InputArray distcoefs、OutputArray imagePoints、OutputArray jacobian=noArray（）、double aspectRatio=0）"
  },
  {
    "origin": "Projects 3D points to an image plane.",
    "local": "将三维点投影到图像平面。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray objectPoints, OutputArray imagePoints, const Affine3d &amp;affine, InputArray K, InputArray D, double alpha=0, OutputArray jacobian=noArray())",
    "local": "（InputArray objectPoints、OutputArray imagePoints、const Affine3d&amp；仿射，输入数组K，输入数组D，double alpha=0，输出数组jacobian=noArray（））"
  },
  {
    "origin": "Projects points using fisheye model.",
    "local": "使用鱼眼模型投影点。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray objectPoints, OutputArray imagePoints, InputArray rvec, InputArray tvec, InputArray K, InputArray D, double alpha=0, OutputArray jacobian=noArray())",
    "local": "（InputArray objectPoints、OutputArray imagePoints、InputArray rvec、InputArray tvec、InputArray K、InputArray D、double alpha=0、OutputArray jacobian=noArray（））"
  },
  {
    "origin": "(InputArray E, InputArray points1, InputArray points2, InputArray cameraMatrix, OutputArray R, OutputArray t, InputOutputArray mask=noArray())",
    "local": "InputArray E、InputArray points1、InputArray points2、InputArray cameraMatrix、OutputArray R、OutputArray t、InputOutputArray mask=noArray（））"
  },
  {
    "origin": "Recovers the relative camera rotation and the translation from an estimated essential matrix and the corresponding points in two images, using cheirality check. Returns the number of inliers that pass the check.",
    "local": "利用cheirality检查，从估计的基本矩阵和两幅图像中的对应点恢复摄像机的相对旋转和平移。返回通过检查的内联线数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray E, InputArray points1, InputArray points2, OutputArray R, OutputArray t, double focal=1.0, Point2d pp=Point2d(0, 0), InputOutputArray mask=noArray())",
    "local": "（输入阵列E，输入阵列点S1，输入阵列点S2，输出阵列R，输出阵列t，双焦点=1.0，点2D pp=点2D（0，0），输入阵列掩码=noArray（））"
  },
  {
    "origin": "(InputArray E, InputArray points1, InputArray points2, InputArray cameraMatrix, OutputArray R, OutputArray t, double distanceThresh, InputOutputArray mask=noArray(), OutputArray triangulatedPoints=noArray())",
    "local": "（InputArray E、InputArray points1、InputArray points2、InputArray cameraMatrix、OutputArray R、OutputArray t、double distanceThresh、InputOutputArray mask=noArray（）、OutputArray triangulatedPoints=noArray（））"
  },
  {
    "origin": "(InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, InputArray cameraMatrix3, InputArray distCoeffs3, InputArrayOfArrays imgpt1, InputArrayOfArrays imgpt3, Size imageSize, InputArray R12, InputArray T12, InputArray R13, InputArray T13, OutputArray R1, OutputArray R2, OutputArray R3, OutputArray P1, OutputArray P2, OutputArray P3, OutputArray Q, double alpha, Size newImgSize, Rect *roi1, Rect *roi2, int flags)",
    "local": "（InputArray cameraMatrix1，InputArray distCoeffs1，InputArray cameraMatrix2，InputArray distCoeffs2，InputArray cameraMatrix3，InputArray distCoeffs3，InputArray imgpt1，InputArray imgpt3，Size imageSize，InputArray R12，InputArray T12，InputArray R13，InputArray T13，OutputArray R1，OutputArray R2，OutputArray R3，OutputArray P1，OutputArray P2、OutputArray P3、OutputArray Q、double alpha、Size newImgSize、Rect*roi1、Rect*roi2、int标志）"
  },
  {
    "origin": "computes the rectification transformations for 3-head camera, where all the heads are on the same line.",
    "local": "计算三头相机的校正变换，其中所有头部在同一条线上。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray disparity, OutputArray _3dImage, InputArray Q, bool handleMissingValues=false, int ddepth=-1)",
    "local": "（InputArray视差，OutputArray=3dImage，InputArray Q，bool handleMissingValues=false，int ddepth=-1）"
  },
  {
    "origin": "Reprojects a disparity image to 3D space.",
    "local": "将视差图像重新投影到三维空间。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, OutputArray jacobian=noArray())",
    "local": "（InputArray src，OutputArray dst，OutputArray jacobian=noArray（））"
  },
  {
    "origin": "Converts a rotation matrix to a rotation vector or vice versa.",
    "local": "将旋转矩阵转换为旋转向量，反之亦然。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Vec3d&#160;",
    "local": "向量3D&#160；"
  },
  {
    "origin": "(InputArray src, OutputArray mtxR, OutputArray mtxQ, OutputArray Qx=noArray(), OutputArray Qy=noArray(), OutputArray Qz=noArray())",
    "local": "（输入阵列Arsrc，输出阵列mtxR，输出阵列ArmtxQ，输出阵列Qx=noArray（），输出阵列Qy=noArray（），输出阵列Qz=noArray（））"
  },
  {
    "origin": "Computes an RQ decomposition of 3x3 matrices.",
    "local": "计算3x3矩阵的RQ分解。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray pt1, InputArray pt2, InputArray F)",
    "local": "输入阵列pt1、输入阵列pt2、输入阵列F）"
  },
  {
    "origin": "Calculates the Sampson Distance between two points.",
    "local": "计算两点之间的桑普森距离。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, int flags)",
    "local": "（InputArray objectPoints、InputArray imagePoints、Inputray ArcameraMatrix、InputArray distcoefs、OutputArrayOfrays Arrvecs、OutputArrayOfrays Artvecs、int flags）"
  },
  {
    "origin": "Finds an object pose from 3 3D-2D point correspondences.",
    "local": "从3个3D-2D点对应中查找对象姿势。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArray rvec, OutputArray tvec, bool useExtrinsicGuess=false, int flags=SOLVEPNP_ITERATIVE)",
    "local": "（InputArray objectPoints、InputArray imagePoints、InputArray cameraMatrix、InputArray distcoefs、OutputArray rvec、OutputArray tvec、bool useExtrinsicGuess=false、int flags=SOLVEPNP\\u）"
  },
  {
    "origin": "Finds an object pose from 3D-2D point correspondences. This function returns the rotation and the translation vectors that transform a 3D point expressed in the object coordinate frame to the camera coordinate frame, using different methods:",
    "local": "从3D-2D点对应中查找对象姿势。此函数使用不同的方法返回将对象坐标帧中表示的三维点转换为摄影机坐标帧的旋转和平移向量："
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, bool useExtrinsicGuess=false, SolvePnPMethod flags=SOLVEPNP_ITERATIVE, InputArray rvec=noArray(), InputArray tvec=noArray(), OutputArray reprojectionError=noArray())",
    "local": "（InputArray objectPoints、InputArray imagePoints、InputArray cameraMatrix、InputArray distcoefs、outputarayofarrays rvecs、outputarayofarrays tvecs、bool useExtrinsicGuess=false、SolvePnPMethod flags=SOLVEPNP\\u ITERATIVE、InputArray rvec=noArray（）、InputArray tvec=noArray（）、OutputArray reprojectonerror=noArray（））"
  },
  {
    "origin": "Finds an object pose from 3D-2D point correspondences. This function returns a list of all the possible solutions (a solution is a &lt;rotation vector, translation vector&gt; couple), depending on the number of input points and the chosen method:",
    "local": "从3D-2D点对应中查找对象姿势。此函数返回所有可能解决方案的列表（解决方案是&lt；旋转向量、平移向量&gt；耦合），取决于输入点的数量和选择的方法："
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArray rvec, OutputArray tvec, bool useExtrinsicGuess=false, int iterationsCount=100, float reprojectionError=8.0, double confidence=0.99, OutputArray inliers=noArray(), int flags=SOLVEPNP_ITERATIVE)",
    "local": "（InputArray objectPoints、InputArray imagePoints、InputArray cameraMatrix、InputArray distcoefs、OutputArray rvec、OutputArray tvec、bool useExtrinsicGuess=false、int iterationscont=100、float reprojectionError=8.0、double confidence=0.99、OutputArray inliers=noArray（）、int flags=SOLVEPNP\\u ITERATIVE）"
  },
  {
    "origin": "Finds an object pose from 3D-2D point correspondences using the RANSAC scheme.",
    "local": "使用RANSAC方案从3D-2D点对应中查找对象姿势。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray objectPoints, InputArray imagePoints, InputOutputArray cameraMatrix, InputArray distCoeffs, OutputArray rvec, OutputArray tvec, OutputArray inliers, const UsacParams &amp;params=UsacParams())",
    "local": "（InputArray objectPoints、InputArray imagePoints、inpututputarray camerax、InputArray distcoefs、Outputray Arrvec、OutputArray tvec、OutputArray inliers、const UsacParams&amp；params=UsacParams（））"
  },
  {
    "origin": "(InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, InputOutputArray rvec, InputOutputArray tvec, TermCriteria criteria=TermCriteria(TermCriteria::EPS+TermCriteria::COUNT, 20, FLT_EPSILON))",
    "local": "（InputArray objectPoints、InputArray imagePoints、InputArray cameraMatrix、InputArray distcoefs、inpututputarray rvec、inpututputarray tvec、termscriteria criteria=termscriteria（termscriteria:：EPS+termscriteria:：COUNT，20，FLT\\u EPSILON））"
  },
  {
    "origin": "Refine a pose (the translation and the rotation that transform a 3D point expressed in the object coordinate frame to the camera coordinate frame) from a 3D-2D point correspondences and starting from an initial solution.",
    "local": "从3D-2D点对应和初始解开始细化姿势（将在对象坐标系中表示的3D点变换为相机坐标系的平移和旋转）。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, InputOutputArray rvec, InputOutputArray tvec, TermCriteria criteria=TermCriteria(TermCriteria::EPS+TermCriteria::COUNT, 20, FLT_EPSILON), double VVSlambda=1)",
    "local": "（InputArray objectPoints、InputArray imagePoints、InputArray cameraMatrix、InputArray distcoefs、inpututputarray rvec、inpututputarray tvec、termscriteria criteria=termscriteria（termscriteria:：EPS+termscriteria:：COUNT，20，FLT\\u EPSILON）、双VVSlambda=1）"
  },
  {
    "origin": "Refine a pose (the translation and the rotation that transform a 3D point expressed in the object coordinate frame to the camera coordinate frame) from a 3D-2D point correspondences and starting from an initial solution.",
    "local": "从3D-2D点对应和初始解开始细化姿势（将在对象坐标系中表示的3D点变换为相机坐标系的平移和旋转）。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray cameraMatrix1, InputOutputArray distCoeffs1, InputOutputArray cameraMatrix2, InputOutputArray distCoeffs2, Size imageSize, InputOutputArray R, InputOutputArray T, OutputArray E, OutputArray F, OutputArray perViewErrors, int flags=CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6))",
    "local": "（InputArrayOfArrays objectPoints，InputArrayOfArrays imagePoints1，InputArrayOfArrays imagePoints2，InputOutputArray cameraMatrix x1，InputOutputArray distCoeffs1，InputOutputArray cameraMatrix x2，InputOutputArray distCoeffs2，Size imageSize，InputOutputArray R，InputOutputArray T，OutputArray E，OutputArray F，OutputArray perViewErrors，int flags=CALIB\\u FIX\\u internal，TermCriteria=TermCriteria（TermCriteria:：COUNT+TermCriteria:：EPS，30，1e-6））"
  },
  {
    "origin": "Calibrates a stereo camera set up. This function finds the intrinsic parameters for each of the two cameras and the extrinsic parameters between the two cameras.",
    "local": "校准立体摄像机。此函数用于查找两个摄影机中每个摄影机的内部参数以及两个摄影机之间的外部参数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray cameraMatrix1, InputOutputArray distCoeffs1, InputOutputArray cameraMatrix2, InputOutputArray distCoeffs2, Size imageSize, OutputArray R, OutputArray T, OutputArray E, OutputArray F, int flags=CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6))",
    "local": "（InputArrayOfArrays objectPoints，InputArrayOfArrays imagePoints1，InputArrayOfArrays imagePoints2，InputOutputArray cameraMatrix x1，InputOutputArray distCoeffs1，InputOutputArray cameraMatrix x2，InputOutputArray distCoeffs2，Size imageSize，OutputArray R，OutputArray T，OutputArray E，OutputArray F，int flags=CALIB\\u FIX\\u instructive，TermCriteria=TermCriteria（TermCriteria:：COUNT+TermCriteria:：EPS，30，1e-6））"
  },
  {
    "origin": "(InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray K1, InputOutputArray D1, InputOutputArray K2, InputOutputArray D2, Size imageSize, OutputArray R, OutputArray T, int flags=fisheye::CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 100, DBL_EPSILON))",
    "local": "（InputArrayOfArrays objectPoints，InputArrayOfArrays imagePoints1，InputArrayOfArrays imagePoints2，InputOutputArray K1，InputOutputArray D1，InputOutputArray K2，InputOutputArray D2，Size imageSize，OutputArray R，OutputArray T，int flags=fisheye:：CALIB\\u FIX\\u inquired，TermCriteria=TermCriteria（TermCriteria:：COUNT+TermCriteria:：EPS，100，DBL（ε）"
  },
  {
    "origin": "Performs stereo calibration.",
    "local": "执行立体声校准。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, Size imageSize, InputArray R, InputArray T, OutputArray R1, OutputArray R2, OutputArray P1, OutputArray P2, OutputArray Q, int flags=CALIB_ZERO_DISPARITY, double alpha=-1, Size newImageSize=Size(), Rect *validPixROI1=0, Rect *validPixROI2=0)",
    "local": "（InputArray cameraMatrix1、InputArray distCoeffs1、InputArray cameraMatrix2、InputArray distCoeffs2、Size imageSize、InputArray R、InputArray T、OutputArray R1、OutputArray R2、OutputArray P1、OutputArray P2、OutputArray Q、int flags=CALIB\\u ZERO\\u DISPARITY、double alpha=-1、Size newImageSize=Size（）、Rect*validpixrio1=0、Rect*validpixrio2=0）"
  },
  {
    "origin": "Computes rectification transforms for each head of a calibrated stereo camera.",
    "local": "为校准立体相机的每个头部计算校正变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray K1, InputArray D1, InputArray K2, InputArray D2, const Size &amp;imageSize, InputArray R, InputArray tvec, OutputArray R1, OutputArray R2, OutputArray P1, OutputArray P2, OutputArray Q, int flags, const Size &amp;newImageSize=Size(), double balance=0.0, double fov_scale=1.0)",
    "local": "（输入阵列K1、输入阵列D1、输入阵列K2、输入阵列D2、常量大小；imageSize、InputArray R、InputArray tvec、OutputArray R1、OutputArray R2、OutputArray P1、OutputArray P2、OutputArray Q、int flags、const Size&amp；newImageSize=Size（），双平衡=0.0，双视场刻度=1.0）"
  },
  {
    "origin": "Stereo rectification for fisheye camera model.",
    "local": "鱼眼相机模型的立体校正。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray points1, InputArray points2, InputArray F, Size imgSize, OutputArray H1, OutputArray H2, double threshold=5)",
    "local": "（输入数组点1，输入数组点2，输入数组F，大小imgSize，输出数组H1，输出数组H2，双阈值=5）"
  },
  {
    "origin": "Computes a rectification transform for an uncalibrated stereo camera.",
    "local": "计算未校准立体摄影机的校正变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray projMatr1, InputArray projMatr2, InputArray projPoints1, InputArray projPoints2, OutputArray points4D)",
    "local": "（InputArray projMatr1、InputArray projMatr2、InputArray projPoints1、InputArray projPoints2、OutputArray points4D）"
  },
  {
    "origin": "This function reconstructs 3-dimensional points (in homogeneous coordinates) by using their observations with a stereo camera.",
    "local": "此函数通过使用立体相机的观察值重建三维点（在齐次坐标中）。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, InputArray newCameraMatrix=noArray())",
    "local": "（InputArray src，OutputArray dst，InputArray cameraMatrix，InputArray distcoefs，InputArray newCameraMatrix=noArray（））"
  },
  {
    "origin": "Transforms an image to compensate for lens distortion.",
    "local": "变换图像以补偿镜头失真。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray distorted, OutputArray undistorted, InputArray K, InputArray D, InputArray Knew=",
    "local": "（输入阵列失真，输出阵列未失真，输入阵列K，输入阵列D，输入阵列）="
  },
  {
    "origin": "(), const Size &amp;new_size=Size())",
    "local": "（），常量大小；新建\\u size=size（））"
  },
  {
    "origin": "Transforms an image to compensate for fisheye lens distortion.",
    "local": "变换图像以补偿鱼眼镜头失真。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, InputArray R=noArray(), InputArray P=noArray())",
    "local": "InputArray src、OutputArray dst、InputArray cameraMatrix、InputArray distcoefs、InputArray R=noArray（）、InputArray P=noArray（））"
  },
  {
    "origin": "Computes the ideal point coordinates from the observed point coordinates.",
    "local": "从观测点坐标计算理想点坐标。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, InputArray R, InputArray P, TermCriteria criteria)",
    "local": "（输入阵列src、输出阵列dst、输入阵列cameraMatrix、输入阵列distcoefs、输入阵列R、输入阵列P、TermCriteria）"
  },
  {
    "origin": "(InputArray distorted, OutputArray undistorted, InputArray K, InputArray D, InputArray R=noArray(), InputArray P=noArray())",
    "local": "输入阵列失真，输出阵列未失真，输入阵列K，输入阵列D，输入阵列R=noArray（），输入阵列P=noArray（））"
  },
  {
    "origin": "Undistorts 2D points using fisheye model.",
    "local": "使用鱼眼模型不失真2D点。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputOutputArray disparity, InputArray cost, int minDisparity, int numberOfDisparities, int disp12MaxDisp=1)",
    "local": "（InputOutputArray差异，InputArray成本，int minDisparity，int numberOfDisparity，int disp12MaxDisp=1）"
  },
  {
    "origin": "validates disparity using the left-right check. The matrix \"cost\" should be computed by the stereo correspondence algorithm",
    "local": "使用左右检查验证差异。矩阵“成本”应通过立体对应算法计算"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:33 for OpenCV by &#160;",
    "local": "2021年4月2日星期五11:36:33为OpenCV生成，&#160；"
  }
]