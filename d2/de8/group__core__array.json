[
  {
    "origin": "OpenCV: Operations on arrays",
    "local": "OpenCV:对数组的操作"
  },
  {
    "origin": "OpenCV",
    "local": "打开CV"
  },
  {
    "origin": "Open Source Computer Vision",
    "local": "开源计算机视觉"
  },
  {
    "origin": "Classes",
    "local": "班级"
  },
  {
    "origin": "Enumerations",
    "local": "枚举"
  },
  {
    "origin": "Functions",
    "local": "功能"
  },
  {
    "origin": "Operations on arrays",
    "local": "阵列上的操作"
  },
  {
    "origin": "Classes",
    "local": "班级"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "Linear Discriminant Analysis.",
    "local": "线性判别分析。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "Principal Component Analysis.",
    "local": "主成分分析。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "Random Number Generator.",
    "local": "随机数发生器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "Mersenne Twister random number generator.",
    "local": "梅森捻线机随机数发生器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "Singular Value Decomposition.",
    "local": "奇异值分解。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Enumerations",
    "local": "枚举"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "= BORDER_REFLECT_101,",
    "local": "=边框\\u反映\\u 101，"
  },
  {
    "origin": "= BORDER_REFLECT_101,",
    "local": "=边框\\u反映\\u 101，"
  },
  {
    "origin": "= 16",
    "local": "= 16"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "comparison types",
    "local": "比较类型"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "= 16",
    "local": "= 16"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "matrix decomposition types",
    "local": "矩阵分解类型"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "= 16,",
    "local": "= 16,"
  },
  {
    "origin": "= DFT_INVERSE,",
    "local": "=DFT\\U逆，"
  },
  {
    "origin": "= DFT_ROWS",
    "local": "=DFT\\U行"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "generalized matrix multiplication flags",
    "local": "广义矩阵乘法标志"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "Functions",
    "local": "功能"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst)",
    "local": "（夏时制）"
  },
  {
    "origin": "Calculates the per-element absolute difference between two arrays or between an array and a scalar.",
    "local": "计算两个数组之间或数组与标量之间的每元素绝对差。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "(), int dtype=-1)",
    "local": "（），int dtype=-1）"
  },
  {
    "origin": "Calculates the per-element sum of two arrays or an array and a scalar.",
    "local": "计算两个数组或一个数组和一个标量的每元素和。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1, double alpha,",
    "local": "src1，双α，"
  },
  {
    "origin": "src2, double beta, double gamma,",
    "local": "src2，双β，双γ，"
  },
  {
    "origin": "dst, int dtype=-1)",
    "local": "dst，int数据类型=-1）"
  },
  {
    "origin": "Calculates the weighted sum of two arrays.",
    "local": "计算两个数组的加权和。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dist, int dtype,",
    "local": "dist，int数据类型，"
  },
  {
    "origin": "nidx, int normType=",
    "local": "nidx，int型="
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "(), int update=0, bool crosscheck=false)",
    "local": "（），int update=0，bool crosscheck=false）"
  },
  {
    "origin": "naive nearest neighbor finder",
    "local": "朴素的近邻查找器"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "computes bitwise conjunction of the two arrays (dst = src1 &amp; src2) Calculates the per-element bit-wise conjunction of two arrays or an array and a scalar.",
    "local": "计算两个数组的按位合并（dst=src1&amp；src2）计算两个数组或一个数组和一个标量的逐元素逐位连接。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Inverts every bit of an array.",
    "local": "反转数组的每一位。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Calculates the per-element bit-wise disjunction of two arrays or an array and a scalar.",
    "local": "计算两个数组或一个数组和一个标量的逐元素逐位析取。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Calculates the per-element bit-wise \"exclusive or\" operation on two arrays or an array and a scalar.",
    "local": "计算对两个数组或一个数组和一个标量的逐元素逐位“异或”运算。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "(int p, int len, int borderType)",
    "local": "（int p，int sheet，int borderType）"
  },
  {
    "origin": "Computes the source location of an extrapolated pixel.",
    "local": "计算外推像素的源位置。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "*samples, int nsamples,",
    "local": "*样品，国际样品，"
  },
  {
    "origin": "&amp;covar,",
    "local": "&amp；挖，"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": ", int flags, int ctype=",
    "local": "，int标志，int ctype="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the covariance matrix of a set of vectors.",
    "local": "计算一组向量的协方差矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "samples,",
    "local": "样品，"
  },
  {
    "origin": "covar,",
    "local": "挖，"
  },
  {
    "origin": ", int flags, int ctype=",
    "local": "，int标志，int ctype="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "x,",
    "local": "x号，"
  },
  {
    "origin": "y,",
    "local": "是的，"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "angle, bool angleInDegrees=false)",
    "local": "角度，bool angleInDegrees=false）"
  },
  {
    "origin": "Calculates the magnitude and angle of 2D vectors.",
    "local": "计算二维矢量的幅值和角度。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "a, bool quiet=true,",
    "local": "a、 bool quiet=真，"
  },
  {
    "origin": "*pos=0, double minVal=-DBL_MAX, double maxVal=DBL_MAX)",
    "local": "*pos=0，double minVal=-DBL\\u MAX，double maxVal=DBL\\u MAX）"
  },
  {
    "origin": "Checks every element of an input array for invalid values.",
    "local": "检查输入数组的每个元素是否存在无效值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst, int cmpop)",
    "local": "dst、int cmpop）"
  },
  {
    "origin": "Performs the per-element comparison of two arrays or an array and scalar value.",
    "local": "对两个数组或一个数组和标量值执行每元素比较。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "m, bool lowerToUpper=false)",
    "local": "m、 bool lowerToUpper=假）"
  },
  {
    "origin": "Copies the lower or the upper half of a square matrix to its another half.",
    "local": "将方阵的下半部分或上半部分复制到另一半。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst)",
    "local": "（夏时制）"
  },
  {
    "origin": "Converts an array to half precision floating number.",
    "local": "将数组转换为半精度浮点数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, double alpha=1, double beta=0)",
    "local": "dst，双α=1，双β=0）"
  },
  {
    "origin": "Scales, calculates absolute values, and converts the result to 8-bit.",
    "local": "缩放、计算绝对值，并将结果转换为8位。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int top, int bottom, int left, int right, int borderType, const",
    "local": "dst，int top，int bottom，int left，int right，int borderType，常量"
  },
  {
    "origin": "&amp;value=",
    "local": "&amp；价值="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Forms a border around an image.",
    "local": "在图像周围形成边框。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "mask)",
    "local": "面罩）"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience (python) Copies the matrix to another one. When the operation mask is specified, if the",
    "local": "这是一个重载的成员函数，为方便起见（python）将矩阵复制到另一个。指定操作掩码时，如果"
  },
  {
    "origin": "call shown above reallocates the matrix, the newly allocated matrix is initialized with all zeros before copying the data.",
    "local": "上面显示的调用重新分配矩阵，新分配的矩阵在复制数据之前用全零初始化。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src)",
    "local": "（src）"
  },
  {
    "origin": "Counts non-zero array elements.",
    "local": "计数非零数组元素。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int flags=0)",
    "local": "dst，int标志=0）"
  },
  {
    "origin": "Performs a forward or inverse discrete Cosine transform of 1D or 2D array.",
    "local": "对一维或二维数组执行正或逆离散余弦变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "mtx)",
    "local": "（mtx）"
  },
  {
    "origin": "Returns the determinant of a square floating-point matrix.",
    "local": "返回平方浮点矩阵的行列式。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int flags=0, int nonzeroRows=0)",
    "local": "dst，int标志=0，int非零行=0）"
  },
  {
    "origin": "Performs a forward or inverse Discrete Fourier transform of a 1D or 2D floating-point array.",
    "local": "对一维或二维浮点数组执行正向或反向离散傅里叶变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst, double scale=1, int dtype=-1)",
    "local": "dst，双刻度=1，int dtype=-1）"
  },
  {
    "origin": "Performs per-element division of two arrays or a scalar by an array.",
    "local": "按元素对两个数组或一个标量进行除法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(double scale,",
    "local": "（双刻度，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst, int dtype=-1)",
    "local": "dst，int数据类型=-1）"
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "eigenvalues,",
    "local": "特征值，"
  },
  {
    "origin": "eigenvectors=",
    "local": "特征向量="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Calculates eigenvalues and eigenvectors of a symmetric matrix.",
    "local": "计算对称矩阵的特征值和特征向量。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "eigenvalues,",
    "local": "特征值，"
  },
  {
    "origin": "eigenvectors)",
    "local": "特征向量）"
  },
  {
    "origin": "Calculates eigenvalues and eigenvectors of a non-symmetric matrix (real eigenvalues only).",
    "local": "计算非对称矩阵的特征值和特征向量（仅限实特征值）。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst)",
    "local": "（夏时制）"
  },
  {
    "origin": "Calculates the exponent of every array element.",
    "local": "计算每个数组元素的指数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int coi)",
    "local": "dst，国际coi）"
  },
  {
    "origin": "Extracts a single channel from src (coi is 0-based index)",
    "local": "从src中提取单个通道（coi是基于0的索引）"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "idx)",
    "local": "idx公司）"
  },
  {
    "origin": "Returns the list of locations of non-zero pixels.",
    "local": "返回非零像素的位置列表。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int flipCode)",
    "local": "dst，int（代码）"
  },
  {
    "origin": "Flips a 2D array around vertical, horizontal, or both axes.",
    "local": "围绕垂直、水平或两个轴翻转二维阵列。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2, double alpha,",
    "local": "src2，双α，"
  },
  {
    "origin": "src3, double beta,",
    "local": "src3，双β，"
  },
  {
    "origin": "dst, int flags=0)",
    "local": "dst，int标志=0）"
  },
  {
    "origin": "Performs generalized matrix multiplication.",
    "local": "执行广义矩阵乘法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "(int vecsize)",
    "local": "（整数向量大小）"
  },
  {
    "origin": "Returns the optimal DFT size for a given vector size.",
    "local": "返回给定向量大小的最佳DFT大小。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "*src, size_t nsrc,",
    "local": "*src，大小\\u t nsrc，"
  },
  {
    "origin": "dst)",
    "local": "（夏时制）"
  },
  {
    "origin": "Applies horizontal concatenation to given matrices.",
    "local": "对给定的矩阵应用水平连接。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst)",
    "local": "（夏时制）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst)",
    "local": "（夏时制）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int flags=0)",
    "local": "dst，int标志=0）"
  },
  {
    "origin": "Calculates the inverse Discrete Cosine Transform of a 1D or 2D array.",
    "local": "计算一维或二维阵列的离散余弦逆变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int flags=0, int nonzeroRows=0)",
    "local": "dst，int标志=0，int非零行=0）"
  },
  {
    "origin": "Calculates the inverse Discrete Fourier Transform of a 1D or 2D array.",
    "local": "计算一维或二维阵列的离散傅里叶逆变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "lowerb,",
    "local": "低b。"
  },
  {
    "origin": "upperb,",
    "local": "上B，"
  },
  {
    "origin": "dst)",
    "local": "（夏时制）"
  },
  {
    "origin": "Checks if array elements lie between the elements of two other arrays.",
    "local": "检查数组元素是否位于其他两个数组的元素之间。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int coi)",
    "local": "dst，国际coi）"
  },
  {
    "origin": "Inserts a single channel to dst (coi is 0-based index)",
    "local": "向dst插入单个通道（coi是基于0的索引）"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int flags=",
    "local": "dst，int标志="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Finds the inverse or pseudo-inverse of a matrix.",
    "local": "求矩阵的逆或伪逆。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst)",
    "local": "（夏时制）"
  },
  {
    "origin": "Calculates the natural logarithm of every array element.",
    "local": "计算每个数组元素的自然对数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "lut,",
    "local": "琵琶，"
  },
  {
    "origin": "dst)",
    "local": "（夏时制）"
  },
  {
    "origin": "Performs a look-up table transform of an array.",
    "local": "执行数组的查找表转换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "x,",
    "local": "x号，"
  },
  {
    "origin": "y,",
    "local": "是的，"
  },
  {
    "origin": "magnitude)",
    "local": "（震级）"
  },
  {
    "origin": "Calculates the magnitude of 2D vectors.",
    "local": "计算二维向量的幅值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "v1,",
    "local": "第1版，"
  },
  {
    "origin": "v2,",
    "local": "第2版，"
  },
  {
    "origin": "icovar)",
    "local": "伊科瓦尔）"
  },
  {
    "origin": "Calculates the Mahalanobis distance between two vectors.",
    "local": "计算两个向量之间的马氏距离。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst)",
    "local": "（夏时制）"
  },
  {
    "origin": "Calculates per-element maximum of two arrays or an array and a scalar.",
    "local": "计算每个元素最多两个数组或一个数组和一个标量。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2,",
    "local": "&amp；src2型，"
  },
  {
    "origin": "&amp;dst)",
    "local": "&amp；（夏时制）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2,",
    "local": "&amp；src2型，"
  },
  {
    "origin": "&amp;dst)",
    "local": "&amp；（夏时制）"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Calculates an average (mean) of array elements.",
    "local": "计算数组元素的平均值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "stddev,",
    "local": "标准偏差，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "*mv, size_t count,",
    "local": "*mv，大小\\u t计数，"
  },
  {
    "origin": "dst)",
    "local": "（夏时制）"
  },
  {
    "origin": "Creates one multi-channel array out of several single-channel ones.",
    "local": "从多个单通道阵列中创建一个多通道阵列。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "mv,",
    "local": "中压，"
  },
  {
    "origin": "dst)",
    "local": "（夏时制）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst)",
    "local": "（夏时制）"
  },
  {
    "origin": "Calculates per-element minimum of two arrays or an array and a scalar.",
    "local": "计算每个元素至少两个数组或一个数组和一个标量。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2,",
    "local": "&amp；src2型，"
  },
  {
    "origin": "&amp;dst)",
    "local": "&amp；（夏时制）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2,",
    "local": "&amp；src2型，"
  },
  {
    "origin": "&amp;dst)",
    "local": "&amp；（夏时制）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src, double *minVal, double *maxVal=0, int *minIdx=0, int *maxIdx=0,",
    "local": "src，double*minVal，double*maxVal=0，int*minIdx=0，int*maxIdx=0，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Finds the global minimum and maximum in an array.",
    "local": "查找数组中的全局最小值和最大值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Finds the global minimum and maximum in an array.",
    "local": "查找数组中的全局最小值和最大值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;a, double *minVal, double *maxVal, int *minIdx=0, int *maxIdx=0)",
    "local": "&amp；a、 double*minVal，double*maxVal，int*minIdx=0，int*maxIdx=0）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "*src, size_t nsrcs,",
    "local": "*src，大小\\u t nsrcs，"
  },
  {
    "origin": "*dst, size_t ndsts, const int *fromTo, size_t npairs)",
    "local": "*dst，大小\\u t ndsts，常量int*fromTo，大小\\u t npairs）"
  },
  {
    "origin": "Copies specified channels from input arrays to the specified channels of output arrays.",
    "local": "将指定通道从输入阵列复制到输出阵列的指定通道。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, const int *fromTo, size_t npairs)",
    "local": "dst，const int*fromTo，size\\t npairs）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, const std::vector&lt; int &gt; &amp;fromTo)",
    "local": "dst，const std：：向量&lt；内部&gt&amp；从到）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "a,",
    "local": "一个，"
  },
  {
    "origin": "b,",
    "local": "b，b，"
  },
  {
    "origin": "c, int flags, bool conjB=false)",
    "local": "c、 int标志，bool congb=false）"
  },
  {
    "origin": "Performs the per-element multiplication of two Fourier spectrums.",
    "local": "执行两个傅立叶谱的每元素乘法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst, double scale=1, int dtype=-1)",
    "local": "dst，双刻度=1，int dtype=-1）"
  },
  {
    "origin": "Calculates the per-element scaled product of two arrays.",
    "local": "计算两个数组的每元素比例积。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, bool aTa,",
    "local": "i、 e.，布尔阿塔，"
  },
  {
    "origin": "delta=",
    "local": "三角洲="
  },
  {
    "origin": "(), double scale=1, int dtype=-1)",
    "local": "（），双刻度=1，int-dtype=-1）"
  },
  {
    "origin": "Calculates the product of a matrix and its transposition.",
    "local": "计算矩阵与其转置的乘积。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1, int normType=",
    "local": "src1，int normtype="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Calculates the absolute norm of an array.",
    "local": "计算数组的绝对范数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2, int normType=",
    "local": "src2，int normtype="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Calculates an absolute difference norm or a relative difference norm.",
    "local": "计算绝对差范数或相对差范数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, int normType)",
    "local": "&amp；心脏，心脏型）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, double alpha=1, double beta=0, int norm_type=",
    "local": "dst，双α=1，双β=0，int-norm\\u类型="
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Normalizes the norm or value range of an array.",
    "local": "规范化数组的范数或值范围。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src,",
    "local": "&amp；src公司，"
  },
  {
    "origin": "&amp;dst, double alpha, int normType)",
    "local": "&amp；dst，双alpha，int normType）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "a, double val=0)",
    "local": "a、 双值（val=0）"
  },
  {
    "origin": "converts NaNs to the given number",
    "local": "将nan转换为给定的数字"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "data,",
    "local": "数据，"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "eigenvectors,",
    "local": "特征向量，"
  },
  {
    "origin": "result)",
    "local": "结果）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "data,",
    "local": "数据，"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "eigenvectors, int maxComponents=0)",
    "local": "特征向量，int maxComponents=0）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "data,",
    "local": "数据，"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "eigenvectors,",
    "local": "特征向量，"
  },
  {
    "origin": "eigenvalues, int maxComponents=0)",
    "local": "特征值，int maxComponents=0）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "data,",
    "local": "数据，"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "eigenvectors, double retainedVariance)",
    "local": "特征向量，双保持变量）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "data,",
    "local": "数据，"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "eigenvectors,",
    "local": "特征向量，"
  },
  {
    "origin": "eigenvalues, double retainedVariance)",
    "local": "特征值，双保变）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "data,",
    "local": "数据，"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "eigenvectors,",
    "local": "特征向量，"
  },
  {
    "origin": "result)",
    "local": "结果）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "m)",
    "local": "米）"
  },
  {
    "origin": "Performs the perspective matrix transformation of vectors.",
    "local": "执行向量的透视矩阵变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "x,",
    "local": "x号，"
  },
  {
    "origin": "y,",
    "local": "是的，"
  },
  {
    "origin": "angle, bool angleInDegrees=false)",
    "local": "角度，bool angleInDegrees=false）"
  },
  {
    "origin": "Calculates the rotation angle of 2D vectors.",
    "local": "计算二维向量的旋转角度。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "angle,",
    "local": "角度，"
  },
  {
    "origin": "x,",
    "local": "x号，"
  },
  {
    "origin": "y, bool angleInDegrees=false)",
    "local": "布尔角=假）"
  },
  {
    "origin": "Calculates x and y coordinates of 2D vectors from their magnitude and angle.",
    "local": "根据向量的大小和角度计算二维向量的x和y坐标。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src, double",
    "local": "src，双"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst)",
    "local": "（夏时制）"
  },
  {
    "origin": "Raises every array element to a power.",
    "local": "将每个数组元素提升为幂。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2, double R=255.)",
    "local": "src2，双R=255。）"
  },
  {
    "origin": "Computes the Peak Signal-to-Noise Ratio (PSNR) image quality metric.",
    "local": "计算峰值信噪比（PSNR）图像质量度量。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "stddev)",
    "local": "标准偏差）"
  },
  {
    "origin": "Fills the array with normally distributed random numbers.",
    "local": "用正态分布的随机数填充数组。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "*rng=0)",
    "local": "*rng=0）"
  },
  {
    "origin": "Shuffles the array elements randomly.",
    "local": "随机洗牌数组元素。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "low,",
    "local": "低，"
  },
  {
    "origin": "high)",
    "local": "（高）"
  },
  {
    "origin": "Generates a single uniformly-distributed random number or an array of random numbers.",
    "local": "生成单个均匀分布的随机数或随机数数组。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int dim, int rtype, int dtype=-1)",
    "local": "dst，int dim，int rtype，int dtype=-1）"
  },
  {
    "origin": "Reduces a matrix to a vector.",
    "local": "把矩阵化为向量。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src, int ny, int nx,",
    "local": "src，int ny，int nx，"
  },
  {
    "origin": "dst)",
    "local": "（夏时制）"
  },
  {
    "origin": "Fills the output array with repeated copies of the input array.",
    "local": "用输入数组的重复副本填充输出数组。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, int ny, int nx)",
    "local": "&amp；src，int，int nx）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int rotateCode)",
    "local": "dst，int旋转代码）"
  },
  {
    "origin": "Rotates a 2D array in multiples of 90 degrees. The function",
    "local": "以90度的倍数旋转二维阵列。函数"
  },
  {
    "origin": "rotates the array in one of three different ways: Rotate by 90 degrees clockwise (rotateCode = ROTATE_90_CLOCKWISE). Rotate by 180 degrees clockwise (rotateCode = ROTATE_180). Rotate by 270 degrees clockwise (rotateCode = ROTATE_90_COUNTERCLOCKWISE).",
    "local": "以三种不同的方式之一旋转阵列：顺时针旋转90度（rotateCode=顺时针旋转90度）。顺时针旋转180度（rotateCode=旋转180度）。顺时针旋转270度（旋转代码=逆时针旋转90度）。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1, double alpha,",
    "local": "src1，双α，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst)",
    "local": "（夏时制）"
  },
  {
    "origin": "Calculates the sum of a scaled array and another array.",
    "local": "计算缩放数组和另一个数组的和。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "mtx, const",
    "local": "MTX，const"
  },
  {
    "origin": "&amp;s=",
    "local": "&amp；s码="
  },
  {
    "origin": "(1))",
    "local": "(1))"
  },
  {
    "origin": "Initializes a scaled identity matrix.",
    "local": "初始化缩放的单位矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(int seed)",
    "local": "（int种子）"
  },
  {
    "origin": "Sets state of default random number generator.",
    "local": "设置默认随机数生成器的状态。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst, int flags=",
    "local": "dst，int标志="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Solves one or more linear systems or least-squares problems.",
    "local": "解决一个或多个线性系统或最小二乘问题。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "coeffs,",
    "local": "系数，"
  },
  {
    "origin": "roots)",
    "local": "根）"
  },
  {
    "origin": "Finds the real roots of a cubic equation.",
    "local": "求三次方程的实根。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "coeffs,",
    "local": "系数，"
  },
  {
    "origin": "roots, int maxIters=300)",
    "local": "根，int最大值=300）"
  },
  {
    "origin": "Finds the real or complex roots of a polynomial equation.",
    "local": "求多项式方程的实根或复数根。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int flags)",
    "local": "dst，int标志）"
  },
  {
    "origin": "Sorts each row or each column of a matrix.",
    "local": "对矩阵的每一行或每一列进行排序。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int flags)",
    "local": "dst，int标志）"
  },
  {
    "origin": "Sorts each row or each column of a matrix.",
    "local": "对矩阵的每一行或每一列进行排序。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src,",
    "local": "&amp；src公司，"
  },
  {
    "origin": "*mvbegin)",
    "local": "多功能启动"
  },
  {
    "origin": "Divides a multi-channel array into several single-channel arrays.",
    "local": "将多通道阵列划分为多个单通道阵列。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "m,",
    "local": "嗯，"
  },
  {
    "origin": "mv)",
    "local": "中压）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst)",
    "local": "（夏时制）"
  },
  {
    "origin": "Calculates a square root of array elements.",
    "local": "计算数组元素的平方根。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "(), int dtype=-1)",
    "local": "（），int dtype=-1）"
  },
  {
    "origin": "Calculates the per-element difference between two arrays or array and a scalar.",
    "local": "计算两个数组或数组与标量之间的每元素差。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src)",
    "local": "（src）"
  },
  {
    "origin": "Calculates the sum of array elements.",
    "local": "计算数组元素之和。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "w,",
    "local": "w，"
  },
  {
    "origin": "u,",
    "local": "你，"
  },
  {
    "origin": "vt,",
    "local": "及物动词，"
  },
  {
    "origin": "rhs,",
    "local": "右侧，"
  },
  {
    "origin": "dst)",
    "local": "（夏时制）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "w,",
    "local": "w，"
  },
  {
    "origin": "u,",
    "local": "你，"
  },
  {
    "origin": "vt, int flags=0)",
    "local": "vt，int标志=0）"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Returns the default random number generator.",
    "local": "返回默认的随机数生成器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "mtx)",
    "local": "（mtx）"
  },
  {
    "origin": "Returns the trace of a matrix.",
    "local": "返回矩阵的跟踪。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "m)",
    "local": "米）"
  },
  {
    "origin": "Performs the matrix transformation of every array element.",
    "local": "对每个数组元素执行矩阵变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst)",
    "local": "（夏时制）"
  },
  {
    "origin": "Transposes a matrix.",
    "local": "变换矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "*src, size_t nsrc,",
    "local": "*src，大小\\u t nsrc，"
  },
  {
    "origin": "dst)",
    "local": "（夏时制）"
  },
  {
    "origin": "Applies vertical concatenation to given matrices.",
    "local": "对给定的矩阵应用垂直连接。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1,",
    "local": "src1型，"
  },
  {
    "origin": "src2,",
    "local": "src2型，"
  },
  {
    "origin": "dst)",
    "local": "（夏时制）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst)",
    "local": "（夏时制）"
  },
  {
    "origin": "Detailed Description",
    "local": "详细说明"
  },
  {
    "origin": "Enumeration Type Documentation",
    "local": "枚举类型文档"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "BorderTypes",
    "local": "边框"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "Various border types, image boundaries are denoted with",
    "local": "各种边界类型，图像边界用"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Enumerator",
    "local": "枚举器"
  },
  {
    "origin": "BORDER_CONSTANT",
    "local": "边界常数"
  },
  {
    "origin": "Python: cv.BORDER_CONSTANT",
    "local": "Python:cv.u常量"
  },
  {
    "origin": "with some specified",
    "local": "有一些特定的"
  },
  {
    "origin": "BORDER_REPLICATE",
    "local": "边界\\u复制"
  },
  {
    "origin": "Python: cv.BORDER_REPLICATE",
    "local": "Python:cv.u复制"
  },
  {
    "origin": "BORDER_REFLECT",
    "local": "边界反射"
  },
  {
    "origin": "Python: cv.BORDER_REFLECT",
    "local": "Python:cv.BORDER\\u反射"
  },
  {
    "origin": "BORDER_WRAP",
    "local": "边框环绕"
  },
  {
    "origin": "Python: cv.BORDER_WRAP",
    "local": "Python:cv.U包装"
  },
  {
    "origin": "BORDER_REFLECT_101",
    "local": "边框\\u\\u 101"
  },
  {
    "origin": "Python: cv.BORDER_REFLECT_101",
    "local": "Python:cv.BORDER\\u\\u 101"
  },
  {
    "origin": "BORDER_TRANSPARENT",
    "local": "透明边框"
  },
  {
    "origin": "Python: cv.BORDER_TRANSPARENT",
    "local": "Python:cv.BORDER\\u透明"
  },
  {
    "origin": "BORDER_REFLECT101",
    "local": "边框反光101"
  },
  {
    "origin": "Python: cv.BORDER_REFLECT101",
    "local": "Python:cv.BORDER\\u REFLECT101"
  },
  {
    "origin": "same as BORDER_REFLECT_101",
    "local": "与边框\\u\\u 101相同"
  },
  {
    "origin": "BORDER_DEFAULT",
    "local": "边框默认值"
  },
  {
    "origin": "Python: cv.BORDER_DEFAULT",
    "local": "Python:cv.u默认值"
  },
  {
    "origin": "same as BORDER_REFLECT_101",
    "local": "与边框\\u\\u 101相同"
  },
  {
    "origin": "BORDER_ISOLATED",
    "local": "边界隔离"
  },
  {
    "origin": "Python: cv.BORDER_ISOLATED",
    "local": "Python:cv.u隔离"
  },
  {
    "origin": "do not look outside of ROI",
    "local": "不要向外看"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "CmpTypes",
    "local": "CMP类型"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "comparison types",
    "local": "比较类型"
  },
  {
    "origin": "Enumerator",
    "local": "枚举器"
  },
  {
    "origin": "CMP_EQ",
    "local": "CMP\\U设备"
  },
  {
    "origin": "Python: cv.CMP_EQ",
    "local": "Python:cv.CMP\\u EQ"
  },
  {
    "origin": "src1 is equal to src2.",
    "local": "src1等于src2。"
  },
  {
    "origin": "CMP_GT",
    "local": "CMP\\u GT"
  },
  {
    "origin": "Python: cv.CMP_GT",
    "local": "Python:cv.CMP\\u GT"
  },
  {
    "origin": "src1 is greater than src2.",
    "local": "src1大于src2。"
  },
  {
    "origin": "CMP_GE",
    "local": "化学机械抛光"
  },
  {
    "origin": "Python: cv.CMP_GE",
    "local": "Python:简历"
  },
  {
    "origin": "src1 is greater than or equal to src2.",
    "local": "src1大于或等于src2。"
  },
  {
    "origin": "CMP_LT",
    "local": "CMP U灯"
  },
  {
    "origin": "Python: cv.CMP_LT",
    "local": "Python:cv.CMP\\u LT"
  },
  {
    "origin": "src1 is less than src2.",
    "local": "src1小于src2。"
  },
  {
    "origin": "CMP_LE",
    "local": "凸轮轴"
  },
  {
    "origin": "Python: cv.CMP_LE",
    "local": "Python:cv.CMPƏLE"
  },
  {
    "origin": "src1 is less than or equal to src2.",
    "local": "src1小于或等于src2。"
  },
  {
    "origin": "CMP_NE",
    "local": "化学需氧量"
  },
  {
    "origin": "Python: cv.CMP_NE",
    "local": "Python:cv.CMP\\n"
  },
  {
    "origin": "src1 is unequal to src2.",
    "local": "src1不等于src2。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "DecompTypes",
    "local": "分解类型"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "matrix decomposition types",
    "local": "矩阵分解类型"
  },
  {
    "origin": "Enumerator",
    "local": "枚举器"
  },
  {
    "origin": "DECOMP_LU",
    "local": "分解\\u LU"
  },
  {
    "origin": "Python: cv.DECOMP_LU",
    "local": "Python:cv.DECOMP\\u LU"
  },
  {
    "origin": "Gaussian elimination with the optimal pivot element chosen.",
    "local": "选择最优轴元的高斯消去法。"
  },
  {
    "origin": "DECOMP_SVD",
    "local": "分解SVD"
  },
  {
    "origin": "Python: cv.DECOMP_SVD",
    "local": "Python:cv.DECOMP\\u SVD"
  },
  {
    "origin": "singular value decomposition (",
    "local": "奇异值分解("
  },
  {
    "origin": ") method; the system can be over-defined and/or the matrix src1 can be singular",
    "local": ")方法；系统可能被过度定义和/或矩阵src1可能是奇异的"
  },
  {
    "origin": "DECOMP_EIG",
    "local": "分解"
  },
  {
    "origin": "Python: cv.DECOMP_EIG",
    "local": "Python:cv.DECOMP\\EIG"
  },
  {
    "origin": "eigenvalue decomposition; the matrix src1 must be symmetrical",
    "local": "特征值分解；矩阵src1必须是对称的"
  },
  {
    "origin": "DECOMP_CHOLESKY",
    "local": "分解乔尔斯基"
  },
  {
    "origin": "Python: cv.DECOMP_CHOLESKY",
    "local": "Python:cv.DECOMP\\u CHOLESKY"
  },
  {
    "origin": "Cholesky \\(LL^T\\) factorization; the matrix src1 must be symmetrical and positively defined",
    "local": "Cholesky（LL^T）因子分解；矩阵src1必须是对称的和正定义的"
  },
  {
    "origin": "DECOMP_QR",
    "local": "分解\\u QR"
  },
  {
    "origin": "Python: cv.DECOMP_QR",
    "local": "Python:cv.DECOMP\\u QR"
  },
  {
    "origin": "QR factorization; the system can be over-defined and/or the matrix src1 can be singular",
    "local": "QR因子分解；系统可能被过度定义和/或矩阵src1可能是奇异的"
  },
  {
    "origin": "DECOMP_NORMAL",
    "local": "解压正常"
  },
  {
    "origin": "Python: cv.DECOMP_NORMAL",
    "local": "Python:cv.DECOMP\\u NORMAL"
  },
  {
    "origin": "while all the previous flags are mutually exclusive, this flag can be used together with any of the previous; it means that the normal equations \\(\\texttt{src1}^T\\cdot\\texttt{src1}\\cdot\\texttt{dst}=\\texttt{src1}^T\\texttt{src2}\\) are solved instead of the original system \\(\\texttt{src1}\\cdot\\texttt{dst}=\\texttt{src2}\\)",
    "local": "虽然所有先前的标志都是互斥的，但此标志可以与任何先前的标志一起使用；这意味着求解正规方程\\（\\textt{src1}^T\\cdot\\textt{src1}\\cdot\\textt{dst}=\\textt{src1}^T\\textt{src2}\\）而不是原系统\\（\\textt{src1}\\cdot\\textt{dst}=\\textt{src2}\\）"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "DftFlags",
    "local": "DFT标志"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "Enumerator",
    "local": "枚举器"
  },
  {
    "origin": "DFT_INVERSE",
    "local": "DFT\\U逆"
  },
  {
    "origin": "Python: cv.DFT_INVERSE",
    "local": "Python:cv.DFT\\u逆"
  },
  {
    "origin": "performs an inverse 1D or 2D transform instead of the default forward transform.",
    "local": "执行一维或二维逆变换，而不是默认的正向变换。"
  },
  {
    "origin": "DFT_SCALE",
    "local": "DFT\\U标度"
  },
  {
    "origin": "Python: cv.DFT_SCALE",
    "local": "Python:cv.DFT\\u比例"
  },
  {
    "origin": "scales the result: divide it by the number of array elements. Normally, it is combined with DFT_INVERSE.",
    "local": "缩放结果：将其除以数组元素数。通常，它与DFT\\u逆结合。"
  },
  {
    "origin": "DFT_ROWS",
    "local": "DFT\\U行"
  },
  {
    "origin": "Python: cv.DFT_ROWS",
    "local": "Python:cv.DFT\\u行"
  },
  {
    "origin": "performs a forward or inverse transform of every individual row of the input matrix; this flag enables you to transform multiple vectors simultaneously and can be used to decrease the overhead (which is sometimes several times larger than the processing itself) to perform 3D and higher-dimensional transformations and so forth.",
    "local": "对输入矩阵的每一行执行正变换或逆变换；此标志使您能够同时变换多个向量，并可用于减少执行三维和更高维变换等的开销（有时比处理本身大几倍）。"
  },
  {
    "origin": "DFT_COMPLEX_OUTPUT",
    "local": "DFT\\复\\输出"
  },
  {
    "origin": "Python: cv.DFT_COMPLEX_OUTPUT",
    "local": "Python:cv.DFT\\复杂\\输出"
  },
  {
    "origin": "performs a forward transformation of 1D or 2D real array; the result, though being a complex array, has complex-conjugate symmetry (",
    "local": "对一维或二维实数数组进行前向变换；结果虽然是复阵，但具有复共轭对称性("
  },
  {
    "origin": "CCS",
    "local": "CCS系统"
  },
  {
    "origin": ", see the function description below for details), and such an array can be packed into a real array of the same size as input, which is the fastest option and which is what the function does by default; however, you may wish to get a full complex array (for simpler spectrum analysis, and so on) - pass the flag to enable the function to produce a full-size complex output array.",
    "local": "，详见下面的函数描述），这样的数组可以打包成与输入大小相同的实数数组，这是最快的选项，也是函数默认做的；但是，您可能希望获得一个完整的复杂数组（用于更简单的频谱分析等）-传递标志以使函数能够生成完整大小的复杂输出数组。"
  },
  {
    "origin": "DFT_REAL_OUTPUT",
    "local": "DFT\\实际\\输出"
  },
  {
    "origin": "Python: cv.DFT_REAL_OUTPUT",
    "local": "Python:cv.DFT\\u REAL\\u输出"
  },
  {
    "origin": "performs an inverse transformation of a 1D or 2D complex array; the result is normally a complex array of the same size, however, if the input array has conjugate-complex symmetry (for example, it is a result of forward transformation with DFT_COMPLEX_OUTPUT flag), the output is a real array; while the function itself does not check whether the input is symmetrical or not, you can pass the flag and then the function will assume the symmetry and produce the real output array (note that when the input is packed into a real array and inverse transformation is executed, the function treats the input as a packed complex-conjugate symmetrical array, and the output will also be a real array).",
    "local": "执行一维或二维复杂阵列的逆变换；结果通常是一个大小相同的复数数组，但如果输入数组具有共轭复数对称性（例如，它是带DFT\\u complex\\u OUTPUT标志的前向变换的结果），则输出是一个实数组；虽然函数本身不检查输入是否对称，但您可以传递标志，然后函数将假定对称并生成实输出数组（注意，当输入打包到实数组中并执行逆变换时，该函数将输入视为压缩复共轭对称阵列，输出也将是实阵列）。"
  },
  {
    "origin": "DFT_COMPLEX_INPUT",
    "local": "DFT\\复输入"
  },
  {
    "origin": "Python: cv.DFT_COMPLEX_INPUT",
    "local": "Python:cv.DFT\\复杂\\输入"
  },
  {
    "origin": "specifies that input is complex input. If this flag is set, the input must have 2 channels. On the other hand, for backwards compatibility reason, if input has 2 channels, input is already considered complex.",
    "local": "指定输入为复杂输入。如果设置了此标志，则输入必须有2个通道。另一方面，由于向后兼容性的原因，如果输入有两个通道，则输入已经被认为是复杂的。"
  },
  {
    "origin": "DCT_INVERSE",
    "local": "离散余弦变换逆"
  },
  {
    "origin": "Python: cv.DCT_INVERSE",
    "local": "Python:cv.DCT\\u逆"
  },
  {
    "origin": "performs an inverse 1D or 2D transform instead of the default forward transform.",
    "local": "执行一维或二维逆变换，而不是默认的正向变换。"
  },
  {
    "origin": "DCT_ROWS",
    "local": "DCT\\U行"
  },
  {
    "origin": "Python: cv.DCT_ROWS",
    "local": "Python:cv.DCT\\u行"
  },
  {
    "origin": "performs a forward or inverse transform of every individual row of the input matrix. This flag enables you to transform multiple vectors simultaneously and can be used to decrease the overhead (which is sometimes several times larger than the processing itself) to perform 3D and higher-dimensional transforms and so forth.",
    "local": "对输入矩阵的每一行执行正变换或逆变换。此标志使您能够同时变换多个向量，并可用于减少执行三维和更高维变换等的开销（有时比处理本身大几倍）。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "GemmFlags",
    "local": "保存"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "generalized matrix multiplication flags",
    "local": "广义矩阵乘法标志"
  },
  {
    "origin": "Enumerator",
    "local": "枚举器"
  },
  {
    "origin": "GEMM_1_T",
    "local": "吉姆穆特"
  },
  {
    "origin": "Python: cv.GEMM_1_T",
    "local": "Python:cv.GEMM\\u 1\\u T"
  },
  {
    "origin": "transposes src1",
    "local": "转座src1"
  },
  {
    "origin": "GEMM_2_T",
    "local": "吉姆穆特"
  },
  {
    "origin": "Python: cv.GEMM_2_T",
    "local": "Python:cv.GEMMèu T"
  },
  {
    "origin": "transposes src2",
    "local": "转座src2"
  },
  {
    "origin": "GEMM_3_T",
    "local": "吉姆穆特"
  },
  {
    "origin": "Python: cv.GEMM_3_T",
    "local": "Python:cv.GEMM\\u 3\\u T"
  },
  {
    "origin": "transposes src3",
    "local": "转座src3"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "NormTypes",
    "local": "正常类型"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "norm types",
    "local": "标准类型"
  },
  {
    "origin": "src1 and src2 denote input arrays.",
    "local": "src1和src2表示输入数组。"
  },
  {
    "origin": "Enumerator",
    "local": "枚举器"
  },
  {
    "origin": "NORM_INF",
    "local": "标准u INF"
  },
  {
    "origin": "Python: cv.NORM_INF",
    "local": "Python:cv.NORM\\u INF"
  },
  {
    "origin": "\\[ norm = \\forkthree {\\|\\texttt{src1}\\|_{L_{\\infty}} = \\max _I | \\texttt{src1} (I)|}{if \\(\\texttt{normType} = \\texttt{NORM_INF}\\) } {\\|\\texttt{src1}-\\texttt{src2}\\|_{L_{\\infty}} = \\max _I | \\texttt{src1} (I) - \\texttt{src2} (I)|}{if \\(\\texttt{normType} = \\texttt{NORM_INF}\\) } {\\frac{\\|\\texttt{src1}-\\texttt{src2}\\|_{L_{\\infty}} }{\\|\\texttt{src2}\\|_{L_{\\infty}} }}{if \\(\\texttt{normType} = \\texttt{NORM_RELATIVE | NORM_INF}\\) } \\]",
    "local": "\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\texttsrc1（I）-\\texttsrc2}（I）124；}{if\\\\\\texttnormtype}=\\texttnorm INF}\\{frac}\\\\12444；texttsrc1}-\\texttsrc2}\\u124uL}{\\\\124；\\texttt{src2}\\124；uuu{\\infty}}{if\\\\\\texttt{normType}=\\text{norm relating\\124；norm INF}\\\\\\]"
  },
  {
    "origin": "NORM_L1",
    "local": "标准\\u L1"
  },
  {
    "origin": "Python: cv.NORM_L1",
    "local": "Python:cv.NORM\\u L1"
  },
  {
    "origin": "\\[ norm = \\forkthree {\\| \\texttt{src1} \\| _{L_1} = \\sum _I | \\texttt{src1} (I)|}{if \\(\\texttt{normType} = \\texttt{NORM_L1}\\)} { \\| \\texttt{src1} - \\texttt{src2} \\| _{L_1} = \\sum _I | \\texttt{src1} (I) - \\texttt{src2} (I)|}{if \\(\\texttt{normType} = \\texttt{NORM_L1}\\) } { \\frac{\\|\\texttt{src1}-\\texttt{src2}\\|_{L_1} }{\\|\\texttt{src2}\\|_{L_1}} }{if \\(\\texttt{normType} = \\texttt{NORM_RELATIVE | NORM_L1}\\) } \\]",
    "local": "\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\如果\\\\texttt{normType}=\\texttt{RELATIVE NORM\\124和L1}\\}\\"
  },
  {
    "origin": "NORM_L2",
    "local": "标准\\u L2"
  },
  {
    "origin": "Python: cv.NORM_L2",
    "local": "Python:cv.NORMèL2"
  },
  {
    "origin": "\\[ norm = \\forkthree { \\| \\texttt{src1} \\| _{L_2} = \\sqrt{\\sum_I \\texttt{src1}(I)^2} }{if \\(\\texttt{normType} = \\texttt{NORM_L2}\\) } { \\| \\texttt{src1} - \\texttt{src2} \\| _{L_2} = \\sqrt{\\sum_I (\\texttt{src1}(I) - \\texttt{src2}(I))^2} }{if \\(\\texttt{normType} = \\texttt{NORM_L2}\\) } { \\frac{\\|\\texttt{src1}-\\texttt{src2}\\|_{L_2} }{\\|\\texttt{src2}\\|_{L_2}} }{if \\(\\texttt{normType} = \\texttt{NORM_RELATIVE | NORM_L2}\\) } \\]",
    "localsrc2}\\textt{src2}\\124uL{pos（192210）}如果\\\\texttt{normType}=\\texttt{normType}=\\texttt{norm RELATIVE\\124standard；norm L2}\\"
  },
  {
    "origin": "NORM_L2SQR",
    "local": "标准\\u L2SQR"
  },
  {
    "origin": "Python: cv.NORM_L2SQR",
    "local": "Python:cv.NORM\\u L2SQR"
  },
  {
    "origin": "\\[ norm = \\forkthree { \\| \\texttt{src1} \\| _{L_2} ^{2} = \\sum_I \\texttt{src1}(I)^2} {if \\(\\texttt{normType} = \\texttt{NORM_L2SQR}\\)} { \\| \\texttt{src1} - \\texttt{src2} \\| _{L_2} ^{2} = \\sum_I (\\texttt{src1}(I) - \\texttt{src2}(I))^2 }{if \\(\\texttt{normType} = \\texttt{NORM_L2SQR}\\) } { \\left(\\frac{\\|\\texttt{src1}-\\texttt{src2}\\|_{L_2} }{\\|\\texttt{src2}\\|_{L_2}}\\right)^2 }{if \\(\\texttt{normType} = \\texttt{NORM_RELATIVE | NORM_L2SQR}\\) } \\]",
    "local": "\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\124;||| L | 2}^{2}{2}=\\ SUM I（\\ textttt{SRC1}（I）-\\ textttt{SRC2}（I）-\\ textttt{SRC2}（I））^ 2}{2}{IF \\（\\ texttttttttttttttnormType}=\\ texttttttttttttttttttttttttnormType}=\\ texttttttttttttttttttttttttttttttttnormType}=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\我不知道。}{|\\ texttt{src2}||{l 2}\\ right）^ 2}{if \\（\\ texttt{normtype}=\\ texttt{norm relative | norm l2sqr}}\\]"
  },
  {
    "origin": "NORM_HAMMING",
    "local": "诺姆•哈明"
  },
  {
    "origin": "Python: cv.NORM_HAMMING",
    "local": "Python:简历：NORM\\u HAMMING"
  },
  {
    "origin": "In the case of one input array, calculates the",
    "local": "对于一个输入数组，计算"
  },
  {
    "origin": "distance of the array from zero, In the case of two input arrays, calculates the",
    "local": "对于两个输入数组，数组与零的距离计算"
  },
  {
    "origin": "distance between the arrays.",
    "local": "阵列之间的距离。"
  },
  {
    "origin": "NORM_HAMMING2",
    "local": "诺姆•哈明2"
  },
  {
    "origin": "Python: cv.NORM_HAMMING2",
    "local": "蟒蛇：cv.NORM\\u HAMMING2"
  },
  {
    "origin": "Similar to NORM_HAMMING, but in the calculation, each two bits of the input sequence will be added and treated as a single bit to be used in the same calculation as NORM_HAMMING.",
    "local": "与NORM\\u HAMMING类似，但在计算中，输入序列的每两位都将相加，并作为单个位处理，以便与NORM\\u HAMMING在同一计算中使用。"
  },
  {
    "origin": "NORM_TYPE_MASK",
    "local": "标准型面罩"
  },
  {
    "origin": "Python: cv.NORM_TYPE_MASK",
    "local": "Python:cv.NORM\\u TYPE\\u掩码"
  },
  {
    "origin": "bit-mask which can be used to separate norm type from norm flags",
    "local": "位掩码，可用于区分规范类型和规范标志"
  },
  {
    "origin": "NORM_RELATIVE",
    "local": "标准\\u相对"
  },
  {
    "origin": "Python: cv.NORM_RELATIVE",
    "local": "Python:cv.NORM\\u相对"
  },
  {
    "origin": "flag",
    "local": "旗帜"
  },
  {
    "origin": "NORM_MINMAX",
    "local": "标准最小值"
  },
  {
    "origin": "Python: cv.NORM_MINMAX",
    "local": "Python:cv.NORM\\u MINMAX"
  },
  {
    "origin": "flag",
    "local": "旗帜"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "ReduceTypes",
    "local": "还原型"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "Enumerator",
    "local": "枚举器"
  },
  {
    "origin": "REDUCE_SUM",
    "local": "减少金额"
  },
  {
    "origin": "Python: cv.REDUCE_SUM",
    "local": "Python:cv.REDUCE\\u SUM"
  },
  {
    "origin": "the output is the sum of all rows/columns of the matrix.",
    "local": "输出是矩阵中所有行/列的总和。"
  },
  {
    "origin": "REDUCE_AVG",
    "local": "减少平均值"
  },
  {
    "origin": "Python: cv.REDUCE_AVG",
    "local": "Python:cv.REDUCE\\平均值"
  },
  {
    "origin": "the output is the mean vector of all rows/columns of the matrix.",
    "local": "输出是矩阵所有行/列的平均向量。"
  },
  {
    "origin": "REDUCE_MAX",
    "local": "减少最大值"
  },
  {
    "origin": "Python: cv.REDUCE_MAX",
    "local": "Python:cv.REDUCE\\最大值"
  },
  {
    "origin": "the output is the maximum (column/row-wise) of all rows/columns of the matrix.",
    "local": "输出是矩阵中所有行/列的最大值（按列/按行）。"
  },
  {
    "origin": "REDUCE_MIN",
    "local": "减少\\u MIN"
  },
  {
    "origin": "Python: cv.REDUCE_MIN",
    "local": "Python:cv.REDUCE\\u MIN"
  },
  {
    "origin": "the output is the minimum (column/row-wise) of all rows/columns of the matrix.",
    "local": "输出是矩阵中所有行/列的最小值（按列/按行）。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "RotateFlags",
    "local": "旋转标志"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "Enumerator",
    "local": "枚举器"
  },
  {
    "origin": "ROTATE_90_CLOCKWISE",
    "local": "顺时针旋转90度"
  },
  {
    "origin": "Python: cv.ROTATE_90_CLOCKWISE",
    "local": "Python:cv.ROTATE\\u 90\\u顺时针"
  },
  {
    "origin": "Rotate 90 degrees clockwise.",
    "local": "顺时针旋转90度。"
  },
  {
    "origin": "ROTATE_180",
    "local": "旋转180度"
  },
  {
    "origin": "Python: cv.ROTATE_180",
    "local": "Python:cv.ROTATE\\u 180"
  },
  {
    "origin": "Rotate 180 degrees clockwise.",
    "local": "顺时针旋转180度。"
  },
  {
    "origin": "ROTATE_90_COUNTERCLOCKWISE",
    "local": "逆时针旋转90度"
  },
  {
    "origin": "Python: cv.ROTATE_90_COUNTERCLOCKWISE",
    "local": "Python:cv.ROTATE\\u 90\\u逆时针"
  },
  {
    "origin": "Rotate 270 degrees clockwise.",
    "local": "顺时针旋转270度。"
  },
  {
    "origin": "Function Documentation",
    "local": "功能文档"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "absdiff()",
    "local": "absdiff（）"
  },
  {
    "origin": "void cv::absdiff",
    "local": "无效cv：：absdiff"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.absdiff(",
    "local": "cv.absdiff公司("
  },
  {
    "origin": "src1, src2[, dst]",
    "local": "src1，src2[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the per-element absolute difference between two arrays or between an array and a scalar.",
    "local": "计算两个数组之间或数组与标量之间的每元素绝对差。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "calculates: Absolute difference between two arrays when they have the same size and type:",
    "local": "当两个数组的大小和类型相同时，计算它们之间的绝对差："
  },
  {
    "origin": "\\[\\texttt{dst}(I) = \\texttt{saturate} (| \\texttt{src1}(I) - \\texttt{src2}(I)|)\\]",
    "local": "\\\\texttt{dst}（I）=\\texttt{saturate}（'124；\\texttt{src1}（I）-\\texttt{src2}（I）}124；]"
  },
  {
    "origin": "Absolute difference between an array and a scalar when the second array is constructed from Scalar or has as many elements as the number of channels in",
    "local": "当第二个数组是由标量构造的或具有与中通道数相同的元素时，数组和标量之间的绝对差"
  },
  {
    "origin": ":",
    "local": ":"
  },
  {
    "origin": "\\[\\texttt{dst}(I) = \\texttt{saturate} (| \\texttt{src1}(I) - \\texttt{src2} |)\\]",
    "local": "\\\\texttt{dst}（I）=\\texttt{saturate}（'124；\\texttt{src1}（I）-\\texttt{src2}\\124；]"
  },
  {
    "origin": "Absolute difference between a scalar and an array when the first array is constructed from Scalar or has as many elements as the number of channels in",
    "local": "当第一个数组是由标量构造的或元素的数量与数组中通道的数量相同时，标量和数组之间的绝对差"
  },
  {
    "origin": ":",
    "local": ":"
  },
  {
    "origin": "\\[\\texttt{dst}(I) = \\texttt{saturate} (| \\texttt{src1} - \\texttt{src2}(I) |)\\]",
    "local": "\\\\texttt{dst}（I）=\\texttt{saturate}（'124；\\texttt{src1}\\texttt{src2}（I）'124；]"
  },
  {
    "origin": "where I is a multi-dimensional index of array elements. In case of multi-channel arrays, each channel is processed independently.",
    "local": "其中I是数组元素的多维索引。对于多通道阵列，每个通道都是独立处理的。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "Saturation is not applied when the arrays have the depth CV_32S. You may even get a negative value in the case of overflow.",
    "local": "当阵列具有深度CVň32S时，不应用饱和。在溢出的情况下，甚至可能得到负值。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": "first input array or a scalar.",
    "local": "第一个输入数组或标量。"
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": "second input array or a scalar.",
    "local": "第二个输入数组或标量。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array that has the same size and type as input arrays.",
    "local": "与输入数组具有相同大小和类型的输出数组。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": "cv::abs(const Mat&amp;)",
    "local": "cv：：abs（const Mat&amp；）"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "add()",
    "local": "添加（）"
  },
  {
    "origin": "void cv::add",
    "local": "void cv:：添加"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "dtype",
    "local": "数据类型"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.add(",
    "local": "简历添加("
  },
  {
    "origin": "src1, src2[, dst[, mask[, dtype]]]",
    "local": "src1，src2[，dst[，mask[，dtype]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the per-element sum of two arrays or an array and a scalar.",
    "local": "计算两个数组或一个数组和一个标量的每元素和。"
  },
  {
    "origin": "The function add calculates:",
    "local": "函数add计算："
  },
  {
    "origin": "Sum of two arrays when both input arrays have the same size and the same number of channels:",
    "local": "当两个输入数组的大小和通道数相同时，两个数组的总和："
  },
  {
    "origin": "\\[\\texttt{dst}(I) = \\texttt{saturate} ( \\texttt{src1}(I) + \\texttt{src2}(I)) \\quad \\texttt{if mask}(I) \\ne0\\]",
    "local": "\\[\\texttt{dst}（I）=\\texttt{saturate}（\\texttt{src1}（I）+\\texttt{src2}（I））\\quad\\texttt{if mask}（I）\\ne0\\]"
  },
  {
    "origin": "Sum of an array and a scalar when src2 is constructed from Scalar or has the same number of elements as",
    "local": "当src2由标量构造或元素数与src2相同时，数组和标量之和"
  },
  {
    "origin": ":",
    "local": ":"
  },
  {
    "origin": "\\[\\texttt{dst}(I) = \\texttt{saturate} ( \\texttt{src1}(I) + \\texttt{src2} ) \\quad \\texttt{if mask}(I) \\ne0\\]",
    "local": "\\texttt{dst}（I）=\\texttt{saturate}（\\texttt{src1}（I）+\\texttt{src2}\\quad\\texttt{if mask}（I）\\ne0]"
  },
  {
    "origin": "Sum of a scalar and an array when src1 is constructed from Scalar or has the same number of elements as",
    "local": "当src1由标量构造或元素数与src1相同时，标量与数组之和"
  },
  {
    "origin": ":",
    "local": ":"
  },
  {
    "origin": "\\[\\texttt{dst}(I) = \\texttt{saturate} ( \\texttt{src1} + \\texttt{src2}(I) ) \\quad \\texttt{if mask}(I) \\ne0\\]",
    "local": "\\texttt{dst}（I）=\\texttt{saturate}（\\texttt{src1}+\\texttt{src2}（I）\\quad\\texttt{if mask}（I）\\ne0]"
  },
  {
    "origin": "where",
    "local": "哪里"
  },
  {
    "origin": "is a multi-dimensional index of array elements. In case of multi-channel arrays, each channel is processed independently.",
    "local": "是数组元素的多维索引。对于多通道阵列，每个通道都是独立处理的。"
  },
  {
    "origin": "The first function in the list above can be replaced with matrix expressions:",
    "local": "上面列表中的第一个函数可以替换为矩阵表达式："
  },
  {
    "origin": "The input arrays and the output array can all have the same or different depths. For example, you can add a 16-bit unsigned array to a 8-bit signed array and store the sum as a 32-bit floating-point array. Depth of the output array is determined by the dtype parameter. In the second and third cases above, as well as in the first case, when",
    "local": "输入数组和输出数组可以具有相同或不同的深度。例如，可以将一个16位无符号数组添加到一个8位有符号数组中，并将其和存储为32位浮点数组。输出数组的深度由dtype参数决定。在上述第二和第三种情况下，以及在第一种情况下"
  },
  {
    "origin": "==",
    "local": "=="
  },
  {
    "origin": ", dtype can be set to the default -1. In this case, the output array will have the same depth as the input array, be it src1, src2 or both.",
    "local": "，可以将dtype设置为默认值-1。在这种情况下，输出数组的深度将与输入数组的深度相同，可以是src1、src2，也可以是两者。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "Saturation is not applied when the output array has the depth CV_32S. You may even get result of an incorrect sign in the case of overflow.",
    "local": "当输出阵列具有深度CVň32S时，不应用饱和。在溢出的情况下，您甚至可能得到错误符号的结果。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": "first input array or a scalar.",
    "local": "第一个输入数组或标量。"
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": "second input array or a scalar.",
    "local": "第二个输入数组或标量。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array that has the same size and number of channels as the input array(s); the depth is defined by dtype or src1/src2.",
    "local": "与输入阵列具有相同大小和通道数的输出阵列；深度由dtype或src1/src2定义。"
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "optional operation mask - 8-bit single channel array, that specifies elements of the output array to be changed.",
    "local": "可选操作掩码-8位单通道数组，指定要更改的输出数组元素。"
  },
  {
    "origin": "dtype",
    "local": "数据类型"
  },
  {
    "origin": "optional depth of the output array (see the discussion below).",
    "local": "输出数组的可选深度（参见下面的讨论）。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "addWeighted()",
    "local": "添加权重（）"
  },
  {
    "origin": "void cv::addWeighted",
    "local": "void cv：：添加权重"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "alpha",
    "local": "阿尔法"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "beta",
    "local": "贝塔"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "gamma",
    "local": "伽马"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "dtype",
    "local": "数据类型"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.addWeighted(",
    "local": "cv.加权("
  },
  {
    "origin": "src1, alpha, src2, beta, gamma[, dst[, dtype]]",
    "local": "src1，alpha，src2，beta，gamma[，dst[，dtype]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the weighted sum of two arrays.",
    "local": "计算两个数组的加权和。"
  },
  {
    "origin": "The function addWeighted calculates the weighted sum of two arrays as follows:",
    "local": "函数addWeighted计算两个数组的加权和，如下所示："
  },
  {
    "origin": "\\[\\texttt{dst} (I)= \\texttt{saturate} ( \\texttt{src1} (I)* \\texttt{alpha} + \\texttt{src2} (I)* \\texttt{beta} + \\texttt{gamma} )\\]",
    "local": "\\\\textt{dst}（I）=\\textt{saturate}（\\textt{src1}（I）*\\textt{alpha}+\\textt{src2}（I）*\\textt{beta}+\\textt{gamma}\\"
  },
  {
    "origin": "where I is a multi-dimensional index of array elements. In case of multi-channel arrays, each channel is processed independently. The function can be replaced with a matrix expression:",
    "local": "其中I是数组元素的多维索引。对于多通道阵列，每个通道都是独立处理的。该函数可替换为矩阵表达式："
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "Saturation is not applied when the output array has the depth CV_32S. You may even get result of an incorrect sign in the case of overflow.",
    "local": "当输出阵列具有深度CVň32S时，不应用饱和。在溢出的情况下，您甚至可能得到错误符号的结果。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": "first input array.",
    "local": "第一个输入数组。"
  },
  {
    "origin": "alpha",
    "local": "阿尔法"
  },
  {
    "origin": "weight of the first array elements.",
    "local": "第一个数组元素的权重。"
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": "second input array of the same size and channel number as src1.",
    "local": "与src1大小和通道号相同的第二个输入数组。"
  },
  {
    "origin": "beta",
    "local": "贝塔"
  },
  {
    "origin": "weight of the second array elements.",
    "local": "第二个数组元素的权重。"
  },
  {
    "origin": "gamma",
    "local": "伽马"
  },
  {
    "origin": "scalar added to each sum.",
    "local": "添加到每个和的标量。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array that has the same size and number of channels as the input arrays.",
    "local": "与输入数组具有相同大小和通道数的输出数组。"
  },
  {
    "origin": "dtype",
    "local": "数据类型"
  },
  {
    "origin": "optional depth of the output array; when both input arrays have the same depth, dtype can be set to -1, which will be equivalent to",
    "local": "输出阵列的可选深度；当两个输入数组具有相同的深度时，可以将dtype设置为-1，这相当于"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "batchDistance()",
    "local": "垃圾箱（）"
  },
  {
    "origin": "void cv::batchDistance",
    "local": "void cv:：batchDistance无效cv:：batchDistance"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dist",
    "local": "分布"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "dtype",
    "local": "数据类型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "nidx",
    "local": "nidx公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "normType",
    "local": "标准"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "K",
    "local": "K"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "update",
    "local": "更新"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "crosscheck",
    "local": "交叉检查"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dist, nidx",
    "local": "分布，nidx"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.batchDistance(",
    "local": "cv距离("
  },
  {
    "origin": "src1, src2, dtype[, dist[, nidx[, normType[, K[, mask[, update[, crosscheck]]]]]]]",
    "local": "src1、src2、dtype[、dist[、nidx[、normType[、K[、mask[、update[、crosscheck]]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "naive nearest neighbor finder",
    "local": "朴素的近邻查找器"
  },
  {
    "origin": "see",
    "local": "看见"
  },
  {
    "origin": "http://en.wikipedia.org/wiki/Nearest_neighbor_search",
    "local": "http://en.wikipedia.org/wiki/Nearest_neighbor_search"
  },
  {
    "origin": "document",
    "local": "文件"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "bitwise_and()",
    "local": "按位与（）"
  },
  {
    "origin": "void cv::bitwise_and",
    "local": "void cv：：按位\\u和"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.bitwise_and(",
    "local": "cv.按位\\u和("
  },
  {
    "origin": "src1, src2[, dst[, mask]]",
    "local": "src1，src2[，dst[，mask]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "computes bitwise conjunction of the two arrays (dst = src1 &amp; src2) Calculates the per-element bit-wise conjunction of two arrays or an array and a scalar.",
    "local": "计算两个数组的按位合并（dst=src1&amp；src2）计算两个数组或一个数组和一个标量的逐元素逐位连接。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "calculates the per-element bit-wise logical conjunction for: Two arrays when src1 and src2 have the same size:",
    "local": "当src1和src2的大小相同时，计算以下两个数组的每元素逐位逻辑连接："
  },
  {
    "origin": "\\[\\texttt{dst} (I) = \\texttt{src1} (I) \\wedge \\texttt{src2} (I) \\quad \\texttt{if mask} (I) \\ne0\\]",
    "local": "\\[\\texttt{dst}（I）=\\texttt{src1}（I）\\wedge\\texttt{src2}（I）\\quad\\texttt{if mask}（I）\\ne0\\]"
  },
  {
    "origin": "An array and a scalar when src2 is constructed from Scalar or has the same number of elements as",
    "local": "当src2是由标量构造的或元素数与src2相同时，数组和标量"
  },
  {
    "origin": ":",
    "local": ":"
  },
  {
    "origin": "\\[\\texttt{dst} (I) = \\texttt{src1} (I) \\wedge \\texttt{src2} \\quad \\texttt{if mask} (I) \\ne0\\]",
    "local": "\\\\texttt{dst}（I）=\\texttt{src1}（I）\\wedge\\texttt{src2}\\quad\\texttt{if mask}（I）\\ne0\\]"
  },
  {
    "origin": "A scalar and an array when src1 is constructed from Scalar or has the same number of elements as",
    "local": "当src1是由标量构造的或元素数与src1相同时，标量和数组"
  },
  {
    "origin": ":",
    "local": ":"
  },
  {
    "origin": "\\[\\texttt{dst} (I) = \\texttt{src1} \\wedge \\texttt{src2} (I) \\quad \\texttt{if mask} (I) \\ne0\\]",
    "local": "\\\\texttt{dst}（I）=\\texttt{src1}\\wedge\\texttt{src2}（I）\\quad\\texttt{if mask}（I）\\ne0]"
  },
  {
    "origin": "In case of floating-point arrays, their machine-specific bit representations (usually IEEE754-compliant) are used for the operation. In case of multi-channel arrays, each channel is processed independently. In the second and third cases above, the scalar is first converted to the array type.",
    "local": "对于浮点数组，它们的机器特定位表示（通常符合IEEE754）用于操作。对于多通道阵列，每个通道都是独立处理的。在上面的第二和第三种情况中，标量首先转换为数组类型。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": "first input array or a scalar.",
    "local": "第一个输入数组或标量。"
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": "second input array or a scalar.",
    "local": "第二个输入数组或标量。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array that has the same size and type as the input arrays.",
    "local": "与输入数组具有相同大小和类型的输出数组。"
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "optional operation mask, 8-bit single channel array, that specifies elements of the output array to be changed.",
    "local": "可选操作掩码，8位单通道数组，指定要更改的输出数组元素。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "bitwise_not()",
    "local": "按位\\u not（）"
  },
  {
    "origin": "void cv::bitwise_not",
    "local": "void cv：：按位\\u not"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.bitwise_not(",
    "local": "cv.bitwise\\不("
  },
  {
    "origin": "src[, dst[, mask]]",
    "local": "src[，dst[，mask]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Inverts every bit of an array.",
    "local": "反转数组的每一位。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "calculates per-element bit-wise inversion of the input array:",
    "local": "计算输入数组的每元素逐位反转："
  },
  {
    "origin": "\\[\\texttt{dst} (I) = \\neg \\texttt{src} (I)\\]",
    "local": "\\[\\texttt{dst}（I）=\\no\\text{src}（I）\\"
  },
  {
    "origin": "In case of a floating-point input array, its machine-specific bit representation (usually IEEE754-compliant) is used for the operation. In case of multi-channel arrays, each channel is processed independently.",
    "local": "在浮点输入数组的情况下，其特定于机器的位表示（通常符合IEEE754）用于操作。对于多通道阵列，每个通道都是独立处理的。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input array.",
    "local": "输入数组。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array that has the same size and type as the input array.",
    "local": "与输入数组具有相同大小和类型的输出数组。"
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "optional operation mask, 8-bit single channel array, that specifies elements of the output array to be changed.",
    "local": "可选操作掩码，8位单通道数组，指定要更改的输出数组元素。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "bitwise_or()",
    "local": "按位\\u或（）"
  },
  {
    "origin": "void cv::bitwise_or",
    "local": "void cv：：按位\\u或"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.bitwise_or(",
    "local": "cv.按位\\u或("
  },
  {
    "origin": "src1, src2[, dst[, mask]]",
    "local": "src1，src2[，dst[，mask]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the per-element bit-wise disjunction of two arrays or an array and a scalar.",
    "local": "计算两个数组或一个数组和一个标量的逐元素逐位析取。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "calculates the per-element bit-wise logical disjunction for: Two arrays when src1 and src2 have the same size:",
    "local": "当src1和src2的大小相同时，计算两个数组的每元素逐位逻辑析取："
  },
  {
    "origin": "\\[\\texttt{dst} (I) = \\texttt{src1} (I) \\vee \\texttt{src2} (I) \\quad \\texttt{if mask} (I) \\ne0\\]",
    "local": "\\\\texttt{dst}（I）=\\texttt{src1}（I）\\vee\\texttt{src2}（I）\\quad\\texttt{if mask}（I）\\ne0\\]"
  },
  {
    "origin": "An array and a scalar when src2 is constructed from Scalar or has the same number of elements as",
    "local": "当src2是由标量构造的或元素数与src2相同时，数组和标量"
  },
  {
    "origin": ":",
    "local": ":"
  },
  {
    "origin": "\\[\\texttt{dst} (I) = \\texttt{src1} (I) \\vee \\texttt{src2} \\quad \\texttt{if mask} (I) \\ne0\\]",
    "local": "\\\\texttt{dst}（I）=\\texttt{src1}（I）\\vee\\texttt{src2}\\quad\\texttt{if mask}（I）\\ne0\\]"
  },
  {
    "origin": "A scalar and an array when src1 is constructed from Scalar or has the same number of elements as",
    "local": "当src1是由标量构造的或元素数与src1相同时，标量和数组"
  },
  {
    "origin": ":",
    "local": ":"
  },
  {
    "origin": "\\[\\texttt{dst} (I) = \\texttt{src1} \\vee \\texttt{src2} (I) \\quad \\texttt{if mask} (I) \\ne0\\]",
    "local": "\\\\texttt{dst}（I）=\\texttt{src1}\\vee\\texttt{src2}（I）\\quad\\texttt{if mask}（I）\\ne0\\]"
  },
  {
    "origin": "In case of floating-point arrays, their machine-specific bit representations (usually IEEE754-compliant) are used for the operation. In case of multi-channel arrays, each channel is processed independently. In the second and third cases above, the scalar is first converted to the array type.",
    "local": "对于浮点数组，它们的机器特定位表示（通常符合IEEE754）用于操作。对于多通道阵列，每个通道都是独立处理的。在上面的第二和第三种情况中，标量首先转换为数组类型。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": "first input array or a scalar.",
    "local": "第一个输入数组或标量。"
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": "second input array or a scalar.",
    "local": "第二个输入数组或标量。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array that has the same size and type as the input arrays.",
    "local": "与输入数组具有相同大小和类型的输出数组。"
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "optional operation mask, 8-bit single channel array, that specifies elements of the output array to be changed.",
    "local": "可选操作掩码，8位单通道数组，指定要更改的输出数组元素。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "bitwise_xor()",
    "local": "按位异或（）"
  },
  {
    "origin": "void cv::bitwise_xor",
    "local": "void cv：：按位异或"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.bitwise_xor(",
    "local": "cv.按位异或("
  },
  {
    "origin": "src1, src2[, dst[, mask]]",
    "local": "src1，src2[，dst[，mask]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the per-element bit-wise \"exclusive or\" operation on two arrays or an array and a scalar.",
    "local": "计算对两个数组或一个数组和一个标量的逐元素逐位“异或”运算。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "calculates the per-element bit-wise logical \"exclusive-or\" operation for: Two arrays when src1 and src2 have the same size:",
    "local": "当src1和src2的大小相同时，计算两个数组的逐元素逐位逻辑“异或”操作："
  },
  {
    "origin": "\\[\\texttt{dst} (I) = \\texttt{src1} (I) \\oplus \\texttt{src2} (I) \\quad \\texttt{if mask} (I) \\ne0\\]",
    "local": "\\\\texttt{dst}（I）=\\texttt{src1}（I）\\oplus\\texttt{src2}（I）\\quad\\texttt{if mask}（I）\\ne0\\]"
  },
  {
    "origin": "An array and a scalar when src2 is constructed from Scalar or has the same number of elements as",
    "local": "当src2是由标量构造的或元素数与src2相同时，数组和标量"
  },
  {
    "origin": ":",
    "local": ":"
  },
  {
    "origin": "\\[\\texttt{dst} (I) = \\texttt{src1} (I) \\oplus \\texttt{src2} \\quad \\texttt{if mask} (I) \\ne0\\]",
    "local": "\\\\texttt{dst}（I）=\\texttt{src1}（I）\\oplus\\texttt{src2}\\quad\\texttt{if mask}（I）\\ne0]"
  },
  {
    "origin": "A scalar and an array when src1 is constructed from Scalar or has the same number of elements as",
    "local": "当src1是由标量构造的或元素数与src1相同时，标量和数组"
  },
  {
    "origin": ":",
    "local": ":"
  },
  {
    "origin": "\\[\\texttt{dst} (I) = \\texttt{src1} \\oplus \\texttt{src2} (I) \\quad \\texttt{if mask} (I) \\ne0\\]",
    "local": "\\\\texttt{dst}（I）=\\texttt{src1}\\oplus\\texttt{src2}（I）\\quad\\texttt{if mask}（I）\\ne0]"
  },
  {
    "origin": "In case of floating-point arrays, their machine-specific bit representations (usually IEEE754-compliant) are used for the operation. In case of multi-channel arrays, each channel is processed independently. In the 2nd and 3rd cases above, the scalar is first converted to the array type.",
    "local": "对于浮点数组，它们的机器特定位表示（通常符合IEEE754）用于操作。对于多通道阵列，每个通道都是独立处理的。在上面的第2和第3种情况中，标量首先转换为数组类型。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": "first input array or a scalar.",
    "local": "第一个输入数组或标量。"
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": "second input array or a scalar.",
    "local": "第二个输入数组或标量。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array that has the same size and type as the input arrays.",
    "local": "与输入数组具有相同大小和类型的输出数组。"
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "optional operation mask, 8-bit single channel array, that specifies elements of the output array to be changed.",
    "local": "可选操作掩码，8位单通道数组，指定要更改的输出数组元素。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "borderInterpolate()",
    "local": "边框"
  },
  {
    "origin": "int cv::borderInterpolate",
    "local": "int cv：：边界插值"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "p",
    "local": "p"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "len",
    "local": "只有"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.borderInterpolate(",
    "local": "cv.边界插值("
  },
  {
    "origin": "p, len, borderType",
    "local": "p、 长度，边框类型"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Computes the source location of an extrapolated pixel.",
    "local": "计算外推像素的源位置。"
  },
  {
    "origin": "The function computes and returns the coordinate of a donor pixel corresponding to the specified extrapolated pixel when using the specified extrapolation border mode. For example, if you use",
    "local": "当使用指定的外推边界模式时，该函数计算并返回与指定的外推像素相对应的施主像素的坐标。例如，如果您使用"
  },
  {
    "origin": "mode in the horizontal direction,",
    "local": "水平方向的模式，"
  },
  {
    "origin": "in the vertical direction and want to compute value of the \"virtual\" pixel Point(-5, 100) in a floating-point image img , it looks like:",
    "local": "在垂直方向上，如果要计算浮点图像img中的“虚”像素点（-5100）的值，它看起来像："
  },
  {
    "origin": "Normally, the function is not called directly. It is used inside filtering functions and also in copyMakeBorder.",
    "local": "通常不直接调用函数。它用在过滤函数中，也用在copyMakeBorder中。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "p",
    "local": "p"
  },
  {
    "origin": "0-based coordinate of the extrapolated pixel along one of the axes, likely &lt;0 or &gt;= len",
    "local": "沿其中一个轴的外推像素的基于0的坐标，很可能&lt；0或&gt；=伦恩"
  },
  {
    "origin": "len",
    "local": "只有"
  },
  {
    "origin": "Length of the array along the corresponding axis.",
    "local": "沿相应轴的数组长度。"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "Border type, one of the",
    "local": "边框类型，其中一个"
  },
  {
    "origin": ", except for",
    "local": "，除了"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": ". When borderType==",
    "local": "是 啊。当BorderType=="
  },
  {
    "origin": ", the function always returns -1, regardless of p and len.",
    "local": "，不管p和len如何，函数总是返回-1。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "calcCovarMatrix()",
    "local": "CalcCovarMatrix（）"
  },
  {
    "origin": "[1/2]",
    "local": "[1/2]"
  },
  {
    "origin": "void cv::calcCovarMatrix",
    "local": "void cv：：calcCovarMatrix"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "*",
    "local": "*"
  },
  {
    "origin": "samples",
    "local": "样品"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "nsamples",
    "local": "示例"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "covar",
    "local": "挖掘"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "mean",
    "local": "意思是"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ctype",
    "local": "C型"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "covar, mean",
    "local": "科瓦尔，我是说"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.calcCovarMatrix(",
    "local": "cv.calcCovarMatrix公司("
  },
  {
    "origin": "samples, mean, flags[, covar[, ctype]]",
    "local": "样本，平均值，标志[，covar[，ctype]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the covariance matrix of a set of vectors.",
    "local": "计算一组向量的协方差矩阵。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "calculates the covariance matrix and, optionally, the mean vector of the set of input vectors.",
    "local": "计算协方差矩阵和（可选）输入向量集的平均向量。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "samples",
    "local": "样品"
  },
  {
    "origin": "samples stored as separate matrices",
    "local": "作为单独矩阵存储的样本"
  },
  {
    "origin": "nsamples",
    "local": "示例"
  },
  {
    "origin": "number of samples",
    "local": "样本数"
  },
  {
    "origin": "covar",
    "local": "挖掘"
  },
  {
    "origin": "output covariance matrix of the type ctype and square size.",
    "local": "输出ctype类型和平方大小的协方差矩阵。"
  },
  {
    "origin": "mean",
    "local": "意思是"
  },
  {
    "origin": "input or output (depending on the flags) array as the average value of the input vectors.",
    "local": "输入或输出（取决于标志）数组作为输入向量的平均值。"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": "operation flags as a combination of",
    "local": "操作标志作为"
  },
  {
    "origin": "ctype",
    "local": "C型"
  },
  {
    "origin": "type of the matrixl; it equals 'CV_64F' by default.",
    "local": "矩阵的类型；默认情况下等于“cv64f”。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "InputArrayOfArrays",
    "local": "输入阵列"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "calcCovarMatrix()",
    "local": "CalcCovarMatrix（）"
  },
  {
    "origin": "[2/2]",
    "local": "[2/2]"
  },
  {
    "origin": "void cv::calcCovarMatrix",
    "local": "void cv：：calcCovarMatrix"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "samples",
    "local": "样品"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "covar",
    "local": "挖掘"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mean",
    "local": "意思是"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ctype",
    "local": "C型"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "covar, mean",
    "local": "科瓦尔，我是说"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.calcCovarMatrix(",
    "local": "cv.calcCovarMatrix公司("
  },
  {
    "origin": "samples, mean, flags[, covar[, ctype]]",
    "local": "样本，平均值，标志[，covar[，ctype]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "use",
    "local": "使用"
  },
  {
    "origin": "or",
    "local": "或"
  },
  {
    "origin": "flag",
    "local": "旗帜"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "samples",
    "local": "样品"
  },
  {
    "origin": "samples stored as rows/columns of a single matrix.",
    "local": "样本存储为单个矩阵的行/列。"
  },
  {
    "origin": "covar",
    "local": "挖掘"
  },
  {
    "origin": "output covariance matrix of the type ctype and square size.",
    "local": "输出ctype类型和平方大小的协方差矩阵。"
  },
  {
    "origin": "mean",
    "local": "意思是"
  },
  {
    "origin": "input or output (depending on the flags) array as the average value of the input vectors.",
    "local": "输入或输出（取决于标志）数组作为输入向量的平均值。"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": "operation flags as a combination of",
    "local": "操作标志作为"
  },
  {
    "origin": "ctype",
    "local": "C型"
  },
  {
    "origin": "type of the matrixl; it equals 'CV_64F' by default.",
    "local": "矩阵的类型；默认情况下等于“cv64f”。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "cartToPolar()",
    "local": "cartToPolar（）"
  },
  {
    "origin": "void cv::cartToPolar",
    "local": "空心cv：：cartToPolar"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "x",
    "local": "十"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "y",
    "local": "y"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "magnitude",
    "local": "震级"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "angle",
    "local": "角"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "angleInDegrees",
    "local": "角度"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "magnitude, angle",
    "local": "幅值、角度"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cartToPolar(",
    "local": "cartToPolar简历("
  },
  {
    "origin": "x, y[, magnitude[, angle[, angleInDegrees]]]",
    "local": "x、 y[，幅值[，角度[，角度指数]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the magnitude and angle of 2D vectors.",
    "local": "计算二维矢量的幅值和角度。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "calculates either the magnitude, angle, or both for every 2D vector (x(I),y(I)):",
    "local": "计算每个二维向量（x（I），y（I））的幅值和/或角度："
  },
  {
    "origin": "\\[\\begin{array}{l} \\texttt{magnitude} (I)= \\sqrt{\\texttt{x}(I)^2+\\texttt{y}(I)^2} , \\\\ \\texttt{angle} (I)= \\texttt{atan2} ( \\texttt{y} (I), \\texttt{x} (I))[ \\cdot180 / \\pi ] \\end{array}\\]",
    "local": "\\[\\begin{array}{l}\\texttt{magnitude}（I）=\\sqrt{\\texttt{x}（I）^2+\\texttt{y}（I）^2}，\\\\\\texttt{angle}（I）=\\texttt{atan2}（\\texttt{y}（I），\\texttt{x}（I））[\\cdot180/\\pi]\\end{array}\\]"
  },
  {
    "origin": "The angles are calculated with accuracy about 0.3 degrees. For the point (0,0), the angle is set to 0.",
    "local": "角度的计算精度约为0.3度。对于点（0,0），角度设置为0。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "x",
    "local": "十"
  },
  {
    "origin": "array of x-coordinates; this must be a single-precision or double-precision floating-point array.",
    "local": "x坐标数组；这必须是单精度或双精度浮点数组。"
  },
  {
    "origin": "y",
    "local": "y"
  },
  {
    "origin": "array of y-coordinates, that must have the same size and same type as x.",
    "local": "y坐标数组，其大小和类型必须与x相同。"
  },
  {
    "origin": "magnitude",
    "local": "震级"
  },
  {
    "origin": "output array of magnitudes of the same size and type as x.",
    "local": "输出与x大小和类型相同的震级数组。"
  },
  {
    "origin": "angle",
    "local": "角"
  },
  {
    "origin": "output array of angles that has the same size and type as x; the angles are measured in radians (from 0 to 2*Pi) or in degrees (0 to 360 degrees).",
    "local": "输出与x大小和类型相同的角度数组；角度以弧度（从0到2*Pi）或度（0到360度）为单位测量。"
  },
  {
    "origin": "angleInDegrees",
    "local": "角度"
  },
  {
    "origin": "a flag, indicating whether the angles are measured in radians (which is by default), or in degrees.",
    "local": "一种标志，指示角度是以弧度（默认情况下是弧度）还是以度数度量。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "checkRange()",
    "local": "检查范围（）"
  },
  {
    "origin": "bool cv::checkRange",
    "local": "布尔cv：：检查范围"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "a",
    "local": "一"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "quiet",
    "local": "安静的"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "*",
    "local": "*"
  },
  {
    "origin": "pos",
    "local": "销售时点情报系统"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "minVal",
    "local": "小选项"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "maxVal",
    "local": "马克斯。"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval, pos",
    "local": "报复，摆姿势"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.checkRange(",
    "local": "cv.检查范围("
  },
  {
    "origin": "a[, quiet[, minVal[, maxVal]]]",
    "local": "a[，安静[，最小值[，最大值]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Checks every element of an input array for invalid values.",
    "local": "检查输入数组的每个元素是否存在无效值。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "checks that every array element is neither NaN nor infinite. When minVal &gt; -DBL_MAX and maxVal &lt; DBL_MAX, the function also checks that each value is between minVal and maxVal. In case of multi-channel arrays, each channel is processed independently. If some values are out of range, position of the first outlier is stored in pos (when pos != NULL). Then, the function either returns false (when quiet=true) or throws an exception.",
    "local": "检查每个数组元素既不是NaN也不是无限。当minVal&gt-DBL_MAX和maxVal&lt；DBL_MAX，该函数还检查每个值是否介于minVal和maxVal之间。对于多通道阵列，每个通道都是独立处理的。如果某些值超出范围，则第一个异常值的位置存储在pos中（当pos！=空）。然后，函数要么返回false（当quiet=true时），要么抛出异常。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "a",
    "local": "一"
  },
  {
    "origin": "input array.",
    "local": "输入数组。"
  },
  {
    "origin": "quiet",
    "local": "安静的"
  },
  {
    "origin": "a flag, indicating whether the functions quietly return false when the array elements are out of range or they throw an exception.",
    "local": "一个标志，指示当数组元素超出范围或抛出异常时函数是否悄悄返回false。"
  },
  {
    "origin": "pos",
    "local": "销售时点情报系统"
  },
  {
    "origin": "optional output parameter, when not NULL, must be a pointer to array of src.dims elements.",
    "local": "可选输出参数（不为NULL时）必须是指向src.dims元素数组的指针。"
  },
  {
    "origin": "minVal",
    "local": "小选项"
  },
  {
    "origin": "inclusive lower boundary of valid values range.",
    "local": "包含有效值范围的下限。"
  },
  {
    "origin": "maxVal",
    "local": "马克斯。"
  },
  {
    "origin": "exclusive upper boundary of valid values range.",
    "local": "有效值范围的独占上限。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "compare()",
    "local": "比较（）"
  },
  {
    "origin": "void cv::compare",
    "local": "void cv:：比较"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "cmpop",
    "local": "cmpop公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.compare(",
    "local": "cv.比较("
  },
  {
    "origin": "src1, src2, cmpop[, dst]",
    "local": "src1，src2，cmpop[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Performs the per-element comparison of two arrays or an array and scalar value.",
    "local": "对两个数组或一个数组和标量值执行每元素比较。"
  },
  {
    "origin": "The function compares: Elements of two arrays when src1 and src2 have the same size:",
    "local": "当src1和src2的大小相同时，该函数比较两个数组的元素："
  },
  {
    "origin": "\\[\\texttt{dst} (I) = \\texttt{src1} (I) \\,\\texttt{cmpop}\\, \\texttt{src2} (I)\\]",
    "local": "\\\\texttt{dst}（I）=\\texttt{src1}（I）\\\\texttt{cmpop}\\\\，\\texttt{src2}（I）]"
  },
  {
    "origin": "Elements of src1 with a scalar src2 when src2 is constructed from Scalar or has a single element:",
    "local": "当src2由标量构造或具有单个元素时，具有标量src2的src1元素："
  },
  {
    "origin": "\\[\\texttt{dst} (I) = \\texttt{src1}(I) \\,\\texttt{cmpop}\\, \\texttt{src2}\\]",
    "local": "\\\\texttt{dst}（I）=\\texttt{src1}（I）\\\\texttt{cmpop}\\\\，\\texttt{src2}]"
  },
  {
    "origin": "src1 with elements of src2 when src1 is constructed from Scalar or has a single element:",
    "local": "当src1由标量构造或具有单个元素时，src1具有src2的元素："
  },
  {
    "origin": "\\[\\texttt{dst} (I) = \\texttt{src1} \\,\\texttt{cmpop}\\, \\texttt{src2} (I)\\]",
    "local": "\\\\texttt{dst}（I）=\\texttt{src1}\\\\texttt{cmpop}\\，\\texttt{src2}（I）]"
  },
  {
    "origin": "When the comparison result is true, the corresponding element of output array is set to 255. The comparison operations can be replaced with the equivalent matrix expressions:",
    "local": "当比较结果为真时，输出数组对应的元素设置为255，比较运算可以用等价的矩阵表达式代替："
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": "first input array or a scalar; when it is an array, it must have a single channel.",
    "local": "第一输入阵列或标量；当它是一个数组时，它必须有一个通道。"
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": "second input array or a scalar; when it is an array, it must have a single channel.",
    "local": "第二输入阵列或标量；当它是一个数组时，它必须有一个通道。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array of type ref CV_8U that has the same size and the same number of channels as the input arrays.",
    "local": "ref CVï8U类型的输出数组，与输入数组具有相同的大小和通道数。"
  },
  {
    "origin": "cmpop",
    "local": "cmpop公司"
  },
  {
    "origin": "a flag, that specifies correspondence between the arrays (",
    "local": "一种标志，用于指定数组之间的对应关系("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "completeSymm()",
    "local": "完全对称（）"
  },
  {
    "origin": "void cv::completeSymm",
    "local": "void cv：：completeSymm"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "lowerToUpper",
    "local": "下部上部"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.completeSymm(",
    "local": "cv.completeSymm公司("
  },
  {
    "origin": "m[, lowerToUpper]",
    "local": "m[，上下]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Copies the lower or the upper half of a square matrix to its another half.",
    "local": "将方阵的下半部分或上半部分复制到另一半。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "copies the lower or the upper half of a square matrix to its another half. The matrix diagonal remains unchanged:",
    "local": "将方阵的下半部分或上半部分复制到另一半。矩阵对角线保持不变："
  },
  {
    "origin": "\\(\\texttt{m}_{ij}=\\texttt{m}_{ji}\\) for \\(i &gt; j\\) if lowerToUpper=false",
    "local": "\\\\texttt{m}uyy}=\\texttt{m}uji}\\表示\\（i&gt；j\\）如果lowerToUpper=false"
  },
  {
    "origin": "\\(\\texttt{m}_{ij}=\\texttt{m}_{ji}\\) for \\(i &lt; j\\) if lowerToUpper=true",
    "local": "\\\\\\texttt{m}uy}=\\texttt{m}uji}\\表示\\（i&lt；j\\）如果lowerToUpper=true"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": "input-output floating-point square matrix.",
    "local": "输入输出浮点方阵。"
  },
  {
    "origin": "lowerToUpper",
    "local": "下部上部"
  },
  {
    "origin": "operation flag; if true, the lower half is copied to the upper half. Otherwise, the upper half is copied to the lower half.",
    "local": "操作标志；如果为true，则将下半部分复制到上半部分。否则，上半部分复制到下半部分。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "convertFp16()",
    "local": "转换FP16（）"
  },
  {
    "origin": "void cv::convertFp16",
    "local": "void cv:：convertfp16"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.convertFp16(",
    "local": "cv.FP16型("
  },
  {
    "origin": "src[, dst]",
    "local": "src[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Converts an array to half precision floating number.",
    "local": "将数组转换为半精度浮点数。"
  },
  {
    "origin": "This function converts FP32 (single precision floating point) from/to FP16 (half precision floating point). CV_16S format is used to represent FP16 data. There are two use modes (src -&gt; dst): CV_32F -&gt; CV_16S and CV_16S -&gt; CV_32F. The input array has to have type of CV_32F or CV_16S to represent the bit depth. If the input array is neither of them, the function will raise an error. The format of half precision floating point is defined in IEEE 754-2008.",
    "local": "此函数用于将FP32（单精度浮点）从/转换为FP16（半精度浮点）。CV\\ U 16S格式用于表示FP16数据。有两种使用模式（src-&gt；dst）：CV32f-&gt；CV_16S和CV_16S-&gt；简历32F。输入数组的类型必须为CVè32F或CVè16S，以表示位深度。如果输入数组两者都不是，则函数将引发错误。半精度浮点格式在ieee754-2008中定义。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input array.",
    "local": "输入数组。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array.",
    "local": "输出数组。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "convertScaleAbs()",
    "local": "convertScaleAbs（）"
  },
  {
    "origin": "void cv::convertScaleAbs",
    "local": "void cv:：convertScaleAbs无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "alpha",
    "local": "阿尔法"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "beta",
    "local": "贝塔"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.convertScaleAbs(",
    "local": "cv.convertScaleAbs公司("
  },
  {
    "origin": "src[, dst[, alpha[, beta]]]",
    "local": "src[，dst[，alpha[，beta]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Scales, calculates absolute values, and converts the result to 8-bit.",
    "local": "缩放、计算绝对值，并将结果转换为8位。"
  },
  {
    "origin": "On each element of the input array, the function convertScaleAbs performs three operations sequentially: scaling, taking an absolute value, conversion to an unsigned 8-bit type:",
    "local": "在输入数组的每个元素上，convertScaleAbs函数依次执行三个操作：缩放、获取绝对值、转换为无符号8位类型："
  },
  {
    "origin": "\\[\\texttt{dst} (I)= \\texttt{saturate\\_cast&lt;uchar&gt;} (| \\texttt{src} (I)* \\texttt{alpha} + \\texttt{beta} |)\\]",
    "local": "\\[\\texttt{dst}（I）=\\texttt{saturate\\\\u cast&lt；uchar&gt；}（|\\texttt{src}（I）*\\texttt{alpha}+\\texttt{beta}}\\]"
  },
  {
    "origin": "In case of multi-channel arrays, the function processes each channel independently. When the output is not 8-bit, the operation can be emulated by calling the",
    "local": "对于多通道阵列，该函数独立处理每个通道。当输出不是8位时，可以通过调用"
  },
  {
    "origin": "method (or by using matrix expressions) and then by calculating an absolute value of the result. For example:",
    "local": "方法（或使用矩阵表达式），然后计算结果的绝对值。例如："
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input array.",
    "local": "输入数组。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array.",
    "local": "输出数组。"
  },
  {
    "origin": "alpha",
    "local": "阿尔法"
  },
  {
    "origin": "optional scale factor.",
    "local": "可选比例因子。"
  },
  {
    "origin": "beta",
    "local": "贝塔"
  },
  {
    "origin": "optional delta added to the scaled values.",
    "local": "添加到缩放值的可选增量。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ", cv::abs(const Mat&amp;)",
    "local": "，cv：：abs（常数）"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "copyMakeBorder()",
    "local": "copyMakeBorder（）"
  },
  {
    "origin": "void cv::copyMakeBorder",
    "local": "void cv:：copyMakeBorder无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "top",
    "local": "顶部"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "bottom",
    "local": "底部"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "left",
    "local": "左边"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "right",
    "local": "正确的"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "value",
    "local": "价值"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.copyMakeBorder(",
    "local": "复制边框("
  },
  {
    "origin": "src, top, bottom, left, right, borderType[, dst[, value]]",
    "local": "src、top、bottom、left、right、borderType[、dst[、value]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Forms a border around an image.",
    "local": "在图像周围形成边框。"
  },
  {
    "origin": "The function copies the source image into the middle of the destination image. The areas to the left, to the right, above and below the copied source image will be filled with extrapolated pixels. This is not what filtering functions based on it do (they extrapolate pixels on-fly), but what other more complex functions, including your own, may do to simplify image boundary handling.",
    "local": "该函数将源图像复制到目标图像的中间。复制的源图像左侧、右侧、上方和下方的区域将填充外推像素。这不是基于它的过滤函数所做的（它们动态地外推像素），而是其他更复杂的函数（包括您自己的函数）可以做什么来简化图像边界处理。"
  },
  {
    "origin": "The function supports the mode when src is already in the middle of dst . In this case, the function does not copy src itself but simply constructs the border, for example:",
    "local": "当src已经在dst中间时，该函数支持该模式。在这种情况下，函数不会复制src本身，而只是构造边框，例如："
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "When the source image is a part (ROI) of a bigger image, the function will try to use the pixels outside of the ROI to form a border. To disable this feature and always do extrapolation, as if src was not a ROI, use borderType |",
    "local": "当源图像是较大图像的一部分（ROI）时，函数将尝试使用ROI之外的像素来形成边界。要禁用此功能并始终进行外推，就好像src不是ROI一样，请使用borderType|"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "Source image.",
    "local": "源图像。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "Destination image of the same type as src and the size Size(src.cols+left+right, src.rows+top+bottom) .",
    "local": "与src类型和大小相同的目标图像（src.cols+left+right，src.rows+top+bottom）。"
  },
  {
    "origin": "top",
    "local": "顶部"
  },
  {
    "origin": "the top pixels",
    "local": "顶部像素"
  },
  {
    "origin": "bottom",
    "local": "底部"
  },
  {
    "origin": "the bottom pixels",
    "local": "底部像素"
  },
  {
    "origin": "left",
    "local": "左边"
  },
  {
    "origin": "the left pixels",
    "local": "左边的像素"
  },
  {
    "origin": "right",
    "local": "正确的"
  },
  {
    "origin": "Parameter specifying how many pixels in each direction from the source image rectangle to extrapolate. For example, top=1, bottom=1, left=1, right=1 mean that 1 pixel-wide border needs to be built.",
    "local": "参数，指定要从源图像矩形在每个方向上外推的像素数。例如，top=1，bottom=1，left=1，right=1意味着需要构建1像素宽的边框。"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "Border type. See borderInterpolate for details.",
    "local": "边框类型。有关详细信息，请参见borderInterpolate。"
  },
  {
    "origin": "value",
    "local": "价值"
  },
  {
    "origin": "Border value if borderType==BORDER_CONSTANT .",
    "local": "如果borderType==Border\\u常量，则为Border值。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "copyTo()",
    "local": "复制到（）"
  },
  {
    "origin": "void cv::copyTo",
    "local": "void cv：：复制到"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.copyTo(",
    "local": "简历复印件("
  },
  {
    "origin": "src, mask[, dst]",
    "local": "src，掩码[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience (python) Copies the matrix to another one. When the operation mask is specified, if the",
    "local": "这是一个重载的成员函数，为方便起见（python）将矩阵复制到另一个。指定操作掩码时，如果"
  },
  {
    "origin": "call shown above reallocates the matrix, the newly allocated matrix is initialized with all zeros before copying the data.",
    "local": "上面显示的调用重新分配矩阵，新分配的矩阵在复制数据之前用全零初始化。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "source matrix.",
    "local": "源矩阵。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "Destination matrix. If it does not have a proper size or type before the operation, it is reallocated.",
    "local": "目标矩阵。如果在操作之前没有合适的大小或类型，则会重新分配。"
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "Operation mask of the same size as *this. Its non-zero elements indicate which matrix elements need to be copied. The mask has to be of type CV_8U and can have 1 or multiple channels.",
    "local": "与此相同大小的操作掩码。它的非零元素表示需要复制哪些矩阵元素。掩模必须为CVƅ8U型，并且可以有1个或多个通道。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "countNonZero()",
    "local": "countNonZero（）"
  },
  {
    "origin": "int cv::countNonZero",
    "local": "int cv：：countNonZero"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.countNonZero(",
    "local": "cv.countNonZero公司("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Counts non-zero array elements.",
    "local": "计数非零数组元素。"
  },
  {
    "origin": "The function returns the number of non-zero elements in src :",
    "local": "函数返回src中非零元素的数目："
  },
  {
    "origin": "\\[\\sum _{I: \\; \\texttt{src} (I) \\ne0 } 1\\]",
    "local": "\\\\[\\sum{I:\\\\texttt{src}（I）\\ne0}1\\]"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "single-channel array.",
    "local": "单通道阵列。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "dct()",
    "local": "dct（）"
  },
  {
    "origin": "void cv::dct",
    "local": "无效cv：：dct"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.dct(",
    "local": "cv.dct公司("
  },
  {
    "origin": "src[, dst[, flags]]",
    "local": "src[，dst[，标志]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Performs a forward or inverse discrete Cosine transform of 1D or 2D array.",
    "local": "对一维或二维数组执行正或逆离散余弦变换。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "performs a forward or inverse discrete Cosine transform (DCT) of a 1D or 2D floating-point array:",
    "local": "对一维或二维浮点数组执行正向或反向离散余弦变换（DCT）："
  },
  {
    "origin": "Forward Cosine transform of a 1D vector of N elements:",
    "local": "N个元素的一维向量的正余弦变换："
  },
  {
    "origin": "\\[Y = C^{(N)} \\cdot X\\]",
    "local": "\\\\[Y=C^{（N）}\\cdot X\\]"
  },
  {
    "origin": "where",
    "local": "哪里"
  },
  {
    "origin": "\\[C^{(N)}_{jk}= \\sqrt{\\alpha_j/N} \\cos \\left ( \\frac{\\pi(2k+1)j}{2N} \\right )\\]",
    "local": "\\[C^{（N）}{jk}=\\sqrt{\\alpha\\u j/N}\\cos\\左（\\frac{\\pi（2k+1）j}{2N}\\右）\\]"
  },
  {
    "origin": "and \\(\\alpha_0=1\\), \\(\\alpha_j=2\\) for",
    "local": "和\\（\\alpha\\u 0=1\\），\\（\\alpha\\u j=2\\）表示"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Inverse Cosine transform of a 1D vector of N elements:",
    "local": "N个元素的一维向量的反余弦变换："
  },
  {
    "origin": "\\[X = \\left (C^{(N)} \\right )^{-1} \\cdot Y = \\left (C^{(N)} \\right )^T \\cdot Y\\]",
    "local": "\\[X=\\左（C^{（N）}\\右）^{-1}\\cdot Y=\\左（C^{（N）}\\右）^T\\cdot Y\\]"
  },
  {
    "origin": "(since \\(C^{(N)}\\) is an orthogonal matrix, \\(C^{(N)} \\cdot \\left(C^{(N)}\\right)^T = I\\) )",
    "local": "（因为“（C^{（N）}”是一个正交矩阵，“（C^{（N）}\\cdot\\左（C^{（N）}\\右）^T=I”）"
  },
  {
    "origin": "Forward 2D Cosine transform of M x N matrix:",
    "local": "M x N矩阵的前向二维余弦变换："
  },
  {
    "origin": "\\[Y = C^{(N)} \\cdot X \\cdot \\left (C^{(N)} \\right )^T\\]",
    "local": "\\\\[Y=C^{（N）}\\cdot X\\cdot\\左（C^{（N）}\\右）^T\\]"
  },
  {
    "origin": "Inverse 2D Cosine transform of M x N matrix:",
    "local": "M x N矩阵的二维余弦逆变换："
  },
  {
    "origin": "\\[X = \\left (C^{(N)} \\right )^T \\cdot X \\cdot C^{(N)}\\]",
    "local": "\\\\[X=\\左（C^{（N）}\\右）^T\\cdot X\\cdot C^{（N）}\\]"
  },
  {
    "origin": "The function chooses the mode of operation by looking at the flags and size of the input array:",
    "local": "函数通过查看输入数组的标志和大小来选择操作模式："
  },
  {
    "origin": "If (flags &amp;",
    "local": "如果（标志和；"
  },
  {
    "origin": ") == 0 , the function does a forward 1D or 2D transform. Otherwise, it is an inverse 1D or 2D transform.",
    "local": ")==0，函数执行正向一维或二维变换。否则，它是一维或二维逆变换。"
  },
  {
    "origin": "If (flags &amp;",
    "local": "如果（标志和；"
  },
  {
    "origin": ") != 0 , the function performs a 1D transform of each row.",
    "local": ") != 0时，函数对每行执行1D变换。"
  },
  {
    "origin": "If the array is a single column or a single row, the function performs a 1D transform.",
    "local": "如果数组是单列或单行，则函数将执行一维变换。"
  },
  {
    "origin": "If none of the above is true, the function performs a 2D transform.",
    "local": "如果上述条件均不成立，则函数将执行2D变换。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "Currently dct supports even-size arrays (2, 4, 6 ...). For data analysis and approximation, you can pad the array when necessary. Also, the function performance depends very much, and not monotonically, on the array size (see getOptimalDFTSize ). In the current implementation DCT of a vector of size N is calculated via DFT of a vector of size N/2 . Thus, the optimal DCT size N1 &gt;= N can be calculated as:",
    "local": "目前dct支持偶数大小的数组（2，4，6…）。对于数据分析和近似，可以在需要时填充阵列。此外，函数性能在很大程度上而不是单调地依赖于数组大小（请参见getoptimizedftsize）。在当前实现中，通过大小为N/2的向量的DFT来计算大小为N的向量的DCT。因此，最佳DCT大小N1&gt；=N可计算为："
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input floating-point array.",
    "local": "输入浮点数组。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array of the same size and type as src .",
    "local": "与src大小和类型相同的输出数组。"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": "transformation flags as a combination of",
    "local": "转换标志作为"
  },
  {
    "origin": "(DCT_*)",
    "local": "（离散余弦变换）"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "determinant()",
    "local": "行列式（）"
  },
  {
    "origin": "double cv::determinant",
    "local": "双cv：：行列式"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "mtx",
    "local": "mtx公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.determinant(",
    "local": "cv行列式("
  },
  {
    "origin": "mtx",
    "local": "mtx公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Returns the determinant of a square floating-point matrix.",
    "local": "返回平方浮点矩阵的行列式。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "calculates and returns the determinant of the specified matrix. For small matrices ( mtx.cols=mtx.rows&lt;=3 ), the direct method is used. For larger matrices, the function uses LU factorization with partial pivoting.",
    "local": "计算并返回指定矩阵的行列式。对于小矩阵（mtx.cols=mtx.rows&lt=3）采用直接法。对于较大的矩阵，函数使用LU分解和部分旋转。"
  },
  {
    "origin": "For symmetric positively-determined matrices, it is also possible to use eigen decomposition to calculate the determinant.",
    "local": "对于对称正定矩阵，也可以用特征分解来计算行列式。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "mtx",
    "local": "mtx公司"
  },
  {
    "origin": "input matrix that must have CV_32FC1 or CV_64FC1 type and square size.",
    "local": "输入矩阵必须具有CV_32FC1或CV_64FC1类型和方形大小。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "dft()",
    "local": "dft（）"
  },
  {
    "origin": "void cv::dft",
    "local": "空隙cv：：dft"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "nonzeroRows",
    "local": "非零行"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.dft(",
    "local": "干膜厚度("
  },
  {
    "origin": "src[, dst[, flags[, nonzeroRows]]]",
    "local": "心脏[，dst[，标志[，非零行]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Performs a forward or inverse Discrete Fourier transform of a 1D or 2D floating-point array.",
    "local": "对一维或二维浮点数组执行正向或反向离散傅里叶变换。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "performs one of the following:",
    "local": "执行以下操作之一："
  },
  {
    "origin": "Forward the Fourier transform of a 1D vector of N elements:",
    "local": "对N个元素的一维向量进行傅立叶变换："
  },
  {
    "origin": "\\[Y = F^{(N)} \\cdot X,\\]",
    "local": "\\[Y=F^{（N）}\\cdot X，\\]"
  },
  {
    "origin": "where \\(F^{(N)}_{jk}=\\exp(-2\\pi i j k/N)\\) and \\(i=\\sqrt{-1}\\)",
    "local": "其中\\（F^{（N）}{ujk}=\\exp（-2\\pi i j k/N）\\）和\\（i=\\sqrt{-1}\\）"
  },
  {
    "origin": "Inverse the Fourier transform of a 1D vector of N elements:",
    "local": "对N个元素的一维向量进行傅立叶逆变换："
  },
  {
    "origin": "\\[\\begin{array}{l} X'= \\left (F^{(N)} \\right )^{-1} \\cdot Y = \\left (F^{(N)} \\right )^* \\cdot y \\\\ X = (1/N) \\cdot X, \\end{array}\\]",
    "local": "\\[\\begin{array}{l}X'=\\left（F^{（N）}\\right）^{-1}\\cdot Y=\\left（F^{（N）}\\right）^*\\cdot Y\\\\X=（1/N）\\cdot X，\\end{array}\\]"
  },
  {
    "origin": "where \\(F^*=\\left(\\textrm{Re}(F^{(N)})-\\textrm{Im}(F^{(N)})\\right)^T\\)",
    "local": "其中\\（F^*=\\左（\\textrm{Re}（F^{（N）}）-\\textrm{Im}（F^{（N）}）\\right）^T\\）"
  },
  {
    "origin": "Forward the 2D Fourier transform of a M x N matrix:",
    "local": "对M x N矩阵进行二维傅里叶变换："
  },
  {
    "origin": "\\[Y = F^{(M)} \\cdot X \\cdot F^{(N)}\\]",
    "local": "\\[Y=F^{（M）}\\cdot X\\cdot F^{（N）}\\]"
  },
  {
    "origin": "Inverse the 2D Fourier transform of a M x N matrix:",
    "local": "求M x N矩阵的二维傅里叶变换的逆："
  },
  {
    "origin": "\\[\\begin{array}{l} X'= \\left (F^{(M)} \\right )^* \\cdot Y \\cdot \\left (F^{(N)} \\right )^* \\\\ X = \\frac{1}{M \\cdot N} \\cdot X' \\end{array}\\]",
    "local": "\\[\\begin{array}{l}X'=\\left（F^{（M）}\\right）^*\\cdot Y\\cdot\\left（F^{（N）}\\right）^*\\\\X=\\frac{1}{M\\cdot N}\\cdot X'\\end{array}\\]"
  },
  {
    "origin": "In case of real (single-channel) data, the output spectrum of the forward Fourier transform or input spectrum of the inverse Fourier transform can be represented in a packed format called",
    "local": "在实际（单通道）数据的情况下，前向傅里叶变换的输出频谱或逆傅里叶变换的输入频谱可以用称为"
  },
  {
    "origin": "CCS",
    "local": "CCS系统"
  },
  {
    "origin": "(complex-conjugate-symmetrical). It was borrowed from IPL (Intel* Image Processing Library). Here is how 2D",
    "local": "（复共轭对称）。它是从IPL（英特尔*图像处理库）借来的。以下是2D"
  },
  {
    "origin": "CCS",
    "local": "CCS系统"
  },
  {
    "origin": "spectrum looks:",
    "local": "光谱外观："
  },
  {
    "origin": "\\[\\begin{bmatrix} Re Y_{0,0} &amp; Re Y_{0,1} &amp; Im Y_{0,1} &amp; Re Y_{0,2} &amp; Im Y_{0,2} &amp; \\cdots &amp; Re Y_{0,N/2-1} &amp; Im Y_{0,N/2-1} &amp; Re Y_{0,N/2} \\\\ Re Y_{1,0} &amp; Re Y_{1,1} &amp; Im Y_{1,1} &amp; Re Y_{1,2} &amp; Im Y_{1,2} &amp; \\cdots &amp; Re Y_{1,N/2-1} &amp; Im Y_{1,N/2-1} &amp; Re Y_{1,N/2} \\\\ Im Y_{1,0} &amp; Re Y_{2,1} &amp; Im Y_{2,1} &amp; Re Y_{2,2} &amp; Im Y_{2,2} &amp; \\cdots &amp; Re Y_{2,N/2-1} &amp; Im Y_{2,N/2-1} &amp; Im Y_{1,N/2} \\\\ \\hdotsfor{9} \\\\ Re Y_{M/2-1,0} &amp; Re Y_{M-3,1} &amp; Im Y_{M-3,1} &amp; \\hdotsfor{3} &amp; Re Y_{M-3,N/2-1} &amp; Im Y_{M-3,N/2-1}&amp; Re Y_{M/2-1,N/2} \\\\ Im Y_{M/2-1,0} &amp; Re Y_{M-2,1} &amp; Im Y_{M-2,1} &amp; \\hdotsfor{3} &amp; Re Y_{M-2,N/2-1} &amp; Im Y_{M-2,N/2-1}&amp; Im Y_{M/2-1,N/2} \\\\ Re Y_{M/2,0} &amp; Re Y_{M-1,1} &amp; Im Y_{M-1,1} &amp; \\hdotsfor{3} &amp; Re Y_{M-1,N/2-1} &amp; Im Y_{M-1,N/2-1}&amp; Re Y_{M/2,N/2} \\end{bmatrix}\\]",
    "local": "开始{bMatrix}RE Y{0,0}&amp；回复Y{0,1}&amp；IM Y{0,1}&amp；回复Y{0,2}&amp；IM Y{0,2}&amp；\\ nCDOTS&amp；回复Y{0，N/2-1}&amp；IM Y{0，N/2-1}&amp；RE Y{0，N/2}\\\\ RE Y{1,0}&amp；回复{1,1}&amp；IM Y{1,1}&amp；回复{1,2}&amp；IM Y{1,2}&amp；\\ nCDOTS&amp；回复Y{1，N/2-1}&amp；IM Y{1，N/2-1}&amp；回复Y{1，N/2}\\\\ IM Y{1,0}&amp；回复Y{2,1}&amp；IM Y{2,1}&amp；回复Y{2,2}&amp；IM Y{2,2}&amp；\\ nCDOTS&amp；回复Y{2，N/2-1}&amp；IM Y{2，N/2-1}&amp；IM Y{1，N/2}\\ hdotsfore{9}\\ re Y{M/2-1,0}&amp；回复{M-3,1}&amp；IM Y{M-3,1}&amp；\\ nhdotsfor 3}&amp；回复Y{M-3，N/2-1}&amp；IM Y{M-3，N/2-1}&amp；回复Y{M/2-1，N/2}\\\\ IM Y{M/2-1,0}&amp；回复{M-2,1}&amp；IM Y{M-2,1}&amp；\\ nhdotsfor 3}&amp；回复Y{M-2，N/2-1}&amp；IM Y{M-2，N/2-1}&amp；IM Y{M/2-1，N/2}\\\\ RE Y{M/2,0}&amp；回复{M-1,1}&amp；IM Y{M-1,1}&amp；\\ nhdotsfor 3}&amp；回复{M-1，N/2-1}&amp；IM Y{M-1，N/2-1}&amp；RE Y{m/2，n/2}\\ end{bMatrix}"
  },
  {
    "origin": "In case of 1D transform of a real vector, the output looks like the first row of the matrix above.",
    "local": "对于实向量的一维变换，输出看起来像上面矩阵的第一行。"
  },
  {
    "origin": "So, the function chooses an operation mode depending on the flags and size of the input array:",
    "local": "因此，函数根据输入数组的标志和大小选择操作模式："
  },
  {
    "origin": "If",
    "local": "如果"
  },
  {
    "origin": "is set or the input array has a single row or single column, the function performs a 1D forward or inverse transform of each row of a matrix when",
    "local": "如果设置或输入数组具有单行或单列，则函数在"
  },
  {
    "origin": "is set. Otherwise, it performs a 2D transform.",
    "local": "已设置。否则，它将执行2D变换。"
  },
  {
    "origin": "If the input array is real and",
    "local": "如果输入数组是实数"
  },
  {
    "origin": "is not set, the function performs a forward 1D or 2D transform:",
    "local": "如果未设置，则函数将执行正向1D或2D变换："
  },
  {
    "origin": "When",
    "local": "什么时候？"
  },
  {
    "origin": "is set, the output is a complex matrix of the same size as input.",
    "local": "则输出是一个与输入大小相同的复杂矩阵。"
  },
  {
    "origin": "When",
    "local": "什么时候？"
  },
  {
    "origin": "is not set, the output is a real matrix of the same size as input. In case of 2D transform, it uses the packed format as shown above. In case of a single 1D transform, it looks like the first row of the matrix above. In case of multiple 1D transforms (when using the",
    "local": "如果未设置，则输出是与输入大小相同的实矩阵。在二维变换的情况下，它使用如上所示的压缩格式。对于单个一维变换，它看起来像上面矩阵的第一行。如果是多个1D变换（使用"
  },
  {
    "origin": "flag), each row of the output matrix looks like the first row of the matrix above.",
    "local": "标志），输出矩阵的每一行看起来像上面矩阵的第一行。"
  },
  {
    "origin": "If the input array is complex and either",
    "local": "如果输入数组很复杂"
  },
  {
    "origin": "or",
    "local": "或"
  },
  {
    "origin": "are not set, the output is a complex array of the same size as input. The function performs a forward or inverse 1D or 2D transform of the whole input array or each row of the input array independently, depending on the flags DFT_INVERSE and DFT_ROWS.",
    "local": "如果未设置，则输出是与输入大小相同的复杂数组。该函数根据标志DFT\\u inverse和DFT\\u ROWS独立地对整个输入数组或输入数组的每一行执行正向或反向一维或二维变换。"
  },
  {
    "origin": "When",
    "local": "什么时候？"
  },
  {
    "origin": "is set and the input array is real, or it is complex but",
    "local": "输入数组是实数，或者它很复杂，但是"
  },
  {
    "origin": "is set, the output is a real array of the same size as input. The function performs a 1D or 2D inverse transformation of the whole input array or each individual row, depending on the flags",
    "local": "则输出是与输入大小相同的实数数组。该函数根据标志对整个输入数组或每一行执行一维或二维逆变换"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "If",
    "local": "如果"
  },
  {
    "origin": "is set, the scaling is done after the transformation.",
    "local": "设置，则在变换后进行缩放。"
  },
  {
    "origin": "Unlike dct , the function supports arrays of arbitrary size. But only those arrays are processed efficiently, whose sizes can be factorized in a product of small prime numbers (2, 3, and 5 in the current implementation). Such an efficient DFT size can be calculated using the getOptimalDFTSize method.",
    "local": "与dct不同，该函数支持任意大小的数组。但是只有那些数组被有效地处理，它们的大小可以分解为小素数的乘积（在当前的实现中是2、3和5）。这种有效的DFT大小可以使用getoptimizedftsize方法来计算。"
  },
  {
    "origin": "The sample below illustrates how to calculate a DFT-based convolution of two 2D real arrays:",
    "local": "下面的示例演示了如何计算两个2D实数数组的基于DFT的卷积："
  },
  {
    "origin": "To optimize this sample, consider the following approaches:",
    "local": "要优化此示例，请考虑以下方法："
  },
  {
    "origin": "Since nonzeroRows != 0 is passed to the forward transform calls and since A and B are copied to the top-left corners of tempA and tempB, respectively, it is not necessary to clear the whole tempA and tempB. It is only necessary to clear the tempA.cols - A.cols ( tempB.cols - B.cols) rightmost columns of the matrices.",
    "local": "因为非零行！=0传递给前向转换调用，由于A和B分别复制到tempA和tempB的左上角，因此不必清除整个tempA和tempB。只需清除矩阵最右边的tempA.cols-A.cols（tempB.cols-B.cols）列。"
  },
  {
    "origin": "This DFT-based convolution does not have to be applied to the whole big arrays, especially if B is significantly smaller than A or vice versa. Instead, you can calculate convolution by parts. To do this, you need to split the output array C into multiple tiles. For each tile, estimate which parts of A and B are required to calculate convolution in this tile. If the tiles in C are too small, the speed will decrease a lot because of repeated work. In the ultimate case, when each tile in C is a single pixel, the algorithm becomes equivalent to the naive convolution algorithm. If the tiles are too big, the temporary arrays tempA and tempB become too big and there is also a slowdown because of bad cache locality. So, there is an optimal tile size somewhere in the middle.",
    "local": "这种基于DFT的卷积不必应用于整个大阵列，特别是当B明显小于A时，反之亦然。相反，可以按部分计算卷积。为此，需要将输出数组C拆分为多个分片。对于每个图块，估计需要A和B的哪些部分来计算该图块中的卷积。如果C中的瓷砖太小，由于重复工作，速度会降低很多。在最终的情况下，当C中的每个图块都是一个像素时，该算法就等价于朴素卷积算法。如果tile太大，临时数组tempA和tempB会变得太大，而且由于缓存位置不好，速度也会减慢。因此，中间有一个最佳的瓦片大小。"
  },
  {
    "origin": "If different tiles in C can be calculated in parallel and, thus, the convolution is done by parts, the loop can be threaded.",
    "local": "如果C中的不同块可以并行计算，因此卷积是按部分完成的，那么循环就可以被线程化。"
  },
  {
    "origin": "All of the above improvements have been implemented in",
    "local": "所有上述改进均已在中国实施"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": ". Therefore, by using them, you can get the performance even better than with the above theoretically optimal implementation. Though, those two functions actually calculate cross-correlation, not convolution, so you need to \"flip\" the second convolution operand B vertically and horizontally using flip .",
    "local": ". 因此，通过使用它们，您可以获得比上述理论上最佳实现更好的性能。不过，这两个函数实际上计算的是互相关，而不是卷积，因此需要使用flip在垂直和水平方向“翻转”第二个卷积操作数B。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "An example using the discrete fourier transform can be found at opencv_source_code/samples/cpp/dft.cpp",
    "local": "使用离散傅里叶变换的示例可以在opencv_source_code/samples/cpp/dft.cpp中找到"
  },
  {
    "origin": "(Python) An example using the dft functionality to perform Wiener deconvolution can be found at opencv_source/samples/python/deconvolution.py",
    "local": "（Python）一个使用dft功能来执行Wiener反褶积的例子可以在opencvïu source/samples/Python/deconvolution.py中找到"
  },
  {
    "origin": "(Python) An example rearranging the quadrants of a Fourier image can be found at opencv_source/samples/python/dft.py",
    "local": "（Python）在opencv\\u source/samples/Python/dft.py中可以找到重新排列傅立叶图像的象限的示例"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input array that could be real or complex.",
    "local": "输入数组可以是实数组，也可以是复杂数组。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array whose size and type depends on the flags .",
    "local": "其大小和类型取决于标志的输出数组。"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": "transformation flags, representing a combination of the",
    "local": "转换标志，表示"
  },
  {
    "origin": "nonzeroRows",
    "local": "非零行"
  },
  {
    "origin": "when the parameter is not zero, the function assumes that only the first nonzeroRows rows of the input array (",
    "local": "当参数不为零时，函数假定只有输入数组的第一个非零行("
  },
  {
    "origin": "is not set) or only the first nonzeroRows of the output array (",
    "local": "未设置）或仅输出数组的第一个非零行("
  },
  {
    "origin": "is set) contain non-zeros, thus, the function can handle the rest of the rows more efficiently and save some time; this technique is very useful for calculating array cross-correlation or convolution using DFT.",
    "local": "设置）包含非零，因此，该函数可以更有效地处理其余的行，并节省一些时间；这种技术对于使用DFT计算阵列互相关或卷积非常有用。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "divide()",
    "local": "除法（）"
  },
  {
    "origin": "[1/2]",
    "local": "[1/2]"
  },
  {
    "origin": "void cv::divide",
    "local": "void cv：：除"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "scale",
    "local": "规模"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "dtype",
    "local": "数据类型"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.divide(",
    "local": "等分("
  },
  {
    "origin": "src1, src2[, dst[, scale[, dtype]]]",
    "local": "src1，src2[，dst[，scale[，dtype]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.divide(",
    "local": "等分("
  },
  {
    "origin": "scale, src2[, dst[, dtype]]",
    "local": "比例，src2[，dst[，dtype]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Performs per-element division of two arrays or a scalar by an array.",
    "local": "按元素对两个数组或一个标量进行除法。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "divides one array by another:",
    "local": "将一个数组除以另一个："
  },
  {
    "origin": "\\[\\texttt{dst(I) = saturate(src1(I)*scale/src2(I))}\\]",
    "local": "\\[\\texttt{dst（I）=饱和（src1（I）*标度/src2（I））}\\]"
  },
  {
    "origin": "or a scalar by an array when there is no src1 :",
    "local": "或者在没有src1的情况下由数组生成标量："
  },
  {
    "origin": "\\[\\texttt{dst(I) = saturate(scale/src2(I))}\\]",
    "local": "\\[\\texttt{dst（I）=饱和（标度/src2（I））}\\]"
  },
  {
    "origin": "Different channels of multi-channel arrays are processed independently.",
    "local": "多通道阵列的不同通道是独立处理的。"
  },
  {
    "origin": "For integer types when src2(I) is zero, dst(I) will also be zero.",
    "local": "对于整数类型，当src2（I）为零时，dst（I）也将为零。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "In case of floating point data there is no special defined behavior for zero src2(I) values. Regular floating-point division is used. Expect correct IEEE-754 behaviour for floating-point data (with NaN, Inf result values).",
    "local": "对于浮点数据，零src2（I）值没有特殊定义的行为。使用常规浮点除法。对于浮点数据（具有NaN、Inf结果值），期望IEEE-754的行为正确。"
  },
  {
    "origin": "Saturation is not applied when the output array has the depth CV_32S. You may even get result of an incorrect sign in the case of overflow.",
    "local": "当输出阵列具有深度CVň32S时，不应用饱和。在溢出的情况下，您甚至可能得到错误符号的结果。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": "first input array.",
    "local": "第一个输入数组。"
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": "second input array of the same size and type as src1.",
    "local": "与src1大小和类型相同的第二个输入数组。"
  },
  {
    "origin": "scale",
    "local": "规模"
  },
  {
    "origin": "scalar factor.",
    "local": "标量因子。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array of the same size and type as src2.",
    "local": "与src2大小和类型相同的输出数组。"
  },
  {
    "origin": "dtype",
    "local": "数据类型"
  },
  {
    "origin": "optional depth of the output array; if -1, dst will have depth",
    "local": "输出阵列的可选深度；如果-1，dst将有深度"
  },
  {
    "origin": ", but in case of an array-by-array division, you can only pass -1 when",
    "local": "，但在按数组除的情况下，只有在"
  },
  {
    "origin": "==",
    "local": "=="
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "divide()",
    "local": "除法（）"
  },
  {
    "origin": "[2/2]",
    "local": "[2/2]"
  },
  {
    "origin": "void cv::divide",
    "local": "void cv：：除"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "scale",
    "local": "规模"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "dtype",
    "local": "数据类型"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.divide(",
    "local": "等分("
  },
  {
    "origin": "src1, src2[, dst[, scale[, dtype]]]",
    "local": "src1，src2[，dst[，scale[，dtype]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.divide(",
    "local": "等分("
  },
  {
    "origin": "scale, src2[, dst[, dtype]]",
    "local": "比例，src2[，dst[，dtype]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "eigen()",
    "local": "特征（）"
  },
  {
    "origin": "bool cv::eigen",
    "local": "bool cv：：自己的"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "eigenvalues",
    "local": "特征值"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "eigenvectors",
    "local": "特征向量"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval, eigenvalues, eigenvectors",
    "local": "选择到路径"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.eigen(",
    "local": "cv.特征值("
  },
  {
    "origin": "src[, eigenvalues[, eigenvectors]]",
    "local": "src[，特征值[，特征向量]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates eigenvalues and eigenvectors of a symmetric matrix.",
    "local": "计算对称矩阵的特征值和特征向量。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "calculates just eigenvalues, or eigenvalues and eigenvectors of the symmetric matrix src:",
    "local": "仅计算对称矩阵src的特征值或特征值和特征向量："
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "Use",
    "local": "使用"
  },
  {
    "origin": "for calculation of real eigenvalues and eigenvectors of non-symmetric matrix.",
    "local": "用于计算非对称矩阵的实特征值和特征向量。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input matrix that must have CV_32FC1 or CV_64FC1 type, square size and be symmetrical (src ^T^ == src).",
    "local": "输入矩阵必须具有CV_32FC1或CV_64FC1类型、正方形大小且对称（src^T^==src）。"
  },
  {
    "origin": "eigenvalues",
    "local": "特征值"
  },
  {
    "origin": "output vector of eigenvalues of the same type as src; the eigenvalues are stored in the descending order.",
    "local": "与src同类型特征值的输出向量；特征值按降序存储。"
  },
  {
    "origin": "eigenvectors",
    "local": "特征向量"
  },
  {
    "origin": "output matrix of eigenvectors; it has the same size and type as src; the eigenvectors are stored as subsequent matrix rows, in the same order as the corresponding eigenvalues.",
    "local": "特征向量输出矩阵；其尺寸和类型与src相同；特征向量以与相应特征值相同的顺序存储为后续矩阵行。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "eigenNonSymmetric()",
    "local": "主人"
  },
  {
    "origin": "void cv::eigenNonSymmetric",
    "local": "非对称的"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "eigenvalues",
    "local": "特征值"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "eigenvectors",
    "local": "特征向量"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "eigenvalues, eigenvectors",
    "local": "特征值，特征向量"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.eigenNonSymmetric(",
    "local": "cv.特征非对称("
  },
  {
    "origin": "src[, eigenvalues[, eigenvectors]]",
    "local": "src[，特征值[，特征向量]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates eigenvalues and eigenvectors of a non-symmetric matrix (real eigenvalues only).",
    "local": "计算非对称矩阵的特征值和特征向量（仅限实特征值）。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "Assumes real eigenvalues.",
    "local": "假设真特征值。"
  },
  {
    "origin": "The function calculates eigenvalues and eigenvectors (optional) of the square matrix src:",
    "local": "该函数计算平方矩阵src的特征值和特征向量（可选）："
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input matrix (CV_32FC1 or CV_64FC1 type).",
    "local": "输入矩阵（CV\\ U 32FC1或CV\\ U 64FC1类型）。"
  },
  {
    "origin": "eigenvalues",
    "local": "特征值"
  },
  {
    "origin": "output vector of eigenvalues (type is the same type as src).",
    "local": "特征值的输出向量（类型与src类型相同）。"
  },
  {
    "origin": "eigenvectors",
    "local": "特征向量"
  },
  {
    "origin": "output matrix of eigenvectors (type is the same type as src). The eigenvectors are stored as subsequent matrix rows, in the same order as the corresponding eigenvalues.",
    "local": "特征向量的输出矩阵（类型与src相同）。特征向量以与相应特征值相同的顺序存储为后续矩阵行。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "exp()",
    "local": "经验（）"
  },
  {
    "origin": "void cv::exp",
    "local": "无效cv：：exp"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.exp(",
    "local": "cv.exp公司("
  },
  {
    "origin": "src[, dst]",
    "local": "src[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the exponent of every array element.",
    "local": "计算每个数组元素的指数。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "calculates the exponent of every element of the input array:",
    "local": "计算输入数组中每个元素的指数："
  },
  {
    "origin": "\\[\\texttt{dst} [I] = e^{ src(I) }\\]",
    "local": "\\\\texttt{dst}[I]=e^{src（I）\\]"
  },
  {
    "origin": "The maximum relative error is about 7e-6 for single-precision input and less than 1e-10 for double-precision input. Currently, the function converts denormalized values to zeros on output. Special values (NaN, Inf) are not handled.",
    "local": "单精度输入的最大相对误差约为7e-6，双精度输入的最大相对误差小于1e-10。当前，该函数在输出时将非规范化值转换为零。不处理特殊值（NaN、Inf）。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input array.",
    "local": "输入数组。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array of the same size and type as src.",
    "local": "与src大小和类型相同的输出数组。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "extractChannel()",
    "local": "extractChannel（）"
  },
  {
    "origin": "void cv::extractChannel",
    "local": "无效cv:：extractChannel"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "coi",
    "local": "具有"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.extractChannel(",
    "local": "等速通道("
  },
  {
    "origin": "src, coi[, dst]",
    "local": "走吧。"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Extracts a single channel from src (coi is 0-based index)",
    "local": "从src中提取单个通道（coi是基于0的索引）"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input array",
    "local": "输入数组"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array",
    "local": "输出阵列"
  },
  {
    "origin": "coi",
    "local": "具有"
  },
  {
    "origin": "index of channel to extract",
    "local": "要提取的通道索引"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "findNonZero()",
    "local": "findNonZero（）"
  },
  {
    "origin": "void cv::findNonZero",
    "local": "void cv:：findNonZero"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "idx",
    "local": "idx公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "idx",
    "local": "idx公司"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.findNonZero(",
    "local": "简历findNonZero("
  },
  {
    "origin": "src[, idx]",
    "local": "心脏[，idx]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Returns the list of locations of non-zero pixels.",
    "local": "返回非零像素的位置列表。"
  },
  {
    "origin": "Given a binary matrix (likely returned from an operation such as",
    "local": "给定一个二进制矩阵（很可能是从诸如"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", &gt;, ==, etc, return all of the non-zero indices as a",
    "local": "，&gt；，==，等等，返回所有非零索引作为"
  },
  {
    "origin": "or std::vector&lt;cv::Point&gt; (x,y) For example:",
    "local": "或std:：vector&lt；cv：：点&gt(x、 y）例如："
  },
  {
    "origin": "or",
    "local": "或"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "single-channel array",
    "local": "单通道阵列"
  },
  {
    "origin": "idx",
    "local": "idx公司"
  },
  {
    "origin": "the output array, type of",
    "local": "输出数组，类型"
  },
  {
    "origin": "or std::vector&lt;Point&gt;, corresponding to non-zero indices in the input",
    "local": "或std:：vector&lt；点&gt；，对应于输入中的非零索引"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "flip()",
    "local": "翻转（）"
  },
  {
    "origin": "void cv::flip",
    "local": "void cv:：翻转"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "flipCode",
    "local": "翻转代码"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.flip(",
    "local": "cv.翻转("
  },
  {
    "origin": "src, flipCode[, dst]",
    "local": "心脏，flipCode[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Flips a 2D array around vertical, horizontal, or both axes.",
    "local": "围绕垂直、水平或两个轴翻转二维阵列。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "flips the array in one of three different ways (row and column indices are 0-based):",
    "local": "以三种不同方式之一翻转数组（行和列索引基于0）："
  },
  {
    "origin": "\\[\\texttt{dst} _{ij} = \\left\\{ \\begin{array}{l l} \\texttt{src} _{\\texttt{src.rows}-i-1,j} &amp; if\\; \\texttt{flipCode} = 0 \\\\ \\texttt{src} _{i, \\texttt{src.cols} -j-1} &amp; if\\; \\texttt{flipCode} &gt; 0 \\\\ \\texttt{src} _{ \\texttt{src.rows} -i-1, \\texttt{src.cols} -j-1} &amp; if\\; \\texttt{flipCode} &lt; 0 \\\\ \\end{array} \\right.\\]",
    "local": "\\[\\texttt{dst}{ij}=\\left\\{\\begin{array}{l l}\\texttt{src}{\\texttt{src.rows}-i-1，j}&amp；如果\\\\texttt{flipCode}=0\\\\\\texttt{src}{i、\\texttt{src.cols}-j-1}&amp；如果\\\\texttt{flipCode}&gt；0\\\\\\texttt{src}{\\texttt{src.rows}-i-1、\\texttt{src.cols}-j-1}&amp；如果\\\\texttt{flipCode}&lt；0\\\\\\结束{array}\\右。\\]"
  },
  {
    "origin": "The example scenarios of using the function are the following: Vertical flipping of the image (flipCode == 0) to switch between top-left and bottom-left image origin. This is a typical operation in video processing on Microsoft Windows* OS. Horizontal flipping of the image with the subsequent horizontal shift and absolute difference calculation to check for a vertical-axis symmetry (flipCode &gt; 0). Simultaneous horizontal and vertical flipping of the image with the subsequent shift and absolute difference calculation to check for a central symmetry (flipCode &lt; 0). Reversing the order of point arrays (flipCode &gt; 0 or flipCode == 0).",
    "local": "使用该函数的示例场景如下：垂直翻转图像（flipCode==0）以在左上角和左下角图像原点之间切换。这是Microsoft Windows*操作系统上视频处理的典型操作。水平翻转图像，随后进行水平移动和绝对差计算，以检查垂直轴对称性（flipCode&gt；0). 同时水平和垂直翻转图像，随后进行偏移和绝对差计算，以检查中心对称性（flipCode&lt；0). 反转点阵列的顺序（flipCode&gt；0或flipCode==0）。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input array.",
    "local": "输入数组。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array of the same size and type as src.",
    "local": "与src大小和类型相同的输出数组。"
  },
  {
    "origin": "flipCode",
    "local": "翻转代码"
  },
  {
    "origin": "a flag to specify how to flip the array; 0 means flipping around the x-axis and positive value (for example, 1) means flipping around y-axis. Negative value (for example, -1) means flipping around both axes.",
    "local": "指定如何翻转数组的标志；0表示绕x轴翻转，正值（例如，1）表示绕y轴翻转。负值（例如，-1）表示围绕两个轴翻转。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "gemm()",
    "local": "gemm（）"
  },
  {
    "origin": "void cv::gemm",
    "local": "无效cv：：gemm"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "alpha",
    "local": "阿尔法"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "src3",
    "local": "src3型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "beta",
    "local": "贝塔"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gemm(",
    "local": "杰姆简历("
  },
  {
    "origin": "src1, src2, alpha, src3, beta[, dst[, flags]]",
    "local": "src1，src2，alpha，src3，beta[，dst[，flags]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Performs generalized matrix multiplication.",
    "local": "执行广义矩阵乘法。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "performs generalized matrix multiplication similar to the gemm functions in BLAS level 3. For example,",
    "local": "执行与BLAS级别3中的gemm函数类似的广义矩阵乘法。例如，"
  },
  {
    "origin": "corresponds to",
    "local": "对应于"
  },
  {
    "origin": "\\[\\texttt{dst} = \\texttt{alpha} \\cdot \\texttt{src1} ^T \\cdot \\texttt{src2} + \\texttt{beta} \\cdot \\texttt{src3} ^T\\]",
    "local": "\\\\textt{dst}=\\textt{alpha}\\cdot\\textt{src1}\\cdot\\cdot\\textt{src2}+\\textt{beta}\\cdot\\textt{src3}\\T]"
  },
  {
    "origin": "In case of complex (two-channel) data, performed a complex matrix multiplication.",
    "local": "对于复杂（双通道）数据，执行复杂矩阵乘法。"
  },
  {
    "origin": "The function can be replaced with a matrix expression. For example, the above call can be replaced with:",
    "local": "函数可以用矩阵表达式代替。例如，上述调用可以替换为："
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": "first multiplied input matrix that could be real(CV_32FC1, CV_64FC1) or complex(CV_32FC2, CV_64FC2).",
    "local": "第一个乘法输入矩阵，可以是实数（CV_32FC1，CV_64FC1）或复数（CV_32FC2，CV_64FC2）。"
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": "second multiplied input matrix of the same type as src1.",
    "local": "与src1相同类型的第二个乘法输入矩阵。"
  },
  {
    "origin": "alpha",
    "local": "阿尔法"
  },
  {
    "origin": "weight of the matrix product.",
    "local": "矩阵积的权重。"
  },
  {
    "origin": "src3",
    "local": "src3型"
  },
  {
    "origin": "third optional delta matrix added to the matrix product; it should have the same type as src1 and src2.",
    "local": "第三个可选增量矩阵添加到矩阵乘积中；它应该与src1和src2具有相同的类型。"
  },
  {
    "origin": "beta",
    "local": "贝塔"
  },
  {
    "origin": "weight of src3.",
    "local": "src3的重量。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output matrix; it has the proper size and the same type as input matrices.",
    "local": "输出矩阵；它的大小和类型与输入矩阵相同。"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": "operation flags (",
    "local": "操作标志("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getOptimalDFTSize()",
    "local": "GetSize（）"
  },
  {
    "origin": "int cv::getOptimalDFTSize",
    "local": "int CV：：getoptimaldftsize"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "vecsize",
    "local": "矢量大小"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.getOptimalDFTSize(",
    "local": "cv.GET尺寸("
  },
  {
    "origin": "vecsize",
    "local": "矢量大小"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Returns the optimal DFT size for a given vector size.",
    "local": "返回给定向量大小的最佳DFT大小。"
  },
  {
    "origin": "DFT performance is not a monotonic function of a vector size. Therefore, when you calculate convolution of two arrays or perform the spectral analysis of an array, it usually makes sense to pad the input data with zeros to get a bit larger array that can be transformed much faster than the original one. Arrays whose size is a power-of-two (2, 4, 8, 16, 32, ...) are the fastest to process. Though, the arrays whose size is a product of 2's, 3's, and 5's (for example, 300 = 5*5*3*2*2) are also processed quite efficiently.",
    "local": "DFT性能不是向量大小的单调函数。因此，在计算两个阵列的卷积或对一个阵列进行频谱分析时，通常用零填充输入数据以获得比原始阵列更大的阵列，该阵列的变换速度比原始阵列快得多。数组的大小是2的幂（2，4，8，16，32，…）的处理速度最快。然而，大小是2、3和5的乘积的数组（例如，300=5×5×3×2×2）也被非常有效地处理。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "returns the minimum number N that is greater than or equal to vecsize so that the DFT of a vector of size N can be processed efficiently. In the current implementation N = 2 ^p^ * 3 ^q^ * 5 ^r^ for some integer p, q, r.",
    "local": "返回大于或等于vecsize的最小数N，以便可以有效地处理大小为N的向量的DFT。在当前的实现中，对于某些整数p，q，r，N=2^p^*3^q^*5^r^。"
  },
  {
    "origin": "The function returns a negative number if vecsize is too large (very close to INT_MAX ).",
    "local": "如果vecsize太大（非常接近INT\\u MAX），则函数返回一个负数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "vecsize",
    "local": "矢量大小"
  },
  {
    "origin": "vector size.",
    "local": "向量大小。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "hconcat()",
    "local": "hconcat（）"
  },
  {
    "origin": "[1/3]",
    "local": "[1/3]"
  },
  {
    "origin": "void cv::hconcat",
    "local": "void cv：：hconcat"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "*",
    "local": "*"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "size_t",
    "local": "大小\\u t"
  },
  {
    "origin": "nsrc",
    "local": "国家战略参考委员会"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.hconcat(",
    "local": "cv.hconcat公司("
  },
  {
    "origin": "src[, dst]",
    "local": "src[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Applies horizontal concatenation to given matrices.",
    "local": "对给定的矩阵应用水平连接。"
  },
  {
    "origin": "The function horizontally concatenates two or more",
    "local": "函数水平连接两个或多个"
  },
  {
    "origin": "matrices (with the same number of rows).",
    "local": "矩阵（行数相同）。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input array or vector of matrices. all of the matrices must have the same number of rows and the same depth.",
    "local": "输入矩阵的数组或向量。所有矩阵的行数和深度必须相同。"
  },
  {
    "origin": "nsrc",
    "local": "国家战略参考委员会"
  },
  {
    "origin": "number of matrices in src.",
    "local": "src中的矩阵数。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array. It has the same number of rows and depth as the src, and the sum of cols of the src.",
    "local": "输出数组。它具有与src相同的行数和深度，以及src的列数之和。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "hconcat()",
    "local": "hconcat（）"
  },
  {
    "origin": "[2/3]",
    "local": "[2/3]"
  },
  {
    "origin": "void cv::hconcat",
    "local": "void cv：：hconcat"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.hconcat(",
    "local": "cv.hconcat公司("
  },
  {
    "origin": "src[, dst]",
    "local": "src[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": "first input array to be considered for horizontal concatenation.",
    "local": "第一个输入数组要考虑水平连接。"
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": "second input array to be considered for horizontal concatenation.",
    "local": "第二个输入数组要考虑水平连接。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array. It has the same number of rows and depth as the src1 and src2, and the sum of cols of the src1 and src2.",
    "local": "输出数组。它具有与src1和src2相同的行数和深度，以及src1和src2的列之和。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "hconcat()",
    "local": "hconcat（）"
  },
  {
    "origin": "[3/3]",
    "local": "[3/3]"
  },
  {
    "origin": "void cv::hconcat",
    "local": "void cv：：hconcat"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.hconcat(",
    "local": "cv.hconcat公司("
  },
  {
    "origin": "src[, dst]",
    "local": "src[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input array or vector of matrices. all of the matrices must have the same number of rows and the same depth.",
    "local": "输入矩阵的数组或向量。所有矩阵的行数和深度必须相同。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array. It has the same number of rows and depth as the src, and the sum of cols of the src. same depth.",
    "local": "输出数组。它具有与src相同的行数和深度，以及src的列数之和。同样的深度。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "idct()",
    "local": "idct（）"
  },
  {
    "origin": "void cv::idct",
    "local": "无效cv：：idct"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.idct(",
    "local": "个人简历("
  },
  {
    "origin": "src[, dst[, flags]]",
    "local": "src[，dst[，标志]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the inverse Discrete Cosine Transform of a 1D or 2D array.",
    "local": "计算一维或二维阵列的离散余弦逆变换。"
  },
  {
    "origin": "idct(src, dst, flags) is equivalent to dct(src, dst, flags | DCT_INVERSE).",
    "local": "idct（src，dst，flags）等价于dct（src，dst，flags | dct|u INVERSE）。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input floating-point single-channel array.",
    "local": "输入浮点单通道数组。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array of the same size and type as src.",
    "local": "与src大小和类型相同的输出数组。"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": "operation flags.",
    "local": "操作标志。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "idft()",
    "local": "idft（）"
  },
  {
    "origin": "void cv::idft",
    "local": "无效cv：：idft"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "nonzeroRows",
    "local": "非零行"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.idft(",
    "local": "cv.idft公司("
  },
  {
    "origin": "src[, dst[, flags[, nonzeroRows]]]",
    "local": "心脏[，dst[，标志[，非零行]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the inverse Discrete Fourier Transform of a 1D or 2D array.",
    "local": "计算一维或二维阵列的离散傅里叶逆变换。"
  },
  {
    "origin": "idft(src, dst, flags) is equivalent to dft(src, dst, flags |",
    "local": "idft（src，dst，flags）等价于dft（src，dst，flags|"
  },
  {
    "origin": ") .",
    "local": ") ."
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "None of dft and idft scales the result by default. So, you should pass",
    "local": "默认情况下，dft和idft都不会缩放结果。所以，你应该通过"
  },
  {
    "origin": "to one of dft or idft explicitly to make these transforms mutually inverse.",
    "local": "显式地对dft或idft中的一个进行变换，使这些变换相互逆。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input floating-point real or complex array.",
    "local": "输入浮点实数或复数数组。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array whose size and type depend on the flags.",
    "local": "大小和类型取决于标志的输出数组。"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": "operation flags (see dft and",
    "local": "操作标志（参见dft和"
  },
  {
    "origin": ").",
    "local": ")."
  },
  {
    "origin": "nonzeroRows",
    "local": "非零行"
  },
  {
    "origin": "number of dst rows to process; the rest of the rows have undefined content (see the convolution sample in dft description.",
    "local": "要处理的dst行数；其余的行具有未定义的内容（请参见dft描述中的卷积示例）。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "inRange()",
    "local": "范围（）"
  },
  {
    "origin": "void cv::inRange",
    "local": "无效cv:：inRange"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "lowerb",
    "local": "低b"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "upperb",
    "local": "上B"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.inRange(",
    "local": "cv.inRange公司("
  },
  {
    "origin": "src, lowerb, upperb[, dst]",
    "local": "心形，下B，上B[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Checks if array elements lie between the elements of two other arrays.",
    "local": "检查数组元素是否位于其他两个数组的元素之间。"
  },
  {
    "origin": "The function checks the range as follows:",
    "local": "函数检查范围如下："
  },
  {
    "origin": "For every element of a single-channel input array:",
    "local": "对于单通道输入阵列的每个元素："
  },
  {
    "origin": "\\[\\texttt{dst} (I)= \\texttt{lowerb} (I)_0 \\leq \\texttt{src} (I)_0 \\leq \\texttt{upperb} (I)_0\\]",
    "local": "\\\\[\\texttt{dst}（I）=\\texttt{lowerb}（I）\\u 0\\leq\\texttt{src}（I）\\u 0\\leq\\texttt{upperb}（I）\\u 0\\]"
  },
  {
    "origin": "For two-channel arrays:",
    "local": "对于双通道阵列："
  },
  {
    "origin": "\\[\\texttt{dst} (I)= \\texttt{lowerb} (I)_0 \\leq \\texttt{src} (I)_0 \\leq \\texttt{upperb} (I)_0 \\land \\texttt{lowerb} (I)_1 \\leq \\texttt{src} (I)_1 \\leq \\texttt{upperb} (I)_1\\]",
    "local": "\\\\[\\texttt{dst}（I）=\\texttt{lowerb}（I）u 0\\leq\\texttt{src}（I）u 0\\leq\\texttt{upperb}（I）u 0\\land\\texttt{lowerb}（I）u 1\\leq\\texttsrc}（I）u 1\\leq\\texttb{upperb}（I）\\]"
  },
  {
    "origin": "and so forth.",
    "local": "等等。"
  },
  {
    "origin": "That is, dst (I) is set to 255 (all 1 -bits) if src (I) is within the specified 1D, 2D, 3D, ... box and 0 otherwise.",
    "local": "也就是说，如果src（I）在指定的1D，2D，3D。。。框，否则为0。"
  },
  {
    "origin": "When the lower and/or upper boundary parameters are scalars, the indexes (I) at lowerb and upperb in the above formulas should be omitted.",
    "local": "当上下边界参数为标量时，上述公式中lowerb和upperb处的索引（I）应省略。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "first input array.",
    "local": "第一个输入数组。"
  },
  {
    "origin": "lowerb",
    "local": "低b"
  },
  {
    "origin": "inclusive lower boundary array or a scalar.",
    "local": "包含下边界数组或标量。"
  },
  {
    "origin": "upperb",
    "local": "上B"
  },
  {
    "origin": "inclusive upper boundary array or a scalar.",
    "local": "包含上边界数组或标量。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array of the same size as src and CV_8U type.",
    "local": "与src和cv8u类型大小相同的输出数组。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "insertChannel()",
    "local": "插入通道（）"
  },
  {
    "origin": "void cv::insertChannel",
    "local": "void cv:：insertChannel"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "coi",
    "local": "具有"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.insertChannel(",
    "local": "cv.插入通道("
  },
  {
    "origin": "src, dst, coi",
    "local": "src、dst、coi"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Inserts a single channel to dst (coi is 0-based index)",
    "local": "向dst插入单个通道（coi是基于0的索引）"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input array",
    "local": "输入数组"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array",
    "local": "输出阵列"
  },
  {
    "origin": "coi",
    "local": "具有"
  },
  {
    "origin": "index of channel for insertion",
    "local": "插入通道索引"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "invert()",
    "local": "反转（）"
  },
  {
    "origin": "double cv::invert",
    "local": "双cv：：反转"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval, dst",
    "local": "雷特，夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.invert(",
    "local": "等速反转("
  },
  {
    "origin": "src[, dst[, flags]]",
    "local": "src[，dst[，标志]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Finds the inverse or pseudo-inverse of a matrix.",
    "local": "求矩阵的逆或伪逆。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "inverts the matrix src and stores the result in dst . When the matrix src is singular or non-square, the function calculates the pseudo-inverse matrix (the dst matrix) so that norm(src*dst - I) is minimal, where I is an identity matrix.",
    "local": "反转矩阵src并将结果存储在dst中。当矩阵src奇异或非平方时，函数计算伪逆矩阵（dst矩阵），使范数（src*dst-I）最小，其中I是单位矩阵。"
  },
  {
    "origin": "In case of the",
    "local": "以防"
  },
  {
    "origin": "method, the function returns non-zero value if the inverse has been successfully calculated and 0 if src is singular.",
    "local": "方法，如果已成功计算逆，则函数返回非零值；如果src是奇异的，则函数返回0。"
  },
  {
    "origin": "In case of the",
    "local": "以防"
  },
  {
    "origin": "method, the function returns the inverse condition number of src (the ratio of the smallest singular value to the largest singular value) and 0 if src is singular. The",
    "local": "方法，函数返回src的逆条件数（最小奇异值与最大奇异值之比），如果src是奇异的，则返回0。这个"
  },
  {
    "origin": "method calculates a pseudo-inverse matrix if src is singular.",
    "local": "若src是奇异的，则该方法计算伪逆矩阵。"
  },
  {
    "origin": "Similarly to",
    "local": "类似于"
  },
  {
    "origin": ", the method",
    "local": "，方法"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input floating-point M x N matrix.",
    "local": "输入浮点M x N矩阵。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output matrix of N x M size and the same type as src.",
    "local": "N x M大小的输出矩阵，与src类型相同。"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": "inversion method (",
    "local": "反演方法("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "log()",
    "local": "日志（）"
  },
  {
    "origin": "void cv::log",
    "local": "void cv：：日志"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.log(",
    "local": "简历("
  },
  {
    "origin": "src[, dst]",
    "local": "src[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the natural logarithm of every array element.",
    "local": "计算每个数组元素的自然对数。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "calculates the natural logarithm of every element of the input array:",
    "local": "计算输入数组中每个元素的自然对数："
  },
  {
    "origin": "\\[\\texttt{dst} (I) = \\log (\\texttt{src}(I)) \\]",
    "local": "\\[\\texttt{dst}（I）=\\log（\\texttt{src}（I））\\]"
  },
  {
    "origin": "Output on zero, negative and special (NaN, Inf) values is undefined.",
    "local": "零、负和特殊（NaN、Inf）值的输出未定义。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input array.",
    "local": "输入数组。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array of the same size and type as src .",
    "local": "与src大小和类型相同的输出数组。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "LUT()",
    "local": "LUT（）"
  },
  {
    "origin": "void cv::LUT",
    "local": "无效cv：：LUT"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "lut",
    "local": "琵琶"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.LUT(",
    "local": "简历LUT("
  },
  {
    "origin": "src, lut[, dst]",
    "local": "心，琵琶"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Performs a look-up table transform of an array.",
    "local": "执行数组的查找表转换。"
  },
  {
    "origin": "The function LUT fills the output array with values from the look-up table. Indices of the entries are taken from the input array. That is, the function processes each element of src as follows:",
    "local": "函数LUT用查找表中的值填充输出数组。条目的索引取自输入数组。也就是说，函数按如下方式处理src的每个元素："
  },
  {
    "origin": "\\[\\texttt{dst} (I) \\leftarrow \\texttt{lut(src(I) + d)}\\]",
    "local": "\\\\[\\texttt{dst}（I）\\leftarrow\\texttt{lut（src（I）+d）}\\]"
  },
  {
    "origin": "where",
    "local": "哪里"
  },
  {
    "origin": "\\[d = \\fork{0}{if \\(\\texttt{src}\\) has depth \\(\\texttt{CV_8U}\\)}{128}{if \\(\\texttt{src}\\) has depth \\(\\texttt{CV_8S}\\)}\\]",
    "local": "\\[d=\\fork{0}{if\\（\\texttt{src}\\）有深度\\（\\texttt{CV\\u 8U}\\）}{128}{if\\（\\texttt{src}\\）有深度\\（\\texttt{CV\\u 8S}\\）}\\]"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input array of 8-bit elements.",
    "local": "8位元素的输入数组。"
  },
  {
    "origin": "lut",
    "local": "琵琶"
  },
  {
    "origin": "look-up table of 256 elements; in case of multi-channel input array, the table should either have a single channel (in this case the same table is used for all channels) or the same number of channels as in the input array.",
    "local": "256个元素的查找表；如果是多通道输入阵列，则表格应具有单个通道（在这种情况下，所有通道使用相同的表格）或与输入阵列中相同数量的通道。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array of the same size and number of channels as src, and the same depth as lut.",
    "local": "输出数组的大小和通道数与src相同，深度与lut相同。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "magnitude()",
    "local": "震级（）"
  },
  {
    "origin": "void cv::magnitude",
    "local": "void cv：：幅值"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "x",
    "local": "十"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "y",
    "local": "y"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "magnitude",
    "local": "震级"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "magnitude",
    "local": "震级"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.magnitude(",
    "local": "cv.震级("
  },
  {
    "origin": "x, y[, magnitude]",
    "local": "x、 y[，震级]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the magnitude of 2D vectors.",
    "local": "计算二维向量的幅值。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "calculates the magnitude of 2D vectors formed from the corresponding elements of x and y arrays:",
    "local": "计算由x和y阵列的相应元素形成的二维向量的大小："
  },
  {
    "origin": "\\[\\texttt{dst} (I) = \\sqrt{\\texttt{x}(I)^2 + \\texttt{y}(I)^2}\\]",
    "local": "\\[\\texttt{dst}（I）=\\sqrt{\\texttt{x}（I）^2+\\texttt{y}（I）^2}\\]"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "x",
    "local": "十"
  },
  {
    "origin": "floating-point array of x-coordinates of the vectors.",
    "local": "向量x坐标的浮点数组。"
  },
  {
    "origin": "y",
    "local": "y"
  },
  {
    "origin": "floating-point array of y-coordinates of the vectors; it must have the same size as x.",
    "local": "向量y坐标的浮点数组；它的大小必须与x相同。"
  },
  {
    "origin": "magnitude",
    "local": "震级"
  },
  {
    "origin": "output array of the same size and type as x.",
    "local": "与x大小和类型相同的输出数组。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "Mahalanobis()",
    "local": "马氏（）"
  },
  {
    "origin": "double cv::Mahalanobis",
    "local": "双cv：：马氏体"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "v1",
    "local": "第1版"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "v2",
    "local": "第2版"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "icovar",
    "local": "伊科瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.Mahalanobis(",
    "local": "马氏体("
  },
  {
    "origin": "v1, v2, icovar",
    "local": "v1、v2、icovar"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the Mahalanobis distance between two vectors.",
    "local": "计算两个向量之间的马氏距离。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "calculates and returns the weighted distance between two vectors:",
    "local": "计算并返回两个向量之间的加权距离："
  },
  {
    "origin": "\\[d( \\texttt{vec1} , \\texttt{vec2} )= \\sqrt{\\sum_{i,j}{\\texttt{icovar(i,j)}\\cdot(\\texttt{vec1}(I)-\\texttt{vec2}(I))\\cdot(\\texttt{vec1(j)}-\\texttt{vec2(j)})} }\\]",
    "local": "\\\\[d（\\textt{vec1}、\\textt{vec2}）=\\sqrt{\\sum{i，j}{\\textt{icovar（i，j）}\\cdot（\\textt{vec1}（i）-\\textt{vec2}（i））\\cdot（\\textt{vec1（j）}-\\textt{vec2（j）}）}\\]"
  },
  {
    "origin": "The covariance matrix may be calculated using the",
    "local": "协方差矩阵可以使用"
  },
  {
    "origin": "function and then inverted using the invert function (preferably using the",
    "local": "函数，然后使用反转函数反转（最好使用"
  },
  {
    "origin": "method, as the most accurate).",
    "local": "方法，作为最准确的方法）。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "v1",
    "local": "第1版"
  },
  {
    "origin": "first 1D input vector.",
    "local": "第一个一维输入向量。"
  },
  {
    "origin": "v2",
    "local": "第2版"
  },
  {
    "origin": "second 1D input vector.",
    "local": "第二个一维输入向量。"
  },
  {
    "origin": "icovar",
    "local": "伊科瓦尔"
  },
  {
    "origin": "inverse covariance matrix.",
    "local": "逆协方差矩阵。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "max()",
    "local": "最大值（）"
  },
  {
    "origin": "[1/3]",
    "local": "[1/3]"
  },
  {
    "origin": "void cv::max",
    "local": "无效cv：：最大值"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.max(",
    "local": "最大cv("
  },
  {
    "origin": "src1, src2[, dst]",
    "local": "src1，src2[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates per-element maximum of two arrays or an array and a scalar.",
    "local": "计算每个元素最多两个数组或一个数组和一个标量。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "calculates the per-element maximum of two arrays:",
    "local": "计算两个数组的每个元素的最大值："
  },
  {
    "origin": "\\[\\texttt{dst} (I)= \\max ( \\texttt{src1} (I), \\texttt{src2} (I))\\]",
    "local": "\\\\texttt{dst}（I）=\\max（\\texttt{src1}（I），\\texttt{src2}（I）]"
  },
  {
    "origin": "or array and a scalar:",
    "local": "或数组和标量："
  },
  {
    "origin": "\\[\\texttt{dst} (I)= \\max ( \\texttt{src1} (I), \\texttt{value} )\\]",
    "local": "\\\\texttt{dst}（I）=\\max（\\texttt{src1}（I），\\texttt{value}\\"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": "first input array.",
    "local": "第一个输入数组。"
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": "second input array of the same size and type as src1 .",
    "local": "与src1大小和类型相同的第二个输入数组。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array of the same size and type as src1.",
    "local": "与src1大小和类型相同的输出数组。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "max()",
    "local": "最大值（）"
  },
  {
    "origin": "[2/3]",
    "local": "[2/3]"
  },
  {
    "origin": "void cv::max",
    "local": "无效cv：：最大值"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.max(",
    "local": "最大cv("
  },
  {
    "origin": "src1, src2[, dst]",
    "local": "src1，src2[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. needed to avoid conflicts with const _Tp&amp; std::min(const _Tp&amp;, const _Tp&amp;, _Compare)",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。需要避免与const Tp&amp；冲突；标准：：最小值（const&amp；，常量（&U）_（比较）"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "max()",
    "local": "最大值（）"
  },
  {
    "origin": "[3/3]",
    "local": "[3/3]"
  },
  {
    "origin": "void cv::max",
    "local": "无效cv：：最大值"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.max(",
    "local": "最大cv("
  },
  {
    "origin": "src1, src2[, dst]",
    "local": "src1，src2[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. needed to avoid conflicts with const _Tp&amp; std::min(const _Tp&amp;, const _Tp&amp;, _Compare)",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。需要避免与const Tp&amp；冲突；标准：：最小值（const&amp；，常量（&U）_（比较）"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "mean()",
    "local": "平均值（）"
  },
  {
    "origin": "cv::mean",
    "local": "cv：：平均值"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.mean(",
    "local": "平均值("
  },
  {
    "origin": "src[, mask]",
    "local": "src[，掩码]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates an average (mean) of array elements.",
    "local": "计算数组元素的平均值。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "calculates the mean value M of array elements, independently for each channel, and return it:",
    "local": "为每个通道独立计算数组元素的平均值M，并返回它："
  },
  {
    "origin": "\\[\\begin{array}{l} N = \\sum _{I: \\; \\texttt{mask} (I) \\ne 0} 1 \\\\ M_c = \\left ( \\sum _{I: \\; \\texttt{mask} (I) \\ne 0}{ \\texttt{mtx} (I)_c} \\right )/N \\end{array}\\]",
    "local": "\\[\\begin{array}{l}N=\\sum{I:\\\\texttt{mask}（I）\\ne 0}1\\\\M\\u c=\\左（\\sum{I:\\）\\texttt{mask}（I）\\ne 0}{\\texttt{mtx}（I）}\\right）/N\\end{array}\\]"
  },
  {
    "origin": "When all the mask elements are 0's, the function returns Scalar::all(0)",
    "local": "当所有掩码元素都为0时，函数返回Scalar:：all（0）"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input array that should have from 1 to 4 channels so that the result can be stored in",
    "local": "应具有1到4个通道的输入数组，以便将结果存储在"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "optional operation mask.",
    "local": "可选操作掩码。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "meanStdDev()",
    "local": "平均值（）"
  },
  {
    "origin": "void cv::meanStdDev",
    "local": "void cv:：meanStdDev无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mean",
    "local": "意思是"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "stddev",
    "local": "标准偏差"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "mean, stddev",
    "local": "平均，标准偏差"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.meanStdDev(",
    "local": "平均值("
  },
  {
    "origin": "src[, mean[, stddev[, mask]]]",
    "local": "src[，mean[，stddev[，面具]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates a mean and standard deviation of array elements.",
    "local": "计算数组元素的平均值和标准偏差。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "calculates the mean and the standard deviation M of array elements independently for each channel and returns it via the output parameters:",
    "local": "为每个通道独立计算阵列元素的平均值和标准偏差M，并通过输出参数返回："
  },
  {
    "origin": "\\[\\begin{array}{l} N = \\sum _{I, \\texttt{mask} (I) \\ne 0} 1 \\\\ \\texttt{mean} _c = \\frac{\\sum_{ I: \\; \\texttt{mask}(I) \\ne 0} \\texttt{src} (I)_c}{N} \\\\ \\texttt{stddev} _c = \\sqrt{\\frac{\\sum_{ I: \\; \\texttt{mask}(I) \\ne 0} \\left ( \\texttt{src} (I)_c - \\texttt{mean} _c \\right )^2}{N}} \\end{array}\\]",
    "local": "\\[\\begin{array}{l}N=\\sum{I，\\texttt{mask}（I）\\ne 0}1\\\\\\texttt{mean}\\u c=\\frac{\\sum{I:\\\\texttt{mask}（I）\\ne 0}\\texttt{src}（I）{u c}{N}\\\\\\texttt{stddev}\\u c=\\sqrt{\\frac{\\sum{I:\\\\texttt{mask}（I）\\ne 0}\\左（\\texttt{src}（I）\\u c-\\texttt{mean}u c\\右）^2}{N}}\\尾{array}\\]"
  },
  {
    "origin": "When all the mask elements are 0's, the function returns mean=stddev=Scalar::all(0).",
    "local": "当所有掩码元素都为0时，函数返回mean=stddev=Scalar:：all（0）。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "The calculated standard deviation is only the diagonal of the complete normalized covariance matrix. If the full matrix is needed, you can reshape the multi-channel array M x N to the single-channel array M*N x mtx.channels() (only possible when the matrix is continuous) and then pass the matrix to calcCovarMatrix .",
    "local": "计算出的标准差只是完全归一化协方差矩阵的对角线。如果需要完整的矩阵，可以将多通道阵列M x N重塑为单通道阵列M*N x mtx.channels（）（仅当矩阵连续时才可能），然后将矩阵传递给calcCovarMatrix。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input array that should have from 1 to 4 channels so that the results can be stored in",
    "local": "应具有1到4个通道的输入数组，以便将结果存储在"
  },
  {
    "origin": "'s.",
    "local": "的。"
  },
  {
    "origin": "mean",
    "local": "意思是"
  },
  {
    "origin": "output parameter: calculated mean value.",
    "local": "输出参数：计算平均值。"
  },
  {
    "origin": "stddev",
    "local": "标准偏差"
  },
  {
    "origin": "output parameter: calculated standard deviation.",
    "local": "输出参数：计算标准差。"
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "optional operation mask.",
    "local": "可选操作掩码。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "merge()",
    "local": "合并（）"
  },
  {
    "origin": "[1/2]",
    "local": "[1/2]"
  },
  {
    "origin": "void cv::merge",
    "local": "void cv:：合并"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "*",
    "local": "*"
  },
  {
    "origin": "mv",
    "local": "毫伏"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "size_t",
    "local": "大小\\u t"
  },
  {
    "origin": "count",
    "local": "计数"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.merge(",
    "local": "cv.合并("
  },
  {
    "origin": "mv[, dst]",
    "local": "中压[，夏令时]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Creates one multi-channel array out of several single-channel ones.",
    "local": "从多个单通道阵列中创建一个多通道阵列。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "merges several arrays to make a single multi-channel array. That is, each element of the output array will be a concatenation of the elements of the input arrays, where elements of i-th input array are treated as mv[i].channels()-element vectors.",
    "local": "合并多个阵列以形成单个多通道阵列。也就是说，输出数组的每个元素将是输入数组元素的串联，其中第i个输入数组的元素被视为mv[i].channels（）-元素向量。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "does the reverse operation. If you need to shuffle channels in some other advanced way, use",
    "local": "执行反向操作。如果您需要以其他高级方式洗牌频道，请使用"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "The following example shows how to merge 3 single channel matrices into a single 3-channel matrix.",
    "local": "下面的示例演示如何将3个单通道矩阵合并为单个3通道矩阵。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "mv",
    "local": "毫伏"
  },
  {
    "origin": "input array of matrices to be merged; all the matrices in mv must have the same size and the same depth.",
    "local": "待合并矩阵的输入数组；mv中的所有矩阵必须具有相同的大小和深度。"
  },
  {
    "origin": "count",
    "local": "计数"
  },
  {
    "origin": "number of input matrices when mv is a plain C array; it must be greater than zero.",
    "local": "当mv是纯C数组时，输入矩阵的个数；它必须大于零。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array of the same size and the same depth as mv[0]; The number of channels will be equal to the parameter count.",
    "local": "输出与mv[0]大小和深度相同的数组；通道数将等于参数计数。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "merge()",
    "local": "合并（）"
  },
  {
    "origin": "[2/2]",
    "local": "[2/2]"
  },
  {
    "origin": "void cv::merge",
    "local": "void cv:：合并"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "mv",
    "local": "毫伏"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.merge(",
    "local": "cv.合并("
  },
  {
    "origin": "mv[, dst]",
    "local": "中压[，夏令时]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "mv",
    "local": "毫伏"
  },
  {
    "origin": "input vector of matrices to be merged; all the matrices in mv must have the same size and the same depth.",
    "local": "待合并矩阵的输入向量；mv中的所有矩阵必须具有相同的大小和深度。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array of the same size and the same depth as mv[0]; The number of channels will be the total number of channels in the matrix array.",
    "local": "输出与mv[0]大小和深度相同的数组；通道数将是矩阵阵列中的通道总数。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "min()",
    "local": "最小（）"
  },
  {
    "origin": "[1/3]",
    "local": "[1/3]"
  },
  {
    "origin": "void cv::min",
    "local": "无效cv：：最小值"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.min(",
    "local": "最小cv("
  },
  {
    "origin": "src1, src2[, dst]",
    "local": "src1，src2[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates per-element minimum of two arrays or an array and a scalar.",
    "local": "计算每个元素至少两个数组或一个数组和一个标量。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "calculates the per-element minimum of two arrays:",
    "local": "计算两个数组中每个元素的最小值："
  },
  {
    "origin": "\\[\\texttt{dst} (I)= \\min ( \\texttt{src1} (I), \\texttt{src2} (I))\\]",
    "local": "\\\\texttt{dst}（I）=\\min（\\texttt{src1}（I），\\texttt{src2}（I）]"
  },
  {
    "origin": "or array and a scalar:",
    "local": "或数组和标量："
  },
  {
    "origin": "\\[\\texttt{dst} (I)= \\min ( \\texttt{src1} (I), \\texttt{value} )\\]",
    "local": "\\\\texttt{dst}（I）=\\min（\\texttt{src1}（I），\\texttt{value}\\"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": "first input array.",
    "local": "第一个输入数组。"
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": "second input array of the same size and type as src1.",
    "local": "与src1大小和类型相同的第二个输入数组。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array of the same size and type as src1.",
    "local": "与src1大小和类型相同的输出数组。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "min()",
    "local": "最小（）"
  },
  {
    "origin": "[2/3]",
    "local": "[2/3]"
  },
  {
    "origin": "void cv::min",
    "local": "无效cv：：最小值"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.min(",
    "local": "最小cv("
  },
  {
    "origin": "src1, src2[, dst]",
    "local": "src1，src2[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. needed to avoid conflicts with const _Tp&amp; std::min(const _Tp&amp;, const _Tp&amp;, _Compare)",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。需要避免与const Tp&amp；冲突；标准：：最小值（const&amp；，常量（&U）_（比较）"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "min()",
    "local": "最小（）"
  },
  {
    "origin": "[3/3]",
    "local": "[3/3]"
  },
  {
    "origin": "void cv::min",
    "local": "无效cv：：最小值"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.min(",
    "local": "最小cv("
  },
  {
    "origin": "src1, src2[, dst]",
    "local": "src1，src2[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. needed to avoid conflicts with const _Tp&amp; std::min(const _Tp&amp;, const _Tp&amp;, _Compare)",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。需要避免与const Tp&amp；冲突；标准：：最小值（const&amp；，常量（&U）_（比较）"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "minMaxIdx()",
    "local": "minMaxIdx（）"
  },
  {
    "origin": "void cv::minMaxIdx",
    "local": "void cv:：minMaxIdx"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double *",
    "local": "双倍*"
  },
  {
    "origin": "minVal",
    "local": "小选项"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double *",
    "local": "双倍*"
  },
  {
    "origin": "maxVal",
    "local": "马克斯。"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int *",
    "local": "内景*"
  },
  {
    "origin": "minIdx",
    "local": "迷你DX"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int *",
    "local": "内景*"
  },
  {
    "origin": "maxIdx",
    "local": "最大IDX"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Finds the global minimum and maximum in an array.",
    "local": "查找数组中的全局最小值和最大值。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "finds the minimum and maximum element values and their positions. The extremums are searched across the whole array or, if mask is not an empty array, in the specified array region. The function does not work with multi-channel arrays. If you need to find minimum or maximum elements across all the channels, use",
    "local": "查找最小和最大元素值及其位置。极值在整个数组中搜索，如果mask不是空数组，则在指定的数组区域中搜索。该函数不适用于多通道阵列。如果需要在所有通道中查找最小或最大元素，请使用"
  },
  {
    "origin": "first to reinterpret the array as single-channel. Or you may extract the particular channel using either extractImageCOI , or mixChannels , or split . In case of a sparse matrix, the minimum is found among non-zero elements only.",
    "local": "首先将数组重新解释为单通道。或者可以使用extractImageCOI、mixChannels或split提取特定通道。对于稀疏矩阵，最小值仅在非零元素中找到。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "When minIdx is not NULL, it must have at least 2 elements (as well as maxIdx), even if src is a single-row or single-column matrix. In OpenCV (following MATLAB) each array has at least 2 dimensions, i.e. single-column matrix is Mx1 matrix (and therefore minIdx/maxIdx will be (i1,0)/(i2,0)) and single-row matrix is 1xN matrix (and therefore minIdx/maxIdx will be (0,j1)/(0,j2)).",
    "local": "当minIdx不为NULL时，它必须至少有2个元素（以及maxIdx），即使src是单行或单列矩阵。在OpenCV（遵循MATLAB）中，每个数组至少有2维，即单列矩阵是Mx1矩阵（因此minIdx/maxIdx将是（i1,0）/（i2,0）），单行矩阵是1xN矩阵（因此minIdx/maxIdx将是（0，j1）/（0，j2））。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input single-channel array.",
    "local": "输入单通道阵列。"
  },
  {
    "origin": "minVal",
    "local": "小选项"
  },
  {
    "origin": "pointer to the returned minimum value; NULL is used if not required.",
    "local": "指向返回的最小值的指针；如果不需要，则使用NULL。"
  },
  {
    "origin": "maxVal",
    "local": "马克斯。"
  },
  {
    "origin": "pointer to the returned maximum value; NULL is used if not required.",
    "local": "指向返回的最大值的指针；如果不需要，则使用NULL。"
  },
  {
    "origin": "minIdx",
    "local": "迷你DX"
  },
  {
    "origin": "pointer to the returned minimum location (in nD case); NULL is used if not required; Otherwise, it must point to an array of src.dims elements, the coordinates of the minimum element in each dimension are stored there sequentially.",
    "local": "指向返回的最小位置的指针（在nD情况下）；如果不需要，则使用NULL；否则，它必须指向src.dims元素的数组，每个维度中最小元素的坐标按顺序存储在那里。"
  },
  {
    "origin": "maxIdx",
    "local": "最大IDX"
  },
  {
    "origin": "pointer to the returned maximum location (in nD case). NULL is used if not required.",
    "local": "指向返回的最大位置的指针（在nD情况下）。如果不需要，则使用NULL。"
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "specified array region",
    "local": "指定的数组区域"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "minMaxLoc()",
    "local": "minMaxLoc（）"
  },
  {
    "origin": "[1/2]",
    "local": "[1/2]"
  },
  {
    "origin": "void cv::minMaxLoc",
    "local": "void cv：：minMaxLoc"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double *",
    "local": "双倍*"
  },
  {
    "origin": "minVal",
    "local": "小选项"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double *",
    "local": "双倍*"
  },
  {
    "origin": "maxVal",
    "local": "马克斯。"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "*",
    "local": "*"
  },
  {
    "origin": "minLoc",
    "local": "明洛克"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "*",
    "local": "*"
  },
  {
    "origin": "maxLoc",
    "local": "最大位置"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "minVal, maxVal, minLoc, maxLoc",
    "local": "minVal，maxVal，minLoc，maxLoc"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.minMaxLoc(",
    "local": "minMaxLoc简历("
  },
  {
    "origin": "src[, mask]",
    "local": "src[，掩码]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Finds the global minimum and maximum in an array.",
    "local": "查找数组中的全局最小值和最大值。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "finds the minimum and maximum element values and their positions. The extremums are searched across the whole array or, if mask is not an empty array, in the specified array region.",
    "local": "查找最小和最大元素值及其位置。极值在整个数组中搜索，如果mask不是空数组，则在指定的数组区域中搜索。"
  },
  {
    "origin": "The function do not work with multi-channel arrays. If you need to find minimum or maximum elements across all the channels, use",
    "local": "该函数不适用于多通道阵列。如果需要在所有通道中查找最小或最大元素，请使用"
  },
  {
    "origin": "first to reinterpret the array as single-channel. Or you may extract the particular channel using either extractImageCOI , or mixChannels , or split .",
    "local": "首先将数组重新解释为单通道。或者可以使用extractImageCOI、mixChannels或split提取特定通道。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input single-channel array.",
    "local": "输入单通道阵列。"
  },
  {
    "origin": "minVal",
    "local": "小选项"
  },
  {
    "origin": "pointer to the returned minimum value; NULL is used if not required.",
    "local": "指向返回的最小值的指针；如果不需要，则使用NULL。"
  },
  {
    "origin": "maxVal",
    "local": "马克斯。"
  },
  {
    "origin": "pointer to the returned maximum value; NULL is used if not required.",
    "local": "指向返回的最大值的指针；如果不需要，则使用NULL。"
  },
  {
    "origin": "minLoc",
    "local": "明洛克"
  },
  {
    "origin": "pointer to the returned minimum location (in 2D case); NULL is used if not required.",
    "local": "指向返回的最小位置的指针（在2D情况下）；如果不需要，则使用NULL。"
  },
  {
    "origin": "maxLoc",
    "local": "最大位置"
  },
  {
    "origin": "pointer to the returned maximum location (in 2D case); NULL is used if not required.",
    "local": "指向返回的最大位置的指针（在2D情况下）；如果不需要，则使用NULL。"
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "optional mask used to select a sub-array.",
    "local": "用于选择子数组的可选掩码。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", extractImageCOI,",
    "local": "，提取图像COI，"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "minMaxLoc()",
    "local": "minMaxLoc（）"
  },
  {
    "origin": "[2/2]",
    "local": "[2/2]"
  },
  {
    "origin": "void cv::minMaxLoc",
    "local": "void cv：：minMaxLoc"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "a",
    "local": "一"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double *",
    "local": "双倍*"
  },
  {
    "origin": "minVal",
    "local": "小选项"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double *",
    "local": "双倍*"
  },
  {
    "origin": "maxVal",
    "local": "马克斯。"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int *",
    "local": "内景*"
  },
  {
    "origin": "minIdx",
    "local": "迷你DX"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int *",
    "local": "内景*"
  },
  {
    "origin": "maxIdx",
    "local": "最大IDX"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "minVal, maxVal, minLoc, maxLoc",
    "local": "minVal，maxVal，minLoc，maxLoc"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.minMaxLoc(",
    "local": "minMaxLoc简历("
  },
  {
    "origin": "src[, mask]",
    "local": "src[，掩码]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "a",
    "local": "一"
  },
  {
    "origin": "input single-channel array.",
    "local": "输入单通道阵列。"
  },
  {
    "origin": "minVal",
    "local": "小选项"
  },
  {
    "origin": "pointer to the returned minimum value; NULL is used if not required.",
    "local": "指向返回的最小值的指针；如果不需要，则使用NULL。"
  },
  {
    "origin": "maxVal",
    "local": "马克斯。"
  },
  {
    "origin": "pointer to the returned maximum value; NULL is used if not required.",
    "local": "指向返回的最大值的指针；如果不需要，则使用NULL。"
  },
  {
    "origin": "minIdx",
    "local": "迷你DX"
  },
  {
    "origin": "pointer to the returned minimum location (in nD case); NULL is used if not required; Otherwise, it must point to an array of src.dims elements, the coordinates of the minimum element in each dimension are stored there sequentially.",
    "local": "指向返回的最小位置的指针（在nD情况下）；如果不需要，则使用NULL；否则，它必须指向src.dims元素的数组，每个维度中最小元素的坐标按顺序存储在那里。"
  },
  {
    "origin": "maxIdx",
    "local": "最大IDX"
  },
  {
    "origin": "pointer to the returned maximum location (in nD case). NULL is used if not required.",
    "local": "指向返回的最大位置的指针（在nD情况下）。如果不需要，则使用NULL。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "mixChannels()",
    "local": "混合频道（）"
  },
  {
    "origin": "[1/3]",
    "local": "[1/3]"
  },
  {
    "origin": "void cv::mixChannels",
    "local": "void cv:：混合通道"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "*",
    "local": "*"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "size_t",
    "local": "大小\\u t"
  },
  {
    "origin": "nsrcs",
    "local": "国家战略参考系统"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "*",
    "local": "*"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "size_t",
    "local": "大小\\u t"
  },
  {
    "origin": "ndsts",
    "local": "ndst公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const int *",
    "local": "const int*"
  },
  {
    "origin": "fromTo",
    "local": "从"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "size_t",
    "local": "大小\\u t"
  },
  {
    "origin": "npairs",
    "local": "npairs公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.mixChannels(",
    "local": "cv.混合通道("
  },
  {
    "origin": "src, dst, fromTo",
    "local": "心，圣，弗洛姆托"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Copies specified channels from input arrays to the specified channels of output arrays.",
    "local": "将指定通道从输入阵列复制到输出阵列的指定通道。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "provides an advanced mechanism for shuffling image channels.",
    "local": "提供一种高级机制来洗牌图像通道。"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "and some forms of",
    "local": "以及一些形式的"
  },
  {
    "origin": "are partial cases of",
    "local": "部分病例"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "In the example below, the code splits a 4-channel BGRA image into a 3-channel BGR (with B and R channels swapped) and a separate alpha-channel image:",
    "local": "在下面的示例中，代码将4通道BGRA图像分割为3通道BGR（交换了B和R通道）和单独的alpha通道图像："
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "Unlike many other new-style C++ functions in OpenCV (see the introduction section and",
    "local": "与OpenCV中的许多其他新型C++函数不同（参见介绍部分）"
  },
  {
    "origin": "),",
    "local": "),"
  },
  {
    "origin": "requires the output arrays to be pre-allocated before calling the function.",
    "local": "要求在调用函数之前预先分配输出数组。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input array or vector of matrices; all of the matrices must have the same size and the same depth.",
    "local": "矩阵的输入数组或向量；所有矩阵必须具有相同的大小和深度。"
  },
  {
    "origin": "nsrcs",
    "local": "国家战略参考系统"
  },
  {
    "origin": "number of matrices in",
    "local": "中的矩阵数"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array or vector of matrices; all the matrices",
    "local": "矩阵的输出数组或向量；所有矩阵"
  },
  {
    "origin": "must be allocated",
    "local": "必须分配"
  },
  {
    "origin": "; their size and depth must be the same as in",
    "local": "; 它们的大小和深度必须与"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "ndsts",
    "local": "ndst公司"
  },
  {
    "origin": "number of matrices in",
    "local": "中的矩阵数"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "fromTo",
    "local": "从"
  },
  {
    "origin": "array of index pairs specifying which channels are copied and where; fromTo[k*2] is a 0-based index of the input channel in src, fromTo[k*2+1] is an index of the output channel in dst; the continuous channel numbering is used: the first input image channels are indexed from 0 to src[0].channels()-1, the second input image channels are indexed from src[0].channels() to src[0].channels() + src[1].channels()-1, and so on, the same scheme is used for the output image channels; as a special case, when fromTo[k*2] is negative, the corresponding output channel is filled with zero .",
    "local": "索引对数组，指定哪些通道被复制，在哪里复制；fromTo[k*2]是src中输入通道的基于0的索引，fromTo[k*2+1]是dst中输出通道的索引；使用连续通道编号：第一个输入图像通道从0索引到src[0].channels（）-1，第二个输入图像通道从src[0].channels（）索引到src[0].channels（）+src[1].channels（）-1，依此类推，输出图像通道使用相同的方案；作为特殊情况，当fromTo[k*2]为负时，相应的输出信道被零填充。"
  },
  {
    "origin": "npairs",
    "local": "npairs公司"
  },
  {
    "origin": "number of index pairs in",
    "local": "中的索引对数"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "mixChannels()",
    "local": "混合频道（）"
  },
  {
    "origin": "[2/3]",
    "local": "[2/3]"
  },
  {
    "origin": "void cv::mixChannels",
    "local": "void cv:：混合通道"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const int *",
    "local": "const int*"
  },
  {
    "origin": "fromTo",
    "local": "从"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "size_t",
    "local": "大小\\u t"
  },
  {
    "origin": "npairs",
    "local": "npairs公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.mixChannels(",
    "local": "cv.混合通道("
  },
  {
    "origin": "src, dst, fromTo",
    "local": "心，圣，弗洛姆托"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input array or vector of matrices; all of the matrices must have the same size and the same depth.",
    "local": "矩阵的输入数组或向量；所有矩阵必须具有相同的大小和深度。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array or vector of matrices; all the matrices",
    "local": "矩阵的输出数组或向量；所有矩阵"
  },
  {
    "origin": "must be allocated",
    "local": "必须分配"
  },
  {
    "origin": "; their size and depth must be the same as in src[0].",
    "local": "; 它们的大小和深度必须与src[0]中的相同。"
  },
  {
    "origin": "fromTo",
    "local": "从"
  },
  {
    "origin": "array of index pairs specifying which channels are copied and where; fromTo[k*2] is a 0-based index of the input channel in src, fromTo[k*2+1] is an index of the output channel in dst; the continuous channel numbering is used: the first input image channels are indexed from 0 to src[0].channels()-1, the second input image channels are indexed from src[0].channels() to src[0].channels() + src[1].channels()-1, and so on, the same scheme is used for the output image channels; as a special case, when fromTo[k*2] is negative, the corresponding output channel is filled with zero .",
    "local": "索引对数组，指定哪些通道被复制，在哪里复制；fromTo[k*2]是src中输入通道的基于0的索引，fromTo[k*2+1]是dst中输出通道的索引；使用连续通道编号：第一个输入图像通道从0索引到src[0].channels（）-1，第二个输入图像通道从src[0].channels（）索引到src[0].channels（）+src[1].channels（）-1，依此类推，输出图像通道使用相同的方案；作为特殊情况，当fromTo[k*2]为负时，相应的输出信道被零填充。"
  },
  {
    "origin": "npairs",
    "local": "npairs公司"
  },
  {
    "origin": "number of index pairs in fromTo.",
    "local": "fromTo中的索引对数。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "mixChannels()",
    "local": "混合频道（）"
  },
  {
    "origin": "[3/3]",
    "local": "[3/3]"
  },
  {
    "origin": "void cv::mixChannels",
    "local": "void cv:：混合通道"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const std::vector&lt; int &gt; &amp;",
    "local": "常量标准：：向量&lt；内部&gt&amp；"
  },
  {
    "origin": "fromTo",
    "local": "从"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.mixChannels(",
    "local": "cv.混合通道("
  },
  {
    "origin": "src, dst, fromTo",
    "local": "心，圣，弗洛姆托"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input array or vector of matrices; all of the matrices must have the same size and the same depth.",
    "local": "矩阵的输入数组或向量；所有矩阵必须具有相同的大小和深度。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array or vector of matrices; all the matrices",
    "local": "矩阵的输出数组或向量；所有矩阵"
  },
  {
    "origin": "must be allocated",
    "local": "必须分配"
  },
  {
    "origin": "; their size and depth must be the same as in src[0].",
    "local": "; 它们的大小和深度必须与src[0]中的相同。"
  },
  {
    "origin": "fromTo",
    "local": "从"
  },
  {
    "origin": "array of index pairs specifying which channels are copied and where; fromTo[k*2] is a 0-based index of the input channel in src, fromTo[k*2+1] is an index of the output channel in dst; the continuous channel numbering is used: the first input image channels are indexed from 0 to src[0].channels()-1, the second input image channels are indexed from src[0].channels() to src[0].channels() + src[1].channels()-1, and so on, the same scheme is used for the output image channels; as a special case, when fromTo[k*2] is negative, the corresponding output channel is filled with zero .",
    "local": "索引对数组，指定哪些通道被复制，在哪里复制；fromTo[k*2]是src中输入通道的基于0的索引，fromTo[k*2+1]是dst中输出通道的索引；使用连续通道编号：第一个输入图像通道从0索引到src[0].channels（）-1，第二个输入图像通道从src[0].channels（）索引到src[0].channels（）+src[1].channels（）-1，依此类推，输出图像通道使用相同的方案；作为特殊情况，当fromTo[k*2]为负时，相应的输出信道被零填充。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "mulSpectrums()",
    "local": "多光谱（）"
  },
  {
    "origin": "void cv::mulSpectrums",
    "local": "空cv：：多光谱"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "a",
    "local": "一"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "b",
    "local": "b"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "c",
    "local": "c"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "conjB",
    "local": "康吉布"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "c",
    "local": "c"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.mulSpectrums(",
    "local": "多光谱cv("
  },
  {
    "origin": "a, b, flags[, c[, conjB]]",
    "local": "a、 b，标志[，c[，b]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Performs the per-element multiplication of two Fourier spectrums.",
    "local": "执行两个傅立叶谱的每元素乘法。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "performs the per-element multiplication of the two CCS-packed or complex matrices that are results of a real or complex Fourier transform.",
    "local": "执行实数或复数傅里叶变换结果的两个CCS压缩矩阵或复数矩阵的每元素乘法。"
  },
  {
    "origin": "The function, together with dft and idft , may be used to calculate convolution (pass conjB=false ) or correlation (pass conjB=true ) of two arrays rapidly. When the arrays are complex, they are simply multiplied (per element) with an optional conjugation of the second-array elements. When the arrays are real, they are assumed to be CCS-packed (see dft for details).",
    "local": "该函数与dft和idft一起可用于快速计算两个阵列的卷积（pass conjB=false）或相关（pass conjB=true）。当数组很复杂时，它们（每个元素）简单地与第二个数组元素的可选共轭相乘。当数组是实数时，假定它们是CCS压缩的（有关详细信息，请参见dft）。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "a",
    "local": "一"
  },
  {
    "origin": "first input array.",
    "local": "第一个输入数组。"
  },
  {
    "origin": "b",
    "local": "b"
  },
  {
    "origin": "second input array of the same size and type as src1 .",
    "local": "与src1大小和类型相同的第二个输入数组。"
  },
  {
    "origin": "c",
    "local": "c"
  },
  {
    "origin": "output array of the same size and type as src1 .",
    "local": "与src1大小和类型相同的输出数组。"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": "operation flags; currently, the only supported flag is",
    "local": "操作标志；目前，唯一支持的标志是"
  },
  {
    "origin": ", which indicates that each row of src1 and src2 is an independent 1D Fourier spectrum. If you do not want to use this flag, then simply add a",
    "local": "，这表明src1和src2的每一行都是一个独立的一维傅立叶谱。如果您不想使用这个标志，那么只需添加一个"
  },
  {
    "origin": "as value.",
    "local": "作为价值。"
  },
  {
    "origin": "conjB",
    "local": "康吉布"
  },
  {
    "origin": "optional flag that conjugates the second input array before the multiplication (true) or not (false).",
    "local": "在乘法（真）或不（假）之前共轭第二个输入数组的可选标志。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "multiply()",
    "local": "乘法（）"
  },
  {
    "origin": "void cv::multiply",
    "local": "void cv：：乘法"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "scale",
    "local": "规模"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "dtype",
    "local": "数据类型"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.multiply(",
    "local": "cv.倍增("
  },
  {
    "origin": "src1, src2[, dst[, scale[, dtype]]]",
    "local": "src1，src2[，dst[，scale[，dtype]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the per-element scaled product of two arrays.",
    "local": "计算两个数组的每元素比例积。"
  },
  {
    "origin": "The function multiply calculates the per-element product of two arrays:",
    "local": "函数multiply计算两个数组的每元素乘积："
  },
  {
    "origin": "\\[\\texttt{dst} (I)= \\texttt{saturate} ( \\texttt{scale} \\cdot \\texttt{src1} (I) \\cdot \\texttt{src2} (I))\\]",
    "local": "\\[\\texttt{dst}（I）=\\texttt{saturate}（\\texttt{scale}\\cdot\\texttt{src1}（I）\\cdot\\texttt{src2}（I））\\]"
  },
  {
    "origin": "There is also a",
    "local": "还有一个"
  },
  {
    "origin": "-friendly variant of the first function. See",
    "local": "-第一个函数的友好变体。看到了吗"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "For a not-per-element matrix product, see gemm .",
    "local": "对于非每元素矩阵积，请参见gemm。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "Saturation is not applied when the output array has the depth CV_32S. You may even get result of an incorrect sign in the case of overflow.",
    "local": "当输出阵列具有深度CVň32S时，不应用饱和。在溢出的情况下，您甚至可能得到错误符号的结果。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": "first input array.",
    "local": "第一个输入数组。"
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": "second input array of the same size and the same type as src1.",
    "local": "与src1大小和类型相同的第二个输入数组。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array of the same size and type as src1.",
    "local": "与src1大小和类型相同的输出数组。"
  },
  {
    "origin": "scale",
    "local": "规模"
  },
  {
    "origin": "optional scale factor.",
    "local": "可选比例因子。"
  },
  {
    "origin": "dtype",
    "local": "数据类型"
  },
  {
    "origin": "optional depth of the output array",
    "local": "输出数组的可选深度"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "mulTransposed()",
    "local": "多重转置（）"
  },
  {
    "origin": "void cv::mulTransposed",
    "local": "void cv：：转置"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "aTa",
    "local": "aTa公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "delta",
    "local": "三角洲"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "scale",
    "local": "规模"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "dtype",
    "local": "数据类型"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.mulTransposed(",
    "local": "变异系数("
  },
  {
    "origin": "src, aTa[, dst[, delta[, scale[, dtype]]]]",
    "local": "src，aTa[，dst[，delta[，scale[，dtype]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the product of a matrix and its transposition.",
    "local": "计算矩阵与其转置的乘积。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "calculates the product of src and its transposition:",
    "local": "计算src及其换位的乘积："
  },
  {
    "origin": "\\[\\texttt{dst} = \\texttt{scale} ( \\texttt{src} - \\texttt{delta} )^T ( \\texttt{src} - \\texttt{delta} )\\]",
    "local": "\\\\texttt{dst}=\\texttt{scale}（\\texttt{src}-\\texttt{delta}}T（\\texttt{src}-\\texttt{delta}\\"
  },
  {
    "origin": "if aTa=true , and",
    "local": "如果aTa=真，并且"
  },
  {
    "origin": "\\[\\texttt{dst} = \\texttt{scale} ( \\texttt{src} - \\texttt{delta} ) ( \\texttt{src} - \\texttt{delta} )^T\\]",
    "local": "\\\\texttt{dst}=\\texttt{scale}（\\texttt{src}-\\texttt{delta}[\\texttt{src}\\texttt{delta}\\texttt\\]"
  },
  {
    "origin": "otherwise. The function is used to calculate the covariance matrix. With zero delta, it can be used as a faster substitute for general matrix product A*B when B=A'",
    "local": "否则。该函数用于计算协方差矩阵。当B=a'时，它可以作为一般矩阵积a*B的快速替代品"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input single-channel matrix. Note that unlike gemm, the function can multiply not only floating-point matrices.",
    "local": "输入单通道矩阵。请注意，与gemm不同，该函数不仅可以乘法浮点矩阵。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output square matrix.",
    "local": "输出方阵。"
  },
  {
    "origin": "aTa",
    "local": "aTa公司"
  },
  {
    "origin": "Flag specifying the multiplication ordering. See the description below.",
    "local": "指定乘法顺序的标志。请参见下面的说明。"
  },
  {
    "origin": "delta",
    "local": "三角洲"
  },
  {
    "origin": "Optional delta matrix subtracted from src before the multiplication. When the matrix is empty ( delta=",
    "local": "乘法前从src减去的可选增量矩阵。当矩阵为空时（增量="
  },
  {
    "origin": "), it is assumed to be zero, that is, nothing is subtracted. If it has the same size as src , it is simply subtracted. Otherwise, it is \"repeated\" (see repeat ) to cover the full src and then subtracted. Type of the delta matrix, when it is not empty, must be the same as the type of created output matrix. See the dtype parameter description below.",
    "local": ")，假定为零，即不减去任何值。如果它的大小与src相同，则只需减去它。否则，它是“重复”（见重复）以涵盖完整的src，然后减去。增量矩阵的类型（如果不为空）必须与创建的输出矩阵的类型相同。请参见下面的dtype参数说明。"
  },
  {
    "origin": "scale",
    "local": "规模"
  },
  {
    "origin": "Optional scale factor for the matrix product.",
    "local": "矩阵积的可选比例因子。"
  },
  {
    "origin": "dtype",
    "local": "数据类型"
  },
  {
    "origin": "Optional type of the output matrix. When it is negative, the output matrix will have the same type as src . Otherwise, it will be type=",
    "local": "输出矩阵的可选类型。当它为负时，输出矩阵将具有与src相同的类型。否则，它将是类型="
  },
  {
    "origin": "that should be either CV_32F or CV_64F .",
    "local": "应该是CVè32F或CVè64F。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "norm()",
    "local": "标准（）"
  },
  {
    "origin": "[1/3]",
    "local": "[1/3]"
  },
  {
    "origin": "double cv::norm",
    "local": "双cv：：标准"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "normType",
    "local": "标准"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.norm(",
    "local": "cv.标准("
  },
  {
    "origin": "src1[, normType[, mask]]",
    "local": "src1[，normType[，mask]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.norm(",
    "local": "cv.标准("
  },
  {
    "origin": "src1, src2[, normType[, mask]]",
    "local": "src1，src2[，normtype[，mask]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the absolute norm of an array.",
    "local": "计算数组的绝对范数。"
  },
  {
    "origin": "This version of",
    "local": "此版本的"
  },
  {
    "origin": "calculates the absolute norm of src1. The type of norm to calculate is specified using",
    "local": "计算src1的绝对范数。要计算的范数类型使用"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "As example for one array consider the function \\(r(x)= \\begin{pmatrix} x \\\\ 1-x \\end{pmatrix}, x \\in [-1;1]\\). The \\( L_{1}, L_{2} \\) and \\( L_{\\infty} \\) norm for the sample value \\(r(-1) = \\begin{pmatrix} -1 \\\\ 2 \\end{pmatrix}\\) is calculated as follows",
    "local": "作为一个数组的例子，考虑函数\\（r（x）=\\begin{pmatrix}x\\\\1-x\\end{pmatrix}，x\\in[-1；1]\\). 样本值\\（r（-1）=\\begin{pmatrix}-1\\\\2\\end{pmatrix}\\）的\\（L{1}，L{2}\\）和\\（L{infty}\\）范数计算如下"
  },
  {
    "origin": "\\begin{align*} \\| r(-1) \\|_{L_1} &amp;= |-1| + |2| = 3 \\\\ \\| r(-1) \\|_{L_2} &amp;= \\sqrt{(-1)^{2} + (2)^{2}} = \\sqrt{5} \\\\ \\| r(-1) \\|_{L_\\infty} &amp;= \\max(|-1|,|2|) = 2 \\end{align*}",
    "local": "\\开始{align*}\\1244；r（-1）\\124；u1}&amp；=\\124-1124；+124；2*124；=3\\r（-1）\\124；uL&amp；=\\sqrt{（-1）^{2}+（2）{2}=\\sqrt{5}\\r（-1）\\124；uuu\\infty}&amp\\max（'124；-1'-124；，，1242'-124；）=2\\end{align*}"
  },
  {
    "origin": "and for \\(r(0.5) = \\begin{pmatrix} 0.5 \\\\ 0.5 \\end{pmatrix}\\) the calculation is",
    "local": "对于\\（r（0.5）=\\begin{pmatrix}0.5\\\\0.5\\end{pmatrix}\\），计算如下："
  },
  {
    "origin": "\\begin{align*} \\| r(0.5) \\|_{L_1} &amp;= |0.5| + |0.5| = 1 \\\\ \\| r(0.5) \\|_{L_2} &amp;= \\sqrt{(0.5)^{2} + (0.5)^{2}} = \\sqrt{0.5} \\\\ \\| r(0.5) \\|_{L_\\infty} &amp;= \\max(|0.5|,|0.5|) = 0.5. \\end{align*}",
    "local": "\\开始{align*}\\124；r（0.5）\\124；u1}&amp；=124s；0.5“124；+”124；0.5“124；=1\\\\\\\\124；r（0.5）”1244；uL&amp；=\\sqrt{（0.5）^{2}+（0.5）^{2}=\\sqrt{0.5}\\r（0.5）\\\\1244；{uu1infety}&amp；=\\最大值（“124；0.5”124；，“1240.5”124；）=0.5\\结束{对齐*}"
  },
  {
    "origin": "The following graphic shows all values for the three norm functions \\(\\| r(x) \\|_{L_1}, \\| r(x) \\|_{L_2}\\) and \\(\\| r(x) \\|_{L_\\infty}\\). It is notable that the \\( L_{1} \\) norm forms the upper and the \\( L_{\\infty} \\) norm forms the lower border for the example function \\( r(x) \\).",
    "local": "下图显示了三个范数函数的所有值（r（x）\\（x）\\（x）\\（L{u 1}，\\（x）\\（x）\\（L{u 2}）和（r（x）\\（x）\\（L{u}）。值得注意的是，\\（L{1}\\）范数形成了示例函数\\（r（x）\\）的上边界，\\（L{infty}\\）范数形成了下边界。"
  },
  {
    "origin": "Graphs for the different norm functions from the above example",
    "local": "上例中不同范数函数的图"
  },
  {
    "origin": "When the mask parameter is specified and it is not empty, the norm is",
    "local": "当指定了mask参数且该参数不为空时，则为norm"
  },
  {
    "origin": "If normType is not specified,",
    "local": "如果未指定normType，"
  },
  {
    "origin": "is used. calculated only over the region specified by the mask.",
    "local": "已使用。仅在遮罩指定的区域上计算。"
  },
  {
    "origin": "Multi-channel input arrays are treated as single-channel arrays, that is, the results for all channels are combined.",
    "local": "多通道输入阵列被视为单通道阵列，即所有通道的结果被合并。"
  },
  {
    "origin": "norms can only be calculated with CV_8U depth arrays.",
    "local": "范数只能用cv8u深度数组计算。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": "first input array.",
    "local": "第一个输入数组。"
  },
  {
    "origin": "normType",
    "local": "标准"
  },
  {
    "origin": "type of the norm (see",
    "local": "标准类型（参见"
  },
  {
    "origin": ").",
    "local": ")."
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "optional operation mask; it must have the same size as src1 and CV_8UC1 type.",
    "local": "可选操作面罩；它的大小必须与src1和cv8uc1类型相同。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "norm()",
    "local": "标准（）"
  },
  {
    "origin": "[2/3]",
    "local": "[2/3]"
  },
  {
    "origin": "double cv::norm",
    "local": "双cv：：标准"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "normType",
    "local": "标准"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.norm(",
    "local": "cv.标准("
  },
  {
    "origin": "src1[, normType[, mask]]",
    "local": "src1[，normType[，mask]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.norm(",
    "local": "cv.标准("
  },
  {
    "origin": "src1, src2[, normType[, mask]]",
    "local": "src1，src2[，normtype[，mask]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates an absolute difference norm or a relative difference norm.",
    "local": "计算绝对差范数或相对差范数。"
  },
  {
    "origin": "This version of",
    "local": "此版本的"
  },
  {
    "origin": "calculates the absolute difference norm or the relative difference norm of arrays src1 and src2. The type of norm to calculate is specified using",
    "local": "计算数组src1和src2的绝对差范数或相对差范数。要计算的范数类型使用"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": "first input array.",
    "local": "第一个输入数组。"
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": "second input array of the same size and the same type as src1.",
    "local": "与src1大小和类型相同的第二个输入数组。"
  },
  {
    "origin": "normType",
    "local": "标准"
  },
  {
    "origin": "type of the norm (see",
    "local": "标准类型（参见"
  },
  {
    "origin": ").",
    "local": ")."
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "optional operation mask; it must have the same size as src1 and CV_8UC1 type.",
    "local": "可选操作面罩；它的大小必须与src1和cv8uc1类型相同。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "norm()",
    "local": "标准（）"
  },
  {
    "origin": "[3/3]",
    "local": "[3/3]"
  },
  {
    "origin": "double cv::norm",
    "local": "双cv：：标准"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "normType",
    "local": "标准"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.norm(",
    "local": "cv.标准("
  },
  {
    "origin": "src1[, normType[, mask]]",
    "local": "src1[，normType[，mask]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.norm(",
    "local": "cv.标准("
  },
  {
    "origin": "src1, src2[, normType[, mask]]",
    "local": "src1，src2[，normtype[，mask]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "first input array.",
    "local": "第一个输入数组。"
  },
  {
    "origin": "normType",
    "local": "标准"
  },
  {
    "origin": "type of the norm (see",
    "local": "标准类型（参见"
  },
  {
    "origin": ").",
    "local": ")."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "normalize()",
    "local": "规格化（）"
  },
  {
    "origin": "[1/2]",
    "local": "[1/2]"
  },
  {
    "origin": "void cv::normalize",
    "local": "void cv：：规格化"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "alpha",
    "local": "阿尔法"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "beta",
    "local": "贝塔"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "norm_type",
    "local": "标准型"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "dtype",
    "local": "数据类型"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.normalize(",
    "local": "cv.标准化("
  },
  {
    "origin": "src, dst[, alpha[, beta[, norm_type[, dtype[, mask]]]]]",
    "local": "src，dst[，alpha[，beta[，norm\\u type[，dtype[，mask]]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Normalizes the norm or value range of an array.",
    "local": "规范化数组的范数或值范围。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "normalizes scale and shift the input array elements so that",
    "local": "规格化缩放和移动输入数组元素，以便"
  },
  {
    "origin": "\\[\\| \\texttt{dst} \\| _{L_p}= \\texttt{alpha}\\]",
    "local": "\\\\[\\.texttt{dst}\\.{L\\u p}=\\texttt{alpha}\\]"
  },
  {
    "origin": "(where p=Inf, 1 or 2) when normType=NORM_INF, NORM_L1, or NORM_L2, respectively; or so that",
    "local": "（其中p=Inf，1或2）当normType=NORM\\u Inf、NORM\\u L1或NORM\\u L2时；差不多吧"
  },
  {
    "origin": "\\[\\min _I \\texttt{dst} (I)= \\texttt{alpha} , \\, \\, \\max _I \\texttt{dst} (I)= \\texttt{beta}\\]",
    "local": "\\[\\min\\u I\\texttt{dst}（I）=\\texttt{alpha}，\\，\\，\\max\\u I\\texttt{dst}（I）=\\texttt{beta}\\]"
  },
  {
    "origin": "when normType=NORM_MINMAX (for dense arrays only). The optional mask specifies a sub-array to be normalized. This means that the norm or min-n-max are calculated over the sub-array, and then this sub-array is modified to be normalized. If you want to only use the mask to calculate the norm or min-max but modify the whole array, you can use norm and",
    "local": "当normType=NORM\\u MINMAX时（仅适用于密集阵列）。可选掩码指定要规格化的子数组。这意味着在子数组上计算范数或min-n-max，然后将该子数组修改为标准化。如果只想使用遮罩计算范数或最小-最大值，但修改整个数组，则可以使用范数和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "In case of sparse matrices, only the non-zero values are analyzed and transformed. Because of this, the range transformation for sparse matrices is not allowed since it can shift the zero level.",
    "local": "对于稀疏矩阵，只对非零值进行分析和变换。因此，稀疏矩阵的范围变换是不允许的，因为它可以移动零级。"
  },
  {
    "origin": "Possible usage with some positive example data:",
    "local": "一些正面示例数据的可能用法："
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input array.",
    "local": "输入数组。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array of the same size as src .",
    "local": "与src大小相同的输出数组。"
  },
  {
    "origin": "alpha",
    "local": "阿尔法"
  },
  {
    "origin": "norm value to normalize to or the lower range boundary in case of the range normalization.",
    "local": "在范围标准化的情况下，要标准化到或较低范围边界的标准值。"
  },
  {
    "origin": "beta",
    "local": "贝塔"
  },
  {
    "origin": "upper range boundary in case of the range normalization; it is not used for the norm normalization.",
    "local": "范围归一化时的范围上限；它不用于规范化。"
  },
  {
    "origin": "norm_type",
    "local": "标准型"
  },
  {
    "origin": "normalization type (see",
    "local": "规范化类型（请参阅"
  },
  {
    "origin": ").",
    "local": ")."
  },
  {
    "origin": "dtype",
    "local": "数据类型"
  },
  {
    "origin": "when negative, the output array has the same type as src; otherwise, it has the same number of channels as src and the depth =",
    "local": "如果为负，则输出数组的类型与src相同；否则，它具有与src相同的通道数和深度="
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "optional operation mask.",
    "local": "可选操作掩码。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "normalize()",
    "local": "规格化（）"
  },
  {
    "origin": "[2/2]",
    "local": "[2/2]"
  },
  {
    "origin": "void cv::normalize",
    "local": "void cv：：规格化"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "alpha",
    "local": "阿尔法"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "normType",
    "local": "标准"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.normalize(",
    "local": "cv.标准化("
  },
  {
    "origin": "src, dst[, alpha[, beta[, norm_type[, dtype[, mask]]]]]",
    "local": "src，dst[，alpha[，beta[，norm\\u type[，dtype[，mask]]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input array.",
    "local": "输入数组。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array of the same size as src .",
    "local": "与src大小相同的输出数组。"
  },
  {
    "origin": "alpha",
    "local": "阿尔法"
  },
  {
    "origin": "norm value to normalize to or the lower range boundary in case of the range normalization.",
    "local": "在范围标准化的情况下，要标准化到或较低范围边界的标准值。"
  },
  {
    "origin": "normType",
    "local": "标准"
  },
  {
    "origin": "normalization type (see",
    "local": "规范化类型（请参阅"
  },
  {
    "origin": ").",
    "local": ")."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "patchNaNs()",
    "local": "patchNaNs（）"
  },
  {
    "origin": "void cv::patchNaNs",
    "local": "无效cv：：patchNaNs"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "a",
    "local": "一"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "a",
    "local": "一"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.patchNaNs(",
    "local": "帕奇南斯简历("
  },
  {
    "origin": "a[, val]",
    "local": "a[，val]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "converts NaNs to the given number",
    "local": "将nan转换为给定的数字"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "a",
    "local": "一"
  },
  {
    "origin": "input/output matrix (CV_32F type).",
    "local": "输入/输出矩阵（CV\\ U 32F型）。"
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": "value to convert the NaNs",
    "local": "值来转换NaN"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "PCABackProject()",
    "local": "PCABackProject（）"
  },
  {
    "origin": "void cv::PCABackProject",
    "local": "void cv:：PCABackProject"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "data",
    "local": "数据"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mean",
    "local": "意思是"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "eigenvectors",
    "local": "特征向量"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "result",
    "local": "结果"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "result",
    "local": "结果"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.PCABackProject(",
    "local": "简历PCABackProject("
  },
  {
    "origin": "data, mean, eigenvectors[, result]",
    "local": "数据，平均值，特征向量[，结果]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "wrap",
    "local": "包"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "PCACompute()",
    "local": "PCACompute（）"
  },
  {
    "origin": "[1/4]",
    "local": "[1/4]"
  },
  {
    "origin": "void cv::PCACompute",
    "local": "void cv:：PCACompute无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "data",
    "local": "数据"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mean",
    "local": "意思是"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "eigenvectors",
    "local": "特征向量"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "maxComponents",
    "local": "最大组件"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "mean, eigenvectors",
    "local": "平均值，特征向量"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.PCACompute(",
    "local": "cv.PC计算机("
  },
  {
    "origin": "data, mean[, eigenvectors[, maxComponents]]",
    "local": "数据，平均值[，特征向量[，最大分量]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "mean, eigenvectors",
    "local": "平均值，特征向量"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.PCACompute(",
    "local": "cv.PC计算机("
  },
  {
    "origin": "data, mean, retainedVariance[, eigenvectors]",
    "local": "数据，平均值，保持方差[，特征向量]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "mean, eigenvectors, eigenvalues",
    "local": "平均值，特征向量，特征值"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.PCACompute2(",
    "local": "简历PCA计算机2("
  },
  {
    "origin": "data, mean[, eigenvectors[, eigenvalues[, maxComponents]]]",
    "local": "数据，平均值[，特征向量[，特征值[，最大分量]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "mean, eigenvectors, eigenvalues",
    "local": "平均值，特征向量，特征值"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.PCACompute2(",
    "local": "简历PCA计算机2("
  },
  {
    "origin": "data, mean, retainedVariance[, eigenvectors[, eigenvalues]]",
    "local": "数据，平均值，保持方差[，特征向量[，特征值]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "wrap PCA::operator()",
    "local": "包装PCA:：运算符（）"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "PCACompute()",
    "local": "PCACompute（）"
  },
  {
    "origin": "[2/4]",
    "local": "[2/4]"
  },
  {
    "origin": "void cv::PCACompute",
    "local": "void cv:：PCACompute无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "data",
    "local": "数据"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mean",
    "local": "意思是"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "eigenvectors",
    "local": "特征向量"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "eigenvalues",
    "local": "特征值"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "maxComponents",
    "local": "最大组件"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "mean, eigenvectors",
    "local": "平均值，特征向量"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.PCACompute(",
    "local": "cv.PC计算机("
  },
  {
    "origin": "data, mean[, eigenvectors[, maxComponents]]",
    "local": "数据，平均值[，特征向量[，最大分量]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "mean, eigenvectors",
    "local": "平均值，特征向量"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.PCACompute(",
    "local": "cv.PC计算机("
  },
  {
    "origin": "data, mean, retainedVariance[, eigenvectors]",
    "local": "数据，平均值，保持方差[，特征向量]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "mean, eigenvectors, eigenvalues",
    "local": "平均值，特征向量，特征值"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.PCACompute2(",
    "local": "简历PCA计算机2("
  },
  {
    "origin": "data, mean[, eigenvectors[, eigenvalues[, maxComponents]]]",
    "local": "数据，平均值[，特征向量[，特征值[，最大分量]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "mean, eigenvectors, eigenvalues",
    "local": "平均值，特征向量，特征值"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.PCACompute2(",
    "local": "简历PCA计算机2("
  },
  {
    "origin": "data, mean, retainedVariance[, eigenvectors[, eigenvalues]]",
    "local": "数据，平均值，保持方差[，特征向量[，特征值]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "wrap PCA::operator() and add eigenvalues output parameter",
    "local": "包装PCA:：operator（）并添加特征值输出参数"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "PCACompute()",
    "local": "PCACompute（）"
  },
  {
    "origin": "[3/4]",
    "local": "[3/4]"
  },
  {
    "origin": "void cv::PCACompute",
    "local": "void cv:：PCACompute无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "data",
    "local": "数据"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mean",
    "local": "意思是"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "eigenvectors",
    "local": "特征向量"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "retainedVariance",
    "local": "保持差异"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "mean, eigenvectors",
    "local": "平均值，特征向量"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.PCACompute(",
    "local": "cv.PC计算机("
  },
  {
    "origin": "data, mean[, eigenvectors[, maxComponents]]",
    "local": "数据，平均值[，特征向量[，最大分量]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "mean, eigenvectors",
    "local": "平均值，特征向量"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.PCACompute(",
    "local": "cv.PC计算机("
  },
  {
    "origin": "data, mean, retainedVariance[, eigenvectors]",
    "local": "数据，平均值，保持方差[，特征向量]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "mean, eigenvectors, eigenvalues",
    "local": "平均值，特征向量，特征值"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.PCACompute2(",
    "local": "简历PCA计算机2("
  },
  {
    "origin": "data, mean[, eigenvectors[, eigenvalues[, maxComponents]]]",
    "local": "数据，平均值[，特征向量[，特征值[，最大分量]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "mean, eigenvectors, eigenvalues",
    "local": "平均值，特征向量，特征值"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.PCACompute2(",
    "local": "简历PCA计算机2("
  },
  {
    "origin": "data, mean, retainedVariance[, eigenvectors[, eigenvalues]]",
    "local": "数据，平均值，保持方差[，特征向量[，特征值]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "wrap PCA::operator()",
    "local": "包装PCA:：运算符（）"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "PCACompute()",
    "local": "PCACompute（）"
  },
  {
    "origin": "[4/4]",
    "local": "[4/4]"
  },
  {
    "origin": "void cv::PCACompute",
    "local": "void cv:：PCACompute无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "data",
    "local": "数据"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mean",
    "local": "意思是"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "eigenvectors",
    "local": "特征向量"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "eigenvalues",
    "local": "特征值"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "retainedVariance",
    "local": "保持差异"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "mean, eigenvectors",
    "local": "平均值，特征向量"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.PCACompute(",
    "local": "cv.PC计算机("
  },
  {
    "origin": "data, mean[, eigenvectors[, maxComponents]]",
    "local": "数据，平均值[，特征向量[，最大分量]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "mean, eigenvectors",
    "local": "平均值，特征向量"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.PCACompute(",
    "local": "cv.PC计算机("
  },
  {
    "origin": "data, mean, retainedVariance[, eigenvectors]",
    "local": "数据，平均值，保持方差[，特征向量]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "mean, eigenvectors, eigenvalues",
    "local": "平均值，特征向量，特征值"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.PCACompute2(",
    "local": "简历PCA计算机2("
  },
  {
    "origin": "data, mean[, eigenvectors[, eigenvalues[, maxComponents]]]",
    "local": "数据，平均值[，特征向量[，特征值[，最大分量]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "mean, eigenvectors, eigenvalues",
    "local": "平均值，特征向量，特征值"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.PCACompute2(",
    "local": "简历PCA计算机2("
  },
  {
    "origin": "data, mean, retainedVariance[, eigenvectors[, eigenvalues]]",
    "local": "数据，平均值，保持方差[，特征向量[，特征值]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "wrap PCA::operator() and add eigenvalues output parameter",
    "local": "包装PCA:：operator（）并添加特征值输出参数"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "PCAProject()",
    "local": "PCA项目（）"
  },
  {
    "origin": "void cv::PCAProject",
    "local": "void cv:：PCAProject"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "data",
    "local": "数据"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mean",
    "local": "意思是"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "eigenvectors",
    "local": "特征向量"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "result",
    "local": "结果"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "result",
    "local": "结果"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.PCAProject(",
    "local": "简历PCA项目("
  },
  {
    "origin": "data, mean, eigenvectors[, result]",
    "local": "数据，平均值，特征向量[，结果]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "wrap",
    "local": "包"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "perspectiveTransform()",
    "local": "透视变换（）"
  },
  {
    "origin": "void cv::perspectiveTransform",
    "local": "void cv:：透视变换"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.perspectiveTransform(",
    "local": "透视变换("
  },
  {
    "origin": "src, m[, dst]",
    "local": "src，m[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Performs the perspective matrix transformation of vectors.",
    "local": "执行向量的透视矩阵变换。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "transforms every element of src by treating it as a 2D or 3D vector, in the following way:",
    "local": "通过将src的每个元素视为二维或三维向量，按以下方式进行变换："
  },
  {
    "origin": "\\[(x, y, z) \\rightarrow (x'/w, y'/w, z'/w)\\]",
    "local": "\\[（x，y，z）\\rightarrow（x'/w，y'/w，z'/w）]"
  },
  {
    "origin": "where",
    "local": "哪里"
  },
  {
    "origin": "\\[(x', y', z', w') = \\texttt{mat} \\cdot \\begin{bmatrix} x &amp; y &amp; z &amp; 1 \\end{bmatrix}\\]",
    "local": "\\[（x'，y'，z'，w'）=\\texttt{mat}\\cdot\\begin{bmatrix}x&amp；y&amp；z&amp；1\\end{bmatrix}\\]"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": "\\[w = \\fork{w'}{if \\(w' \\ne 0\\)}{\\infty}{otherwise}\\]",
    "local": "\\[w=\\fork{w}{if\\（w\\ne 0\\）}{\\infty}{否则}]"
  },
  {
    "origin": "Here a 3D vector transformation is shown. In case of a 2D vector transformation, the z component is omitted.",
    "local": "这里显示了3D向量变换。在2D向量变换的情况下，省略z分量。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "The function transforms a sparse set of 2D or 3D vectors. If you want to transform an image using perspective transformation, use warpPerspective . If you have an inverse problem, that is, you want to compute the most probable perspective transformation out of several pairs of corresponding points, you can use getPerspectiveTransform or findHomography .",
    "local": "该函数用于变换一组稀疏的二维或三维矢量。如果要使用透视变换变换图像，请使用透视。如果你有一个反问题，也就是说，你想从几对对应的点中计算出最可能的透视变换，你可以使用getPerspectiveTransform或findHomography。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input two-channel or three-channel floating-point array; each element is a 2D/3D vector to be transformed.",
    "local": "输入两通道或三通道浮点数组；每个元素都是要变换的2D/3D向量。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array of the same size and type as src.",
    "local": "与src大小和类型相同的输出数组。"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": "3x3 or 4x4 floating-point transformation matrix.",
    "local": "3x3或4x4浮点转换矩阵。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "phase()",
    "local": "阶段（）"
  },
  {
    "origin": "void cv::phase",
    "local": "无效cv：：阶段"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "x",
    "local": "十"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "y",
    "local": "y"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "angle",
    "local": "角"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "angleInDegrees",
    "local": "角度"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "angle",
    "local": "角"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.phase(",
    "local": "cv相位("
  },
  {
    "origin": "x, y[, angle[, angleInDegrees]]",
    "local": "X，Y[，角度[，角度角度]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the rotation angle of 2D vectors.",
    "local": "计算二维向量的旋转角度。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "calculates the rotation angle of each 2D vector that is formed from the corresponding elements of x and y :",
    "local": "计算由x和y的相应元素形成的每个二维向量的旋转角度："
  },
  {
    "origin": "\\[\\texttt{angle} (I) = \\texttt{atan2} ( \\texttt{y} (I), \\texttt{x} (I))\\]",
    "local": "\\\\[\\texttt{angle}（I）=\\texttt{atan2}（\\texttt{y}（I），\\texttt{x}（I）\\]"
  },
  {
    "origin": "The angle estimation accuracy is about 0.3 degrees. When x(I)=y(I)=0 , the corresponding angle(I) is set to 0.",
    "local": "角度估计精度约为0.3度。当x（I）=y（I）=0时，相应的角度（I）设置为0。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "x",
    "local": "十"
  },
  {
    "origin": "input floating-point array of x-coordinates of 2D vectors.",
    "local": "输入二维向量x坐标的浮点数组。"
  },
  {
    "origin": "y",
    "local": "y"
  },
  {
    "origin": "input array of y-coordinates of 2D vectors; it must have the same size and the same type as x.",
    "local": "二维矢量y坐标的输入数组；它的大小和类型必须与x相同。"
  },
  {
    "origin": "angle",
    "local": "角"
  },
  {
    "origin": "output array of vector angles; it has the same size and same type as x .",
    "local": "矢量角输出阵列；它的大小和类型与x相同。"
  },
  {
    "origin": "angleInDegrees",
    "local": "角度"
  },
  {
    "origin": "when true, the function calculates the angle in degrees, otherwise, they are measured in radians.",
    "local": "如果为true，则该函数以度为单位计算角度，否则以弧度为单位测量角度。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "polarToCart()",
    "local": "polarToCart（）"
  },
  {
    "origin": "void cv::polarToCart",
    "local": "void cv:：polarToCart"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "magnitude",
    "local": "震级"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "angle",
    "local": "角"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "x",
    "local": "十"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "y",
    "local": "y"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "angleInDegrees",
    "local": "角度"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "x, y",
    "local": "x、 是的"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.polarToCart(",
    "local": "polarToCart简历("
  },
  {
    "origin": "magnitude, angle[, x[, y[, angleInDegrees]]]",
    "local": "幅值，角度[，x[，y[，angleInDegrees]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates x and y coordinates of 2D vectors from their magnitude and angle.",
    "local": "根据向量的大小和角度计算二维向量的x和y坐标。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "calculates the Cartesian coordinates of each 2D vector represented by the corresponding elements of magnitude and angle:",
    "local": "计算每个二维矢量的笛卡尔坐标，这些矢量由幅值和角度的相应元素表示："
  },
  {
    "origin": "\\[\\begin{array}{l} \\texttt{x} (I) = \\texttt{magnitude} (I) \\cos ( \\texttt{angle} (I)) \\\\ \\texttt{y} (I) = \\texttt{magnitude} (I) \\sin ( \\texttt{angle} (I)) \\\\ \\end{array}\\]",
    "local": "\\[\\begin{array}{l}\\texttt{x}（I）=\\texttt{magnitude}（I）\\cos（\\texttt{angle}（I））\\\\\\texttt{y}（I）=\\texttt{magnitude}（I）\\sin（\\texttt{angle}（I））\\\\\\end{array}\\]"
  },
  {
    "origin": "The relative accuracy of the estimated coordinates is about 1e-6.",
    "local": "估计坐标的相对精度约为1e-6。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "magnitude",
    "local": "震级"
  },
  {
    "origin": "input floating-point array of magnitudes of 2D vectors; it can be an empty matrix (=Mat()), in this case, the function assumes that all the magnitudes are =1; if it is not empty, it must have the same size and type as angle.",
    "local": "输入二维向量大小的浮点数组；它可以是一个空矩阵（=Mat（）），在这种情况下，函数假设所有的震级都是=1；如果它不是空的，那么它的大小和类型必须与angle相同。"
  },
  {
    "origin": "angle",
    "local": "角"
  },
  {
    "origin": "input floating-point array of angles of 2D vectors.",
    "local": "输入二维向量角度的浮点数组。"
  },
  {
    "origin": "x",
    "local": "十"
  },
  {
    "origin": "output array of x-coordinates of 2D vectors; it has the same size and type as angle.",
    "local": "二维矢量x坐标的输出阵列；它的大小和类型与angle相同。"
  },
  {
    "origin": "y",
    "local": "y"
  },
  {
    "origin": "output array of y-coordinates of 2D vectors; it has the same size and type as angle.",
    "local": "二维矢量y坐标的输出阵列；它的大小和类型与angle相同。"
  },
  {
    "origin": "angleInDegrees",
    "local": "角度"
  },
  {
    "origin": "when true, the input angles are measured in degrees, otherwise, they are measured in radians.",
    "local": "如果为true，则输入角度以度为单位，否则以弧度为单位。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "pow()",
    "local": "电源（）"
  },
  {
    "origin": "void cv::pow",
    "local": "无效cv：：pow"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "power",
    "local": "权力"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.pow(",
    "local": "cv.pow公司("
  },
  {
    "origin": "src, power[, dst]",
    "local": "src，电源[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Raises every array element to a power.",
    "local": "将每个数组元素提升为幂。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "raises every element of the input array to power :",
    "local": "将输入数组的每个元素提升到幂："
  },
  {
    "origin": "\\[\\texttt{dst} (I) = \\fork{\\texttt{src}(I)^{power}}{if \\(\\texttt{power}\\) is integer}{|\\texttt{src}(I)|^{power}}{otherwise}\\]",
    "local": "\\[\\texttt{dst}（I）=\\fork{\\texttt{src}（I）^{power}{如果\\（\\texttt{power}\\）是整数}{|\\texttt{src}（I）^{power}}{否则}\\]"
  },
  {
    "origin": "So, for a non-integer power exponent, the absolute values of input array elements are used. However, it is possible to get true values for negative values using some extra operations. In the example below, computing the 5th root of array src shows:",
    "local": "因此，对于非整数幂指数，使用输入数组元素的绝对值。但是，可以使用一些额外的操作来获得负值的真值。在下面的示例中，计算数组src的第5个根显示："
  },
  {
    "origin": "For some values of power, such as integer values, 0.5 and -0.5, specialized faster algorithms are used.",
    "local": "对于某些幂值，例如整数值0.5和-0.5，使用专门的更快算法。"
  },
  {
    "origin": "Special values (NaN, Inf) are not handled.",
    "local": "不处理特殊值（NaN、Inf）。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input array.",
    "local": "输入数组。"
  },
  {
    "origin": "power",
    "local": "权力"
  },
  {
    "origin": "exponent of power.",
    "local": "幂指数。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array of the same size and type as src.",
    "local": "与src大小和类型相同的输出数组。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "PSNR()",
    "local": "峰值信噪比（）"
  },
  {
    "origin": "double cv::PSNR",
    "local": "双cv：：峰值信噪比"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "R",
    "local": "R"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.PSNR(",
    "local": "峰值信噪比("
  },
  {
    "origin": "src1, src2[, R]",
    "local": "src1，src2[，R]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Computes the Peak Signal-to-Noise Ratio (PSNR) image quality metric.",
    "local": "计算峰值信噪比（PSNR）图像质量度量。"
  },
  {
    "origin": "This function calculates the Peak Signal-to-Noise Ratio (PSNR) image quality metric in decibels (dB), between two input arrays src1 and src2. The arrays must have the same type.",
    "local": "此函数用于计算两个输入阵列src1和src2之间的峰值信噪比（PSNR）图像质量度量，单位为分贝（dB）。数组必须具有相同的类型。"
  },
  {
    "origin": "The PSNR is calculated as follows:",
    "local": "峰值信噪比计算如下："
  },
  {
    "origin": "\\[ \\texttt{PSNR} = 10 \\cdot \\log_{10}{\\left( \\frac{R^2}{MSE} \\right) } \\]",
    "local": "\\[\\texttt{PSNR}=10\\cdot\\log{10}{\\left（\\frac{R^2}{MSE}\\right）}\\]"
  },
  {
    "origin": "where R is the maximum integer value of depth (e.g. 255 in the case of CV_8U data) and MSE is the mean squared error between the two arrays.",
    "local": "其中R是深度的最大整数值（例如，在cv8u数据的情况下为255），MSE是两个数组之间的均方误差。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": "first input array.",
    "local": "第一个输入数组。"
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": "second input array of the same size as src1.",
    "local": "与src1大小相同的第二个输入数组。"
  },
  {
    "origin": "R",
    "local": "R"
  },
  {
    "origin": "the maximum pixel value (255 by default)",
    "local": "最大像素值（默认为255）"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "randn()",
    "local": "兰登（）"
  },
  {
    "origin": "void cv::randn",
    "local": "无效cv：：randn"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mean",
    "local": "意思是"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "stddev",
    "local": "标准偏差"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.randn(",
    "local": "兰登简历("
  },
  {
    "origin": "dst, mean, stddev",
    "local": "dst，平均值，标准差"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Fills the array with normally distributed random numbers.",
    "local": "用正态分布的随机数填充数组。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "fills the matrix dst with normally distributed random numbers with the specified mean vector and the standard deviation matrix. The generated random numbers are clipped to fit the value range of the output array data type.",
    "local": "使用指定的平均向量和标准偏差矩阵，用正态分布随机数填充矩阵dst。生成的随机数被剪裁以适合输出数组数据类型的值范围。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array of random numbers; the array must be pre-allocated and have 1 to 4 channels.",
    "local": "输出随机数数组；阵列必须预先分配，并且有1到4个通道。"
  },
  {
    "origin": "mean",
    "local": "意思是"
  },
  {
    "origin": "mean value (expectation) of the generated random numbers.",
    "local": "生成的随机数的平均值（期望值）。"
  },
  {
    "origin": "stddev",
    "local": "标准偏差"
  },
  {
    "origin": "standard deviation of the generated random numbers; it can be either a vector (in which case a diagonal standard deviation matrix is assumed) or a square matrix.",
    "local": "生成的随机数的标准差；它可以是一个向量（在这种情况下，假定一个对角标准差矩阵）或一个平方矩阵。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "randShuffle()",
    "local": "随机播放（）"
  },
  {
    "origin": "void cv::randShuffle",
    "local": "无效cv：：随机播放"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "iterFactor",
    "local": "iterFactor公司"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "*",
    "local": "*"
  },
  {
    "origin": "rng",
    "local": "rng公司"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.randShuffle(",
    "local": "randShuffle简历("
  },
  {
    "origin": "dst[, iterFactor]",
    "local": "dst[，iterFactor]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Shuffles the array elements randomly.",
    "local": "随机洗牌数组元素。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "shuffles the specified 1D array by randomly choosing pairs of elements and swapping them. The number of such swap operations will be dst.rows*dst.cols*iterFactor .",
    "local": "通过随机选择元素对并交换它们来洗牌指定的1D数组。此类交换操作的数目将是dst.rows*dst.cols*iterFactor。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "input/output numerical 1D array.",
    "local": "输入/输出数字一维阵列。"
  },
  {
    "origin": "iterFactor",
    "local": "iterFactor公司"
  },
  {
    "origin": "scale factor that determines the number of random swap operations (see the details below).",
    "local": "确定随机交换操作数的比例因子（请参阅下面的详细信息）。"
  },
  {
    "origin": "rng",
    "local": "rng公司"
  },
  {
    "origin": "optional random number generator used for shuffling; if it is zero, theRNG () is used instead.",
    "local": "用于洗牌的可选随机数发生器；如果为零，则使用theRNG（）。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "randu()",
    "local": "日期（）"
  },
  {
    "origin": "void cv::randu",
    "local": "无效cv：：randu"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "low",
    "local": "低的"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "high",
    "local": "高的"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.randu(",
    "local": "兰杜简历("
  },
  {
    "origin": "dst, low, high",
    "local": "dst，低，高"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Generates a single uniformly-distributed random number or an array of random numbers.",
    "local": "生成单个均匀分布的随机数或随机数数组。"
  },
  {
    "origin": "Non-template variant of the function fills the matrix dst with uniformly-distributed random numbers from the specified range:",
    "local": "函数的非模板变量用指定范围内均匀分布的随机数填充矩阵dst："
  },
  {
    "origin": "\\[\\texttt{low} _c \\leq \\texttt{dst} (I)_c &lt; \\texttt{high} _c\\]",
    "local": "\\[\\texttt{low}\\u c\\leq\\texttt{dst}（I）\\u c&lt\\文本tt{high}\\u c\\]"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array of random numbers; the array must be pre-allocated.",
    "local": "输出随机数数组；必须预先分配阵列。"
  },
  {
    "origin": "low",
    "local": "低的"
  },
  {
    "origin": "inclusive lower boundary of the generated random numbers.",
    "local": "生成的随机数的包含下边界。"
  },
  {
    "origin": "high",
    "local": "高的"
  },
  {
    "origin": "exclusive upper boundary of the generated random numbers.",
    "local": "生成的随机数的排他上界。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "reduce()",
    "local": "减少（）"
  },
  {
    "origin": "void cv::reduce",
    "local": "void cv：：减少"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "dim",
    "local": "昏暗的"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "rtype",
    "local": "R型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "dtype",
    "local": "数据类型"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.reduce(",
    "local": "cv.减少("
  },
  {
    "origin": "src, dim, rtype[, dst[, dtype]]",
    "local": "src，dim，rtype[，dst[，dtype]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Reduces a matrix to a vector.",
    "local": "把矩阵化为向量。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "reduces the matrix to a vector by treating the matrix rows/columns as a set of 1D vectors and performing the specified operation on the vectors until a single row/column is obtained. For example, the function can be used to compute horizontal and vertical projections of a raster image. In case of",
    "local": "通过将矩阵行/列视为一组一维向量并对向量执行指定操作，直到获得单个行/列，从而将矩阵缩减为向量。例如，该函数可用于计算光栅图像的水平和垂直投影。万一"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": ", the output image should have the same type as the source one. In case of",
    "local": "，输出图像的类型应与源图像的类型相同。万一"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": ", the output may have a larger element bit-depth to preserve accuracy. And multi-channel arrays are also supported in these two reduction modes.",
    "local": "，则输出可能具有更大的元素位深度以保持精度。在这两种简化模式下，也支持多通道阵列。"
  },
  {
    "origin": "The following code demonstrates its usage for a single channel matrix.",
    "local": "下面的代码演示了它在单通道矩阵中的用法。"
  },
  {
    "origin": "And the following code demonstrates its usage for a two-channel matrix.",
    "local": "下面的代码演示了它在双通道矩阵中的用法。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input 2D matrix.",
    "local": "输入2D矩阵。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output vector. Its size and type is defined by dim and dtype parameters.",
    "local": "输出向量。其大小和类型由dim和dtype参数定义。"
  },
  {
    "origin": "dim",
    "local": "昏暗的"
  },
  {
    "origin": "dimension index along which the matrix is reduced. 0 means that the matrix is reduced to a single row. 1 means that the matrix is reduced to a single column.",
    "local": "矩阵的降维指标。0表示矩阵减少到一行。1表示矩阵被缩减为一列。"
  },
  {
    "origin": "rtype",
    "local": "R型"
  },
  {
    "origin": "reduction operation that could be one of",
    "local": "还原操作可能是"
  },
  {
    "origin": "dtype",
    "local": "数据类型"
  },
  {
    "origin": "when negative, the output vector will have the same type as the input matrix, otherwise, its type will be CV_MAKE_TYPE(",
    "local": "当为负时，输出向量将与输入矩阵具有相同的类型，否则，其类型将为CV\\u MAKE\\u类型("
  },
  {
    "origin": ", src.channels()).",
    "local": "，src.channels（））。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "repeat()",
    "local": "重复（）"
  },
  {
    "origin": "[1/2]",
    "local": "[1/2]"
  },
  {
    "origin": "void cv::repeat",
    "local": "void cv：：重复"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ny",
    "local": "纽约"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "nx",
    "local": "nx公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.repeat(",
    "local": "cv.重复("
  },
  {
    "origin": "src, ny, nx[, dst]",
    "local": "心，新，nx[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Fills the output array with repeated copies of the input array.",
    "local": "用输入数组的重复副本填充输出数组。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "duplicates the input array one or more times along each of the two axes:",
    "local": "沿两个轴中的每个轴复制输入数组一次或多次："
  },
  {
    "origin": "\\[\\texttt{dst} _{ij}= \\texttt{src} _{i\\mod src.rows, \\; j\\mod src.cols }\\]",
    "local": "\\[\\textt{dst}{ij}=\\textt{src}{i \\mod src.rows，\\；j \\mod src.cols}\\]"
  },
  {
    "origin": "The second variant of the function is more convenient to use with",
    "local": "该函数的第二个变体更便于使用"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input array to replicate.",
    "local": "要复制的输入数组。"
  },
  {
    "origin": "ny",
    "local": "纽约"
  },
  {
    "origin": "Flag to specify how many times the",
    "local": "用于指定"
  },
  {
    "origin": "is repeated along the vertical axis.",
    "local": "沿垂直轴重复。"
  },
  {
    "origin": "nx",
    "local": "nx公司"
  },
  {
    "origin": "Flag to specify how many times the",
    "local": "用于指定"
  },
  {
    "origin": "is repeated along the horizontal axis.",
    "local": "沿水平轴重复。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array of the same type as",
    "local": "与相同类型的输出数组"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "repeat()",
    "local": "重复（）"
  },
  {
    "origin": "[2/2]",
    "local": "[2/2]"
  },
  {
    "origin": "cv::repeat",
    "local": "cv：：重复"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ny",
    "local": "纽约"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "nx",
    "local": "nx公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.repeat(",
    "local": "cv.重复("
  },
  {
    "origin": "src, ny, nx[, dst]",
    "local": "心，新，nx[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input array to replicate.",
    "local": "要复制的输入数组。"
  },
  {
    "origin": "ny",
    "local": "纽约"
  },
  {
    "origin": "Flag to specify how many times the",
    "local": "用于指定"
  },
  {
    "origin": "is repeated along the vertical axis.",
    "local": "沿垂直轴重复。"
  },
  {
    "origin": "nx",
    "local": "nx公司"
  },
  {
    "origin": "Flag to specify how many times the",
    "local": "用于指定"
  },
  {
    "origin": "is repeated along the horizontal axis.",
    "local": "沿水平轴重复。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "rotate()",
    "local": "旋转（）"
  },
  {
    "origin": "void cv::rotate",
    "local": "void cv:：旋转"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "rotateCode",
    "local": "旋转"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.rotate(",
    "local": "等速旋转("
  },
  {
    "origin": "src, rotateCode[, dst]",
    "local": "src，rotatecode[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Rotates a 2D array in multiples of 90 degrees. The function",
    "local": "以90度的倍数旋转二维阵列。函数"
  },
  {
    "origin": "rotates the array in one of three different ways: Rotate by 90 degrees clockwise (rotateCode = ROTATE_90_CLOCKWISE). Rotate by 180 degrees clockwise (rotateCode = ROTATE_180). Rotate by 270 degrees clockwise (rotateCode = ROTATE_90_COUNTERCLOCKWISE).",
    "local": "以三种不同的方式之一旋转阵列：顺时针旋转90度（rotateCode=顺时针旋转90度）。顺时针旋转180度（rotateCode=旋转180度）。顺时针旋转270度（旋转代码=逆时针旋转90度）。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input array.",
    "local": "输入数组。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array of the same type as src. The size is the same with ROTATE_180, and the rows and cols are switched for ROTATE_90_CLOCKWISE and ROTATE_90_COUNTERCLOCKWISE.",
    "local": "与src类型相同的输出数组。大小与ROTATE\\u 180相同，行和列切换为顺时针旋转\\u 90\\u和逆时针旋转\\u 90\\u。"
  },
  {
    "origin": "rotateCode",
    "local": "旋转"
  },
  {
    "origin": "an enum to specify how to rotate the array; see the enum",
    "local": "指定如何旋转数组的枚举；查看枚举"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "scaleAdd()",
    "local": "scaleAdd（）"
  },
  {
    "origin": "void cv::scaleAdd",
    "local": "void cv:：scaleAdd无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "alpha",
    "local": "阿尔法"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.scaleAdd(",
    "local": "cv.scaleAdd公司("
  },
  {
    "origin": "src1, alpha, src2[, dst]",
    "local": "src1，α，src2[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the sum of a scaled array and another array.",
    "local": "计算缩放数组和另一个数组的和。"
  },
  {
    "origin": "The function scaleAdd is one of the classical primitive linear algebra operations, known as DAXPY or SAXPY in",
    "local": "scaleAdd函数是经典的原始线性代数运算之一，在中称为DAXPY或SAXPY"
  },
  {
    "origin": "BLAS",
    "local": "布拉斯"
  },
  {
    "origin": ". It calculates the sum of a scaled array and another array:",
    "local": ". 它计算一个缩放数组和另一个数组的和："
  },
  {
    "origin": "\\[\\texttt{dst} (I)= \\texttt{scale} \\cdot \\texttt{src1} (I) + \\texttt{src2} (I)\\]",
    "local": "\\\\texttt{dst}（I）=\\texttt{scale}\\cdot\\texttt{src1}（I）+\\texttt{src2}（I）]"
  },
  {
    "origin": "The function can also be emulated with a matrix expression, for example:",
    "local": "也可以用矩阵表达式模拟函数，例如："
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": "first input array.",
    "local": "第一个输入数组。"
  },
  {
    "origin": "alpha",
    "local": "阿尔法"
  },
  {
    "origin": "scale factor for the first array.",
    "local": "第一个数组的比例因子。"
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": "second input array of the same size and type as src1.",
    "local": "与src1大小和类型相同的第二个输入数组。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array of the same size and type as src1.",
    "local": "与src1大小和类型相同的输出数组。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "setIdentity()",
    "local": "setIdentity（）"
  },
  {
    "origin": "void cv::setIdentity",
    "local": "void cv:：setIdentity"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "mtx",
    "local": "mtx公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "s",
    "local": "s"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "mtx",
    "local": "mtx公司"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.setIdentity(",
    "local": "cv.setIdentity公司("
  },
  {
    "origin": "mtx[, s]",
    "local": "mtx[秒]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Initializes a scaled identity matrix.",
    "local": "初始化缩放的单位矩阵。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "initializes a scaled identity matrix:",
    "local": "初始化缩放的单位矩阵："
  },
  {
    "origin": "\\[\\texttt{mtx} (i,j)= \\fork{\\texttt{value}}{ if \\(i=j\\)}{0}{otherwise}\\]",
    "local": "\\[\\texttt{mtx}（i，j）=\\fork{\\texttt{value}}{if\\（i=j\\）}{0}{否则}\\]"
  },
  {
    "origin": "The function can also be emulated using the matrix initializers and the matrix expressions:",
    "local": "也可以使用矩阵初始值设定项和矩阵表达式来模拟该函数："
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "mtx",
    "local": "mtx公司"
  },
  {
    "origin": "matrix to initialize (not necessarily square).",
    "local": "要初始化的矩阵（不一定是正方形）。"
  },
  {
    "origin": "s",
    "local": "s"
  },
  {
    "origin": "value to assign to diagonal elements.",
    "local": "指定给对角线元素的值。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "setRNGSeed()",
    "local": "设置种子（）"
  },
  {
    "origin": "void cv::setRNGSeed",
    "local": "void cv：：setrngseed"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "seed",
    "local": "种子"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.setRNGSeed(",
    "local": "cv.setRNGSeed公司("
  },
  {
    "origin": "seed",
    "local": "种子"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Sets state of default random number generator.",
    "local": "设置默认随机数生成器的状态。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "sets state of default random number generator to custom value.",
    "local": "将默认随机数生成器的状态设置为自定义值。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "seed",
    "local": "种子"
  },
  {
    "origin": "new state for default random number generator",
    "local": "默认随机数生成器的新状态"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "solve()",
    "local": "求解（）"
  },
  {
    "origin": "bool cv::solve",
    "local": "布尔cv：：求解"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval, dst",
    "local": "雷特，夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.solve(",
    "local": "等速求解("
  },
  {
    "origin": "src1, src2[, dst[, flags]]",
    "local": "src1，src2[，dst[，标志]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Solves one or more linear systems or least-squares problems.",
    "local": "解决一个或多个线性系统或最小二乘问题。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "solves a linear system or least-squares problem (the latter is possible with",
    "local": "解决线性系统或最小二乘问题（后者可能与"
  },
  {
    "origin": "or QR methods, or by specifying the flag",
    "local": "或QR方法，或通过指定标志"
  },
  {
    "origin": "):",
    "local": "):"
  },
  {
    "origin": "\\[\\texttt{dst} = \\arg \\min _X \\| \\texttt{src1} \\cdot \\texttt{X} - \\texttt{src2} \\|\\]",
    "local": "\\\\texttt{dst}=\\arg\\min\\ux\\1244；\\texttt{src1}\\cdot\\texttt{X}\\texttt{src2}\\1244；]"
  },
  {
    "origin": "If",
    "local": "如果"
  },
  {
    "origin": "or",
    "local": "或"
  },
  {
    "origin": "method is used, the function returns 1 if src1 (or \\(\\texttt{src1}^T\\texttt{src1}\\) ) is non-singular. Otherwise, it returns 0. In the latter case, dst is not valid. Other methods find a pseudo-solution in case of a singular left-hand side part.",
    "local": "方法时，如果src1（或\\（\\texttt{src1}^T\\texttt{src1}\\）是非单数的，则函数返回1。否则，它返回0。在后一种情况下，dst无效。其他方法在左侧零件奇异的情况下找到伪解。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "If you want to find a unity-norm solution of an under-defined singular system \\(\\texttt{src1}\\cdot\\texttt{dst}=0\\) , the function solve will not do the work. Use",
    "local": "如果你想找到一个定义不足的奇异系统的统一范数解\\（\\texttt{src1}\\cdot\\texttt{dst}=0\\），函数solve将不起作用。使用"
  },
  {
    "origin": "instead.",
    "local": "相反。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": "input matrix on the left-hand side of the system.",
    "local": "系统左侧的输入矩阵。"
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": "input matrix on the right-hand side of the system.",
    "local": "系统右侧的输入矩阵。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output solution.",
    "local": "输出解决方案。"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": "solution (matrix inversion) method (",
    "local": "解（矩阵求逆）法("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "solveCubic()",
    "local": "解算立方（）"
  },
  {
    "origin": "int cv::solveCubic",
    "local": "int cv：：解算立方"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "coeffs",
    "local": "非零系数"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "roots",
    "local": "根"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval, roots",
    "local": "废物，树根"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.solveCubic(",
    "local": "cv.立方("
  },
  {
    "origin": "coeffs[, roots]",
    "local": "系数[根]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Finds the real roots of a cubic equation.",
    "local": "求三次方程的实根。"
  },
  {
    "origin": "The function solveCubic finds the real roots of a cubic equation:",
    "local": "函数solveCubic找到一个三次方程的实根："
  },
  {
    "origin": "if coeffs is a 4-element vector:",
    "local": "如果系数是4元素向量："
  },
  {
    "origin": "\\[\\texttt{coeffs} [0] x^3 + \\texttt{coeffs} [1] x^2 + \\texttt{coeffs} [2] x + \\texttt{coeffs} [3] = 0\\]",
    "local": "\\\\[\\texttt{coeffs}[0]x^3+\\texttt{coeffs}[1]x^2+\\texttt{coeffs}[2]x+\\texttt{coeffs}[3]=0\\]"
  },
  {
    "origin": "if coeffs is a 3-element vector:",
    "local": "如果系数是三元向量："
  },
  {
    "origin": "\\[x^3 + \\texttt{coeffs} [0] x^2 + \\texttt{coeffs} [1] x + \\texttt{coeffs} [2] = 0\\]",
    "local": "\\\\[x^3+\\texttt{coeffs}[0]x^2+\\texttt{coeffs}[1]x+\\texttt{coeffs}[2]=0\\]"
  },
  {
    "origin": "The roots are stored in the roots array.",
    "local": "根存储在根数组中。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "coeffs",
    "local": "非零系数"
  },
  {
    "origin": "equation coefficients, an array of 3 or 4 elements.",
    "local": "方程系数，由3或4个元素组成的数组。"
  },
  {
    "origin": "roots",
    "local": "根"
  },
  {
    "origin": "output array of real roots that has 1 or 3 elements.",
    "local": "具有1或3个元素的实根的输出数组。"
  },
  {
    "origin": "Returns",
    "local": "退换商品"
  },
  {
    "origin": "number of real roots. It can be 0, 1 or 2.",
    "local": "实根数。它可以是0、1或2。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "solvePoly()",
    "local": "溶液聚合（）"
  },
  {
    "origin": "double cv::solvePoly",
    "local": "双cv:：solvePoly"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "coeffs",
    "local": "非零系数"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "roots",
    "local": "根"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "maxIters",
    "local": "Iters公司"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval, roots",
    "local": "废物，树根"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.solvePoly(",
    "local": "cv.solvePoly公司("
  },
  {
    "origin": "coeffs[, roots[, maxIters]]",
    "local": "系数[，根[，最大值]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Finds the real or complex roots of a polynomial equation.",
    "local": "求多项式方程的实根或复数根。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "finds real and complex roots of a polynomial equation:",
    "local": "找到多项式方程的实根和复根："
  },
  {
    "origin": "\\[\\texttt{coeffs} [n] x^{n} + \\texttt{coeffs} [n-1] x^{n-1} + ... + \\texttt{coeffs} [1] x + \\texttt{coeffs} [0] = 0\\]",
    "local": "\\\\[\\texttt{coeffs}[n]x^{n}+\\texttt{coeffs}[n-1]x^{n-1}+…+\\texttt{coeffs}[1]x+\\texttt{coeffs}[0]=0\\]"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "coeffs",
    "local": "非零系数"
  },
  {
    "origin": "array of polynomial coefficients.",
    "local": "多项式系数数组。"
  },
  {
    "origin": "roots",
    "local": "根"
  },
  {
    "origin": "output (complex) array of roots.",
    "local": "输出根的（复杂）数组。"
  },
  {
    "origin": "maxIters",
    "local": "Iters公司"
  },
  {
    "origin": "maximum number of iterations the algorithm does.",
    "local": "算法执行的最大迭代次数。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "sort()",
    "local": "排序（）"
  },
  {
    "origin": "void cv::sort",
    "local": "void cv:：排序"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.sort(",
    "local": "简历排序("
  },
  {
    "origin": "src, flags[, dst]",
    "local": "src，标志[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Sorts each row or each column of a matrix.",
    "local": "对矩阵的每一行或每一列进行排序。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "sorts each matrix row or each matrix column in ascending or descending order. So you should pass two operation flags to get desired behaviour. If you want to sort matrix rows or columns lexicographically, you can use STL std::sort generic function with the proper comparison predicate.",
    "local": "按升序或降序排列每个矩阵行或矩阵列。因此，应该传递两个操作标志以获得所需的行为。如果要按字典顺序对矩阵行或列进行排序，可以使用STL std：：sort generic函数和适当的比较谓词。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input single-channel array.",
    "local": "输入单通道阵列。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array of the same size and type as src.",
    "local": "与src大小和类型相同的输出数组。"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": "operation flags, a combination of",
    "local": "操作标志，是"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "sortIdx()",
    "local": "sortIdx（）"
  },
  {
    "origin": "void cv::sortIdx",
    "local": "void cv：：sortIdx"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.sortIdx(",
    "local": "sortIdx简历("
  },
  {
    "origin": "src, flags[, dst]",
    "local": "src，标志[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Sorts each row or each column of a matrix.",
    "local": "对矩阵的每一行或每一列进行排序。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "sorts each matrix row or each matrix column in the ascending or descending order. So you should pass two operation flags to get desired behaviour. Instead of reordering the elements themselves, it stores the indices of sorted elements in the output array. For example:",
    "local": "按升序或降序排列每个矩阵行或矩阵列。因此，应该传递两个操作标志以获得所需的行为。它将排序后的元素的索引存储在输出数组中，而不是对元素本身进行重新排序。例如："
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input single-channel array.",
    "local": "输入单通道阵列。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output integer array of the same size as src.",
    "local": "输出与src大小相同的整数数组。"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": "operation flags that could be a combination of",
    "local": "操作标志可以是"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "split()",
    "local": "拆分（）"
  },
  {
    "origin": "[1/2]",
    "local": "[1/2]"
  },
  {
    "origin": "void cv::split",
    "local": "void cv:：拆分"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "*",
    "local": "*"
  },
  {
    "origin": "mvbegin",
    "local": "多功能启动"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "mv",
    "local": "毫伏"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.split(",
    "local": "等速分割("
  },
  {
    "origin": "m[, mv]",
    "local": "米[，毫伏]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Divides a multi-channel array into several single-channel arrays.",
    "local": "将多通道阵列划分为多个单通道阵列。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "splits a multi-channel array into separate single-channel arrays:",
    "local": "将多通道阵列拆分为单独的单通道阵列："
  },
  {
    "origin": "\\[\\texttt{mv} [c](I) = \\texttt{src} (I)_c\\]",
    "local": "\\\\texttt{mv}[c]（I）=\\texttt{src}（I）}"
  },
  {
    "origin": "If you need to extract a single channel or do some other sophisticated channel permutation, use mixChannels .",
    "local": "如果需要提取单个通道或进行其他复杂的通道排列，请使用mixChannels。"
  },
  {
    "origin": "The following example demonstrates how to split a 3-channel matrix into 3 single channel matrices.",
    "local": "下面的示例演示如何将3通道矩阵拆分为3个单通道矩阵。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input multi-channel array.",
    "local": "输入多通道阵列。"
  },
  {
    "origin": "mvbegin",
    "local": "多功能启动"
  },
  {
    "origin": "output array; the number of arrays must match src.channels(); the arrays themselves are reallocated, if needed.",
    "local": "输出阵列；数组的数目必须与src.channels（）匹配；如果需要，可以重新分配阵列本身。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "split()",
    "local": "拆分（）"
  },
  {
    "origin": "[2/2]",
    "local": "[2/2]"
  },
  {
    "origin": "void cv::split",
    "local": "void cv:：拆分"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mv",
    "local": "毫伏"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "mv",
    "local": "毫伏"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.split(",
    "local": "等速分割("
  },
  {
    "origin": "m[, mv]",
    "local": "米[，毫伏]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": "input multi-channel array.",
    "local": "输入多通道阵列。"
  },
  {
    "origin": "mv",
    "local": "毫伏"
  },
  {
    "origin": "output vector of arrays; the arrays themselves are reallocated, if needed.",
    "local": "阵列输出矢量；如果需要，可以重新分配阵列本身。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "sqrt()",
    "local": "sqrt（）"
  },
  {
    "origin": "void cv::sqrt",
    "local": "无效cv：：sqrt"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.sqrt(",
    "local": "cv.sqrt公司("
  },
  {
    "origin": "src[, dst]",
    "local": "src[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates a square root of array elements.",
    "local": "计算数组元素的平方根。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "calculates a square root of each input array element. In case of multi-channel arrays, each channel is processed independently. The accuracy is approximately the same as of the built-in std::sqrt .",
    "local": "计算每个输入数组元素的平方根。对于多通道阵列，每个通道都是独立处理的。精度与内置的std：：sqrt大致相同。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input floating-point array.",
    "local": "输入浮点数组。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array of the same size and type as src.",
    "local": "与src大小和类型相同的输出数组。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "subtract()",
    "local": "减法（）"
  },
  {
    "origin": "void cv::subtract",
    "local": "void cv：：减去"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "dtype",
    "local": "数据类型"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.subtract(",
    "local": "cv.减去("
  },
  {
    "origin": "src1, src2[, dst[, mask[, dtype]]]",
    "local": "src1，src2[，dst[，mask[，dtype]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the per-element difference between two arrays or array and a scalar.",
    "local": "计算两个数组或数组与标量之间的每元素差。"
  },
  {
    "origin": "The function subtract calculates:",
    "local": "函数subtract计算："
  },
  {
    "origin": "Difference between two arrays, when both input arrays have the same size and the same number of channels:",
    "local": "当两个输入数组的大小和通道数相同时，两个数组之间的差异："
  },
  {
    "origin": "\\[\\texttt{dst}(I) = \\texttt{saturate} ( \\texttt{src1}(I) - \\texttt{src2}(I)) \\quad \\texttt{if mask}(I) \\ne0\\]",
    "local": "\\[\\texttt{dst}（I）=\\texttt{saturate}（\\texttt{src1}（I）-\\texttt{src2}（I））\\quad\\texttt{if mask}（I）\\ne0\\]"
  },
  {
    "origin": "Difference between an array and a scalar, when src2 is constructed from Scalar or has the same number of elements as",
    "local": "数组和标量之间的区别，当src2是由标量构造的或元素的数目与src2相同时"
  },
  {
    "origin": ":",
    "local": ":"
  },
  {
    "origin": "\\[\\texttt{dst}(I) = \\texttt{saturate} ( \\texttt{src1}(I) - \\texttt{src2} ) \\quad \\texttt{if mask}(I) \\ne0\\]",
    "local": "\\texttt{dst}（I）=\\texttt{saturate}（\\texttt{src1}（I）-\\texttt{src2}\\quad\\texttt{if mask}（I）\\ne0]"
  },
  {
    "origin": "Difference between a scalar and an array, when src1 is constructed from Scalar or has the same number of elements as",
    "local": "当src1是由标量构造的或元素数目与src1相同时，标量和数组之间的区别"
  },
  {
    "origin": ":",
    "local": ":"
  },
  {
    "origin": "\\[\\texttt{dst}(I) = \\texttt{saturate} ( \\texttt{src1} - \\texttt{src2}(I) ) \\quad \\texttt{if mask}(I) \\ne0\\]",
    "local": "\\texttt{dst}（I）=\\texttt{saturate}（\\texttt{src1}\\texttt{src2}（I）\\quad\\texttt{if mask}（I）\\ne0]"
  },
  {
    "origin": "The reverse difference between a scalar and an array in the case of",
    "local": "标量和数组在"
  },
  {
    "origin": ":",
    "local": ":"
  },
  {
    "origin": "\\[\\texttt{dst}(I) = \\texttt{saturate} ( \\texttt{src2} - \\texttt{src1}(I) ) \\quad \\texttt{if mask}(I) \\ne0\\]",
    "local": "\\texttt{dst}（I）=\\texttt{saturate}（\\texttt{src2}\\texttt{src1}（I）\\quad\\texttt{if mask}（I）\\ne0]"
  },
  {
    "origin": "where I is a multi-dimensional index of array elements. In case of multi-channel arrays, each channel is processed independently.",
    "local": "其中I是数组元素的多维索引。对于多通道阵列，每个通道都是独立处理的。"
  },
  {
    "origin": "The first function in the list above can be replaced with matrix expressions:",
    "local": "上面列表中的第一个函数可以替换为矩阵表达式："
  },
  {
    "origin": "The input arrays and the output array can all have the same or different depths. For example, you can subtract to 8-bit unsigned arrays and store the difference in a 16-bit signed array. Depth of the output array is determined by dtype parameter. In the second and third cases above, as well as in the first case, when",
    "local": "输入数组和输出数组可以具有相同或不同的深度。例如，可以减去8位无符号数组，然后将差值存储在16位有符号数组中。输出数组的深度由dtype参数决定。在上述第二和第三种情况下，以及在第一种情况下"
  },
  {
    "origin": "==",
    "local": "=="
  },
  {
    "origin": ", dtype can be set to the default -1. In this case the output array will have the same depth as the input array, be it src1, src2 or both.",
    "local": "，可以将dtype设置为默认值-1。在这种情况下，输出数组的深度将与输入数组的深度相同，可以是src1、src2或两者。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "Saturation is not applied when the output array has the depth CV_32S. You may even get result of an incorrect sign in the case of overflow.",
    "local": "当输出阵列具有深度CVň32S时，不应用饱和。在溢出的情况下，您甚至可能得到错误符号的结果。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": "first input array or a scalar.",
    "local": "第一个输入数组或标量。"
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": "second input array or a scalar.",
    "local": "第二个输入数组或标量。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array of the same size and the same number of channels as the input array.",
    "local": "与输入数组大小和通道数相同的输出数组。"
  },
  {
    "origin": "mask",
    "local": "面具"
  },
  {
    "origin": "optional operation mask; this is an 8-bit single channel array that specifies elements of the output array to be changed.",
    "local": "可选操作面罩；这是一个8位单通道数组，指定要更改的输出数组的元素。"
  },
  {
    "origin": "dtype",
    "local": "数据类型"
  },
  {
    "origin": "optional depth of the output array",
    "local": "输出数组的可选深度"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "sum()",
    "local": "总和（）"
  },
  {
    "origin": "cv::sum",
    "local": "cv：：总和"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.sumElems(",
    "local": "苏梅勒斯简历("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the sum of array elements.",
    "local": "计算数组元素之和。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "calculates and returns the sum of array elements, independently for each channel.",
    "local": "独立地为每个通道计算并返回数组元素的总和。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input array that must have from 1 to 4 channels.",
    "local": "必须有1到4个通道的输入数组。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "SVBackSubst()",
    "local": "SVBackSubst（）"
  },
  {
    "origin": "void cv::SVBackSubst",
    "local": "void cv:：SVBackSubst"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "w",
    "local": "w"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "u",
    "local": "u"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "vt",
    "local": "及物动词"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "rhs",
    "local": "右侧"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.SVBackSubst(",
    "local": "cv.SVBackSubst公司("
  },
  {
    "origin": "w, u, vt, rhs[, dst]",
    "local": "w、 u、vt、rhs[、dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "wrap",
    "local": "包"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "SVDecomp()",
    "local": "SVDecomp（）"
  },
  {
    "origin": "void cv::SVDecomp",
    "local": "void cv：：SVDecomp"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "w",
    "local": "w"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "u",
    "local": "u"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "vt",
    "local": "及物动词"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "w, u, vt",
    "local": "w、 u、vt"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.SVDecomp(",
    "local": "简历("
  },
  {
    "origin": "src[, w[, u[, vt[, flags]]]]",
    "local": "src[，w[，u[，vt[，标志]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "wrap",
    "local": "包"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "theRNG()",
    "local": "Therng（）"
  },
  {
    "origin": "&amp; cv::theRNG",
    "local": "&amp；简历：theRNG"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Returns the default random number generator.",
    "local": "返回默认的随机数生成器。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "returns the default random number generator. For each thread, there is a separate random number generator, so you can use the function safely in multi-thread environments. If you just need to get a single random number using this generator or initialize an array, you can use randu or randn instead. But if you are going to generate many random numbers inside a loop, it is much faster to use this function to retrieve the generator and then use RNG::operator _Tp() .",
    "local": "返回默认的随机数生成器。对于每个线程，都有一个单独的随机数生成器，因此您可以在多线程环境中安全地使用该函数。如果您只需要使用此生成器获取单个随机数或初始化数组，则可以改用randu或randn。但是，如果要在循环中生成许多随机数，则使用此函数检索生成器，然后使用RNG:：operator\\u Tp（）要快得多。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "trace()",
    "local": "跟踪（）"
  },
  {
    "origin": "cv::trace",
    "local": "cv：：跟踪"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "mtx",
    "local": "mtx公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.trace(",
    "local": "cv.轨迹("
  },
  {
    "origin": "mtx",
    "local": "mtx公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Returns the trace of a matrix.",
    "local": "返回矩阵的跟踪。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "returns the sum of the diagonal elements of the matrix mtx .",
    "local": "返回矩阵mtx的对角线元素之和。"
  },
  {
    "origin": "\\[\\mathrm{tr} ( \\texttt{mtx} ) = \\sum _i \\texttt{mtx} (i,i)\\]",
    "local": "\\[\\mathrm{tr}（\\texttt{mtx}）=\\sum\\u i\\texttt{mtx}（i，i）\\]"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "mtx",
    "local": "mtx公司"
  },
  {
    "origin": "input matrix.",
    "local": "输入矩阵。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "transform()",
    "local": "转换（）"
  },
  {
    "origin": "void cv::transform",
    "local": "void cv：：转换"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.transform(",
    "local": "cv变换("
  },
  {
    "origin": "src, m[, dst]",
    "local": "src，m[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Performs the matrix transformation of every array element.",
    "local": "对每个数组元素执行矩阵变换。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "performs the matrix transformation of every element of the array src and stores the results in dst :",
    "local": "对数组src的每个元素执行矩阵变换，并将结果存储在dst中："
  },
  {
    "origin": "\\[\\texttt{dst} (I) = \\texttt{m} \\cdot \\texttt{src} (I)\\]",
    "local": "\\\\texttt{dst}（I）=\\texttt{m}\\cdot\\texttt{src}（I）]"
  },
  {
    "origin": "(when m.cols=src.channels() ), or",
    "local": "（当m.cols=src.channels（）时），或"
  },
  {
    "origin": "\\[\\texttt{dst} (I) = \\texttt{m} \\cdot [ \\texttt{src} (I); 1]\\]",
    "local": "\\\\texttt{dst}（I）=\\texttt{m}\\cdot[\\texttt{src}（I）；1]\\]"
  },
  {
    "origin": "(when m.cols=src.channels()+1 )",
    "local": "（当m.cols=src.channels（）+1时）"
  },
  {
    "origin": "Every element of the N -channel array src is interpreted as N -element vector that is transformed using the M x N or M x (N+1) matrix m to M-element vector - the corresponding element of the output array dst .",
    "local": "N通道阵列src的每个元素被解释为N元素向量，该N元素向量使用M x N或M x（N+1）矩阵M转换为M元素向量-输出阵列dst的对应元素。"
  },
  {
    "origin": "The function may be used for geometrical transformation of N -dimensional points, arbitrary linear color space transformation (such as various kinds of RGB to YUV transforms), shuffling the image channels, and so forth.",
    "local": "该函数可用于N维点的几何变换、任意线性颜色空间变换（如各种RGB到YUV变换）、洗牌图像通道等。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array of the same size and depth as src; it has as many channels as m.rows.",
    "local": "输出与src大小和深度相同的数组；它有与m行一样多的频道。"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": "transformation 2x2 or 2x3 floating-point matrix.",
    "local": "转换2x2或2x3浮点矩阵。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "transpose()",
    "local": "转置（）"
  },
  {
    "origin": "void cv::transpose",
    "local": "void cv：：转置"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.transpose(",
    "local": "变异转置("
  },
  {
    "origin": "src[, dst]",
    "local": "src[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Transposes a matrix.",
    "local": "变换矩阵。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "transposes the matrix src :",
    "local": "转置矩阵src："
  },
  {
    "origin": "\\[\\texttt{dst} (i,j) = \\texttt{src} (j,i)\\]",
    "local": "\\\\[\\texttt{dst}（i，j）=\\texttt{src}（j，i）\\]"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "No complex conjugation is done in case of a complex matrix. It should be done separately if needed.",
    "local": "在复矩阵的情况下不进行复共轭。如果需要，应该分开做。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input array.",
    "local": "输入数组。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array of the same type as src.",
    "local": "与src类型相同的输出数组。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "vconcat()",
    "local": "vconcat（）"
  },
  {
    "origin": "[1/3]",
    "local": "[1/3]"
  },
  {
    "origin": "void cv::vconcat",
    "local": "void cv：：vconcat"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "*",
    "local": "*"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "size_t",
    "local": "大小\\u t"
  },
  {
    "origin": "nsrc",
    "local": "国家战略参考委员会"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.vconcat(",
    "local": "cv.vconcat公司("
  },
  {
    "origin": "src[, dst]",
    "local": "src[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Applies vertical concatenation to given matrices.",
    "local": "对给定的矩阵应用垂直连接。"
  },
  {
    "origin": "The function vertically concatenates two or more",
    "local": "函数垂直连接两个或多个"
  },
  {
    "origin": "matrices (with the same number of cols).",
    "local": "矩阵（列数相同）。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input array or vector of matrices. all of the matrices must have the same number of cols and the same depth.",
    "local": "输入矩阵的数组或向量。所有矩阵的列数和深度必须相同。"
  },
  {
    "origin": "nsrc",
    "local": "国家战略参考委员会"
  },
  {
    "origin": "number of matrices in src.",
    "local": "src中的矩阵数。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array. It has the same number of cols and depth as the src, and the sum of rows of the src.",
    "local": "输出数组。它具有与src相同的列数和深度，以及src的行数之和。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "vconcat()",
    "local": "vconcat（）"
  },
  {
    "origin": "[2/3]",
    "local": "[2/3]"
  },
  {
    "origin": "void cv::vconcat",
    "local": "void cv：：vconcat"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.vconcat(",
    "local": "cv.vconcat公司("
  },
  {
    "origin": "src[, dst]",
    "local": "src[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src1",
    "local": "src1型"
  },
  {
    "origin": "first input array to be considered for vertical concatenation.",
    "local": "第一个输入数组要考虑垂直连接。"
  },
  {
    "origin": "src2",
    "local": "src2型"
  },
  {
    "origin": "second input array to be considered for vertical concatenation.",
    "local": "第二个输入数组要考虑垂直连接。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array. It has the same number of cols and depth as the src1 and src2, and the sum of rows of the src1 and src2.",
    "local": "输出数组。它具有与src1和src2相同的列数和深度，以及src1和src2的行数之和。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "vconcat()",
    "local": "vconcat（）"
  },
  {
    "origin": "[3/3]",
    "local": "[3/3]"
  },
  {
    "origin": "void cv::vconcat",
    "local": "void cv：：vconcat"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.vconcat(",
    "local": "cv.vconcat公司("
  },
  {
    "origin": "src[, dst]",
    "local": "src[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input array or vector of matrices. all of the matrices must have the same number of cols and the same depth",
    "local": "输入矩阵的数组或向量。所有矩阵的列数和深度必须相同"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output array. It has the same number of cols and depth as the src, and the sum of rows of the src. same depth.",
    "local": "输出数组。它具有与src相同的列数和深度，以及src的行数之和。同样的深度。"
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:40 for OpenCV by",
    "local": "于2021年4月2日星期五11:36:40为OpenCV生成"
  }
]