[
  {
    "origin": "OpenCV: cv::detail Namespace Reference",
    "local": "OpenCV:cv:：detail命名空间引用"
  },
  {
    "origin": "Open Source Computer Vision",
    "local": "开源计算机视觉"
  },
  {
    "origin": "Namespaces",
    "local": "名称空间"
  },
  {
    "origin": "Classes",
    "local": "班级"
  },
  {
    "origin": "Typedefs",
    "local": "类型定义"
  },
  {
    "origin": "Enumerations",
    "local": "枚举"
  },
  {
    "origin": "Functions",
    "local": "功能"
  },
  {
    "origin": "cv::detail Namespace Reference",
    "local": "cv:：详细名称空间引用"
  },
  {
    "origin": "Namespaces",
    "local": "名称空间"
  },
  {
    "origin": "Classes",
    "local": "班级"
  },
  {
    "origin": "Affine transformation based estimator.",
    "local": "基于仿射变换的估计器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Features matcher similar to",
    "local": "特征匹配器类似于"
  },
  {
    "origin": "which finds two best matches for each feature and leaves the best one only if the ratio between descriptor distances is greater than the threshold match_conf.",
    "local": "它为每个特征找到两个最佳匹配，并且仅当描述符距离之间的比率大于阈值匹配时才保留最佳匹配。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Affine warper that uses rotations and translations.",
    "local": "使用旋转和平移的仿射整经机。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Features matcher which finds two best matches for each feature and leaves the best one only if the ratio between descriptor distances is greater than the threshold match_conf.",
    "local": "特征匹配器，为每个特征找到两个最佳匹配，并且只有当描述符距离之间的比率大于阈值匹配时才保留最佳匹配。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Base class for all blenders.",
    "local": "所有搅拌机的基类。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Exposure compensator which tries to remove exposure related artifacts by adjusting image block on each channel.",
    "local": "曝光补偿器，它试图通过调整每个通道上的图像块来消除与曝光相关的伪影。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Exposure compensator which tries to remove exposure related artifacts by adjusting image blocks.",
    "local": "曝光补偿器，它试图通过调整图像块来消除与曝光相关的伪影。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Exposure compensator which tries to remove exposure related artifacts by adjusting image block intensities, see",
    "local": "曝光补偿器，它试图通过调整图像块强度来消除与曝光相关的伪影，请参见"
  },
  {
    "origin": "for details.",
    "local": "详情。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Bundle adjuster that expects affine transformation represented in homogeneous coordinates in R for each camera param. Implements camera parameters refinement algorithm which minimizes sum of the reprojection error squares.",
    "local": "对于每个摄像机参数，期望仿射变换在R的齐次坐标中表示的束调整器。实现了最小化重投影误差平方和的摄像机参数优化算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Bundle adjuster that expects affine transformation with 4 DOF represented in homogeneous coordinates in R for each camera param. Implements camera parameters refinement algorithm which minimizes sum of the reprojection error squares.",
    "local": "束调整器，期望仿射变换与4自由度表示在齐次坐标R为每个相机参数。实现了最小化重投影误差平方和的摄像机参数优化算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Base class for all camera parameters refinement methods.",
    "local": "所有相机参数求精方法的基类。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Implementation of the camera parameters refinement algorithm which minimizes sum of the distances between the rays passing through the camera center and a feature. :",
    "local": "摄像机参数优化算法的实现，该算法使通过摄像机中心的光线与特征之间的距离之和最小化："
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Implementation of the camera parameters refinement algorithm which minimizes sum of the reprojection error squares.",
    "local": "最小化重投影误差平方和的摄像机参数优化算法的实现。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Describes camera parameters.",
    "local": "描述相机参数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Exposure compensator which tries to remove exposure related artifacts by adjusting image intensities on each channel independently.",
    "local": "曝光补偿器，它试图通过独立调整每个通道上的图像强度来消除与曝光相关的伪影。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Warper that maps an image onto the x*x + z*z = 1 cylinder.",
    "local": "将图像映射到x*x+z*z=1圆柱体上的扭曲器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Rotation estimator base class.",
    "local": "旋转估计器基类。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Base class for all exposure compensators.",
    "local": "所有曝光补偿器的基类。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Simple blender which mixes images at its borders.",
    "local": "简单的混合机，在它的边界混合图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Feature matchers base class.",
    "local": "特征匹配器基类。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "flatten_g&lt; GArray&lt; T &gt; &gt;",
    "local": "展平g&lt；加里&lt；T&gt；&gt；燃气轮机；"
  },
  {
    "origin": "Exposure compensator which tries to remove exposure related artifacts by adjusting image intensities, see",
    "local": "曝光补偿器，它试图通过调整图像强度来消除与曝光相关的伪影，请参阅"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": "for details.",
    "local": "详情。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "GObtainCtor&lt; GArray&lt; T &gt; &gt;",
    "local": "GObtainCtor&lt；加里&lt；T&gt&燃气轮机；"
  },
  {
    "origin": "GObtainCtor&lt; GOpaque&lt; T &gt; &gt;",
    "local": "GObtainCtor&lt；高派克&lt；T&gt&燃气轮机；"
  },
  {
    "origin": "GOpaqueTraits&lt; int &gt;",
    "local": "gopacetraits&lt；国际&gt；"
  },
  {
    "origin": "Minimum graph cut-based seam estimator. See details in",
    "local": "基于最小图割的接缝估计。请参阅中的详细信息"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Base class for all minimum graph-cut-based seam estimators.",
    "local": "所有基于最小图割的接缝估计的基类。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Homography based rotation estimator.",
    "local": "基于单应的旋转估计器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Structure containing image keypoints and descriptors.",
    "local": "包含图像关键点和描述符的结构。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "in_variant&lt; T, util::variant&lt; Types... &gt; &gt;",
    "local": "in\\变型&lt；T、 有用：：变量&lt；类型&&gt；gt；燃气轮机；"
  },
  {
    "origin": "last_type&lt; T &gt;",
    "local": "最后一种类型&lt；T&gt；"
  },
  {
    "origin": "last_type&lt; T, Ts... &gt;",
    "local": "最后一种类型&lt；T、 T。。。燃气轮机；"
  },
  {
    "origin": "Structure containing information about matches between two images.",
    "local": "包含两个图像之间匹配信息的结构。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "which uses multi-band blending algorithm (see",
    "local": "它使用多波段混合算法（参见"
  },
  {
    "origin": ").",
    "local": ")."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Stub bundle adjuster that does nothing.",
    "local": "什么也不做的存根束调整器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Stub exposure compensator which does nothing.",
    "local": "什么都不做的存根曝光补偿器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Stub seam estimator which does nothing.",
    "local": "不执行任何操作的存根接缝估计器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Base class for all pairwise seam estimators.",
    "local": "所有成对接缝估计器的基类。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Warper that maps an image onto the z = 1 plane.",
    "local": "将图像映射到z=1平面的扭曲器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Base class for warping logic implementation.",
    "local": "用于扭曲逻辑实现的基类。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Rotation-only model image warper interface.",
    "local": "仅旋转模型图像扭曲器接口。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Base class for rotation-based warper using a detail::ProjectorBase_ derived class.",
    "local": "使用detail:：ProjectorBase\\派生类的基于旋转的扭曲器的基类。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Base class for a seam estimator.",
    "local": "seam估计器的基类。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Warper that maps an image onto the unit sphere located at the origin.",
    "local": "将图像映射到位于原点的单位球体上的扭曲器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "valid_infer2_types&lt; std::tuple&lt; cv::GMat &gt;, std::tuple&lt; T &gt; &gt;",
    "local": "有效的\\u infer2 \\u类型&lt；标准：：元组&lt；简历：：GMat&gt；，标准：：元组&lt；T&gt&燃气轮机；"
  },
  {
    "origin": "valid_infer2_types&lt; std::tuple&lt; cv::GMat, Ns... &gt;, std::tuple&lt; T, Ts... &gt; &gt;",
    "local": "有效的\\u infer2 \\u类型&lt；标准：：元组&lt；简历：GMat，Ns&gt；，标准：：元组&lt；T、 它&&gt；gt；燃气轮机；"
  },
  {
    "origin": "Voronoi diagram-based seam estimator.",
    "local": "基于Voronoi图的接缝估计。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "WrapValue&lt; T, typename std::enable_if&lt; has_custom_wrap&lt; T &gt;::value &gt;::type &gt;",
    "local": "包装价值&lt；T、 typename std：：启用\\u if&lt；有自定义包装&lt；T&gt；：：值&gt；：：类型&gt；"
  },
  {
    "origin": "wref_spec&lt; std::vector&lt; T &gt; &gt;",
    "local": "扳手规格&lt；标准：：向量&lt；T&gt；&gt&燃气轮机；"
  },
  {
    "origin": "Typedefs",
    "local": "类型定义"
  },
  {
    "origin": "template&lt;typename... Ts&gt;",
    "local": "模板&lt；类型名。。。Ts&gt？"
  },
  {
    "origin": "= all_satisfy&lt;",
    "local": "=全部满足&lt；"
  },
  {
    "origin": ", Ts... &gt;",
    "local": "，Ts&燃气轮机；"
  },
  {
    "origin": "template&lt;typename... Ts&gt;",
    "local": "模板&lt；类型名。。。Ts&gt？"
  },
  {
    "origin": "= all_satisfy&lt;",
    "local": "=全部满足&lt；"
  },
  {
    "origin": ", typename all_but_last&lt; Ts... &gt;::type &gt;",
    "local": "，typename all\\u but \\u last&lt；它&gt；：：类型&gt；"
  },
  {
    "origin": "= std::function&lt; void(",
    "local": "=std：：函数&lt；无效("
  },
  {
    "origin": "&amp;)&gt;",
    "local": "&amp；）&燃气轮机；"
  },
  {
    "origin": "= std::function&lt; void(",
    "local": "=std：：函数&lt；无效("
  },
  {
    "origin": "&amp;)&gt;",
    "local": "&amp；）&燃气轮机；"
  },
  {
    "origin": "template&lt;class T &gt;",
    "local": "模板&lt；等级T&gt；"
  },
  {
    "origin": "= typename",
    "local": "=类型名称"
  },
  {
    "origin": "&lt; T &gt;::type",
    "local": "&lt；T&gt；：类型"
  },
  {
    "origin": "= std::tuple&lt; int, double, float,",
    "local": "=标准：：元组&lt；int，double，float，"
  },
  {
    "origin": ", bool, std::string,",
    "local": "，bool，std：：字符串，"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "= std::tuple&lt; int, double, float,",
    "local": "=标准：：元组&lt；int，double，float，"
  },
  {
    "origin": ", bool, std::string,",
    "local": "，bool，std：：字符串，"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "= std::is_same&lt;",
    "local": "=标准：：是否相同&lt；"
  },
  {
    "origin": ", typename std::decay&lt; T &gt;::type &gt;",
    "local": "，类型名std:：decay&lt；T&gt；：类型&gt；"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "= std::is_same&lt;",
    "local": "=标准：：是否相同&lt；"
  },
  {
    "origin": ", typename std::decay&lt; T &gt;::type &gt;",
    "local": "，类型名std:：decay&lt；T&gt；：类型&gt；"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "= std::is_same&lt; T, typename",
    "local": "=标准：：是否相同&lt；T、 类型名称"
  },
  {
    "origin": "&lt; T &gt;::type &gt;",
    "local": "&lt；T&gt；：类型&gt；"
  },
  {
    "origin": "template&lt;typename... Ts&gt;",
    "local": "模板&lt；类型名。。。Ts&gt？"
  },
  {
    "origin": "= typename",
    "local": "=类型名称"
  },
  {
    "origin": "&lt; Ts... &gt;::type",
    "local": "&lt；T。。。gt；：类型"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "= typename",
    "local": "=类型名称"
  },
  {
    "origin": "&lt; T &gt;::type",
    "local": "&lt；T&gt；：类型"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "= typename",
    "local": "=类型名称"
  },
  {
    "origin": "&lt; T &gt;::type",
    "local": "&lt；T&gt；：类型"
  },
  {
    "origin": "template&lt;typename... Ts&gt;",
    "local": "模板&lt；类型名。。。Ts&gt？"
  },
  {
    "origin": "= all_satisfy&lt;",
    "local": "=全部满足&lt；"
  },
  {
    "origin": ", Ts... &gt;",
    "local": "，Ts&燃气轮机；"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "&lt; typename std::decay&lt; T &gt;::type &gt;",
    "local": "&lt；%s（%s）T&gt；：类型&gt；"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "&lt; typename std::decay&lt;",
    "local": "&lt；类型名称标准：：衰减（&L）"
  },
  {
    "origin": "&lt; T &gt; &gt;::type &gt;",
    "local": "&lt；T&gt；&quot；gt；：类型&gt；"
  },
  {
    "origin": "Enumerations",
    "local": "枚举"
  },
  {
    "origin": ": int {",
    "local": "：内景{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": ": int {",
    "local": "：内景{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "Functions",
    "local": "功能"
  },
  {
    "origin": "(const std::vector&lt;",
    "local": "（const std：：向量&lt；"
  },
  {
    "origin": "&gt; &amp;rmats)",
    "local": "&gt；gt；amp；格式）"
  },
  {
    "origin": "Tries to detect the wave correction kind depending on whether a panorama spans horizontally or vertically.",
    "local": "尝试根据全景是水平还是垂直跨越来检测波浪修正类型。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const std::vector&lt;",
    "local": "（const std：：向量&lt；"
  },
  {
    "origin": "&gt; &amp;Hs,",
    "local": "&燃气轮机&amp；您好，"
  },
  {
    "origin": "&amp;K)",
    "local": "&amp；（千）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;featuresFinder,",
    "local": "&gt；gt；amp；功能finder，"
  },
  {
    "origin": "images, std::vector&lt;",
    "local": "图像，标准：：向量&lt；"
  },
  {
    "origin": "&gt; &amp;features,",
    "local": "&燃气轮机&amp；特征，"
  },
  {
    "origin": "masks=",
    "local": "面具="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;featuresFinder,",
    "local": "&gt；gt；amp；功能finder，"
  },
  {
    "origin": "image,",
    "local": "图像，"
  },
  {
    "origin": "&amp;features,",
    "local": "&amp；特征，"
  },
  {
    "origin": "mask=",
    "local": "遮罩="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;out_info,",
    "local": "&amp；输出信息，"
  },
  {
    "origin": "&amp;args,",
    "local": "&amp；阿格斯，"
  },
  {
    "origin": "&amp;outs)",
    "local": "&amp；出局）"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "img, int num_levels, std::vector&lt;",
    "local": "img，整数级，std:：vector&lt；"
  },
  {
    "origin": "&gt; &amp;pyr)",
    "local": "&燃气轮机&amp；派尔）"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "img, int num_levels, std::vector&lt;",
    "local": "img，整数级，std:：vector&lt；"
  },
  {
    "origin": "&gt; &amp;pyr)",
    "local": "&燃气轮机&amp；派尔）"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "mask, float sharpness,",
    "local": "面具，浮雕锐度，"
  },
  {
    "origin": "weight)",
    "local": "重量）"
  },
  {
    "origin": "(const std::vector&lt;",
    "local": "（const std：：向量&lt；"
  },
  {
    "origin": "&gt; &amp;features, const std::vector&lt;",
    "local": "&燃气轮机&amp；特征，const std:：vector&lt；"
  },
  {
    "origin": "&gt; &amp;pairwise_matches, std::vector&lt; double &gt; &amp;focals)",
    "local": "&燃气轮机&amp；成对匹配，std:：vector&lt；双倍&gt&amp；焦点）"
  },
  {
    "origin": "Estimates focal lengths for each given camera.",
    "local": "估计每个给定相机的焦距。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(int num_images, const std::vector&lt;",
    "local": "（int num\\ u images，const std:：vector&lt；"
  },
  {
    "origin": "&gt; &amp;pairwise_matches,",
    "local": "&燃气轮机&amp；成对匹配，"
  },
  {
    "origin": "&amp;span_tree, std::vector&lt; int &gt; &amp;centers)",
    "local": "&amp；span\\u tree，std:：vector&lt；内部&gt&amp；中心）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;H, double &amp;f0, double &amp;f1, bool &amp;f0_ok, bool &amp;f1_ok)",
    "local": "&amp；H、 双（&A）；f0，双；f1，布尔和；f0\\u好的，布尔&amp；f1（正常）"
  },
  {
    "origin": "Tries to estimate focal lengths from the given homography under the assumption that the camera undergoes rotations around its centre only.",
    "local": "在假设相机仅围绕中心旋转的情况下，尝试从给定的单应性估计焦距。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "std::enable_if&lt;!",
    "local": "std：：启用\\u if&lt；！"
  },
  {
    "origin": "&lt; T &gt;::value, typename",
    "local": "&lt；T&gt；：值，类型名"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;in_meta, const",
    "local": "&amp；在元中，常量"
  },
  {
    "origin": "&amp;, int idx)",
    "local": "&amp；，内部（idx）"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "std::enable_if&lt;",
    "local": "std：：启用\\u if&lt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;, const",
    "local": "&amp；常数"
  },
  {
    "origin": "&amp;in_args, int idx)",
    "local": "&amp；输入参数，int idx）"
  },
  {
    "origin": "template&lt;typename... Ts, int... Indexes&gt;",
    "local": "模板&lt；类型名。。。Ts，国际。。。索引&gt；"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "(const std::tuple&lt; Ts... &gt; &amp;ts, detail::Seq&lt; Indexes... &gt;)",
    "local": "（const std：：元组&lt；它&燃气轮机&amp；ts，细节：：序列&lt；索引&gt；）"
  },
  {
    "origin": "template&lt;typename InferType &gt;",
    "local": "模板&lt；类型类型&gt；"
  },
  {
    "origin": "(const std::string &amp;tag, const typename",
    "local": "（const std：：字符串&amp；标记，常量类型名称"
  },
  {
    "origin": "&lt; InferType &gt;::inType &amp;in, const",
    "local": "&lt；推断类型&gt；：：输入（&P）；进来，康斯特"
  },
  {
    "origin": "&amp;inputs)",
    "local": "&amp；输入）"
  },
  {
    "origin": "(std::vector&lt;",
    "local": "（标准：：向量&lt；"
  },
  {
    "origin": "&gt; &amp;features, std::vector&lt;",
    "local": "&燃气轮机&amp；特征，std:：vector&lt；"
  },
  {
    "origin": "&gt; &amp;pairwise_matches, float conf_threshold)",
    "local": "&燃气轮机&amp；成对匹配，浮点配置（阈值）"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "() -&gt; decltype(T",
    "local": "（）&gt；数据类型（T）"
  },
  {
    "origin": "template&lt;typename InferT &gt;",
    "local": "模板&lt；typename推断&gt；"
  },
  {
    "origin": "std::shared_ptr&lt;",
    "local": "标准：：共享\\u ptr&lt；"
  },
  {
    "origin": "(const std::string &amp;tag, std::vector&lt;",
    "local": "（const std：：字符串&amp；标签，标准：：向量&lt；"
  },
  {
    "origin": "&gt; &amp;&amp;args, std::vector&lt; std::string &gt; &amp;&amp;names,",
    "local": "&gt；gt；&gt；gt；amp；args，std：：向量&lt；标准：：字符串&gt；&gt；&gt；gt；amp；姓名，"
  },
  {
    "origin": "&amp;&amp;kinds)",
    "local": "&amp&amp；种类）"
  },
  {
    "origin": "(std::vector&lt;",
    "local": "（标准：：向量&lt；"
  },
  {
    "origin": "&gt; &amp;pathes, std::vector&lt;",
    "local": "&燃气轮机&amp；路径，std：：向量&lt；"
  },
  {
    "origin": "&gt; &amp;pairwise_matches, float conf_threshold)",
    "local": "&燃气轮机&amp；成对匹配，浮点配置（阈值）"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "weight,",
    "local": "重量，"
  },
  {
    "origin": "src)",
    "local": "（src）"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "tl1,",
    "local": "tl1型，"
  },
  {
    "origin": "tl2,",
    "local": "tl2型，"
  },
  {
    "origin": "sz1,",
    "local": "sz1号，"
  },
  {
    "origin": "sz2,",
    "local": "sz2号，"
  },
  {
    "origin": "&amp;roi)",
    "local": "&amp；投资回报率）"
  },
  {
    "origin": "template&lt;typename... Ts&gt;",
    "local": "模板&lt；类型名。。。Ts&gt？"
  },
  {
    "origin": "(Ts... args)",
    "local": "（T。。。参数）"
  },
  {
    "origin": "template&lt;typename... Outputs&gt;",
    "local": "模板&lt；类型名。。。输出>；"
  },
  {
    "origin": "(Outputs &amp;... outs)",
    "local": "（输出）；。。。出局）"
  },
  {
    "origin": "template&lt;typename... Outputs&gt;",
    "local": "模板&lt；类型名。。。输出>；"
  },
  {
    "origin": "(Outputs &amp;... outs)",
    "local": "（输出）；。。。出局）"
  },
  {
    "origin": "(std::vector&lt;",
    "local": "（标准：：向量&lt；"
  },
  {
    "origin": "&gt; &amp;pyr)",
    "local": "&燃气轮机&amp；派尔）"
  },
  {
    "origin": "(std::vector&lt;",
    "local": "（标准：：向量&lt；"
  },
  {
    "origin": "&gt; &amp;pyr)",
    "local": "&燃气轮机&amp；派尔）"
  },
  {
    "origin": "(const std::vector&lt;",
    "local": "（const std：：向量&lt；"
  },
  {
    "origin": "&gt; &amp;corners, const std::vector&lt;",
    "local": "&gt；&quot；&amp；角点，const std:：vector&lt；"
  },
  {
    "origin": "&gt; &amp;images)",
    "local": "&燃气轮机&amp；图像）"
  },
  {
    "origin": "(const std::vector&lt;",
    "local": "（const std：：向量&lt；"
  },
  {
    "origin": "&gt; &amp;corners, const std::vector&lt;",
    "local": "&gt；&quot；&amp；角点，const std:：vector&lt；"
  },
  {
    "origin": "&gt; &amp;sizes)",
    "local": "&燃气轮机&amp；尺寸）"
  },
  {
    "origin": "(const std::vector&lt;",
    "local": "（const std：：向量&lt；"
  },
  {
    "origin": "&gt; &amp;corners, const std::vector&lt;",
    "local": "&gt；&quot；&amp；角点，const std:：vector&lt；"
  },
  {
    "origin": "&gt; &amp;sizes)",
    "local": "&燃气轮机&amp；尺寸）"
  },
  {
    "origin": "(const std::vector&lt;",
    "local": "（const std：：向量&lt；"
  },
  {
    "origin": "&gt; &amp;corners)",
    "local": "&燃气轮机&amp；（拐角处）"
  },
  {
    "origin": "(int count, int size, std::vector&lt; int &gt; &amp;subset)",
    "local": "（int count，int size，std:：vector&lt；内部&gt&amp；子集）"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "(T &amp;&amp;t)",
    "local": "（T&amp&amp；（吨）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;blobs, std::vector&lt;",
    "local": "&amp；blobs，std:：vector&lt；"
  },
  {
    "origin": "&gt; &amp;args, std::vector&lt; std::string &gt; &amp;names,",
    "local": "&gt；&quot；&amp；args，std：：向量&lt；标准：：字符串&gt；&gt；&amp；姓名，"
  },
  {
    "origin": "&amp;kinds)",
    "local": "&amp；种类）"
  },
  {
    "origin": "(std::vector&lt;",
    "local": "（标准：：向量&lt；"
  },
  {
    "origin": "&gt; &amp;rmats,",
    "local": "&gt；gt；amp；武装，"
  },
  {
    "origin": "kind)",
    "local": "种类）"
  },
  {
    "origin": "Tries to make panorama more horizontal (or vertical).",
    "local": "尝试使全景更水平（或垂直）。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&lt; T &gt; &amp;arg)",
    "local": "&lt；&gt；&gt；安培；arg）"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&lt; std::vector&lt; T &gt; &gt; &amp;arg)",
    "local": "&lt；标准：：向量&lt；T&gt&燃气轮机&amp；精氨酸）"
  },
  {
    "origin": "template&lt;&gt;",
    "local": "模板&lt&燃气轮机；"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;m)",
    "local": "&燃气轮机&amp；米）"
  },
  {
    "origin": "template&lt;&gt;",
    "local": "模板&lt&燃气轮机；"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;s)",
    "local": "&燃气轮机&amp；秒）"
  },
  {
    "origin": "Typedef Documentation",
    "local": "Typedef文档"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "are_meta_descrs",
    "local": "是元描述吗"
  },
  {
    "origin": "template&lt;typename... Ts&gt;",
    "local": "模板&lt；类型名。。。Ts&gt？"
  },
  {
    "origin": "using",
    "local": "使用"
  },
  {
    "origin": "= typedef all_satisfy&lt;",
    "local": "=typedef全部满足&lt；"
  },
  {
    "origin": ", Ts...&gt;",
    "local": "，Ts…&gt；"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "are_meta_descrs_but_last",
    "local": "你是元描述，但你是最后一个吗"
  },
  {
    "origin": "template&lt;typename... Ts&gt;",
    "local": "模板&lt；类型名。。。Ts&gt？"
  },
  {
    "origin": "using",
    "local": "使用"
  },
  {
    "origin": "= typedef all_satisfy&lt;",
    "local": "=typedef全部满足&lt；"
  },
  {
    "origin": ", typename all_but_last&lt;Ts...&gt;::type&gt;",
    "local": "，typename all\\u but \\u last&lt；Ts…&gt；：：类型&gt；"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "ConstructOpaque",
    "local": "构造的"
  },
  {
    "origin": "using",
    "local": "使用"
  },
  {
    "origin": "= typedef std::function&lt;void(",
    "local": "=typedef std：：函数&lt；无效("
  },
  {
    "origin": "&amp;)&gt;",
    "local": "&amp；）&燃气轮机；"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "ConstructVec",
    "local": "结构"
  },
  {
    "origin": "using",
    "local": "使用"
  },
  {
    "origin": "= typedef std::function&lt;void(",
    "local": "=typedef std：：函数&lt；无效("
  },
  {
    "origin": "&amp;)&gt;",
    "local": "&amp；）&燃气轮机；"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "g_type_of_t",
    "local": "g类型"
  },
  {
    "origin": "template&lt;class T &gt;",
    "local": "模板&lt；等级T&gt；"
  },
  {
    "origin": "using",
    "local": "使用"
  },
  {
    "origin": "= typedef typename",
    "local": "=类型定义类型名称"
  },
  {
    "origin": "&lt;T&gt;::type",
    "local": "&lt；T&gt；：类型"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "GOpaqueTraitsArrayTypes",
    "local": "GoPaqueTraitsArray类型"
  },
  {
    "origin": "using",
    "local": "使用"
  },
  {
    "origin": "= typedef std::tuple&lt;int, double, float,",
    "local": "=typedef std：：元组&lt；int，double，float，"
  },
  {
    "origin": ", bool, std::string,",
    "local": "，bool，std：：字符串，"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "GOpaqueTraitsOpaqueTypes",
    "local": "GOpaqueTraitsOpaqueTypes公司"
  },
  {
    "origin": "using",
    "local": "使用"
  },
  {
    "origin": "= typedef std::tuple&lt;int, double, float,",
    "local": "=typedef std：：元组&lt；int，double，float，"
  },
  {
    "origin": ", bool, std::string,",
    "local": "，bool，std：：字符串，"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "HostCtor",
    "local": "主持人"
  },
  {
    "origin": "using",
    "local": "使用"
  },
  {
    "origin": "= typedef",
    "local": "=类型定义"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "is_compile_arg",
    "local": "是编译参数吗"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "using",
    "local": "使用"
  },
  {
    "origin": "= typedef std::is_same&lt;",
    "local": "=typedef std：：是否相同&lt；"
  },
  {
    "origin": ", typename std::decay&lt;T&gt;::type&gt;",
    "local": "，类型名std:：decay&lt；T&gt；：类型&gt；"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "is_garg",
    "local": "_下载"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "using",
    "local": "使用"
  },
  {
    "origin": "= typedef std::is_same&lt;",
    "local": "=typedef std：：是否相同&lt；"
  },
  {
    "origin": ", typename std::decay&lt;T&gt;::type&gt;",
    "local": "，类型名std:：decay&lt；T&gt；：类型&gt；"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "is_nongapi_type",
    "local": "是\\u nongapi \\u类型"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "using",
    "local": "使用"
  },
  {
    "origin": "= typedef std::is_same&lt;T, typename",
    "local": "=typedef std：：是否相同&lt；T、 类型名称"
  },
  {
    "origin": "&lt;T&gt;::type&gt;",
    "local": "&lt；T&gt；：类型&gt；"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "last_type_t",
    "local": "最后一种类型"
  },
  {
    "origin": "template&lt;typename... Ts&gt;",
    "local": "模板&lt；类型名。。。Ts&gt？"
  },
  {
    "origin": "using",
    "local": "使用"
  },
  {
    "origin": "= typedef typename",
    "local": "=类型定义类型名称"
  },
  {
    "origin": "&lt;Ts...&gt;::type",
    "local": "&lt；T…&gt；：类型"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "OptionalOpaqueRef",
    "local": "可选查询"
  },
  {
    "origin": "using",
    "local": "使用"
  },
  {
    "origin": "= typedef",
    "local": "=类型定义"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "OptionalVectorRef",
    "local": "可选向量"
  },
  {
    "origin": "using",
    "local": "使用"
  },
  {
    "origin": "= typedef",
    "local": "=类型定义"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "ProtoToMetaT",
    "local": "原生动物"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "using",
    "local": "使用"
  },
  {
    "origin": "= typedef typename",
    "local": "=类型定义类型名称"
  },
  {
    "origin": "&lt;T&gt;::type",
    "local": "&lt；T&gt；：类型"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "ProtoToParamT",
    "local": "原参数"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "using",
    "local": "使用"
  },
  {
    "origin": "= typedef typename",
    "local": "=类型定义类型名称"
  },
  {
    "origin": "&lt;T&gt;::type",
    "local": "&lt；T&gt；：类型"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "valid_infer_types",
    "local": "有效的\\u推断\\u类型"
  },
  {
    "origin": "template&lt;typename... Ts&gt;",
    "local": "模板&lt；类型名。。。Ts&gt？"
  },
  {
    "origin": "using",
    "local": "使用"
  },
  {
    "origin": "= typedef all_satisfy&lt;",
    "local": "=typedef全部满足&lt；"
  },
  {
    "origin": ", Ts...&gt;",
    "local": "，Ts…&gt；"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "wrap_gapi_helper",
    "local": "包装\\u gapi \\u助手"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "using",
    "local": "使用"
  },
  {
    "origin": "= typedef",
    "local": "=类型定义"
  },
  {
    "origin": "&lt;typename std::decay&lt;T&gt;::type&gt;",
    "local": "&lt；%s（%s）类型名std:：decay&lt；T&gt；：类型&gt；"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "wrap_host_helper",
    "local": "包装\\u主机\\u助手"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "using",
    "local": "使用"
  },
  {
    "origin": "= typedef",
    "local": "=类型定义"
  },
  {
    "origin": "&lt;typename std::decay&lt;",
    "local": "&lt；类型名称标准：：衰减（&L）"
  },
  {
    "origin": "&lt;T&gt; &gt;::type&gt;",
    "local": "&lt；T&gt；&quot；gt；：类型&gt；"
  },
  {
    "origin": "Enumeration Type Documentation",
    "local": "枚举类型文档"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "ArgKind",
    "local": "阿金德"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": ": int",
    "local": "：内景"
  },
  {
    "origin": "strong",
    "local": "坚强的"
  },
  {
    "origin": "Enumerator",
    "local": "枚举器"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "OpaqueKind",
    "local": "不透明的"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": ": int",
    "local": "：内景"
  },
  {
    "origin": "strong",
    "local": "坚强的"
  },
  {
    "origin": "Enumerator",
    "local": "枚举器"
  },
  {
    "origin": "CV_UINT64&#160;",
    "local": "简历UINT64"
  },
  {
    "origin": "CV_POINT2F&#160;",
    "local": "CVŠU点2F&#160；"
  },
  {
    "origin": "Function Documentation",
    "local": "功能文档"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "constructGraphOutputs()",
    "local": "constructGraphOutputs（）"
  },
  {
    "origin": "void cv::detail::constructGraphOutputs",
    "local": "void cv:：detail:：constructGraphOutputs"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "out_info",
    "local": "输出\\u信息"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "args",
    "local": "愤怒"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "outs",
    "local": "出局"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "get_in_meta()",
    "local": "获取\\在\\元（）"
  },
  {
    "origin": "[1/2]",
    "local": "[1/2]"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "std::enable_if&lt;!",
    "local": "std：：启用\\u if&lt；！"
  },
  {
    "origin": "&lt;T&gt;::value, typename",
    "local": "&lt；T&gt；：值，类型名"
  },
  {
    "origin": "&lt;T&gt;::type&gt;::type cv::detail::get_in_meta",
    "local": "&lt；T&gt；：：类型&gt；：：键入cv:：detail:：get\\u in\\u meta"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "in_meta",
    "local": "在\\元"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "idx",
    "local": "idx公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "get_in_meta()",
    "local": "获取\\在\\元（）"
  },
  {
    "origin": "[2/2]",
    "local": "[2/2]"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "std::enable_if&lt;",
    "local": "std：：启用\\u if&lt；"
  },
  {
    "origin": "&lt;T&gt;::value, T&gt;::type cv::detail::get_in_meta",
    "local": "&lt；T&gt；：：值，T&gt；：：键入cv:：detail:：get\\u in\\u meta"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "in_args",
    "local": "在u-args"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "idx",
    "local": "idx公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "getGOut_impl()",
    "local": "getGOut\\u impl（）"
  },
  {
    "origin": "template&lt;typename... Ts, int... Indexes&gt;",
    "local": "模板&lt；类型名。。。Ts，国际。。。索引&gt；"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "cv::detail::getGOut_impl",
    "local": "简历：：细节：：getGOut\\u impl"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "ts",
    "local": "ts公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "inferGenericROI()",
    "local": "推断"
  },
  {
    "origin": "template&lt;typename InferType &gt;",
    "local": "模板&lt；类型类型&gt；"
  },
  {
    "origin": "&lt;InferType&gt;::outType cv::detail::inferGenericROI",
    "local": "&lt；推断类型&gt；：：输出类型cv：：细节：：推断"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "tag",
    "local": "标签"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const typename",
    "local": "常量类型名称"
  },
  {
    "origin": "in",
    "local": "在里面"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "inputs",
    "local": "输入"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "make_default()",
    "local": "设为默认（）"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "auto cv::detail::make_default",
    "local": "自动cv：：细节：：设为默认值"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "-&gt; decltype(T",
    "local": "-&燃气轮机；数据类型（T）"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "makeCall()",
    "local": "makeCall（）"
  },
  {
    "origin": "template&lt;typename InferT &gt;",
    "local": "模板&lt；typename推断&gt；"
  },
  {
    "origin": "std::shared_ptr&lt;",
    "local": "标准：：共享\\u ptr&lt；"
  },
  {
    "origin": "&gt; cv::detail::makeCall",
    "local": "&燃气轮机；简历：：细节：：makeCall"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "tag",
    "local": "标签"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "std::vector&lt;",
    "local": "标准：：向量&lt；"
  },
  {
    "origin": "args",
    "local": "愤怒"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "names",
    "local": "姓名"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "kinds",
    "local": "种类"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "packArgs()",
    "local": "包装（）"
  },
  {
    "origin": "template&lt;typename... Ts&gt;",
    "local": "模板&lt；类型名。。。Ts&gt？"
  },
  {
    "origin": "cv::detail::packArgs",
    "local": "简历：：细节：：包装"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "args",
    "local": "愤怒"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "inline",
    "local": "内联"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "postprocess()",
    "local": "后处理（）"
  },
  {
    "origin": "template&lt;typename... Outputs&gt;",
    "local": "模板&lt；类型名。。。输出>；"
  },
  {
    "origin": "void cv::detail::postprocess",
    "local": "void cv:：detail:：后处理"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "outs",
    "local": "出局"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "postprocess_ocl()",
    "local": "后处理\\u ocl（）"
  },
  {
    "origin": "template&lt;typename... Outputs&gt;",
    "local": "模板&lt；类型名。。。输出>；"
  },
  {
    "origin": "void cv::detail::postprocess_ocl",
    "local": "void cv:：detail:：后处理\\u ocl"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "outs",
    "local": "出局"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "strip()",
    "local": "剥离（）"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "cv::detail::strip",
    "local": "cv：：细节：：条带"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "t",
    "local": "t型"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "unpackBlobs()",
    "local": "解包blobs（）"
  },
  {
    "origin": "void cv::detail::unpackBlobs",
    "local": "void cv:：detail:：unpackBlobs"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "blobs",
    "local": "斑点"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "std::vector&lt;",
    "local": "标准：：向量&lt；"
  },
  {
    "origin": "args",
    "local": "愤怒"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "names",
    "local": "姓名"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "kinds",
    "local": "种类"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "inline",
    "local": "内联"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "wrap_opt_arg()",
    "local": "包装\\u opt \\u arg（）"
  },
  {
    "origin": "[1/4]",
    "local": "[1/4]"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "cv::detail::wrap_opt_arg",
    "local": "cv：：细节：：包装参数"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "arg",
    "local": "精氨酸"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "inline",
    "local": "内联"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "wrap_opt_arg()",
    "local": "包装\\u opt \\u arg（）"
  },
  {
    "origin": "[2/4]",
    "local": "[2/4]"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "cv::detail::wrap_opt_arg",
    "local": "cv：：细节：：包装参数"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "arg",
    "local": "精氨酸"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "inline",
    "local": "内联"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "wrap_opt_arg()",
    "local": "包装\\u opt \\u arg（）"
  },
  {
    "origin": "[3/4]",
    "local": "[3/4]"
  },
  {
    "origin": "template&lt;&gt;",
    "local": "模板&lt&燃气轮机；"
  },
  {
    "origin": "cv::detail::wrap_opt_arg",
    "local": "cv：：细节：：包装参数"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "inline",
    "local": "内联"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "wrap_opt_arg()",
    "local": "包装\\u opt \\u arg（）"
  },
  {
    "origin": "[4/4]",
    "local": "[4/4]"
  },
  {
    "origin": "template&lt;&gt;",
    "local": "模板&lt&燃气轮机；"
  },
  {
    "origin": "cv::detail::wrap_opt_arg",
    "local": "cv：：细节：：包装参数"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "s",
    "local": "s"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "inline",
    "local": "内联"
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:46 for OpenCV by &#160;",
    "local": "2021年4月2日星期五11:36:46为OpenCV生成，&#160；"
  }
]