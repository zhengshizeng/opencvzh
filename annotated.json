[
  {
    "origin": "OpenCV: Class List",
    "local": "OpenCV:类列表"
  },
  {
    "origin": "Open Source Computer Vision",
    "local": "Open Source Computer Vision"
  },
  {
    "origin": "Class List",
    "local": "Class List"
  },
  {
    "origin": "Here are the classes, structs, unions and interfaces with brief descriptions:",
    "local": "以下是类、结构、联合和接口,并有简要说明："
  },
  {
    "origin": "[detail level",
    "local": "[详细级别]"
  },
  {
    "origin": "]",
    "local": "]"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "\"black box\" representation of the file storage associated with a file on disk",
    "local": "与磁盘上的文件相关联的文件存储的“黑盒”表示"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "of markers",
    "local": "标记的数量"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "ChArUco board Specific class for ChArUco boards. A ChArUco board is a planar board where the markers are placed inside the white squares of a chessboard. The benefits of ChArUco boards is that they provide both, ArUco markers versatility and chessboard corner precision, which is important for calibration and pose estimation. This class also allows the easy creation and drawing of ChArUco boards",
    "local": "ChArUco板的特定类.ChArUco棋盘是一种平面棋盘,标记放在棋盘的白色方格内.ChArUco板的好处是,它们提供了ArUco标记的通用性和棋盘转角精度,这对于校准和姿态估计非常重要.这个类还允许轻松创建和绘制ChArUco板"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Parameters for the detectMarker process:",
    "local": "detectMarker进程的参数："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Dictionary/Set of markers. It contains the inner codification",
    "local": "字典/标记集.它包含了内部编码"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Planar board with grid arrangement of markers More common type of board. All markers are placed in the same plane in a grid arrangement. The board can be drawn using",
    "local": "平面板用网格标记排列较常见的板型.所有标记以网格排列放置在同一平面上.可以使用"
  },
  {
    "origin": "function (",
    "local": "功能("
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Background subtraction based on counting",
    "local": "基于计数的背景减法"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Background Subtractor module based on the algorithm given in",
    "local": "基于中给出的算法的背景减法器模块"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Implementation of the different yet better algorithm which is called GSOC, as it was implemented during GSOC and was not originated from any paper",
    "local": "不同但更好的算法的实现称为GSOC,因为它是在GSOC期间实现的,并不是源于任何一篇论文"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Background Subtraction using Local",
    "local": "基于局部特征的背景减法"
  },
  {
    "origin": "Binary Pattern. More details about the algorithm can be found at",
    "local": "二进制模式.有关该算法的更多详细信息,请访问"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This is for calculation of the LSBP descriptors",
    "local": "这是为了计算LSBP描述符"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Gaussian Mixture-based Background/Foreground Segmentation",
    "local": "基于高斯混合的背景/前景分割"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Synthetic frame sequence generator for testing background subtraction algorithms",
    "local": "用于测试背景减法算法的合成帧序列发生器"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class which allows the Gipsa/Listic Labs model to be used with OpenCV",
    "local": "类,该类允许Gipsa/Listic Labs模型与OpenCV一起使用"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Wrapper class which allows the tone mapping algorithm of Meylan&amp;al(2007) to be used with OpenCV",
    "local": "允许Meylan&amp;的色调映射算法的包装器类;al(2007)将与OpenCV一起使用"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "model parameters structure",
    "local": "模型参数结构"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Inner Plexiform Layer Magnocellular channel (IplMagno)",
    "local": "内网状层大细胞通道"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Outer Plexiform Layer (OPL) and Inner Plexiform Layer Parvocellular (IplParvo) parameters",
    "local": "外网状层(OPL)和内网状层小细胞(IplParvo)参数"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Parameter structure that stores the transient events detector setup parameters",
    "local": "存储瞬态事件检测器设置参数的参数结构"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class which provides a transient/moving areas segmentation module",
    "local": "类,它提供了一个瞬态/运动区域分割模块"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Core class of ccm model",
    "local": "ccm模型的核心类"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Caffe based 3D images descriptor. A class to extract features from an image. The so obtained descriptors can be used for classification and pose estimation goals",
    "local": "基于Caffe的三维图像描述符.从图像中提取特征的类.由此得到的描述符可用于分类和姿态估计目标"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Icosohedron based camera view data generator. The class create some sphere views of camera towards a 3D object meshed from .ply files",
    "local": "基于二十面体的摄像机视图数据发生器.该类创建一些面向从.ply文件网格化的三维对象的摄影机球体视图"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The class discriminates between foreground and background pixels by building and maintaining a model of the background",
    "local": "该类通过建立和维护背景模型来区分前景和背景像素"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Background/Foreground Segmentation",
    "local": "背景/前景分割"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Gaussian Mixture-based Background/Foreground Segmentation",
    "local": "基于高斯混合的背景/前景分割"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Gaussian Mixture-based Background/Foreground Segmentation",
    "local": "基于高斯混合的背景/前景分割"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class computing the optical flow for two images using Brox et al Optical Flow algorithm (",
    "local": "用Brox等人的光流算法计算两幅图像的光流("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "for use with CUDA streams",
    "local": "用于CUDA流"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for Canny Edge Detector. :",
    "local": "Canny边缘检测器的基类："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Cascade classifier class used for object detection. Supports HAAR and LBP cascades. :",
    "local": "用于目标检测的级联分类器类.支持HAAR和LBP级联："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for Contrast Limited Adaptive Histogram Equalization. :",
    "local": "对比度受限自适应直方图均衡化基类："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for convolution (or cross-correlation) operator. :",
    "local": "卷积(或互相关)运算符的基类："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for Cornerness Criteria computation. :",
    "local": "用于角度标准计算的基类："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for Corners Detector. :",
    "local": "角点检测器的基类："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base interface for dense optical flow algorithms",
    "local": "密集光流算法的基本接口"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class used for calculating a dense optical flow",
    "local": "用于计算密集光流的类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Abstract base class for matching keypoint descriptors",
    "local": "匹配关键点描述符的抽象基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class providing functionality for querying the specified GPU properties",
    "local": "类提供查询指定GPU属性的功能"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for",
    "local": "的基类"
  },
  {
    "origin": "operator as a",
    "local": "操作员作为"
  },
  {
    "origin": ". :",
    "local": ". :"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class refining a disparity map using joint bilateral filtering. :",
    "local": "使用联合双边滤波对视差图进行类细化："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class that enables getting cudaEvent_t from",
    "local": "类,该类允许从"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class computing a dense optical flow using the Gunnar Farneback's algorithm",
    "local": "用Gunnar-Farneback算法计算稠密光流"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Wrapping class for feature detection using the FAST method",
    "local": "基于快速方法的特征检测包装类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Abstract base class for CUDA asynchronous 2D image feature detectors and descriptor extractors",
    "local": "CUDA异步二维图像特征检测器和描述符提取器的抽象基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Common interface for all CUDA filters :",
    "local": "所有CUDA过滤器的通用接口："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base storage class for GPU memory with reference counting",
    "local": "具有引用计数的GPU内存的基本存储类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The class implements Histogram of Oriented Gradients (",
    "local": "类实现了有向梯度的直方图("
  },
  {
    "origin": ") object detector",
    "local": ")物体探测器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class with reference counting wrapping special memory type allocation functions from CUDA",
    "local": "用引用计数包装来自CUDA的特殊内存类型分配函数的类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for circles detector algorithm. :",
    "local": "圆检测器算法的基类："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for lines detector algorithm. :",
    "local": "行检测器算法的基类："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for line segments detector algorithm. :",
    "local": "线段检测器算法的基类："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for transform using lookup table",
    "local": "使用查找表进行转换的基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base Interface for optical flow algorithms using NVIDIA Optical Flow SDK",
    "local": "使用NVIDIA光流SDK的光流算法基本接口"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class for computing the optical flow vectors between two images using NVIDIA Optical Flow hardware and Optical Flow SDK 1.0",
    "local": "类,用于使用NVIDIA光流硬件和光流SDK 1.0计算两幅图像之间的光流矢量"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class for computing the optical flow vectors between two images using NVIDIA Optical Flow hardware and Optical Flow SDK 2.0",
    "local": "类,用于使用NVIDIA光流硬件和光流SDK 2.0计算两幅图像之间的光流矢量"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Implementation of the Zach, Pock and Bischof Dual TV-L1 Optical Flow method",
    "local": "Zach、Pock和Bischof双TV-L1光流方法的实现"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class implementing the",
    "local": "类实现"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "oriented BRIEF",
    "local": "定向简报"
  },
  {
    "origin": ") keypoint detector and descriptor extractor",
    "local": ")关键点检测器和描述符提取器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base interface for sparse optical flow algorithms",
    "local": "稀疏光流算法的基本接口"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class used for calculating a sparse optical flow",
    "local": "用于计算稀疏光流的类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class computing stereo correspondence using the belief propagation algorithm. :",
    "local": "使用信念传播算法计算立体对应的类："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class computing stereo correspondence (disparity map) using the block matching algorithm. :",
    "local": "类使用块匹配算法计算立体对应(视差图)："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class computing stereo correspondence using the constant space belief propagation algorithm. :",
    "local": "使用恒定空间信念传播算法计算立体对应："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The class implements the modified H. Hirschmuller algorithm",
    "local": "类实现了修改后的H.赫氏算法"
  },
  {
    "origin": ". Limitation and difference are as follows:",
    "local": ". 限制和区别如下："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This class encapsulates a queue of asynchronous calls",
    "local": "这个类封装了一个异步调用队列"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class that enables getting cudaStream_t from",
    "local": "类,该类允许从"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class used for extracting Speeded Up Robust Features (SURF) from an image. :",
    "local": "用于从图像中提取加速鲁棒特征(SURF)的类："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class providing a set of static methods to check what NVIDIA* card architecture the CUDA module was built for",
    "local": "类提供了一组静态方法来检查构建CUDA模块的NVIDIA*卡体系结构"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for Template Matching. :",
    "local": "模板匹配的基类："
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Callbacks for CUDA video encoder",
    "local": "CUDA视频编码器的回调"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Different parameters for CUDA video encoder",
    "local": "CUDA视频编码器的不同参数"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Struct providing information about video file format. :",
    "local": "结构提供有关视频文件格式的信息："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Interface for video demultiplexing. :",
    "local": "视频解复用接口："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Video reader interface",
    "local": "视频阅读器接口"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Video writer interface",
    "local": "视频编写器接口"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Structure similar to",
    "local": "结构类似于"
  },
  {
    "origin": "but containing only a pointer and row step",
    "local": "但只包含一个指针和行步"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Lightweight class encapsulating pitched memory on a GPU and passed to nvcc-compiled code (CUDA kernels)",
    "local": "轻量级类封装GPU上的倾斜内存并传递给nvcc编译代码(CUDA内核)"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Functor that checks if a CUDA vector v is in the range between lowerb and upperb",
    "local": "函子,检查CUDA向量v是否在lowerb和upperb之间"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Functor that copies a",
    "local": "复制函数的函子"
  },
  {
    "origin": "into a CUDA vector, e.g. a uchar3",
    "local": "转化为CUDA载体,例如uchar3"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Unary_function implementation of inRange",
    "local": "inRange的一元函数实现"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Augmented Unscented Kalman filter parameters. The class for initialization parameters of Augmented Unscented Kalman filter",
    "local": "增广无迹卡尔曼滤波参数.增广无迹Kalman滤波器的初始化参数类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Model of dynamical system for Unscented Kalman filter. The interface for dynamical system model. It contains functions for computing the next state and the measurement. It must be inherited for using UKF",
    "local": "无迹卡尔曼滤波动态系统模型.动态系统模型的接口.它包含用于计算下一个状态和测量的函数.必须继承才能使用UKF"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The interface for Unscented Kalman filter and Augmented Unscented Kalman filter",
    "local": "Unscented卡尔曼滤波与增广Unscented卡尔曼滤波的接口"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Unscented Kalman filter parameters. The class for initialization parameters of Unscented Kalman filter",
    "local": "无迹卡尔曼滤波参数.无迹卡尔曼滤波的初始化参数类"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Allows computing cosine distance between two reidentification descriptors",
    "local": "允许计算两个重新标识描述符之间的余弦距离"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Declares an interface for distance computation between reidentification descriptors",
    "local": "声明重新标识描述符之间距离计算的接口"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Declares base class for image descriptor",
    "local": "声明图像描述符的基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Tracker-by-Matching algorithm interface",
    "local": "匹配算法接口跟踪器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Computes distance between images using MatchTemplate function from OpenCV library and its cross-correlation computation method in particular",
    "local": "利用OpenCV库中的MatchTemplate函数计算图像间的距离,特别是它的互相关计算方法"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Uses resized image as descriptor",
    "local": "使用调整大小的图像作为描述符"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Describes tracks",
    "local": "描述轨迹"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The",
    "local": "这个"
  },
  {
    "origin": "struct defines properties of detected object",
    "local": "结构定义检测到的对象的属性"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The",
    "local": "这个"
  },
  {
    "origin": "struct stores parameters of TrackerByMatching",
    "local": "struct存储TrackerByMatching的参数"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Abstract base class for",
    "local": "的抽象基类"
  },
  {
    "origin": "that represents the feature",
    "local": "代表特征的"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "based on HAAR features, used by",
    "local": "基于HAAR特征,用于"
  },
  {
    "origin": "and many others algorithms",
    "local": "以及其他许多算法"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class that manages the extraction and selection of features",
    "local": "类,用于管理特征的提取和选择"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class that manages the sampler in order to select regions for the update the model of the tracker [AAM] Sampling e Labeling. See table I and section III B",
    "local": "类,该类管理采样器以选择用于更新跟踪器[AAM]采样e标签的模型的区域.见表一和第三节B"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Abstract base class for",
    "local": "的抽象基类"
  },
  {
    "origin": "that represents the algorithm for the specific sampler",
    "local": "表示特定采样器的算法"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "based on CSC (current state centered), used by MIL algorithm",
    "local": "基于CSC(当前状态中心),采用MIL算法"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Abstract base class for",
    "local": "的抽象基类"
  },
  {
    "origin": "that represents the feature",
    "local": "代表特征的"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "based on",
    "local": "基于"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "based on HOG",
    "local": "基于猪"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "based on LBP",
    "local": "基于LBP"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class that manages the extraction and selection of features",
    "local": "类,用于管理特征的提取和选择"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Abstract class that represents the model of the target",
    "local": "表示目标模型的抽象类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class that manages the sampler in order to select regions for the update the model of the tracker [AAM] Sampling e Labeling. See table I and section III B",
    "local": "类,该类管理采样器以选择用于更新跟踪器[AAM]采样e标签的模型的区域.见表一和第三节B"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Abstract base class for",
    "local": "的抽象基类"
  },
  {
    "origin": "that represents the algorithm for the specific sampler",
    "local": "表示特定采样器的算法"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "based on CS (current state), used by algorithm TrackerBoosting",
    "local": "基于CS(当前状态),所用算法为TrackerBoosting"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "based on CSC (current state centered), used by MIL algorithm",
    "local": "基于CSC(当前状态中心),采用MIL算法"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This sampler is based on particle filtering",
    "local": "该采样器是基于粒子滤波的"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This structure contains all the parameters that can be varied during the course of sampling algorithm. Below is the structure exposed, together with its members briefly explained with reference to the above discussion on algorithm's working",
    "local": "该结构包含了在采样过程中可以改变的所有参数.下面是公开的结构,连同它的成员一起简要地解释了关于算法工作的上述讨论"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Abstract base class for",
    "local": "的抽象基类"
  },
  {
    "origin": "that estimates the most likely target state",
    "local": "估计最可能的目标州"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "based on ADA-Boosting",
    "local": "基于ADA-Boosting"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Implementation of the target state for",
    "local": "目标国的执行情况"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "based on SVM",
    "local": "基于支持向量机"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Abstract base class for",
    "local": "的抽象基类"
  },
  {
    "origin": "that represents a possible state of the target",
    "local": "表示目标的可能状态"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Affine transformation based estimator",
    "local": "基于仿射变换的估计器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Features matcher similar to",
    "local": "特征匹配器类似于"
  },
  {
    "origin": "which finds two best matches for each feature and leaves the best one only if the ratio between descriptor distances is greater than the threshold match_conf",
    "local": "它为每个特征找到两个最佳匹配,并且仅当描述符距离之间的比率大于阈值匹配时才保留最佳匹配"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Affine warper that uses rotations and translations",
    "local": "使用旋转和平移的仿射整经机"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Features matcher which finds two best matches for each feature and leaves the best one only if the ratio between descriptor distances is greater than the threshold match_conf",
    "local": "特征匹配器,为每个特征找到两个最佳匹配,并且只有当描述符距离之间的比率大于阈值匹配时才保留最佳匹配"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for all blenders",
    "local": "所有搅拌机的基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Exposure compensator which tries to remove exposure related artifacts by adjusting image block on each channel",
    "local": "曝光补偿器,它试图通过调整每个通道上的图像块来消除与曝光相关的伪影"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Exposure compensator which tries to remove exposure related artifacts by adjusting image blocks",
    "local": "曝光补偿器,它试图通过调整图像块来消除与曝光相关的伪影"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Exposure compensator which tries to remove exposure related artifacts by adjusting image block intensities, see",
    "local": "曝光补偿器,它试图通过调整图像块强度来消除与曝光相关的伪影,请参见"
  },
  {
    "origin": "for details",
    "local": "有关详细信息"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Bundle adjuster that expects affine transformation represented in homogeneous coordinates in R for each camera param. Implements camera parameters refinement algorithm which minimizes sum of the reprojection error squares",
    "local": "对于每个摄像机参数,期望仿射变换在R的齐次坐标中表示的束调整器.实现了最小化重投影误差平方和的摄像机参数优化算法"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Bundle adjuster that expects affine transformation with 4 DOF represented in homogeneous coordinates in R for each camera param. Implements camera parameters refinement algorithm which minimizes sum of the reprojection error squares",
    "local": "束调整器,期望仿射变换与4自由度表示在齐次坐标R为每个相机参数.实现了最小化重投影误差平方和的摄像机参数优化算法"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for all camera parameters refinement methods",
    "local": "所有摄像机参数求精方法的基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Implementation of the camera parameters refinement algorithm which minimizes sum of the distances between the rays passing through the camera center and a feature. :",
    "local": "摄像机参数优化算法的实现,该算法使通过摄像机中心的光线与特征之间的距离之和最小化："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Implementation of the camera parameters refinement algorithm which minimizes sum of the reprojection error squares",
    "local": "最小化重投影误差平方和的摄像机参数优化算法的实现"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Describes camera parameters",
    "local": "描述相机参数"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Exposure compensator which tries to remove exposure related artifacts by adjusting image intensities on each channel independently",
    "local": "曝光补偿器,它试图通过独立调整每个通道上的图像强度来消除与曝光相关的伪影"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Warper that maps an image onto the x*x + z*z = 1 cylinder",
    "local": "将图像映射到x*x+z*z=1圆柱体上的扭曲器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Rotation estimator base class",
    "local": "旋转估计器基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for all exposure compensators",
    "local": "所有曝光补偿器的基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Simple blender which mixes images at its borders",
    "local": "简单的混合机,在它的边界混合图像"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Feature matchers base class",
    "local": "特征匹配器基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Exposure compensator which tries to remove exposure related artifacts by adjusting image intensities, see",
    "local": "曝光补偿器,它试图通过调整图像强度来消除与曝光相关的伪影,请参阅"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": "for details",
    "local": "有关详细信息"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Minimum graph cut-based seam estimator. See details in",
    "local": "基于最小图割的接缝估计.请参阅中的详细信息"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for all minimum graph-cut-based seam estimators",
    "local": "基于最小图割的接缝估计的基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Homography based rotation estimator",
    "local": "基于单应的旋转估计"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Structure containing image keypoints and descriptors",
    "local": "包含图像关键点和描述符的结构"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Structure containing information about matches between two images",
    "local": "包含两个图像之间匹配信息的结构"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "which uses multi-band blending algorithm (see",
    "local": "它使用多波段混合算法(参见"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Stub bundle adjuster that does nothing",
    "local": "什么都不做的存根束调整器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Stub exposure compensator which does nothing",
    "local": "什么都不做的存根曝光补偿器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Stub seam estimator which does nothing",
    "local": "不执行任何操作的存根接缝估计器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for all pairwise seam estimators",
    "local": "所有成对接缝估计的基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Warper that maps an image onto the z = 1 plane",
    "local": "将图像映射到z=1平面的扭曲器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for warping logic implementation",
    "local": "用于扭曲逻辑实现的基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Rotation-only model image warper interface",
    "local": "仅旋转模型图像扭曲器接口"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for rotation-based warper using a detail::ProjectorBase_ derived class",
    "local": "使用detail:：ProjectorBase\\派生类的基于旋转的扭曲器的基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for a seam estimator",
    "local": "seam估计的基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Warper that maps an image onto the unit sphere located at the origin",
    "local": "将图像映射到位于原点的单位球体上的扭曲器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Voronoi diagram-based seam estimator",
    "local": "基于Voronoi图的接缝估计"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Derivatives of this class encapsulates functions of certain backends",
    "local": "这个类的导数封装了某些后端的函数"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Derivatives of this class wraps",
    "local": "这类导数"
  },
  {
    "origin": "for different backends and targets",
    "local": "针对不同的后端和目标"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This class represents high-level API for classification models",
    "local": "此类表示分类模型的高级API"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This class represents high-level API for object detection networks",
    "local": "此类表示对象检测网络的高级API"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Detection output layer",
    "local": "检测输出层"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This class implements name-value dictionary, values are instances of",
    "local": "这个类实现了名值字典,值是"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This struct stores the scalar value (or array) of one of the following type: double,",
    "local": "此结构存储以下类型之一的标量值(或数组)：double,"
  },
  {
    "origin": "or int64",
    "local": "或int64"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Element wise operation on inputs",
    "local": "输入元件操作"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Bilinear resize layer from",
    "local": "双线性调整图层大小"
  },
  {
    "origin": "https://github.com/cdmh/deeplab-public-ver2",
    "local": "https://github.com/cdmh/deeplab-public-ver2"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This class represents high-level API for keypoints models",
    "local": "此类表示关键点模型的高级API"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This interface class allows to build new Layers - are building blocks of networks",
    "local": "这个接口类允许构建新的层-是网络的构建块"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Layer factory allows to create instances of registered layers",
    "local": "图层工厂允许创建已注册图层的实例"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This class provides all data needed to initialize layer",
    "local": "此类提供初始化层所需的所有数据"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "LSTM recurrent layer",
    "local": "LSTM循环层"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This class is presented high-level API for neural networks",
    "local": "这个类是为神经网络提供的高级API"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This class allows to create and manipulate comprehensive artificial neural networks",
    "local": "这个类允许创建和操作全面的人工神经网络"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "\\( L_p \\) - normalization layer",
    "local": "\\( L_p \\) - 规范化层"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Adds extra values for specific axes",
    "local": "为特定轴添加额外值"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Resize input 4-dimensional blob by nearest neighbor or bilinear strategy",
    "local": "通过最近邻或双线性策略调整输入四维blob的大小"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Classical recurrent layer",
    "local": "经典回归层"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This class represents high-level API for segmentation models",
    "local": "此类表示分段模型的高级API"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for text detection networks",
    "local": "文本检测网络的基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This class represents high-level API for text detection DL networks compatible with DB model",
    "local": "此类表示与DB模型兼容的DL网络文本检测的高级API"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This class represents high-level API for text detection DL networks compatible with EAST model",
    "local": "此类表示与EAST模型兼容的文本检测DL网络的高级API"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This class represents high-level API for text recognition networks",
    "local": "这个类代表文本识别网络的高级API"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "A class to post process model predictions",
    "local": "后处理模型预测类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Structure to hold the details pertaining to a single bounding box",
    "local": "结构来保存有关单个边界框的详细信息"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "A class to upscale images via convolutional neural networks. The following four models are implemented:",
    "local": "一类利用卷积神经网络进行高尺度图像处理的算法.实现了以下四种模型："
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This is a C++ abstract class, it provides external user API to work with DPM",
    "local": "这是一个C++抽象类,它提供外部用户API来处理DPM."
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Abstract base class for all facemark models",
    "local": "所有facemark模型的抽象基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Optional parameter for fitting process",
    "local": "装配工艺可选参数"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "container for the facemark::getData function",
    "local": "facemark:：getData函数的容器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The model of AAM",
    "local": "空空导弹模型"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Abstract base class for trainable facemark models",
    "local": "可训练facemark模型的抽象基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Abstract base class for all face recognition models",
    "local": "所有人脸识别模型的抽象基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Minimum Average Correlation Energy Filter useful for authentication with (cancellable) biometrical features. (does not need many positives to train (10-50), and no negatives at all, also robust to noise/salting)",
    "local": "最小平均相关能量滤波器,用于(可取消的)生物特征认证(不需要太多的积极因素来训练(10-50),完全没有消极因素,对噪音/盐渍也很强)"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Abstract base class for all strategies of prediction result handling",
    "local": "所有预测结果处理策略的抽象基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Default predict collector",
    "local": "默认预测收集器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The FLANN nearest neighbor index class. This class is templated with the type of elements for which the index is built",
    "local": "FLANN最近邻索引类.此类是用为其生成索引的元素类型模板化的"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Structure for the Stereo operation initialization parameters",
    "local": "立体声操作初始化参数的结构"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This structure represents the basic parameters for the experimental PlaidML backend",
    "local": "此结构表示实验PlaidML后端的基本参数"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Structure for the Background Subtractor operation's initialization parameters",
    "local": "背景减法器操作的初始化参数的结构"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This structure represents a circle to draw",
    "local": "此结构表示要绘制的圆"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This structure specifies which FreeType font to use by",
    "local": "此结构指定要使用的FreeType字体"
  },
  {
    "origin": "primitives",
    "local": "原语"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This structure represents a text string to draw using FreeType renderer",
    "local": "此结构表示要使用FreeType呈现器绘制的文本字符串"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This structure represents an image to draw",
    "local": "此结构表示要绘制的图像"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This structure represents a line to draw",
    "local": "此结构表示要绘制的线"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This structure represents a mosaicing operation",
    "local": "此结构表示镶嵌操作"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This structure represents a polygon to draw",
    "local": "此结构表示要绘制的多边形"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This structure represents a rectangle to draw",
    "local": "此结构表示要绘制的矩形"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This structure represents a text string to draw",
    "local": "此结构表示要绘制的文本字符串"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This aggregate type represents all types which G-API can handle (via variant)",
    "local": "此聚合类型表示G-API可以处理的所有类型(通过variant)"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "A class to group async requests to cancel them in a single shot",
    "local": "一个类,用于对异步请求进行分组,以便在一次快照中取消它们"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "OpenCV's VideoCapture-based streaming source",
    "local": "OpenCV基于视频捕获的流媒体源"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Abstract streaming pipeline source",
    "local": "抽象流媒体管道源"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Special network type",
    "local": "特殊网络类型"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "A container class for heterogeneous kernel implementation collections and graph transformations",
    "local": "用于异构内核实现集合和图形转换的容器类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "A container class for network configurations. Similar to GKernelPackage.Use",
    "local": "用于网络配置的容器类.类似于GKernelPackage.使用"
  },
  {
    "origin": "to construct this object",
    "local": "构造此对象"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Structure for the Kalman filter's initialization parameters",
    "local": "卡尔曼滤波器初始参数的构造"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Cv::use_only() is a special combinator which hints G-API to use only kernels specified in",
    "local": "是一个特殊的组合符,它提示G-API只使用"
  },
  {
    "origin": "(and not to extend kernels available by default with that package)",
    "local": "(默认情况下不扩展该包提供的内核)"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Hierarchical Data Format version 5 interface",
    "local": "分层数据格式版本5接口"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Computes average hash value of the input image",
    "local": "计算输入图像的平均哈希值"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Image hash based on block mean",
    "local": "基于块均值的图像哈希算法"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Image hash based on color moments",
    "local": "基于颜色矩的图像哈希算法"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The base class for image hash algorithms",
    "local": "图像哈希算法的基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Marr-Hildreth Operator Based Hash, slowest but more discriminative",
    "local": "基于Marr-Hildreth算子的散列,速度最慢,但区别更大"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Image hash based on Radon transform",
    "local": "基于Radon变换的图像哈希算法"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Camera intrinsics",
    "local": "摄像机内部"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "KinectFusion implementation",
    "local": "KinectFusion实现"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Large Scale Dense Depth Fusion implementation",
    "local": "大规模密集深度融合的实现"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This class is used to track multiple objects using the specified tracker algorithm",
    "local": "此类用于使用指定的跟踪器算法跟踪多个对象"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base abstract class for the long-term Multi Object Trackers:",
    "local": "长期多对象跟踪器的基本抽象类："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Multi Object Tracker for TLD",
    "local": "TLD多目标跟踪器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base abstract class for the long-term tracker:",
    "local": "长期跟踪器的基本抽象类："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Boosting tracker",
    "local": "助推跟踪器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "CSRT tracker",
    "local": "CSRT跟踪器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "KCF (Kernelized Correlation Filter) tracker",
    "local": "核化相关滤波器跟踪器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Median Flow tracker",
    "local": "中值流量跟踪器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The MIL algorithm trains a classifier in an online manner to separate the object from the background",
    "local": "MIL算法在线训练分类器,将目标与背景分离"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "MOSSE (Minimum Output Sum of Squared Error) tracker",
    "local": "最小输出误差平方和跟踪器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "TLD (Tracking, learning and detection) tracker",
    "local": "跟踪、学习和检测跟踪器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class implements both functionalities for detection of lines and computation of their binary descriptor",
    "local": "类实现了检测行和计算其二进制描述符的功能"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "List of",
    "local": "列表"
  },
  {
    "origin": "parameters:",
    "local": "参数："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Furnishes all functionalities for querying a dataset provided by user or internal to class (that user must, anyway, populate) on the model of",
    "local": "提供了查询用户提供的数据集或类内部数据集的所有功能(无论如何,用户必须填充该数据集)"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "A class to represent a line",
    "local": "表示线的类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "that computes quantized gradient orientations from a color image",
    "local": "从彩色图像计算量化的梯度方向"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "that computes quantized surface normals from a dense depth map",
    "local": "从密集深度贴图计算量化曲面法线的"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Object detector using the LINE template matching algorithm with any set of modalities",
    "local": "物体检测器采用线模板匹配算法与任意一组模式匹配"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Discriminant feature described by its location and label",
    "local": "由位置和标签描述的判别特征"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Represents a successful template match",
    "local": "表示模板匹配成功"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Interface for modalities that plug into the LINE template matching representation",
    "local": "插入线模板匹配表示的模式接口"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Represents a modality operating over an image pyramid",
    "local": "表示在图像金字塔上运行的模态"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "feature with a score",
    "local": "有分数的特征"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Checker object",
    "local": "棋盘格对象"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "A class to find the positions of the ColorCharts in the image",
    "local": "一个用于查找图像中颜色图表位置的类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Checker draw",
    "local": "方格画"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Parameters for the detectMarker process:",
    "local": "detectMarker进程的参数："
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Artificial Neural Networks - Multi-Layer Perceptrons",
    "local": "人工神经网络多层感知器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Boosted tree classifier derived from",
    "local": "一种改进的树分类器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The class represents a single decision tree or a collection of decision trees",
    "local": "类表示单个决策树或决策树的集合"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The class represents a decision tree node",
    "local": "类表示决策树节点"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The class represents split in a decision tree",
    "local": "该类表示决策树中的拆分"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The class implements the Expectation Maximization algorithm",
    "local": "类实现了期望最大化算法"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The class implements K-Nearest Neighbors model",
    "local": "类实现了K近邻模型"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Implements Logistic Regression classifier",
    "local": "实现Logistic回归分类器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Bayes classifier for normally distributed data",
    "local": "正态分布数据的贝叶斯分类器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The structure represents the logarithmic grid range of statmodel parameters",
    "local": "该结构表示statmodel参数的对数网格范围"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The class implements the random forest predictor",
    "local": "该类实现了随机林预测器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This class declares example interface for system state used in simulated annealing optimization algorithm",
    "local": "此类为模拟退火优化算法中使用的系统状态声明示例接口"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for statistical models in OpenCV ML",
    "local": "opencvml中统计模型的基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Support Vector Machines",
    "local": "支持向量机"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Stochastic Gradient Descent",
    "local": "随机梯度下降法"
  },
  {
    "origin": "classifier",
    "local": "分级机"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class encapsulating training data",
    "local": "类封装训练数据"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class for multiple camera calibration that supports pinhole camera and omnidirection camera. For omnidirectional camera model, please refer to",
    "local": "类用于支持针孔相机和全向相机的多相机校准.全向相机型号请参考"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Wrapper for OpenGL Client-Side Vertex arrays",
    "local": "OpenGL客户端顶点数组的包装器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Smart pointer for OpenGL buffer object with reference counting",
    "local": "具有引用计数的OpenGL缓冲区对象的智能指针"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Smart pointer for OpenGL 2D texture memory with reference counting",
    "local": "具有引用计数的opengl2d纹理内存智能指针"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Fast dense optical flow computation based on robust local optical flow (RLOF) algorithms and sparse-to-dense interpolation scheme",
    "local": "基于鲁棒局部光流(RLOF)算法和稀疏到稠密插值的快速稠密光流计算"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "\"Dual TV L1\" Optical Flow",
    "local": "“双电视L1”光流"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class encapsulating matching parameters",
    "local": "类封装匹配参数"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class encapsulating training parameters",
    "local": "类封装训练参数"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class encapsulating training samples",
    "local": "类封装训练样本"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class for individual tree",
    "local": "单个树的类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "PCAFlow algorithm",
    "local": "PCAFlow算法"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This class can be used for imposing a learned prior on the resulting optical flow. Solution will be regularized according to this prior. You need to generate appropriate prior file with \"learn_prior.py\" script beforehand",
    "local": "该类可用于对产生的光流施加已学习的先验知识.解将根据这个先验规则化.您需要事先用“learn\\u prior.py”脚本生成适当的prior文件"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This is used store and set up the parameters of the robust local optical flow (RLOF) algoritm",
    "local": "这是用来存储和设置鲁棒局部光流(RLOF)算法的参数"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class used for calculation sparse optical flow and feature tracking with robust local optical flow (RLOF) algorithms",
    "local": "类用于计算稀疏光流和具有鲁棒局部光流(RLOF)算法的特征跟踪"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class implementing two-dimensional phase unwrapping based on",
    "local": "实现二维相位展开的类"
  },
  {
    "origin": "This algorithm belongs to the quality-guided phase unwrapping methods. First, it computes a reliability map from second differences between a pixel and its eight neighbours. Reliability values lie between 0 and 16*pi*pi. Then, this reliability map is used to compute the reliabilities of \"edges\". An edge is an entity defined by two pixels that are connected horizontally or vertically. Its reliability is found by adding the the reliabilities of the two pixels connected through it. Edges are sorted in a histogram based on their reliability values. This histogram is then used to unwrap pixels, starting from the highest quality pixel",
    "local": "该算法属于质量导引相位展开方法.首先,它从一个像素和它的八个邻居之间的第二个差异计算出一个可靠性图.可靠性值介于0和16*pi*pi之间.然后,利用该可靠性映射计算“边”的可靠性.边是由水平或垂直连接的两个像素定义的实体.通过将通过它连接的两个像素的可靠度相加,得到了它的可靠度.根据可靠性值在直方图中对边进行排序.然后使用此直方图从最高质量的像素开始展开像素"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Parameters of phaseUnwrapping constructor",
    "local": "PhaseUnrapping构造函数的参数"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Abstract base class for phase unwrapping",
    "local": "相位展开的抽象基类"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This class implements a very efficient and robust variant of the iterative closest point (",
    "local": "这个类实现了迭代最近点的一个非常有效和健壮的变体("
  },
  {
    "origin": ") algorithm. The task is to register a 3D model (or point cloud) against a set of noisy target data. The variants are put together by myself after certain tests. The task is to be able to match partial, noisy point clouds in cluttered scenes, quickly. You will find that my emphasis is on the performance, while retaining the accuracy. This implementation is based on Tolga Birdal's MATLAB implementation in here:",
    "local": ")算法.该任务是针对一组噪声目标数据注册三维模型(或点云).这些变体是经过一定的测试后由我自己组装起来的.任务是能够在杂乱的场景中快速匹配局部的、嘈杂的点云.你会发现,我的重点是性能,同时保持准确性.此实现基于Tolga Birdal的MATLAB实现,如下所示："
  },
  {
    "origin": "http://www.mathworks.com/matlabcentral/fileexchange/47152-icp-registration-using-efficient-variants-and-multi-resolution-scheme",
    "local": "http://www.mathworks.com/matlabcentral/fileexchange/47152-icp-registration-using-efficient-variants-and-multi-resolution-scheme"
  },
  {
    "origin": "The main contributions come from:",
    "local": "主要贡献来自："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class, allowing the storage of a pose. The data structure stores both the quaternions and the matrix forms. It supports IO functionality together with various helper methods to work with poses",
    "local": "类,允许存储姿势.数据结构存储四元数和矩阵形式.它支持IO功能以及各种辅助方法来处理姿势"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "When multiple poses (see",
    "local": "当出现多个姿势时(请参见"
  },
  {
    "origin": ") are grouped together (contribute to the same transformation) pose clusters occur. This class is a general container for such groups of poses. It is possible to store, load and perform IO on these poses",
    "local": ")组合在一起(有助于相同的变换)会出现姿势簇.此类是此类姿势组的通用容器.可以在这些姿势上存储、加载和执行IO"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class, allowing the load and matching 3D models. Typical Use:",
    "local": "类,允许加载和匹配三维模型.典型用途："
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "BRISQUE (Blind/Referenceless Image Spatial Quality Evaluator) is a No Reference Image Quality Assessment (NR-IQA) algorithm",
    "local": "BRISQUE(盲/无参考图像空间质量评价器)是一种无参考图像质量评价(NR-IQA)算法"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Full reference GMSD algorithm",
    "local": "全参考GMSD算法"
  },
  {
    "origin": "http://www4.comp.polyu.edu.hk/~cslzhang/IQA/GMSD/GMSD.htm",
    "local": "http://www4.comp.polyu.edu.hk/~cslzhang/IQA/GMSD/GMSD.htm"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Full reference mean square error algorithm",
    "local": "全参考均方误差算法"
  },
  {
    "origin": "https://en.wikipedia.org/wiki/Mean_squared_error",
    "local": "https://en.wikipedia.org/wiki/Mean_squared_error"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Full reference peak signal to noise ratio (PSNR) algorithm",
    "local": "全参考峰值信噪比(PSNR)算法"
  },
  {
    "origin": "https://en.wikipedia.org/wiki/Peak_signal-to-noise_ratio",
    "local": "https://en.wikipedia.org/wiki/Peak_signal-to-noise_ratio"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Full reference structural similarity algorithm",
    "local": "全参考结构相似算法"
  },
  {
    "origin": "https://en.wikipedia.org/wiki/Structural_similarity",
    "local": "https://en.wikipedia.org/wiki/Structural_similarity"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class for finding features points and corresponding 3D in world coordinate of a \"random\" pattern, which can be to be used in calibration. It is useful when pattern is partly occluded or only a part of pattern can be observed in multiple cameras calibration. The pattern can be generated by",
    "local": "类,用于在“随机”模式的世界坐标中查找特征点和相应的3D,可用于校准.在多摄像机标定中,当模式被部分遮挡或仅能观察到一部分模式时,该方法非常有用.模式可以通过以下方式生成："
  },
  {
    "origin": "class described in this file",
    "local": "此文件中描述的类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Wrapper around",
    "local": "包装"
  },
  {
    "origin": "function for uniform access",
    "local": "统一访问功能"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Abstract base class for stateful silhouette trackers",
    "local": "有状态轮廓跟踪器的抽象基类"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for modelling a",
    "local": "建模的基类"
  },
  {
    "origin": "between two images",
    "local": "在两个图像之间"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for modelling an algorithm for calculating a map",
    "local": "为计算地图的算法建模的基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Fast Self-tuning Background Subtraction",
    "local": "快速自校正背景减法"
  },
  {
    "origin": "from",
    "local": "从"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "algorithms based on [3] [3] Cheng, Ming-Ming, et al. \"BING: Binarized normed gradients for objectness estimation at 300fps.\" IEEE CVPR. 2014",
    "local": "基于[3][3]程明明等的算法.“BING:300fps目标度估计的二值化标准梯度”,IEEE CVPR.2014"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Fine Grained",
    "local": "细粒度"
  },
  {
    "origin": "approach from",
    "local": "接近"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Spectral Residual approach from",
    "local": "光谱残差法"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Intelligent Scissors image segmentation",
    "local": "智能剪刀图像分割"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class",
    "local": "基类"
  },
  {
    "origin": "declares a common API that would be used in a typical scene reconstruction scenario",
    "local": "声明将在典型场景重建场景中使用的公共API"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Data structure describing the camera model and its parameters",
    "local": "描述摄像机模型及其参数的数据结构"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Data structure describing the reconstruction options",
    "local": "描述重建选项的数据结构"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "class provides an interface with the Libmv Structure From Motion pipeline",
    "local": "类提供了一个与来自运动管道的Libmv结构的接口"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class containing the methods needed for Quasi Dense Stereo computation",
    "local": "类包含准稠密立体计算所需的方法"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class for computing stereo correspondence using the block matching algorithm, introduced and contributed to OpenCV by K. Konolige",
    "local": "类中使用块匹配算法计算立体对应关系,介绍并贡献给OpenCV的K.科诺里奇"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The class implements the modified H. Hirschmuller algorithm",
    "local": "类实现了修改后的H.赫氏算法"
  },
  {
    "origin": "that differs from the original one as follows:",
    "local": "与原来的不同之处如下："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Filters off small noise blobs (speckles) in the disparity map",
    "local": "滤除视差图中的小噪声点(斑点)"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class implementing the Gray-code pattern, based on",
    "local": "类实现格雷码模式,基于"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Parameters of",
    "local": "的参数"
  },
  {
    "origin": "constructor",
    "local": "建造师"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class implementing Fourier transform profilometry (FTP) , phase-shifting profilometry (PSP) and Fourier-assisted phase-shifting profilometry (FAPS) based on",
    "local": "类实现了傅里叶变换轮廓术(FTP)、相移轮廓术(PSP)和傅里叶辅助相移轮廓术(FAPS)"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Parameters of",
    "local": "的参数"
  },
  {
    "origin": "constructor",
    "local": "建造师"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Abstract base class for generating and decoding structured light patterns",
    "local": "用于生成和解码结构光模式的抽象基类"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for Super Resolution algorithms",
    "local": "超分辨率算法的基类"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for 1st and 2nd stages of Neumann and Matas scene text detection algorithm",
    "local": "Neumann和Matas场景文本检测算法第一和第二阶段的基类"
  },
  {
    "origin": ". :",
    "local": ". :"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "with the classifier is made a class",
    "local": "与分类器一起构成一个类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The",
    "local": "这个"
  },
  {
    "origin": "structure represents a class-specific Extremal Region (ER)",
    "local": "结构表示类特定的极值区域(ER)"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "class provides an interface for OCR using Beam Search algorithm",
    "local": "类提供了使用波束搜索算法进行OCR的接口"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Callback with the character classifier is made a class",
    "local": "用字符分类器回调是一个类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "class provides an interface for OCR using Hidden Markov Models",
    "local": "类提供了一个使用隐马尔可夫模型的OCR接口"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Callback with the character classifier is made a class",
    "local": "用字符分类器回调是一个类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "class provides the functionallity of segmented wordspotting. Given a predefined vocabulary , a DictNet is employed to select the most probable word given an input image",
    "local": "类提供分段单词识别的功能.给定一个预定义的词汇表,使用DictNet来选择给定输入图像的最可能的单词"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "class provides an interface with the tesseract-ocr API (v3.02.02) in C++",
    "local": "类提供了与C++中的TestSerAtOCR API(V3.02.02)的接口"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "An abstract class providing interface for text detection algorithms",
    "local": "为文本检测算法提供接口的抽象类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "class provides the functionallity of text bounding box detection. This class is representing to find bounding boxes of text words given an input image. This class uses OpenCV dnn module to load pre-trained model described in",
    "local": "类提供文本边框检测功能.这个类表示查找给定输入图像的文本单词的边界框.此类使用OpenCV dnn模块加载中描述的预训练模型"
  },
  {
    "origin": ". The original repository with the modified SSD Caffe version:",
    "local": ". 具有修改的SSD Caffe版本的原始存储库："
  },
  {
    "origin": "https://github.com/MhLiao/TextBoxes",
    "local": "https://github.com/MhLiao/TextBoxes"
  },
  {
    "origin": ". Model can be downloaded from",
    "local": ". 模型可从"
  },
  {
    "origin": "DropBox",
    "local": "升降箱"
  },
  {
    "origin": ". Modified .prototxt file with the model description can be found in",
    "local": ". 带有模型描述的修改过的.prototxt文件可以在中找到"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Manages memory block shared by muliple buffers",
    "local": "管理多个缓冲区共享的内存块"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "A simple scoped lock (RAII-style locking for exclusive/write access)",
    "local": "一个简单的作用域锁(用于独占/写访问的RAII样式锁)"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "An optional simple scoped lock (RAII-style locking for exclusive/write access)",
    "local": "一个可选的简单作用域锁(用于独占/写访问的RAII样式锁)"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "An optional shared scoped lock (RAII-style locking for shared/reader access)",
    "local": "可选的共享作用域锁(用于共享/读卡器访问的RAII样式锁)"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "A shared scoped lock (RAII-style locking for shared/reader access)",
    "local": "共享作用域锁(用于共享/读卡器访问的RAII样式锁)"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Describes the Fast Marching Method implementation",
    "local": "描述了快速行进法的实现"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for global 2D motion estimation methods which take frames as input",
    "local": "以帧为输入的全局二维运动估计方法的基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Describes a global 2D motion estimation method which uses keypoints detection and optical flow for matching",
    "local": "提出了一种基于关键点检测和光流匹配的全局二维运动估计方法"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for all global motion estimation methods",
    "local": "所有全局运动估计方法的基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Describes a global 2D motion estimation method which minimizes",
    "local": "描述了一种全局二维运动估计方法,该方法使"
  },
  {
    "origin": "error",
    "local": "错误"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Describes a robust RANSAC-based global 2D motion estimation method which minimizes",
    "local": "描述了一种鲁棒的基于RANSAC的全局二维运动估计方法"
  },
  {
    "origin": "error",
    "local": "错误"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Describes RANSAC method parameters",
    "local": "描述RANSAC方法参数"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This class wraps intrinsic parameters of a camera",
    "local": "此类包装摄影机的内部参数"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This class represents color in BGR order",
    "local": "此类按BGR顺序表示颜色"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This class represents a keyboard event",
    "local": "此类表示键盘事件"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This class wraps mesh attributes, and it can load a mesh from a ply file. :",
    "local": "此类包装网格属性,并可以从层文件加载网格："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This class represents a mouse event",
    "local": "此类表示鼠标事件"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "3D visualizer window. This class is implicitly shared",
    "local": "3D可视化工具窗口.此类是隐式共享的"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This 3D",
    "local": "这个3D"
  },
  {
    "origin": "defines an arrow",
    "local": "定义箭头"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This 3D",
    "local": "这个3D"
  },
  {
    "origin": "represents camera position in a scene by its axes or viewing frustum. :",
    "local": "通过轴或视锥表示摄影机在场景中的位置："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This 3D",
    "local": "这个3D"
  },
  {
    "origin": "defines a circle",
    "local": "定义圆"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Clouds",
    "local": "云"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This 3D",
    "local": "这个3D"
  },
  {
    "origin": "defines a collection of clouds. :",
    "local": "定义云的集合："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This 3D",
    "local": "这个3D"
  },
  {
    "origin": "represents normals of a point cloud. :",
    "local": "表示点云的法线："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This 3D",
    "local": "这个3D"
  },
  {
    "origin": "defines a cone. :",
    "local": "定义圆锥体："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Compound widgets",
    "local": "复合小部件"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This 3D",
    "local": "这个3D"
  },
  {
    "origin": "defines a cube",
    "local": "定义立方体"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This 3D",
    "local": "这个3D"
  },
  {
    "origin": "defines a cylinder. :",
    "local": "定义圆柱体："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This 3D",
    "local": "这个3D"
  },
  {
    "origin": "defines a grid. :",
    "local": "定义网格："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class of all widgets.",
    "local": "所有小部件的基类."
  },
  {
    "origin": "is implicitly shared",
    "local": "是隐式共享的"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class of all 2D widgets",
    "local": "所有2D小部件的基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class of all 3D widgets",
    "local": "所有3D小部件的基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This class is for users who want to develop their own widgets using VTK library API. :",
    "local": "该类适用于希望使用VTK库API开发自己的小部件的用户："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This 3D",
    "local": "这个3D"
  },
  {
    "origin": "represents an image in 3D space. :",
    "local": "表示三维空间中的图像："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This 2D",
    "local": "这个2D"
  },
  {
    "origin": "represents an image overlay. :",
    "local": "表示图像覆盖："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Simple widgets",
    "local": "简单的小部件"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Constructs a",
    "local": "构造"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This 3D",
    "local": "这个3D"
  },
  {
    "origin": "defines a finite plane",
    "local": "定义有限平面"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This 3D",
    "local": "这个3D"
  },
  {
    "origin": "defines a poly line. :",
    "local": "定义折线："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This 3D",
    "local": "这个3D"
  },
  {
    "origin": "defines a sphere. :",
    "local": "定义球体："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Text and image widgets",
    "local": "文本和图像小部件"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This 3D",
    "local": "这个3D"
  },
  {
    "origin": "represents 3D text. The text always faces the camera",
    "local": "表示三维文本.文本始终面向摄影机"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Trajectories",
    "local": "轨迹"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This 3D",
    "local": "这个3D"
  },
  {
    "origin": "represents a trajectory. :",
    "local": "表示轨迹："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This 3D",
    "local": "这个3D"
  },
  {
    "origin": "represents a trajectory using spheres and lines",
    "local": "表示使用球体和直线的轨迹"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This class allows to merge several widgets to single one",
    "local": "这个类允许将多个小部件合并为一个小部件"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "WeChat QRCode includes two CNN-based models: A object detection model and a super resolution model. Object detection model is applied to detect QRCode with the bounding box. super resolution model is applied to zoom in QRCode when it is small",
    "local": "微信QRCode包括两个基于CNN的模型：目标检测模型和超分辨率模型.采用目标检测模型,利用边界盒对QR码进行检测.采用超分辨率模型对小码进行放大"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class implementing affine adaptation for key points",
    "local": "类实现关键点的仿射自适应"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class implementing",
    "local": "类实现"
  },
  {
    "origin": "(Boosted Efficient Binary Local Image Descriptor), described in",
    "local": "(有效的二进制局部图像描述符),如中所述"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class implementing",
    "local": "类实现"
  },
  {
    "origin": "(Learning Image Descriptors with Boosting), described in",
    "local": "(使用Boosting学习图像描述符),如中所述"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class for computing BRIEF descriptors described in",
    "local": "用于计算中描述的简短描述符的类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class implementing",
    "local": "类实现"
  },
  {
    "origin": "descriptor, described in",
    "local": "描述符,如中所述"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Elliptic region around an interest point",
    "local": "兴趣点周围的椭圆区域"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class implementing the",
    "local": "类实现"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "Fast Retina Keypoint",
    "local": "快速视网膜关键点"
  },
  {
    "origin": ") keypoint descriptor, described in",
    "local": ")关键点描述符,如中所述"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class implementing the Harris-Laplace feature detector as described in",
    "local": "类实现Harris-Laplace特征检测器,如中所述"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class implementing the locally uniform comparison image descriptor, described in",
    "local": "类实现本地统一比较图像描述符,如中所述"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class implementing the MSD (",
    "local": "实现MSD的类("
  },
  {
    "origin": "Maximal Self-Dissimilarity",
    "local": "最大自相异性"
  },
  {
    "origin": ") keypoint detector, described in",
    "local": ")关键点探测器,如中所述"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class implementing PCT (position-color-texture) signature extraction as described in",
    "local": "类实现PCT(位置颜色纹理)签名提取,如中所述"
  },
  {
    "origin": ". The algorithm is divided to a feature sampler and a clusterizer. Feature sampler produces samples at given set of coordinates. Clusterizer then produces clusters of these samples using k-means algorithm. Resulting set of clusters is the signature of the input image",
    "local": ". 该算法分为特征采样器和聚类器.特征采样器在给定的坐标集上生成样本.聚类器然后使用k-均值算法生成这些样本的聚类.得到的聚类集是输入图像的特征"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class implementing Signature Quadratic Form Distance (SQFD)",
    "local": "实现签名二次型距离(SQFD)的类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The class implements the keypoint detector introduced by",
    "local": "类实现了"
  },
  {
    "origin": ", synonym of",
    "local": ",同义词"
  },
  {
    "origin": ". :",
    "local": ". :"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class for extracting Speeded Up Robust Features from an image",
    "local": "用于从图像中提取快速鲁棒特征的类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class implementing the Tree Based Morse Regions (",
    "local": "类实现基于树的Morse区域("
  },
  {
    "origin": ") as described in",
    "local": ")如中所述"
  },
  {
    "origin": "extended with scaled extraction ability",
    "local": "扩展了按比例提取能力"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class implementing",
    "local": "类实现"
  },
  {
    "origin": "(Oxford Visual Geometry Group) descriptor trained end to end using \"Descriptor Learning Using Convex Optimisation\" (DLCO) aparatus described in",
    "local": "(牛津视觉几何组)描述符训练端到端使用“描述符学习使用凸优化”(DLCO)aparatus描述"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Graph Based Segmentation",
    "local": "基于图的分割"
  },
  {
    "origin": ". The class implements the algorithm described in",
    "local": ". 类实现了中描述的算法"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Selective search segmentation algorithm The class implements the algorithm described in",
    "local": "选择性搜索分割算法该类实现了中描述的算法"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Strategie for the selective search segmentation algorithm The class implements a generic stragery for the algorithm described in",
    "local": "Strategie for the selective search segmentation algorithm该类为中描述的算法实现了通用策略"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Color-based strategy for the selective search segmentation algorithm The class is implemented from the algorithm described in",
    "local": "基于颜色策略的选择性搜索分割算法类是从中描述的算法实现的"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Fill-based strategy for the selective search segmentation algorithm The class is implemented from the algorithm described in",
    "local": "基于填充策略的选择性搜索分割算法类是从中描述的算法实现的"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Regroup multiple strategies for the selective search segmentation algorithm",
    "local": "选择搜索分割算法的多策略重组"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Size-based strategy for the selective search segmentation algorithm The class is implemented from the algorithm described in",
    "local": "基于大小策略的选择性搜索分割算法类是从中描述的算法实现的"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Texture-based strategy for the selective search segmentation algorithm The class is implemented from the algorithm described in",
    "local": "基于纹理策略的选择性搜索分割算法类是从中描述的算法实现的"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Interface for Adaptive Manifold Filter realizations",
    "local": "自适应流形滤波器实现接口"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class for",
    "local": "课程"
  },
  {
    "origin": "algorithms.",
    "local": "算法."
  },
  {
    "origin": "match two contours \\( z_a \\) and \\( z_b \\) minimizing distance",
    "local": "match two contours \\( z_a \\) and \\( z_b \\) minimizing distance"
  },
  {
    "origin": "\\[ d(z_a,z_b)=\\sum (a_n - s b_n e^{j(n \\alpha +\\phi )})^2 \\]",
    "local": "\\[d(z\\u a,z\\u b)=\\sum(a\\u n-s b\\u n e^{j(n\\alpha+\\phi)})^2\\]"
  },
  {
    "origin": "where \\( a_n \\) and \\( b_n \\) are Fourier descriptors of \\( z_a \\) and \\( z_b \\) and s is a scaling factor and \\( \\phi \\) is angle rotation and \\( \\alpha \\) is starting point factor adjustement",
    "local": "其中 \\( a_n \\) 和 \\( b_n \\) 是 \\( z_a \\) 和 \\( z_b \\) 的傅里叶描述子,s是比例因子, \\( \\phi \\) 是角度旋转, \\( \\alpha \\) 是起点因子调整"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Main interface for all disparity map filters",
    "local": "所有视差图过滤器的主界面"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Disparity map filter based on Weighted Least Squares filter (in form of Fast Global Smoother that is a lot faster than traditional Weighted Least Squares filter implementations) and optional use of left-right-consistency-based confidence to refine the results in half-occlusions and uniform areas",
    "local": "基于加权最小二乘滤波器的视差图滤波器(以比传统加权最小二乘滤波器实现快得多的快速全局平滑器的形式)和基于左右一致性的置信度的可选使用来细化半遮挡和均匀区域中的结果"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Interface for realizations of Domain Transform filter",
    "local": "域变换滤波器的实现接口"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Sparse match interpolation algorithm based on modified locally-weighted affine estimator from",
    "local": "基于改进局部加权仿射估计的稀疏匹配插值算法"
  },
  {
    "origin": "and Fast Global Smoother as post-processing filter",
    "local": "作为后处理滤波器的快速全局平滑算法"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class implementing",
    "local": "类实现"
  },
  {
    "origin": "algorithm from",
    "local": "算法来自"
  },
  {
    "origin": ":",
    "local": ":"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class implementing the ED (",
    "local": "实现ED的类("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": ", EDLines",
    "local": ",编辑行"
  },
  {
    "origin": ", EDPF",
    "local": ",EDPF公司"
  },
  {
    "origin": "and EDCircles",
    "local": "和EDCircles"
  },
  {
    "origin": "algorithms",
    "local": "算法"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Interface for implementations of Fast Bilateral Solver",
    "local": "快速双边求解器的实现接口"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Interface for implementations of Fast Global Smoother filter",
    "local": "快速全局平滑滤波器的实现接口"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class implementing the FLD (Fast Line Detector) algorithm described in",
    "local": "类实现中描述的FLD(快速行检测器)算法"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Interface for realizations of Guided Filter",
    "local": "引导滤波器的实现接口"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Sparse match interpolation algorithm based on modified piecewise locally-weighted affine estimator called Robust Interpolation method of Correspondences or RIC from",
    "local": "基于改进的分段局部加权仿射估计的稀疏匹配插值算法,称为对应的鲁棒插值法"
  },
  {
    "origin": "and Variational and Fast Global Smoother as post-processing filter. The",
    "local": "变分快速全局平滑器作为后处理滤波器.这个"
  },
  {
    "origin": "is a extension of the",
    "local": "是"
  },
  {
    "origin": ". Main concept of this extension is an piece-wise affine model based on over-segmentation via SLIC superpixel estimation. The method contains an efficient propagation mechanism to estimate among the pieces-wise models",
    "local": ". 该扩展的主要概念是基于SLIC超像素估计的过分割分段仿射模型.该方法包含了一种有效的传播机制,可以在分段模型之间进行估计"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Applies Ridge Detection Filter to an input image. Implements Ridge detection similar to the one in",
    "local": "对输入图像应用脊线检测滤波器.实现类似于中的脊线检测"
  },
  {
    "origin": "Mathematica",
    "local": "数学"
  },
  {
    "origin": "using the eigen values from the Hessian Matrix of the input image using Sobel Derivatives. Additional refinement can be done using Skeletonization and Binarization. Adapted from",
    "local": "利用Sobel导数从输入图像的Hessian矩阵中提取特征值.可以使用骨架化和二值化进行额外的细化.改编自"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Main interface for all filters, that take sparse matches as an input and produce a dense per-pixel matching (optical flow) as an output",
    "local": "所有滤波器的主接口,以稀疏匹配作为输入,并产生密集的每像素匹配(光流)作为输出"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class implementing edge detection algorithm from",
    "local": "类实现边缘检测算法"
  },
  {
    "origin": ":",
    "local": ":"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class implementing the LSC (Linear Spectral Clustering) superpixels algorithm described in",
    "local": "类实现中描述的LSC(线性谱聚类)超像素算法"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class implementing the SEEDS (Superpixels Extracted via Energy-Driven Sampling) superpixels algorithm described in",
    "local": "类实现中描述的种子(通过能量驱动采样提取的超级像素)超级像素算法"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class implementing the SLIC (Simple Linear Iterative Clustering) superpixels algorithm described in",
    "local": "类实现中描述的SLIC(简单线性迭代聚类)超级像素算法"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "WaldBoost detector",
    "local": "沃尔德boost探测器"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Gray-world white balance algorithm",
    "local": "灰色世界白平衡算法"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "More sophisticated learning-based automatic white balance algorithm",
    "local": "更复杂的基于学习的自动白平衡算法"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "A simple white balance algorithm that works by independently stretching each of the input image channels to the specified range. For increased robustness it ignores the top and bottom \\(p\\%\\) of pixel values",
    "local": "一种简单的白平衡算法,通过独立地将每个输入图像通道拉伸到指定的范围来工作.为了增强鲁棒性,它忽略了像素值的顶部和底部\\(p\\%\\)"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This algorithm decomposes image into two layers: base layer and detail layer using bilateral filter and compresses contrast of the base layer thus preserving all the details",
    "local": "该算法利用双边滤波将图像分解为两层：基础层和细节层,并对基础层的对比度进行压缩,保留了所有细节"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The base class for auto white balance algorithms",
    "local": "自动白平衡算法的基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This is the proxy class for passing read-only input arrays into OpenCV functions",
    "local": "这是一个代理类,用于将只读输入数组传递到OpenCV函数中"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This type is very similar to InputArray except that it is used for input/output and output function parameters",
    "local": "此类型与InputArray非常相似,只是用于输入/输出和输出函数参数"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Affine transform",
    "local": "仿射变换"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class for implementing the wrapper which makes detectors and extractors to be affine invariant, described as ASIFT in",
    "local": "类用于实现包装器,该包装器使检测器和提取器具有仿射不变性,在中描述为ASIFT"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Wrapper class for the OpenCV Affine Transformation algorithm. :",
    "local": "OpenCV仿射变换算法的包装器类："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Affine warper factory class",
    "local": "仿射整经机工厂级"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Wrapping class for feature detection using the AGAST method. :",
    "local": "使用AGAST方法包装用于特征检测的类："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class implementing the",
    "local": "类实现"
  },
  {
    "origin": "keypoint detector and descriptor extractor, described in",
    "local": "关键点检测器和描述符提取器,如中所述"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This is a base class for all more or less complex algorithms in OpenCV",
    "local": "这是OpenCV中所有或多或少复杂算法的基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The base class for algorithms that align images of the same scene with different exposures",
    "local": "用于将同一场景的图像与不同曝光对齐的算法的基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This algorithm converts images to median threshold bitmaps (1 for pixels brighter than median luminance and 0 otherwise) and than aligns the resulting bitmaps using bit operations",
    "local": "此算法将图像转换为中值阈值位图(亮度大于中值的像素为1,亮度大于中值的像素为0),然后使用位操作对齐生成的位图"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Returns result of asynchronous operations",
    "local": "返回异步操作的结果"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Provides result of asynchronous operations",
    "local": "提供异步操作的结果"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Automatically Allocated Buffer Class",
    "local": "自动分配的缓冲区类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for background/foreground segmentation. :",
    "local": "用于背景/前景分割的基类："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "K-nearest neighbours - based Background/Foreground Segmentation",
    "local": "基于K近邻的背景/前景分割"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Gaussian Mixture-based Background/Foreground Segmentation",
    "local": "基于高斯混合的背景/前景分割"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Brute-force descriptor matcher",
    "local": "蛮力描述符匹配器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class to compute an image descriptor using the",
    "local": "类来使用"
  },
  {
    "origin": "bag of visual words",
    "local": "视觉文字袋"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Kmeans -based class to train visual vocabulary using the",
    "local": "基于Kmeans的类使用"
  },
  {
    "origin": "bag of visual words",
    "local": "视觉文字袋"
  },
  {
    "origin": "approach. :",
    "local": "方法："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Abstract base class for training the",
    "local": "训练的抽象基类"
  },
  {
    "origin": "bag of visual words",
    "local": "视觉文字袋"
  },
  {
    "origin": "vocabulary from a set of descriptors",
    "local": "一组描述符中的描述词汇表"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class implementing the",
    "local": "类实现"
  },
  {
    "origin": "keypoint detector and descriptor extractor, described in",
    "local": "关键点检测器和描述符提取器,如中所述"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The base class for camera response calibration algorithms",
    "local": "摄像机响应标定算法的基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Inverse camera response function is extracted for each brightness value by minimizing an objective function as linear system. Objective function is constructed using pixel values on the same position in all images, extra term is added to make the result smoother",
    "local": "通过将目标函数最小化为线性系统,为每个亮度值提取逆相机响应函数.利用所有图像中同一位置的像素值构造目标函数,并加入额外的项使结果更加平滑"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Inverse camera response function is extracted for each brightness value by minimizing an objective function as linear system. This algorithm uses all image pixels",
    "local": "通过将目标函数最小化为线性系统,为每个亮度值提取逆相机响应函数.此算法使用所有图像像素"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Cascade classifier class for object detection",
    "local": "用于目标检测的级联分类器类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "An Chi based cost extraction. :",
    "local": "基于Chi的成本提取："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for Contrast Limited Adaptive Histogram Equalization",
    "local": "对比度受限的自适应直方图均衡化基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Designed for command line parsing",
    "local": "为命令行分析而设计"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "A complex number class",
    "local": "复数类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This class is used to perform the non-linear non-constrained minimization of a function with known gradient,",
    "local": "此类用于对具有已知梯度的函数执行非线性无约束极小化,"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Cylindrical warper factory class",
    "local": "圆柱形整经机工厂级"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "A helper class for",
    "local": "的助手类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Template \"trait\" class for OpenCV primitive data types",
    "local": "OpenCV基元数据类型的模板“trait”类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Abstract base class for matching keypoint descriptors",
    "local": "匹配关键点描述符的抽象基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Struct for detection region of interest (ROI)",
    "local": "感兴趣区域检测结构"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "DIS optical flow algorithm",
    "local": "DIS光流算法"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class for matching keypoint descriptors",
    "local": "用于匹配关键点描述符的类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This class is used to perform the non-linear non-constrained minimization of a function,",
    "local": "此类用于执行函数的非线性非约束最小化,"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "An EMD based cost extraction. :",
    "local": "基于EMD的成本提取："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "An EMD-L1 based cost extraction. :",
    "local": "基于EMD-L1的成本提取："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class passed to an error",
    "local": "类传递给错误"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class computing a dense optical flow using the Gunnar Farneback's algorithm",
    "local": "用Gunnar-Farneback算法计算稠密光流"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Wrapping class for feature detection using the FAST method. :",
    "local": "使用快速方法进行特征检测的包装类："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Abstract base class for 2D image feature detectors and descriptor extractors",
    "local": "二维图像特征检测器和描述符提取器的抽象基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "File Storage",
    "local": "文件存储"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Used to iterate through sequences and mappings",
    "local": "用于遍历序列和映射"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "XML/YAML/JSON file storage class that encapsulates all the information necessary for writing or reading data to/from a file",
    "local": "XML/YAML/JSON文件存储类,它封装了在文件中写入或读取数据所需的所有信息"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Flann-based descriptor matcher",
    "local": "基于Flann的描述符匹配器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Represents an arbitrary compilation argument",
    "local": "表示任意编译参数"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Represents a compiled computation (graph). Can only be used with image / data formats &amp; resolutions it was compiled for, with some exceptions",
    "local": "表示已编译的计算(图形).只能与图像/数据格式一起使用&amp;除了一些例外,它是为决议而编制的"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "class represents a captured computation graph.",
    "local": "类表示捕获的计算图."
  },
  {
    "origin": "objects form boundaries for expression code user writes with G-API, allowing to compile and execute it",
    "local": "对象为用户使用G-API编写的表达式代码形成边界,允许编译和执行它"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This class is a typed wrapper over a regular",
    "local": "此类是正则表达式上的类型化包装器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Finds arbitrary template in the grayscale image using Generalized Hough Transform",
    "local": "利用广义Hough变换在灰度图像中寻找任意模板"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Finds arbitrary template in the grayscale image using Generalized Hough Transform",
    "local": "利用广义Hough变换在灰度图像中寻找任意模板"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Finds arbitrary template in the grayscale image using Generalized Hough Transform",
    "local": "利用广义Hough变换在灰度图像中寻找任意模板"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This structure allows to control the output image region which Fluid backend will produce in the graph",
    "local": "此结构允许控制流体后端将在图形中生成的输出图像区域"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This structure allows to customize the way how Fluid executes parallel regions",
    "local": "此结构允许自定义流体执行平行区域的方式"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This structure forces Fluid backend to generate multiple parallel output regions in the graph. These regions execute in parallel",
    "local": "此结构强制Fluid backend在图中生成多个并行输出区域.这些区域并行执行"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Wrapping class for feature detection using the goodFeaturesToTrack function. :",
    "local": "使用goodFeaturesToTrack函数包装用于特征检测的类："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Ask G-API to dump compiled graph in Graphviz format under the given file name",
    "local": "要求G-API在给定的文件名下以Graphviz格式转储编译的图形"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Represents a computation (graph) compiled for streaming",
    "local": "表示为流式处理编译的计算(图形)"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "A simple Hausdorff distance measure between shapes defined by contours",
    "local": "由轮廓定义的形状之间的简单Hausdorff距离度量"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Abstract base class for histogram cost algorithms",
    "local": "直方图代价算法的抽象基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Implementation of HOG (Histogram of Oriented Gradients) descriptor and object detector",
    "local": "HOG(Histogram of Oriented Gradients)描述子和目标检测器的实现"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Kalman filter class",
    "local": "卡尔曼滤波类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class implementing the",
    "local": "类实现"
  },
  {
    "origin": "keypoint detector and descriptor extractor, described in",
    "local": "关键点检测器和描述符提取器,如中所述"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Data structure for salient point detectors",
    "local": "凸点探测器的数据结构"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "A class filters a vector of keypoints",
    "local": "类过滤关键点向量"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Linear Discriminant Analysis",
    "local": "线性判别分析"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Line iterator",
    "local": "行迭代器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Line segment detector class",
    "local": "线段检测器类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N-dimensional dense array class",
    "local": "N维密集数组类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Template matrix class derived from",
    "local": "模板矩阵类派生自"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Custom array allocator",
    "local": "自定义数组分配器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Comma-separated Matrix Initializer",
    "local": "逗号分隔矩阵初始值设定项"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Matrix read-only iterator",
    "local": "矩阵只读迭代器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Matrix expression representation",
    "local": "矩阵表达式"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Matrix read-write iterator",
    "local": "矩阵读写迭代器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Template class for small matrices whose type and size are known at compilation time",
    "local": "小矩阵的模板类,其类型和大小在编译时已知"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Comma-separated Matrix Initializer",
    "local": "逗号分隔矩阵初始值设定项"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The resulting HDR image is calculated as weighted average of the exposures considering exposure values and camera response",
    "local": "将得到的HDR图像计算为考虑曝光值和相机响应的曝光的加权平均值"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The base class algorithms that can merge exposure sequence to a single image",
    "local": "可以将曝光序列合并到单个图像的基类算法"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Pixels are weighted using contrast, saturation and well-exposedness measures, than images are combined using laplacian pyramids",
    "local": "像素加权使用对比度,饱和度和曝光度的措施,而不是图像结合使用拉普拉斯金字塔"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The resulting HDR image is calculated as weighted average of the exposures considering exposure values and camera response",
    "local": "将得到的HDR图像计算为考虑曝光值和相机响应的曝光的加权平均值"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Basic interface for all solvers",
    "local": "所有解算器的基本接口"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Represents function being optimized",
    "local": "表示正在优化的函数"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Struct returned by",
    "local": "返回的结构"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Maximally stable extremal region extractor",
    "local": "极大稳定极值区域抽取器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N-ary multi-dimensional array iterator",
    "local": "N元多维迭代器数组"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "A norm based cost extraction. :",
    "local": "基于标准的成本提取："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class implementing the",
    "local": "类实现"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "oriented BRIEF",
    "local": "定向简报"
  },
  {
    "origin": ") keypoint detector and descriptor extractor",
    "local": ")关键点检测器和描述符提取器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for parallel data processors",
    "local": "并行数据处理器的基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Principal Component Analysis",
    "local": "主成分分析"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Plane warper factory class",
    "local": "整经机工厂级"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Template class for 3D points specified by its coordinates",
    "local": "由其坐标指定的三维点的模板类"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Template class for 2D points specified by its coordinates",
    "local": "由其坐标指定的二维点的模板类"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "available only for Qt. See",
    "local": "仅适用于Qt.看到了吗"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Template class specifying a continuous subsequence (slice) of a sequence",
    "local": "指定序列的连续子序列(切片)的模板类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Template class for 2D rectangles",
    "local": "二维矩形的模板类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Random Number Generator",
    "local": "随机数发生器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Mersenne Twister random number generator",
    "local": "梅森捻线机随机数发生器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The class represents rotated (i.e. not up-right) rectangles on a plane",
    "local": "该类表示平面上的旋转(即不向上向右)矩形"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Template class for a 4-element vector derived from",
    "local": "派生自的4元素向量的模板类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Implementation of the Shape Context descriptor and matching algorithm",
    "local": "形状上下文描述符及其匹配算法的实现"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Abstract base class for shape distance algorithms",
    "local": "形状距离算法的抽象基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Abstract base class for shape transformation algorithms",
    "local": "形状变换算法的抽象基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class for extracting keypoints and computing descriptors using the Scale Invariant Feature Transform (",
    "local": "类用于提取关键点和使用比例不变特征变换计算描述符("
  },
  {
    "origin": ") algorithm by D. Lowe",
    "local": ")D.洛"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class for extracting blobs from an image. :",
    "local": "用于从图像中提取斑点的类："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Template class for specifying the size of an image or rectangle",
    "local": "用于指定图像或矩形大小的模板类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The class",
    "local": "班级"
  },
  {
    "origin": "represents multi-dimensional sparse numerical arrays",
    "local": "表示多维稀疏数值数组"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Sparse matrix header",
    "local": "稀疏矩阵头"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Sparse matrix node - element of a hash table",
    "local": "稀疏矩阵节点-哈希表的元素"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Template sparse n-dimensional array class derived from",
    "local": "模板稀疏n维数组类派生自"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Read-Only Sparse Matrix Iterator",
    "local": "只读稀疏矩阵迭代器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Template Read-Only Sparse Matrix Iterator Class",
    "local": "模板只读稀疏矩阵迭代器类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Read-write Sparse Matrix Iterator",
    "local": "读写稀疏矩阵迭代器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Template Read-Write Sparse Matrix Iterator Class",
    "local": "模板读写稀疏矩阵迭代器类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base interface for sparse optical flow algorithms",
    "local": "稀疏光流算法的基本接口"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class used for calculating a sparse optical flow",
    "local": "用于计算稀疏光流的类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Spherical warper factory class",
    "local": "球形整经机工厂级"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class for computing stereo correspondence using the block matching algorithm, introduced and contributed to OpenCV by K. Konolige",
    "local": "类中使用块匹配算法计算立体对应关系,介绍并贡献给OpenCV的K.科诺里奇"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The base class for stereo correspondence algorithms",
    "local": "立体匹配算法的基类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The class implements the modified H. Hirschmuller algorithm",
    "local": "类实现了修改后的H.赫氏算法"
  },
  {
    "origin": "that differs from the original one as follows:",
    "local": "与原来的不同之处如下："
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "High level image stitcher",
    "local": "高级图像缝合器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Singular Value Decomposition",
    "local": "奇异值分解"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The class defining termination criteria for iterative algorithms",
    "local": "定义迭代算法终止准则的类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Definition of the transformation",
    "local": "变换的定义"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class to measure passing time",
    "local": "测量通过时间的类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Simple TLS data class",
    "local": "简单TLS数据类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "TLS data accumulator with gathering methods",
    "local": "具有采集方法的TLS数据累加器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base class for tonemapping algorithms - tools that are used to map HDR image to 8-bit range",
    "local": "色调映射算法的基类-用于将HDR图像映射到8位范围的工具"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Adaptive logarithmic mapping is a fast global tonemapping algorithm that scales the image in logarithmic domain",
    "local": "自适应对数映射是一种快速的全局色调映射算法,它在对数域内对图像进行缩放"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This algorithm transforms image to contrast using gradients on all levels of gaussian pyramid, transforms contrast values to HVS response and scales the response. After this the image is reconstructed from new contrast values",
    "local": "该算法利用高斯金字塔的各个层次上的梯度将图像转化为对比度,将对比度值转化为HVS响应,并对响应进行缩放.之后,根据新的对比度值重建图像"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "This is a global tonemapping operator that models human visual system",
    "local": "这是一个模拟人类视觉系统的全局色调映射操作符"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Base abstract class for the long-term tracker",
    "local": "长期跟踪器的基抽象类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "CSRT tracker",
    "local": "CSRT跟踪器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "GOTURN (Generic Object Tracking Using Regression Networks) tracker",
    "local": "GOTURN(使用回归网络的通用对象跟踪)跟踪器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "KCF (Kernelized Correlation Filter) tracker",
    "local": "核化相关滤波器跟踪器"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "The MIL algorithm trains a classifier in an online manner to separate the object from the background",
    "local": "MIL算法在线训练分类器,将目标与背景分离"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Variational optical flow refinement",
    "local": "变分光流精化"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Template class for short numerical vectors, a partial case of",
    "local": "短数值向量的模板类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Comma-separated",
    "local": "逗号分隔"
  },
  {
    "origin": "Initializer",
    "local": "初始值设定项"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Class for video capturing from video files, image sequences or cameras",
    "local": "用于从视频文件、图像序列或照相机捕获视频的类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Video writer class",
    "local": "视频编写器类"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Image warper factories base class",
    "local": "图像整经机工厂基类"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Optional information about a location in Code",
    "local": "代码中有关位置的可选信息"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "RAII-class to call",
    "local": "要呼叫的RAII类"
  },
  {
    "origin": "in it's dtor",
    "local": "在这里是dtor"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "N",
    "local": "N"
  },
  {
    "origin": "std",
    "local": "std"
  },
  {
    "origin": "STL namespace",
    "local": "STL命名空间"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Dummy structure storing DFT/DCT context",
    "local": "存储DFT/DCT上下文的虚拟结构"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Dummy structure storing filtering context",
    "local": "存储过滤上下文的虚拟结构"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Model and solver parameters",
    "local": "模型和解算器参数"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Struct, holding a node in the hashtable",
    "local": "结构,在哈希表中保留一个节点"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:49 for OpenCV by &#160;",
    "local": "2021年4月2日星期五11:36:49为OpenCV生成, 已翻译  zsz"
  }
]