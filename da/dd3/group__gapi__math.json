[
  {
    "origin": "OpenCV: Graph API: Math operations",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "Graph API: Math operations",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;src1, const",
    "local": ""
  },
  {
    "origin": "&amp;src2, int ddepth=-1)",
    "local": ""
  },
  {
    "origin": "Calculates the per-element sum of two matrices.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;src1, const",
    "local": ""
  },
  {
    "origin": "&amp;c, int ddepth=-1)",
    "local": ""
  },
  {
    "origin": "Calculates the per-element sum of matrix and given scalar.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;c, const",
    "local": ""
  },
  {
    "origin": "&amp;src1, int ddepth=-1)",
    "local": ""
  },
  {
    "origin": "std::tuple&lt;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;x, const",
    "local": ""
  },
  {
    "origin": "&amp;y, bool angleInDegrees=false)",
    "local": ""
  },
  {
    "origin": "Calculates the magnitude and angle of 2D vectors.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;src1, const",
    "local": ""
  },
  {
    "origin": "&amp;src2, double scale, int ddepth=-1)",
    "local": ""
  },
  {
    "origin": "Performs per-element division of two matrices.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;src, const",
    "local": ""
  },
  {
    "origin": "&amp;divisor, double scale, int ddepth=-1)",
    "local": ""
  },
  {
    "origin": "Divides matrix by scalar.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;divident, const",
    "local": ""
  },
  {
    "origin": "&amp;src, double scale, int ddepth=-1)",
    "local": ""
  },
  {
    "origin": "Divides scalar by matrix.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;src, const",
    "local": ""
  },
  {
    "origin": "&amp;mask)",
    "local": ""
  },
  {
    "origin": "Applies a mask to a matrix.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;src)",
    "local": ""
  },
  {
    "origin": "Calculates an average (mean) of matrix elements.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;src1, const",
    "local": ""
  },
  {
    "origin": "&amp;src2, double scale=1.0, int ddepth=-1)",
    "local": ""
  },
  {
    "origin": "Calculates the per-element scaled product of two matrices.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;src, double multiplier, int ddepth=-1)",
    "local": ""
  },
  {
    "origin": "Multiplies matrix by scalar.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;src, const",
    "local": ""
  },
  {
    "origin": "&amp;multiplier, int ddepth=-1)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;multiplier, const",
    "local": ""
  },
  {
    "origin": "&amp;src, int ddepth=-1)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;x, const",
    "local": ""
  },
  {
    "origin": "&amp;y, bool angleInDegrees=false)",
    "local": ""
  },
  {
    "origin": "Calculates the rotation angle of 2D vectors.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "std::tuple&lt;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ", const",
    "local": ""
  },
  {
    "origin": "&amp;angle, bool angleInDegrees=false)",
    "local": ""
  },
  {
    "origin": "Calculates x and y coordinates of 2D vectors from their magnitude and angle.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;src)",
    "local": ""
  },
  {
    "origin": "Calculates a square root of array elements.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;src1, const",
    "local": ""
  },
  {
    "origin": "&amp;src2, int ddepth=-1)",
    "local": ""
  },
  {
    "origin": "Calculates the per-element difference between two matrices.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;src, const",
    "local": ""
  },
  {
    "origin": "&amp;c, int ddepth=-1)",
    "local": ""
  },
  {
    "origin": "Calculates the per-element difference between matrix and given scalar.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;c, const",
    "local": ""
  },
  {
    "origin": "&amp;src, int ddepth=-1)",
    "local": ""
  },
  {
    "origin": "Calculates the per-element difference between given scalar and the matrix.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Function Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "add()",
    "local": ""
  },
  {
    "origin": "cv::gapi::add",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "src1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "src2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "ddepth",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.gapi.add(",
    "local": ""
  },
  {
    "origin": "src1, src2[, ddepth]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Calculates the per-element sum of two matrices.",
    "local": ""
  },
  {
    "origin": "The function add calculates sum of two matrices of the same size and the same number of channels:",
    "local": ""
  },
  {
    "origin": "\\[\\texttt{dst}(I) = \\texttt{saturate} ( \\texttt{src1}(I) + \\texttt{src2}(I)) \\quad \\texttt{if mask}(I) \\ne0\\]",
    "local": ""
  },
  {
    "origin": "The function can be replaced with matrix expressions:",
    "local": ""
  },
  {
    "origin": "\\[\\texttt{dst} = \\texttt{src1} + \\texttt{src2}\\]",
    "local": ""
  },
  {
    "origin": "The input matrices and the output matrix can all have the same or different depths. For example, you can add a 16-bit unsigned matrix to a 8-bit signed matrix and store the sum as a 32-bit floating-point matrix. Depth of the output matrix is determined by the ddepth parameter. If",
    "local": ""
  },
  {
    "origin": "==",
    "local": ""
  },
  {
    "origin": ", ddepth can be set to the default -1. In this case, the output matrix will have the same depth as the input matrices.",
    "local": ""
  },
  {
    "origin": "Supported matrix data types are",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Function textual ID is \"org.opencv.core.math.add\"",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src1",
    "local": ""
  },
  {
    "origin": "first input matrix.",
    "local": ""
  },
  {
    "origin": "src2",
    "local": ""
  },
  {
    "origin": "second input matrix.",
    "local": ""
  },
  {
    "origin": "ddepth",
    "local": ""
  },
  {
    "origin": "optional depth of the output matrix.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "addC()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "cv::gapi::addC",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "src1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "ddepth",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.gapi.addC(",
    "local": ""
  },
  {
    "origin": "src1, c[, ddepth]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Calculates the per-element sum of matrix and given scalar.",
    "local": ""
  },
  {
    "origin": "The function addC adds a given scalar value to each element of given matrix. The function can be replaced with matrix expressions:",
    "local": ""
  },
  {
    "origin": "\\[\\texttt{dst} = \\texttt{src1} + \\texttt{c}\\]",
    "local": ""
  },
  {
    "origin": "Depth of the output matrix is determined by the ddepth parameter. If ddepth is set to default -1, the depth of output matrix will be the same as the depth of input matrix. The matrices can be single or multi channel. Output matrix must have the same size and number of channels as the input matrix.",
    "local": ""
  },
  {
    "origin": "Supported matrix data types are",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Function textual ID is \"org.opencv.core.math.addC\"",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src1",
    "local": ""
  },
  {
    "origin": "first input matrix.",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": "scalar value to be added.",
    "local": ""
  },
  {
    "origin": "ddepth",
    "local": ""
  },
  {
    "origin": "optional depth of the output matrix.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "addC()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "cv::gapi::addC",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "src1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "ddepth",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.gapi.addC(",
    "local": ""
  },
  {
    "origin": "src1, c[, ddepth]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "cartToPolar()",
    "local": ""
  },
  {
    "origin": "std::tuple&lt;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&gt; cv::gapi::cartToPolar",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "y",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "angleInDegrees",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Calculates the magnitude and angle of 2D vectors.",
    "local": ""
  },
  {
    "origin": "The function cartToPolar calculates either the magnitude, angle, or both for every 2D vector (x(I),y(I)):",
    "local": ""
  },
  {
    "origin": "\\[\\begin{array}{l} \\texttt{magnitude} (I)= \\sqrt{\\texttt{x}(I)^2+\\texttt{y}(I)^2} , \\\\ \\texttt{angle} (I)= \\texttt{atan2} ( \\texttt{y} (I), \\texttt{x} (I))[ \\cdot180 / \\pi ] \\end{array}\\]",
    "local": ""
  },
  {
    "origin": "The angles are calculated with accuracy about 0.3 degrees. For the point (0,0), the angle is set to 0.",
    "local": ""
  },
  {
    "origin": "First output is a matrix of magnitudes of the same size and depth as input x. Second output is a matrix of angles that has the same size and depth as x; the angles are measured in radians (from 0 to 2*Pi) or in degrees (0 to 360 degrees).",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Function textual ID is \"org.opencv.core.math.cartToPolar\"",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "matrix of",
    "local": ""
  },
  {
    "origin": "x-coordinates.",
    "local": ""
  },
  {
    "origin": "y",
    "local": ""
  },
  {
    "origin": "array of",
    "local": ""
  },
  {
    "origin": "y-coordinates.",
    "local": ""
  },
  {
    "origin": "angleInDegrees",
    "local": ""
  },
  {
    "origin": "a flag, indicating whether the angles are measured in radians (which is by default), or in degrees.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "div()",
    "local": ""
  },
  {
    "origin": "cv::gapi::div",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "src1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "src2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "scale",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "ddepth",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Performs per-element division of two matrices.",
    "local": ""
  },
  {
    "origin": "The function divides one matrix by another:",
    "local": ""
  },
  {
    "origin": "\\[\\texttt{dst(I) = saturate(src1(I)*scale/src2(I))}\\]",
    "local": ""
  },
  {
    "origin": "When src2(I) is zero, dst(I) will also be zero. Different channels of multi-channel matrices are processed independently. The matrices can be single or multi channel. Output matrix must have the same size and depth as src.",
    "local": ""
  },
  {
    "origin": "Supported matrix data types are",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Function textual ID is \"org.opencv.core.math.div\"",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src1",
    "local": ""
  },
  {
    "origin": "first input matrix.",
    "local": ""
  },
  {
    "origin": "src2",
    "local": ""
  },
  {
    "origin": "second input matrix of the same size and depth as src1.",
    "local": ""
  },
  {
    "origin": "scale",
    "local": ""
  },
  {
    "origin": "scalar factor.",
    "local": ""
  },
  {
    "origin": "ddepth",
    "local": ""
  },
  {
    "origin": "optional depth of the output matrix; you can only pass -1 when",
    "local": ""
  },
  {
    "origin": "==",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "divC()",
    "local": ""
  },
  {
    "origin": "cv::gapi::divC",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "divisor",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "scale",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "ddepth",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Divides matrix by scalar.",
    "local": ""
  },
  {
    "origin": "The function divC divides each element of matrix src by given scalar value:",
    "local": ""
  },
  {
    "origin": "\\[\\texttt{dst(I) = saturate(src(I)*scale/divisor)}\\]",
    "local": ""
  },
  {
    "origin": "When divisor is zero, dst(I) will also be zero. Different channels of multi-channel matrices are processed independently. The matrices can be single or multi channel. Output matrix must have the same size and depth as src.",
    "local": ""
  },
  {
    "origin": "Supported matrix data types are",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Function textual ID is \"org.opencv.core.math.divC\"",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "input matrix.",
    "local": ""
  },
  {
    "origin": "divisor",
    "local": ""
  },
  {
    "origin": "number to be divided by.",
    "local": ""
  },
  {
    "origin": "ddepth",
    "local": ""
  },
  {
    "origin": "optional depth of the output matrix. If -1, the depth of output matrix will be the same as input matrix depth.",
    "local": ""
  },
  {
    "origin": "scale",
    "local": ""
  },
  {
    "origin": "scale factor.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "divRC()",
    "local": ""
  },
  {
    "origin": "cv::gapi::divRC",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "divident",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "scale",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "ddepth",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Divides scalar by matrix.",
    "local": ""
  },
  {
    "origin": "The function divRC divides given scalar by each element of matrix src and keep the division result in new matrix of the same size and type as src:",
    "local": ""
  },
  {
    "origin": "\\[\\texttt{dst(I) = saturate(divident*scale/src(I))}\\]",
    "local": ""
  },
  {
    "origin": "When src(I) is zero, dst(I) will also be zero. Different channels of multi-channel matrices are processed independently. The matrices can be single or multi channel. Output matrix must have the same size and depth as src.",
    "local": ""
  },
  {
    "origin": "Supported matrix data types are",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Function textual ID is \"org.opencv.core.math.divRC\"",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "input matrix.",
    "local": ""
  },
  {
    "origin": "divident",
    "local": ""
  },
  {
    "origin": "number to be divided.",
    "local": ""
  },
  {
    "origin": "ddepth",
    "local": ""
  },
  {
    "origin": "optional depth of the output matrix. If -1, the depth of output matrix will be the same as input matrix depth.",
    "local": ""
  },
  {
    "origin": "scale",
    "local": ""
  },
  {
    "origin": "scale factor",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "mask()",
    "local": ""
  },
  {
    "origin": "cv::gapi::mask",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Applies a mask to a matrix.",
    "local": ""
  },
  {
    "origin": "The function mask set value from given matrix if the corresponding pixel value in mask matrix set to true, and set the matrix value to 0 otherwise.",
    "local": ""
  },
  {
    "origin": "Supported src matrix data types are",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ". Supported mask data type is",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Function textual ID is \"org.opencv.core.math.mask\"",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "input matrix.",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "input mask matrix.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "mean()",
    "local": ""
  },
  {
    "origin": "cv::gapi::mean",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.gapi.mean(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Calculates an average (mean) of matrix elements.",
    "local": ""
  },
  {
    "origin": "The function mean calculates the mean value M of matrix elements, independently for each channel, and return it.",
    "local": ""
  },
  {
    "origin": "Supported matrix data types are",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Function textual ID is \"org.opencv.core.math.mean\"",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "input matrix.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "mul()",
    "local": ""
  },
  {
    "origin": "cv::gapi::mul",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "src1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "src2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "scale",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "ddepth",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Calculates the per-element scaled product of two matrices.",
    "local": ""
  },
  {
    "origin": "The function mul calculates the per-element product of two matrices:",
    "local": ""
  },
  {
    "origin": "\\[\\texttt{dst} (I)= \\texttt{saturate} ( \\texttt{scale} \\cdot \\texttt{src1} (I) \\cdot \\texttt{src2} (I))\\]",
    "local": ""
  },
  {
    "origin": "If",
    "local": ""
  },
  {
    "origin": "==",
    "local": ""
  },
  {
    "origin": ", ddepth can be set to the default -1. In this case, the output matrix will have the same depth as the input matrices. The matrices can be single or multi channel. Output matrix must have the same size as input matrices.",
    "local": ""
  },
  {
    "origin": "Supported matrix data types are",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Function textual ID is \"org.opencv.core.math.mul\"",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src1",
    "local": ""
  },
  {
    "origin": "first input matrix.",
    "local": ""
  },
  {
    "origin": "src2",
    "local": ""
  },
  {
    "origin": "second input matrix of the same size and the same depth as src1.",
    "local": ""
  },
  {
    "origin": "scale",
    "local": ""
  },
  {
    "origin": "optional scale factor.",
    "local": ""
  },
  {
    "origin": "ddepth",
    "local": ""
  },
  {
    "origin": "optional depth of the output matrix.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "mulC()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "cv::gapi::mulC",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "multiplier",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "ddepth",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Multiplies matrix by scalar.",
    "local": ""
  },
  {
    "origin": "The function mulC multiplies each element of matrix src by given scalar value:",
    "local": ""
  },
  {
    "origin": "\\[\\texttt{dst} (I)= \\texttt{saturate} ( \\texttt{src1} (I) \\cdot \\texttt{multiplier} )\\]",
    "local": ""
  },
  {
    "origin": "The matrices can be single or multi channel. Output matrix must have the same size as src.",
    "local": ""
  },
  {
    "origin": "Supported matrix data types are",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Function textual ID is \"org.opencv.core.math.mulC\"",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "input matrix.",
    "local": ""
  },
  {
    "origin": "multiplier",
    "local": ""
  },
  {
    "origin": "factor to be multiplied.",
    "local": ""
  },
  {
    "origin": "ddepth",
    "local": ""
  },
  {
    "origin": "optional depth of the output matrix. If -1, the depth of output matrix will be the same as input matrix depth.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "mulC()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "cv::gapi::mulC",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "multiplier",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "ddepth",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "mulC()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "cv::gapi::mulC",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "multiplier",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "ddepth",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "phase()",
    "local": ""
  },
  {
    "origin": "cv::gapi::phase",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "y",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "angleInDegrees",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Calculates the rotation angle of 2D vectors.",
    "local": ""
  },
  {
    "origin": "The function",
    "local": ""
  },
  {
    "origin": "calculates the rotation angle of each 2D vector that is formed from the corresponding elements of x and y :",
    "local": ""
  },
  {
    "origin": "\\[\\texttt{angle} (I) = \\texttt{atan2} ( \\texttt{y} (I), \\texttt{x} (I))\\]",
    "local": ""
  },
  {
    "origin": "The angle estimation accuracy is about 0.3 degrees. When x(I)=y(I)=0 , the corresponding angle(I) is set to 0.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "input floating-point array of x-coordinates of 2D vectors.",
    "local": ""
  },
  {
    "origin": "y",
    "local": ""
  },
  {
    "origin": "input array of y-coordinates of 2D vectors; it must have the same size and the same type as x.",
    "local": ""
  },
  {
    "origin": "angleInDegrees",
    "local": ""
  },
  {
    "origin": "when true, the function calculates the angle in degrees, otherwise, they are measured in radians.",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "array of vector angles; it has the same size and same type as x.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "polarToCart()",
    "local": ""
  },
  {
    "origin": "std::tuple&lt;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&gt; cv::gapi::polarToCart",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "magnitude",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "angle",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "angleInDegrees",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Calculates x and y coordinates of 2D vectors from their magnitude and angle.",
    "local": ""
  },
  {
    "origin": "The function polarToCart calculates the Cartesian coordinates of each 2D vector represented by the corresponding elements of magnitude and angle:",
    "local": ""
  },
  {
    "origin": "\\[\\begin{array}{l} \\texttt{x} (I) = \\texttt{magnitude} (I) \\cos ( \\texttt{angle} (I)) \\\\ \\texttt{y} (I) = \\texttt{magnitude} (I) \\sin ( \\texttt{angle} (I)) \\\\ \\end{array}\\]",
    "local": ""
  },
  {
    "origin": "The relative accuracy of the estimated coordinates is about 1e-6.",
    "local": ""
  },
  {
    "origin": "First output is a matrix of x-coordinates of 2D vectors. Second output is a matrix of y-coordinates of 2D vectors. Both output must have the same size and depth as input matrices.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Function textual ID is \"org.opencv.core.math.polarToCart\"",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "magnitude",
    "local": ""
  },
  {
    "origin": "input floating-point",
    "local": ""
  },
  {
    "origin": "matrix (1xN) of magnitudes of 2D vectors;",
    "local": ""
  },
  {
    "origin": "angle",
    "local": ""
  },
  {
    "origin": "input floating-point",
    "local": ""
  },
  {
    "origin": "matrix (1xN) of angles of 2D vectors.",
    "local": ""
  },
  {
    "origin": "angleInDegrees",
    "local": ""
  },
  {
    "origin": "when true, the input angles are measured in degrees, otherwise, they are measured in radians.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "sqrt()",
    "local": ""
  },
  {
    "origin": "cv::gapi::sqrt",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Calculates a square root of array elements.",
    "local": ""
  },
  {
    "origin": "The function",
    "local": ""
  },
  {
    "origin": "calculates a square root of each input array element. In case of multi-channel arrays, each channel is processed independently. The accuracy is approximately the same as of the built-in std::sqrt .",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "input floating-point array.",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "output array of the same size and type as src.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "sub()",
    "local": ""
  },
  {
    "origin": "cv::gapi::sub",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "src1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "src2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "ddepth",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Calculates the per-element difference between two matrices.",
    "local": ""
  },
  {
    "origin": "The function sub calculates difference between two matrices, when both matrices have the same size and the same number of channels:",
    "local": ""
  },
  {
    "origin": "\\[\\texttt{dst}(I) = \\texttt{src1}(I) - \\texttt{src2}(I)\\]",
    "local": ""
  },
  {
    "origin": "The function can be replaced with matrix expressions:",
    "local": ""
  },
  {
    "origin": "\\[\\texttt{dst} = \\texttt{src1} - \\texttt{src2}\\]",
    "local": ""
  },
  {
    "origin": "The input matrices and the output matrix can all have the same or different depths. For example, you can subtract two 8-bit unsigned matrices store the result as a 16-bit signed matrix. Depth of the output matrix is determined by the ddepth parameter. If",
    "local": ""
  },
  {
    "origin": "==",
    "local": ""
  },
  {
    "origin": ", ddepth can be set to the default -1. In this case, the output matrix will have the same depth as the input matrices. The matrices can be single or multi channel.",
    "local": ""
  },
  {
    "origin": "Supported matrix data types are",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Function textual ID is \"org.opencv.core.math.sub\"",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src1",
    "local": ""
  },
  {
    "origin": "first input matrix.",
    "local": ""
  },
  {
    "origin": "src2",
    "local": ""
  },
  {
    "origin": "second input matrix.",
    "local": ""
  },
  {
    "origin": "ddepth",
    "local": ""
  },
  {
    "origin": "optional depth of the output matrix.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "subC()",
    "local": ""
  },
  {
    "origin": "cv::gapi::subC",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "ddepth",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Calculates the per-element difference between matrix and given scalar.",
    "local": ""
  },
  {
    "origin": "The function can be replaced with matrix expressions:",
    "local": ""
  },
  {
    "origin": "\\[\\texttt{dst} = \\texttt{src} - \\texttt{c}\\]",
    "local": ""
  },
  {
    "origin": "Depth of the output matrix is determined by the ddepth parameter. If ddepth is set to default -1, the depth of output matrix will be the same as the depth of input matrix. The matrices can be single or multi channel. Output matrix must have the same size as src.",
    "local": ""
  },
  {
    "origin": "Supported matrix data types are",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Function textual ID is \"org.opencv.core.math.subC\"",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "first input matrix.",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": "scalar value to subtracted.",
    "local": ""
  },
  {
    "origin": "ddepth",
    "local": ""
  },
  {
    "origin": "optional depth of the output matrix.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "subRC()",
    "local": ""
  },
  {
    "origin": "cv::gapi::subRC",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "ddepth",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Calculates the per-element difference between given scalar and the matrix.",
    "local": ""
  },
  {
    "origin": "The function can be replaced with matrix expressions:",
    "local": ""
  },
  {
    "origin": "\\[\\texttt{dst} = \\texttt{val} - \\texttt{src}\\]",
    "local": ""
  },
  {
    "origin": "Depth of the output matrix is determined by the ddepth parameter. If ddepth is set to default -1, the depth of output matrix will be the same as the depth of input matrix. The matrices can be single or multi channel. Output matrix must have the same size as src.",
    "local": ""
  },
  {
    "origin": "Supported matrix data types are",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Function textual ID is \"org.opencv.core.math.subRC\"",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": "scalar value to subtract from.",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "input matrix to be subtracted.",
    "local": ""
  },
  {
    "origin": "ddepth",
    "local": ""
  },
  {
    "origin": "optional depth of the output matrix.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:41 for OpenCV by",
    "local": ""
  }
]