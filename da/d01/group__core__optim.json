[
  {
    "origin": "OpenCV: Optimization Algorithms",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "Optimization Algorithms",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "This class is used to perform the non-linear non-constrained minimization of a function with known gradient,.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "This class is used to perform the non-linear non-constrained minimization of a function,.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Basic interface for all solvers.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "return codes for",
    "local": ""
  },
  {
    "origin": "function",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "Func,",
    "local": ""
  },
  {
    "origin": "Constr,",
    "local": ""
  },
  {
    "origin": "z)",
    "local": ""
  },
  {
    "origin": "Solve given (non-integer) linear programming problem using the Simplex",
    "local": ""
  },
  {
    "origin": "(Simplex Method).",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "The algorithms in this section minimize or maximize function value within specified constraints or without any constraints.",
    "local": ""
  },
  {
    "origin": "Enumeration Type Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "SolveLPResult",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "return codes for",
    "local": ""
  },
  {
    "origin": "function",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "SOLVELP_UNBOUNDED",
    "local": ""
  },
  {
    "origin": "Python: cv.SOLVELP_UNBOUNDED",
    "local": ""
  },
  {
    "origin": "problem is unbounded (target function can achieve arbitrary high values)",
    "local": ""
  },
  {
    "origin": "SOLVELP_UNFEASIBLE",
    "local": ""
  },
  {
    "origin": "Python: cv.SOLVELP_UNFEASIBLE",
    "local": ""
  },
  {
    "origin": "problem is unfeasible (there are no points that satisfy all the constraints imposed)",
    "local": ""
  },
  {
    "origin": "SOLVELP_SINGLE",
    "local": ""
  },
  {
    "origin": "Python: cv.SOLVELP_SINGLE",
    "local": ""
  },
  {
    "origin": "there is only one maximum for target function",
    "local": ""
  },
  {
    "origin": "SOLVELP_MULTI",
    "local": ""
  },
  {
    "origin": "Python: cv.SOLVELP_MULTI",
    "local": ""
  },
  {
    "origin": "there are multiple maxima for target function - the arbitrary one is returned",
    "local": ""
  },
  {
    "origin": "Function Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "solveLP()",
    "local": ""
  },
  {
    "origin": "int cv::solveLP",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "Func",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Constr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "z",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval, z",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.solveLP(",
    "local": ""
  },
  {
    "origin": "Func, Constr[, z]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Solve given (non-integer) linear programming problem using the Simplex",
    "local": ""
  },
  {
    "origin": "(Simplex Method).",
    "local": ""
  },
  {
    "origin": "What we mean here by \"linear programming problem\" (or LP problem, for short) can be formulated as:",
    "local": ""
  },
  {
    "origin": "\\[\\mbox{Maximize } c\\cdot x\\\\ \\mbox{Subject to:}\\\\ Ax\\leq b\\\\ x\\geq 0\\]",
    "local": ""
  },
  {
    "origin": "Where \\(c\\) is fixed",
    "local": ""
  },
  {
    "origin": "-by-",
    "local": ""
  },
  {
    "origin": "row-vector, \\(A\\) is fixed",
    "local": ""
  },
  {
    "origin": "-by-",
    "local": ""
  },
  {
    "origin": "matrix, \\(b\\) is fixed",
    "local": ""
  },
  {
    "origin": "-by-",
    "local": ""
  },
  {
    "origin": "column vector and \\(x\\) is an arbitrary",
    "local": ""
  },
  {
    "origin": "-by-",
    "local": ""
  },
  {
    "origin": "column vector, which satisfies the constraints.",
    "local": ""
  },
  {
    "origin": "Simplex algorithm is one of many algorithms that are designed to handle this sort of problems efficiently. Although it is not optimal in theoretical sense (there exist algorithms that can solve any problem written as above in polynomial time, while simplex method degenerates to exponential time for some special cases), it is well-studied, easy to implement and is shown to work well for real-life purposes.",
    "local": ""
  },
  {
    "origin": "The particular implementation is taken almost verbatim from",
    "local": ""
  },
  {
    "origin": "Introduction to Algorithms, third edition",
    "local": ""
  },
  {
    "origin": "by T. H. Cormen, C. E. Leiserson, R. L. Rivest and Clifford Stein. In particular, the Bland's rule",
    "local": ""
  },
  {
    "origin": "http://en.wikipedia.org/wiki/Bland%27s_rule",
    "local": ""
  },
  {
    "origin": "is used to prevent cycling.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "Func",
    "local": ""
  },
  {
    "origin": "This row-vector corresponds to \\(c\\) in the LP problem formulation (see above). It should contain 32- or 64-bit floating point numbers. As a convenience, column-vector may be also submitted, in the latter case it is understood to correspond to \\(c^T\\).",
    "local": ""
  },
  {
    "origin": "Constr",
    "local": ""
  },
  {
    "origin": "-by-",
    "local": ""
  },
  {
    "origin": "matrix, whose rightmost column corresponds to \\(b\\) in formulation above and the remaining to \\(A\\). It should contain 32- or 64-bit floating point numbers.",
    "local": ""
  },
  {
    "origin": "z",
    "local": ""
  },
  {
    "origin": "The solution will be returned here as a column-vector - it corresponds to \\(c\\) in the formulation above. It will contain 64-bit floating point numbers.",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "One of",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:40 for OpenCV by",
    "local": ""
  }
]