[
  {
    "origin": "OpenCV: Feature Detection and Description",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Typedefs",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "Feature Detection and Description",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Class for implementing the wrapper which makes detectors and extractors to be affine invariant, described as ASIFT in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Wrapping class for feature detection using the AGAST method. :",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class implementing the",
    "local": ""
  },
  {
    "origin": "keypoint detector and descriptor extractor, described in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class implementing the",
    "local": ""
  },
  {
    "origin": "keypoint detector and descriptor extractor, described in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Wrapping class for feature detection using the FAST method. :",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Wrapping class for feature detection using the goodFeaturesToTrack function. :",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class implementing the",
    "local": ""
  },
  {
    "origin": "keypoint detector and descriptor extractor, described in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Maximally stable extremal region extractor.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class implementing the",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "oriented BRIEF",
    "local": ""
  },
  {
    "origin": ") keypoint detector and descriptor extractor.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class for extracting keypoints and computing descriptors using the Scale Invariant Feature Transform (",
    "local": ""
  },
  {
    "origin": ") algorithm by D. Lowe",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class for extracting blobs from an image. :",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Typedefs",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;keypoints, int",
    "local": ""
  },
  {
    "origin": ", bool nonmaxSuppression=true)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;keypoints, int",
    "local": ""
  },
  {
    "origin": ", bool nonmaxSuppression,",
    "local": ""
  },
  {
    "origin": "type)",
    "local": ""
  },
  {
    "origin": "Detects corners using the AGAST algorithm.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;keypoints, int",
    "local": ""
  },
  {
    "origin": ", bool nonmaxSuppression=true)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;keypoints, int",
    "local": ""
  },
  {
    "origin": ", bool nonmaxSuppression,",
    "local": ""
  },
  {
    "origin": "type)",
    "local": ""
  },
  {
    "origin": "Detects corners using the FAST algorithm.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Typedef Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "AffineDescriptorExtractor",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "AffineFeatureDetector",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "SiftDescriptorExtractor",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "SiftFeatureDetector",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "Function Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "AGAST()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "void cv::AGAST",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "keypoints",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "threshold",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "nonmaxSuppression",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "AGAST()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "void cv::AGAST",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "keypoints",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "threshold",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "nonmaxSuppression",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "type",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Detects corners using the AGAST algorithm.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "grayscale image where keypoints (corners) are detected.",
    "local": ""
  },
  {
    "origin": "keypoints",
    "local": ""
  },
  {
    "origin": "keypoints detected on the image.",
    "local": ""
  },
  {
    "origin": "threshold",
    "local": ""
  },
  {
    "origin": "threshold on difference between intensity of the central pixel and pixels of a circle around this pixel.",
    "local": ""
  },
  {
    "origin": "nonmaxSuppression",
    "local": ""
  },
  {
    "origin": "if true, non-maximum suppression is applied to detected corners (keypoints).",
    "local": ""
  },
  {
    "origin": "type",
    "local": ""
  },
  {
    "origin": "one of the four neighborhoods as defined in the paper:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "For non-Intel platforms, there is a tree optimised variant of AGAST with same numerical results. The 32-bit binary tree tables were generated automatically from original code using perl script. The perl script and examples of tree generation are placed in features2d/doc folder. Detects corners using the AGAST algorithm by",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "FAST()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "void cv::FAST",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "keypoints",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "threshold",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "nonmaxSuppression",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "FAST()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "void cv::FAST",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "keypoints",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "threshold",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "nonmaxSuppression",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "type",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Detects corners using the FAST algorithm.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "grayscale image where keypoints (corners) are detected.",
    "local": ""
  },
  {
    "origin": "keypoints",
    "local": ""
  },
  {
    "origin": "keypoints detected on the image.",
    "local": ""
  },
  {
    "origin": "threshold",
    "local": ""
  },
  {
    "origin": "threshold on difference between intensity of the central pixel and pixels of a circle around this pixel.",
    "local": ""
  },
  {
    "origin": "nonmaxSuppression",
    "local": ""
  },
  {
    "origin": "if true, non-maximum suppression is applied to detected corners (keypoints).",
    "local": ""
  },
  {
    "origin": "type",
    "local": ""
  },
  {
    "origin": "one of the three neighborhoods as defined in the paper:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Detects corners using the FAST algorithm by",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "In Python API, types are given as cv.FAST_FEATURE_DETECTOR_TYPE_5_8, cv.FAST_FEATURE_DETECTOR_TYPE_7_12 and cv.FAST_FEATURE_DETECTOR_TYPE_9_16. For corner detection, use cv.FAST.detect() method.",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:41 for OpenCV by &#160;",
    "local": ""
  }
]