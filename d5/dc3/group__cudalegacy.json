[
  {
    "origin": "OpenCV: Legacy support",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Modules",
    "local": ""
  },
  {
    "origin": "Namespaces",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Macros",
    "local": ""
  },
  {
    "origin": "Typedefs",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "Variables",
    "local": ""
  },
  {
    "origin": "Legacy support",
    "local": ""
  },
  {
    "origin": "Modules",
    "local": ""
  },
  {
    "origin": "Namespaces",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "The class discriminates between foreground and background pixels by building and maintaining a model of the background.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Background/Foreground Segmentation",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Model and solver parameters.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Macros",
    "local": ""
  },
  {
    "origin": "(x, a, b)&#160;&#160;&#160;( (x) &gt; (b) ? (b) : ( (x) &lt; (a) ? (a) : (x) ) )",
    "local": ""
  },
  {
    "origin": "(x)&#160;&#160;&#160;",
    "local": ""
  },
  {
    "origin": "(x,0,255)",
    "local": ""
  },
  {
    "origin": "(x, a)&#160;&#160;&#160;(((x) &lt; (a)) ? (a) : (x))",
    "local": ""
  },
  {
    "origin": "(x, a)&#160;&#160;&#160;(((x) &gt; (a)) ? (a) : (x))",
    "local": ""
  },
  {
    "origin": "&#160;&#160;&#160;1",
    "local": ""
  },
  {
    "origin": "(X)",
    "local": ""
  },
  {
    "origin": "(a, b)&#160;&#160;&#160;",
    "local": ""
  },
  {
    "origin": "(a, b)",
    "local": ""
  },
  {
    "origin": "Concatenation macro.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(a, b)&#160;&#160;&#160;a##b",
    "local": ""
  },
  {
    "origin": "Concatenation indirection macro.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(x)&#160;&#160;&#160;__ncv_skip_cond = x",
    "local": ""
  },
  {
    "origin": "(x)&#160;&#160;&#160;bool __ncv_skip_cond = x",
    "local": ""
  },
  {
    "origin": "&#160;&#160;&#160;if (!__ncv_skip_cond) {",
    "local": ""
  },
  {
    "origin": "&#160;&#160;&#160;}",
    "local": ""
  },
  {
    "origin": "(errCode)",
    "local": ""
  },
  {
    "origin": "(cudacall, errCode)",
    "local": ""
  },
  {
    "origin": "(pred, msg)",
    "local": ""
  },
  {
    "origin": "(pred, msg, err)",
    "local": ""
  },
  {
    "origin": "(pred, err)",
    "local": ""
  },
  {
    "origin": "(ncvOp)",
    "local": ""
  },
  {
    "origin": "(name, type, alloc, width, height, err)",
    "local": ""
  },
  {
    "origin": "&#160;&#160;&#160;0xFFFFFFFF",
    "local": ""
  },
  {
    "origin": "&#160;&#160;&#160;0.2f",
    "local": ""
  },
  {
    "origin": "(x)&#160;&#160;&#160;((x)*(x))",
    "local": ""
  },
  {
    "origin": "(type, name)&#160;&#160;&#160;struct { __inline type name",
    "local": ""
  },
  {
    "origin": "(name)&#160;&#160;&#160;name.name",
    "local": ""
  },
  {
    "origin": "(name)&#160;&#160;&#160;} name;",
    "local": ""
  },
  {
    "origin": "Typedefs",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;msg)",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= NCV_SUCCESS,",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= 0x000,",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= 0x001,",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= 0x002,",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= 0x004",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "what,",
    "local": ""
  },
  {
    "origin": "alignment)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;prev, const",
    "local": ""
  },
  {
    "origin": "&amp;curr,",
    "local": ""
  },
  {
    "origin": "block_size,",
    "local": ""
  },
  {
    "origin": "shift_size,",
    "local": ""
  },
  {
    "origin": "max_range, bool use_previous,",
    "local": ""
  },
  {
    "origin": "&amp;velx,",
    "local": ""
  },
  {
    "origin": "&amp;vely,",
    "local": ""
  },
  {
    "origin": "&amp;buf,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Calculates optical flow for 2 images using block matching algorithm */.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;image,",
    "local": ""
  },
  {
    "origin": "&amp;mask, const",
    "local": ""
  },
  {
    "origin": "&amp;lo, const",
    "local": ""
  },
  {
    "origin": "&amp;hi,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "compute mask for Generalized Flood fill componetns labeling.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;params=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Creates FGD Background Subtractor.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(int initializationFrames=120, double decisionThreshold=0.8)",
    "local": ""
  },
  {
    "origin": "Creates GMG Background Subtractor.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;u, const",
    "local": ""
  },
  {
    "origin": "&amp;v,",
    "local": ""
  },
  {
    "origin": "&amp;vertex,",
    "local": ""
  },
  {
    "origin": "&amp;colors)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;terminals,",
    "local": ""
  },
  {
    "origin": "&amp;leftTransp,",
    "local": ""
  },
  {
    "origin": "&amp;rightTransp,",
    "local": ""
  },
  {
    "origin": "&amp;top,",
    "local": ""
  },
  {
    "origin": "&amp;bottom,",
    "local": ""
  },
  {
    "origin": "&amp;labels,",
    "local": ""
  },
  {
    "origin": "&amp;buf,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "performs labeling via graph cuts of a 2D regular 4-connected graph.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;terminals,",
    "local": ""
  },
  {
    "origin": "&amp;leftTransp,",
    "local": ""
  },
  {
    "origin": "&amp;rightTransp,",
    "local": ""
  },
  {
    "origin": "&amp;top,",
    "local": ""
  },
  {
    "origin": "&amp;topLeft,",
    "local": ""
  },
  {
    "origin": "&amp;topRight,",
    "local": ""
  },
  {
    "origin": "&amp;bottom,",
    "local": ""
  },
  {
    "origin": "&amp;bottomLeft,",
    "local": ""
  },
  {
    "origin": "&amp;bottomRight,",
    "local": ""
  },
  {
    "origin": "&amp;labels,",
    "local": ""
  },
  {
    "origin": "&amp;buf,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "performs labeling via graph cuts of a 2D regular 8-connected graph.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;frame0, const",
    "local": ""
  },
  {
    "origin": "&amp;frame1, const",
    "local": ""
  },
  {
    "origin": "&amp;fu, const",
    "local": ""
  },
  {
    "origin": "&amp;fv, const",
    "local": ""
  },
  {
    "origin": "&amp;bu, const",
    "local": ""
  },
  {
    "origin": "&amp;bv, float pos,",
    "local": ""
  },
  {
    "origin": "&amp;newFrame,",
    "local": ""
  },
  {
    "origin": "&amp;buf,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Interpolates frames (images) using provided optical flow (displacement field).",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;mask,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "performs connected componnents labeling.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(void *dst,",
    "local": ""
  },
  {
    "origin": "dstType, const void *src,",
    "local": ""
  },
  {
    "origin": "srcType, size_t sz, cudaStream_t cuStream)",
    "local": ""
  },
  {
    "origin": "(void *dst,",
    "local": ""
  },
  {
    "origin": "dstPitch,",
    "local": ""
  },
  {
    "origin": "dstType, const void *src,",
    "local": ""
  },
  {
    "origin": "srcPitch,",
    "local": ""
  },
  {
    "origin": "srcType,",
    "local": ""
  },
  {
    "origin": "widthbytes,",
    "local": ""
  },
  {
    "origin": "height, cudaStream_t cuStream)",
    "local": ""
  },
  {
    "origin": "(sizeof(",
    "local": ""
  },
  {
    "origin": ")==8)",
    "local": ""
  },
  {
    "origin": "(sizeof(",
    "local": ""
  },
  {
    "origin": ")==4)",
    "local": ""
  },
  {
    "origin": "(sizeof(",
    "local": ""
  },
  {
    "origin": ")==4)",
    "local": ""
  },
  {
    "origin": "(sizeof(",
    "local": ""
  },
  {
    "origin": ")==16)",
    "local": ""
  },
  {
    "origin": "(sizeof(",
    "local": ""
  },
  {
    "origin": ")==8)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;d_integralImage,",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;d_weights,",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;d_pixelMask,",
    "local": ""
  },
  {
    "origin": "&amp;numDetections,",
    "local": ""
  },
  {
    "origin": "&amp;haar,",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;h_HaarStages,",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;d_HaarStages,",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;d_HaarNodes,",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;d_HaarFeatures,",
    "local": ""
  },
  {
    "origin": "bMaskElements,",
    "local": ""
  },
  {
    "origin": "anchorsRoi,",
    "local": ""
  },
  {
    "origin": "pixelStep,",
    "local": ""
  },
  {
    "origin": "scaleArea,",
    "local": ""
  },
  {
    "origin": "&amp;gpuAllocator,",
    "local": ""
  },
  {
    "origin": "&amp;cpuAllocator, cudaDeviceProp &amp;devProp, cudaStream_t cuStream)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;h_integralImage,",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;h_weights,",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;h_pixelMask,",
    "local": ""
  },
  {
    "origin": "&amp;numDetections,",
    "local": ""
  },
  {
    "origin": "&amp;haar,",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;h_HaarStages,",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;h_HaarNodes,",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;h_HaarFeatures,",
    "local": ""
  },
  {
    "origin": "bMaskElements,",
    "local": ""
  },
  {
    "origin": "anchorsRoi,",
    "local": ""
  },
  {
    "origin": "pixelStep,",
    "local": ""
  },
  {
    "origin": "scaleArea)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "desc,",
    "local": ""
  },
  {
    "origin": "&amp;gpu_mem_allocator, const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;frame0, const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;frame1,",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;u,",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;v, cudaStream_t stream)",
    "local": ""
  },
  {
    "origin": "Compute optical flow.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;msg)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;d_srcImg,",
    "local": ""
  },
  {
    "origin": "srcRoi,",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;d_dstRects,",
    "local": ""
  },
  {
    "origin": "&amp;dstNumRects,",
    "local": ""
  },
  {
    "origin": "&amp;haar,",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;h_HaarStages,",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;d_HaarStages,",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;d_HaarNodes,",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;d_HaarFeatures,",
    "local": ""
  },
  {
    "origin": "minObjSize,",
    "local": ""
  },
  {
    "origin": "minNeighbors,",
    "local": ""
  },
  {
    "origin": "scaleStep,",
    "local": ""
  },
  {
    "origin": "pixelStep,",
    "local": ""
  },
  {
    "origin": "flags,",
    "local": ""
  },
  {
    "origin": "&amp;gpuAllocator,",
    "local": ""
  },
  {
    "origin": "&amp;cpuAllocator, cudaDeviceProp &amp;devProp, cudaStream_t cuStream)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "*d_dst,",
    "local": ""
  },
  {
    "origin": "dstStride,",
    "local": ""
  },
  {
    "origin": "dstWidth,",
    "local": ""
  },
  {
    "origin": "dstHeight,",
    "local": ""
  },
  {
    "origin": "*d_rects,",
    "local": ""
  },
  {
    "origin": "numRects,",
    "local": ""
  },
  {
    "origin": "color, cudaStream_t cuStream)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "*h_dst,",
    "local": ""
  },
  {
    "origin": "dstStride,",
    "local": ""
  },
  {
    "origin": "dstWidth,",
    "local": ""
  },
  {
    "origin": "dstHeight,",
    "local": ""
  },
  {
    "origin": "*h_rects,",
    "local": ""
  },
  {
    "origin": "numRects,",
    "local": ""
  },
  {
    "origin": "color)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "*d_dst,",
    "local": ""
  },
  {
    "origin": "dstStride,",
    "local": ""
  },
  {
    "origin": "dstWidth,",
    "local": ""
  },
  {
    "origin": "dstHeight,",
    "local": ""
  },
  {
    "origin": "*d_rects,",
    "local": ""
  },
  {
    "origin": "numRects,",
    "local": ""
  },
  {
    "origin": "color, cudaStream_t cuStream)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "*h_dst,",
    "local": ""
  },
  {
    "origin": "dstStride,",
    "local": ""
  },
  {
    "origin": "dstWidth,",
    "local": ""
  },
  {
    "origin": "dstHeight,",
    "local": ""
  },
  {
    "origin": "*h_rects,",
    "local": ""
  },
  {
    "origin": "numRects,",
    "local": ""
  },
  {
    "origin": "color)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "t)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "t)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;hypotheses,",
    "local": ""
  },
  {
    "origin": "&amp;numHypotheses,",
    "local": ""
  },
  {
    "origin": "minNeighbors,",
    "local": ""
  },
  {
    "origin": "intersectEps,",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; *hypothesesWeights)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;pixelMask,",
    "local": ""
  },
  {
    "origin": "numPixelMaskDetections,",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;hypotheses,",
    "local": ""
  },
  {
    "origin": "&amp;totalDetections,",
    "local": ""
  },
  {
    "origin": "totalMaxDetections,",
    "local": ""
  },
  {
    "origin": "rectWidth,",
    "local": ""
  },
  {
    "origin": "rectHeight,",
    "local": ""
  },
  {
    "origin": "curScale, cudaStream_t cuStream)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;pixelMask,",
    "local": ""
  },
  {
    "origin": "numPixelMaskDetections,",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;hypotheses,",
    "local": ""
  },
  {
    "origin": "&amp;totalDetections,",
    "local": ""
  },
  {
    "origin": "totalMaxDetections,",
    "local": ""
  },
  {
    "origin": "rectWidth,",
    "local": ""
  },
  {
    "origin": "rectHeight,",
    "local": ""
  },
  {
    "origin": "curScale)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename,",
    "local": ""
  },
  {
    "origin": "&amp;numStages,",
    "local": ""
  },
  {
    "origin": "&amp;numNodes,",
    "local": ""
  },
  {
    "origin": "&amp;numFeatures)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename,",
    "local": ""
  },
  {
    "origin": "&amp;haar,",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;h_HaarStages,",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;h_HaarNodes,",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;h_HaarFeatures)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename,",
    "local": ""
  },
  {
    "origin": "haar,",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;h_HaarStages,",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;h_HaarNodes,",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;h_HaarFeatures)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "*func)",
    "local": ""
  },
  {
    "origin": "(void)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;src, const",
    "local": ""
  },
  {
    "origin": "&amp;rvec, const",
    "local": ""
  },
  {
    "origin": "&amp;tvec, const",
    "local": ""
  },
  {
    "origin": "&amp;camera_mat, const",
    "local": ""
  },
  {
    "origin": "&amp;dist_coef,",
    "local": ""
  },
  {
    "origin": "&amp;dst,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;object, const",
    "local": ""
  },
  {
    "origin": "&amp;image, const",
    "local": ""
  },
  {
    "origin": "&amp;camera_mat, const",
    "local": ""
  },
  {
    "origin": "&amp;dist_coef,",
    "local": ""
  },
  {
    "origin": "&amp;rvec,",
    "local": ""
  },
  {
    "origin": "&amp;tvec, bool use_extrinsic_guess=false, int num_iters=100, float max_dist=8.0, int min_inlier_count=100, std::vector&lt; int &gt; *inliers=NULL)",
    "local": ""
  },
  {
    "origin": "Finds the object pose from 3D-2D point correspondences.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;src, const",
    "local": ""
  },
  {
    "origin": "&amp;rvec, const",
    "local": ""
  },
  {
    "origin": "&amp;tvec,",
    "local": ""
  },
  {
    "origin": "&amp;dst,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Variables",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Macro Definition Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "CLAMP",
    "local": ""
  },
  {
    "origin": "#define CLAMP",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "x,",
    "local": ""
  },
  {
    "origin": "a,",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#160;&#160;&#160;( (x) &gt; (b) ? (b) : ( (x) &lt; (a) ? (a) : (x) ) )",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "CLAMP_0_255",
    "local": ""
  },
  {
    "origin": "#define CLAMP_0_255",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#160;&#160;&#160;",
    "local": ""
  },
  {
    "origin": "(x,0,255)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "CLAMP_BOTTOM",
    "local": ""
  },
  {
    "origin": "#define CLAMP_BOTTOM",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "x,",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#160;&#160;&#160;(((x) &lt; (a)) ? (a) : (x))",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "CLAMP_TOP",
    "local": ""
  },
  {
    "origin": "#define CLAMP_TOP",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "x,",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#160;&#160;&#160;(((x) &gt; (a)) ? (a) : (x))",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "HAAR_STDDEV_BORDER",
    "local": ""
  },
  {
    "origin": "#define HAAR_STDDEV_BORDER&#160;&#160;&#160;1",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "NCV_CT_ASSERT",
    "local": ""
  },
  {
    "origin": "#define NCV_CT_ASSERT",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "X",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Value:",
    "local": ""
  },
  {
    "origin": "Performs compile-time assertion of a condition on the file scope",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "NCV_CT_PREP_PASTE",
    "local": ""
  },
  {
    "origin": "#define NCV_CT_PREP_PASTE",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a,",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#160;&#160;&#160;",
    "local": ""
  },
  {
    "origin": "(a, b)",
    "local": ""
  },
  {
    "origin": "Concatenation macro.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "NCV_CT_PREP_PASTE_AUX",
    "local": ""
  },
  {
    "origin": "#define NCV_CT_PREP_PASTE_AUX",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a,",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#160;&#160;&#160;a##b",
    "local": ""
  },
  {
    "origin": "Concatenation indirection macro.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "NCV_RESET_SKIP_COND",
    "local": ""
  },
  {
    "origin": "#define NCV_RESET_SKIP_COND",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#160;&#160;&#160;__ncv_skip_cond = x",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "NCV_SET_SKIP_COND",
    "local": ""
  },
  {
    "origin": "#define NCV_SET_SKIP_COND",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#160;&#160;&#160;bool __ncv_skip_cond = x",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "NCV_SKIP_COND_BEGIN",
    "local": ""
  },
  {
    "origin": "#define NCV_SKIP_COND_BEGIN&#160;&#160;&#160;if (!__ncv_skip_cond) {",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "NCV_SKIP_COND_END",
    "local": ""
  },
  {
    "origin": "#define NCV_SKIP_COND_END&#160;&#160;&#160;}",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ncvAssertCUDALastErrorReturn",
    "local": ""
  },
  {
    "origin": "#define ncvAssertCUDALastErrorReturn",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "errCode",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Value:",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ncvAssertCUDAReturn",
    "local": ""
  },
  {
    "origin": "#define ncvAssertCUDAReturn",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "cudacall,",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Value:",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ncvAssertPrintCheck",
    "local": ""
  },
  {
    "origin": "#define ncvAssertPrintCheck",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "pred,",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Value:",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ncvAssertPrintReturn",
    "local": ""
  },
  {
    "origin": "#define ncvAssertPrintReturn",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "pred,",
    "local": ""
  },
  {
    "origin": "msg,",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Value:",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ncvAssertReturn",
    "local": ""
  },
  {
    "origin": "#define ncvAssertReturn",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "pred,",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Value:",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ncvAssertReturnNcvStat",
    "local": ""
  },
  {
    "origin": "#define ncvAssertReturnNcvStat",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ncvOp",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Value:",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ncvSafeMatAlloc",
    "local": ""
  },
  {
    "origin": "#define ncvSafeMatAlloc",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "name,",
    "local": ""
  },
  {
    "origin": "type,",
    "local": ""
  },
  {
    "origin": "alloc,",
    "local": ""
  },
  {
    "origin": "width,",
    "local": ""
  },
  {
    "origin": "height,",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Value:",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "OBJDET_MASK_ELEMENT_INVALID_32U",
    "local": ""
  },
  {
    "origin": "#define OBJDET_MASK_ELEMENT_INVALID_32U&#160;&#160;&#160;0xFFFFFFFF",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "RECT_SIMILARITY_PROPORTION",
    "local": ""
  },
  {
    "origin": "#define RECT_SIMILARITY_PROPORTION&#160;&#160;&#160;0.2f",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "SQR",
    "local": ""
  },
  {
    "origin": "#define SQR",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#160;&#160;&#160;((x)*(x))",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "SUB_BEGIN",
    "local": ""
  },
  {
    "origin": "#define SUB_BEGIN",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "type,",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#160;&#160;&#160;struct { __inline type name",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "SUB_CALL",
    "local": ""
  },
  {
    "origin": "#define SUB_CALL",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "name",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#160;&#160;&#160;name.name",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "SUB_END",
    "local": ""
  },
  {
    "origin": "#define SUB_END",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "name",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#160;&#160;&#160;} name;",
    "local": ""
  },
  {
    "origin": "Typedef Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Ncv16s",
    "local": ""
  },
  {
    "origin": "typedef short",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Ncv16u",
    "local": ""
  },
  {
    "origin": "typedef unsigned short",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Ncv32f",
    "local": ""
  },
  {
    "origin": "typedef float",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Ncv32f_a",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Ncv32s",
    "local": ""
  },
  {
    "origin": "typedef int",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Ncv32u",
    "local": ""
  },
  {
    "origin": "typedef unsigned int",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Ncv32u_a",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Ncv64f",
    "local": ""
  },
  {
    "origin": "typedef double",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Ncv64s",
    "local": ""
  },
  {
    "origin": "typedef long long",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Ncv64u",
    "local": ""
  },
  {
    "origin": "typedef unsigned long long",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Ncv8s",
    "local": ""
  },
  {
    "origin": "typedef signed char",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Ncv8u",
    "local": ""
  },
  {
    "origin": "typedef unsigned char",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "NcvBool",
    "local": ""
  },
  {
    "origin": "typedef bool",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "NCVDebugOutputHandler",
    "local": ""
  },
  {
    "origin": "typedef void NCVDebugOutputHandler(const",
    "local": ""
  },
  {
    "origin": "&amp;msg)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "NCVStatus",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "NcvTimer",
    "local": ""
  },
  {
    "origin": "typedef struct _NcvTimer*",
    "local": ""
  },
  {
    "origin": "Enumeration Type Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "anonymous enum",
    "local": ""
  },
  {
    "origin": "anonymous enum",
    "local": ""
  },
  {
    "origin": "Return-codes for status notification, errors and warnings",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "Successful operation (same as NPP_NO_ERROR)",
    "local": ""
  },
  {
    "origin": "Unknown error.",
    "local": ""
  },
  {
    "origin": "CUDA kernel execution error.",
    "local": ""
  },
  {
    "origin": "NULL pointer argument error.",
    "local": ""
  },
  {
    "origin": "CUDA texture binding error or non-zero offset returned.",
    "local": ""
  },
  {
    "origin": "CUDA memory copy error.",
    "local": ""
  },
  {
    "origin": "CUDA memory allocation error.",
    "local": ""
  },
  {
    "origin": "CUDA memory deallocation error.",
    "local": ""
  },
  {
    "origin": "Invalid region of interest argument.",
    "local": ""
  },
  {
    "origin": "Invalid image lines step argument (check sign, alignment, relation to image width)",
    "local": ""
  },
  {
    "origin": "Invalid scale parameter passed.",
    "local": ""
  },
  {
    "origin": "Insufficient user-allocated buffer.",
    "local": ""
  },
  {
    "origin": "Memory residence error detected (check if pointers should be device or pinned)",
    "local": ""
  },
  {
    "origin": "Internal memory management error.",
    "local": ""
  },
  {
    "origin": "Marker to continue error numeration in other files.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "anonymous enum",
    "local": ""
  },
  {
    "origin": "anonymous enum",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "NCVMemoryType",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "NCVMemoryType",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "Function Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "~INCVMemAllocator()",
    "local": ""
  },
  {
    "origin": "INCVMemAllocator::~INCVMemAllocator",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "alignUp()",
    "local": ""
  },
  {
    "origin": "alignUp",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "what",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "alignment",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Calculates the aligned top bound value",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "calcOpticalFlowBM()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::calcOpticalFlowBM",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "prev",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "curr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "block_size",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "shift_size",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "max_range",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "use_previous",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "velx",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "vely",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "buf",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Calculates optical flow for 2 images using block matching algorithm */.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "connectivityMask()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::connectivityMask",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "lo",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "hi",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "compute mask for Generalized Flood fill componetns labeling.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "createBackgroundSubtractorFGD()",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; cv::cuda::createBackgroundSubtractorFGD",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "params",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Creates FGD Background Subtractor.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "params",
    "local": ""
  },
  {
    "origin": "'s parameters. See",
    "local": ""
  },
  {
    "origin": "for explanation.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "createBackgroundSubtractorGMG()",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; cv::cuda::createBackgroundSubtractorGMG",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "initializationFrames",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "decisionThreshold",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Creates GMG Background Subtractor.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "initializationFrames",
    "local": ""
  },
  {
    "origin": "Number of frames of video to use to initialize histograms.",
    "local": ""
  },
  {
    "origin": "decisionThreshold",
    "local": ""
  },
  {
    "origin": "Value above which pixel is determined to be FG.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "createImagePyramid()",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; cv::cuda::createImagePyramid",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "nLayers",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "createOpticalFlowNeedleMap()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::createOpticalFlowNeedleMap",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "u",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "vertex",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "colors",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "graphcut()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "void cv::cuda::graphcut",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "terminals",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "leftTransp",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "rightTransp",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "top",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bottom",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "labels",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "buf",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "performs labeling via graph cuts of a 2D regular 4-connected graph.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "graphcut()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "void cv::cuda::graphcut",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "terminals",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "leftTransp",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "rightTransp",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "top",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "topLeft",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "topRight",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bottom",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bottomLeft",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bottomRight",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "labels",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "buf",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "performs labeling via graph cuts of a 2D regular 8-connected graph.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "interpolateFrames()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::interpolateFrames",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "frame0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "frame1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "fu",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "fv",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "bu",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "bv",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "pos",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "newFrame",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "buf",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Interpolates frames (images) using provided optical flow (displacement field).",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "frame0",
    "local": ""
  },
  {
    "origin": "First frame (32-bit floating point images, single channel).",
    "local": ""
  },
  {
    "origin": "frame1",
    "local": ""
  },
  {
    "origin": "Second frame. Must have the same type and size as frame0 .",
    "local": ""
  },
  {
    "origin": "fu",
    "local": ""
  },
  {
    "origin": "Forward horizontal displacement.",
    "local": ""
  },
  {
    "origin": "fv",
    "local": ""
  },
  {
    "origin": "Forward vertical displacement.",
    "local": ""
  },
  {
    "origin": "bu",
    "local": ""
  },
  {
    "origin": "Backward horizontal displacement.",
    "local": ""
  },
  {
    "origin": "bv",
    "local": ""
  },
  {
    "origin": "Backward vertical displacement.",
    "local": ""
  },
  {
    "origin": "pos",
    "local": ""
  },
  {
    "origin": "New frame position.",
    "local": ""
  },
  {
    "origin": "newFrame",
    "local": ""
  },
  {
    "origin": "Output image.",
    "local": ""
  },
  {
    "origin": "buf",
    "local": ""
  },
  {
    "origin": "Temporary buffer, will have width x 6*height size, CV_32FC1 type and contain 6",
    "local": ""
  },
  {
    "origin": ": occlusion masks for first frame, occlusion masks for second, interpolated forward horizontal flow, interpolated forward vertical flow, interpolated backward horizontal flow, interpolated backward vertical flow.",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "for the asynchronous version.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "labelComponents()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::labelComponents",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "components",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "flags",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "performs connected componnents labeling.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "memSegCopyHelper()",
    "local": ""
  },
  {
    "origin": "memSegCopyHelper",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dstType",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "srcType",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "sz",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "cuStream",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Copy dispatchers",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "memSegCopyHelper2D()",
    "local": ""
  },
  {
    "origin": "memSegCopyHelper2D",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dstPitch",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dstType",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "srcPitch",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "srcType",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "widthbytes",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "height",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "cuStream",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "NCV_CT_ASSERT()",
    "local": ""
  },
  {
    "origin": "[1/5]",
    "local": ""
  },
  {
    "origin": "NCV_CT_ASSERT",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "sizeof(",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "NCV_CT_ASSERT()",
    "local": ""
  },
  {
    "origin": "[2/5]",
    "local": ""
  },
  {
    "origin": "NCV_CT_ASSERT",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "sizeof(",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "NCV_CT_ASSERT()",
    "local": ""
  },
  {
    "origin": "[3/5]",
    "local": ""
  },
  {
    "origin": "NCV_CT_ASSERT",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "sizeof(",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "NCV_CT_ASSERT()",
    "local": ""
  },
  {
    "origin": "[4/5]",
    "local": ""
  },
  {
    "origin": "NCV_CT_ASSERT",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "sizeof(",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "NCV_CT_ASSERT()",
    "local": ""
  },
  {
    "origin": "[5/5]",
    "local": ""
  },
  {
    "origin": "NCV_CT_ASSERT",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "sizeof(",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ncvApplyHaarClassifierCascade_device()",
    "local": ""
  },
  {
    "origin": "ncvApplyHaarClassifierCascade_device",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "d_integralImage",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "d_weights",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "d_pixelMask",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "numDetections",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "haar",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "h_HaarStages",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "d_HaarStages",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "d_HaarNodes",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "d_HaarFeatures",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bMaskElements",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "anchorsRoi",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "pixelStep",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "scaleArea",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "gpuAllocator",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "cpuAllocator",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "devProp",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "cuStream",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ncvApplyHaarClassifierCascade_host()",
    "local": ""
  },
  {
    "origin": "ncvApplyHaarClassifierCascade_host",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "h_integralImage",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "h_weights",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "h_pixelMask",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "numDetections",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "haar",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "h_HaarStages",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "h_HaarNodes",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "h_HaarFeatures",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bMaskElements",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "anchorsRoi",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "pixelStep",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "scaleArea",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "NCVBroxOpticalFlow()",
    "local": ""
  },
  {
    "origin": "NCVBroxOpticalFlow",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "desc",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "gpu_mem_allocator",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "frame0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "frame1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "u",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Compute optical flow.",
    "local": ""
  },
  {
    "origin": "Based on method by Brox et al [2004]",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "desc",
    "local": ""
  },
  {
    "origin": "model and solver parameters",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "gpu_mem_allocator",
    "local": ""
  },
  {
    "origin": "GPU memory allocator",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "frame0",
    "local": ""
  },
  {
    "origin": "source frame",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "frame1",
    "local": ""
  },
  {
    "origin": "frame to track",
    "local": ""
  },
  {
    "origin": "[out]",
    "local": ""
  },
  {
    "origin": "u",
    "local": ""
  },
  {
    "origin": "flow horizontal component (along",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "axis)",
    "local": ""
  },
  {
    "origin": "[out]",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": "flow vertical component (along",
    "local": ""
  },
  {
    "origin": "y",
    "local": ""
  },
  {
    "origin": "axis)",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "computation status",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ncvDebugOutput()",
    "local": ""
  },
  {
    "origin": "void ncvDebugOutput",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "msg",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ncvDetectObjectsMultiScale_device()",
    "local": ""
  },
  {
    "origin": "ncvDetectObjectsMultiScale_device",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "d_srcImg",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "srcRoi",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "d_dstRects",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dstNumRects",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "haar",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "h_HaarStages",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "d_HaarStages",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "d_HaarNodes",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "d_HaarFeatures",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "minObjSize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "minNeighbors",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "scaleStep",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "pixelStep",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "flags",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "gpuAllocator",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "cpuAllocator",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "devProp",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "cuStream",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ncvDrawRects_32u_device()",
    "local": ""
  },
  {
    "origin": "ncvDrawRects_32u_device",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "d_dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dstStride",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dstWidth",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dstHeight",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "d_rects",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "numRects",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "cuStream",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ncvDrawRects_32u_host()",
    "local": ""
  },
  {
    "origin": "ncvDrawRects_32u_host",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "h_dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dstStride",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dstWidth",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dstHeight",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "h_rects",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "numRects",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ncvDrawRects_8u_device()",
    "local": ""
  },
  {
    "origin": "ncvDrawRects_8u_device",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "d_dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dstStride",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dstWidth",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dstHeight",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "d_rects",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "numRects",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "cuStream",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ncvDrawRects_8u_host()",
    "local": ""
  },
  {
    "origin": "ncvDrawRects_8u_host",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "h_dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dstStride",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dstWidth",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dstHeight",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "h_rects",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "numRects",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ncvEndQueryTimerMs()",
    "local": ""
  },
  {
    "origin": "double ncvEndQueryTimerMs",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "t",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ncvEndQueryTimerUs()",
    "local": ""
  },
  {
    "origin": "double ncvEndQueryTimerUs",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "t",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ncvGroupRectangles_host()",
    "local": ""
  },
  {
    "origin": "ncvGroupRectangles_host",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "hypotheses",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "numHypotheses",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "minNeighbors",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "intersectEps",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "hypothesesWeights",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Operations with rectangles",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ncvGrowDetectionsVector_device()",
    "local": ""
  },
  {
    "origin": "ncvGrowDetectionsVector_device",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "pixelMask",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "numPixelMaskDetections",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "hypotheses",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "totalDetections",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "totalMaxDetections",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "rectWidth",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "rectHeight",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "curScale",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "cuStream",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ncvGrowDetectionsVector_host()",
    "local": ""
  },
  {
    "origin": "ncvGrowDetectionsVector_host",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "pixelMask",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "numPixelMaskDetections",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "hypotheses",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "totalDetections",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "totalMaxDetections",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "rectWidth",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "rectHeight",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "curScale",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ncvHaarGetClassifierSize()",
    "local": ""
  },
  {
    "origin": "ncvHaarGetClassifierSize",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "filename",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "numStages",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "numNodes",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "numFeatures",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ncvHaarLoadFromFile_host()",
    "local": ""
  },
  {
    "origin": "ncvHaarLoadFromFile_host",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "filename",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "haar",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "h_HaarStages",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "h_HaarNodes",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "h_HaarFeatures",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ncvHaarStoreNVBIN_host()",
    "local": ""
  },
  {
    "origin": "ncvHaarStoreNVBIN_host",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "filename",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "haar",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "h_HaarStages",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "h_HaarNodes",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "h_HaarFeatures",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ncvSetDebugOutputHandler()",
    "local": ""
  },
  {
    "origin": "void ncvSetDebugOutputHandler",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "func",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ncvStartTimer()",
    "local": ""
  },
  {
    "origin": "ncvStartTimer",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "projectPoints()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::projectPoints",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "rvec",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "tvec",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "camera_mat",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "dist_coef",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "solvePnPRansac()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::solvePnPRansac",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "object",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "camera_mat",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "dist_coef",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "rvec",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "tvec",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "use_extrinsic_guess",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "num_iters",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "max_dist",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "min_inlier_count",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "inliers",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Finds the object pose from 3D-2D point correspondences.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "object",
    "local": ""
  },
  {
    "origin": "Single-row matrix of object points.",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "Single-row matrix of image points.",
    "local": ""
  },
  {
    "origin": "camera_mat",
    "local": ""
  },
  {
    "origin": "3x3 matrix of intrinsic camera parameters.",
    "local": ""
  },
  {
    "origin": "dist_coef",
    "local": ""
  },
  {
    "origin": "Distortion coefficients. See undistortPoints for details.",
    "local": ""
  },
  {
    "origin": "rvec",
    "local": ""
  },
  {
    "origin": "Output 3D rotation vector.",
    "local": ""
  },
  {
    "origin": "tvec",
    "local": ""
  },
  {
    "origin": "Output 3D translation vector.",
    "local": ""
  },
  {
    "origin": "use_extrinsic_guess",
    "local": ""
  },
  {
    "origin": "Flag to indicate that the function must use rvec and tvec as an initial transformation guess. It is not supported for now.",
    "local": ""
  },
  {
    "origin": "num_iters",
    "local": ""
  },
  {
    "origin": "Maximum number of RANSAC iterations.",
    "local": ""
  },
  {
    "origin": "max_dist",
    "local": ""
  },
  {
    "origin": "Euclidean distance threshold to detect whether point is inlier or not.",
    "local": ""
  },
  {
    "origin": "min_inlier_count",
    "local": ""
  },
  {
    "origin": "Flag to indicate that the function must stop if greater or equal number of inliers is achieved. It is not supported for now.",
    "local": ""
  },
  {
    "origin": "inliers",
    "local": ""
  },
  {
    "origin": "Output vector of inlier indices.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "transformPoints()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::transformPoints",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "rvec",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "tvec",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Variable Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "K_LOG2_WARP_SIZE",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "K_LOG2_WARP_SIZE = 5",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "K_WARP_SIZE",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:41 for OpenCV by &#160;",
    "local": ""
  }
]