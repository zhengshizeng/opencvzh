[
  {
    "origin": "OpenCV: Tracking API implementation details",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Namespaces",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Typedefs",
    "local": ""
  },
  {
    "origin": "Tracking API implementation details",
    "local": ""
  },
  {
    "origin": "Namespaces",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Abstract base class for",
    "local": ""
  },
  {
    "origin": "that represents the feature.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "based on HAAR features, used by",
    "local": ""
  },
  {
    "origin": "and many others algorithms.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class that manages the extraction and selection of features.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class that manages the sampler in order to select regions for the update the model of the tracker [AAM] Sampling e Labeling. See table I and section III B.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Abstract base class for",
    "local": ""
  },
  {
    "origin": "that represents the algorithm for the specific sampler.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "based on CSC (current state centered), used by MIL algorithm",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Abstract base class for",
    "local": ""
  },
  {
    "origin": "that represents the feature.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "based on",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "based on HOG.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "based on LBP.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class that manages the extraction and selection of features.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Abstract class that represents the model of the target.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class that manages the sampler in order to select regions for the update the model of the tracker [AAM] Sampling e Labeling. See table I and section III B.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Abstract base class for",
    "local": ""
  },
  {
    "origin": "that represents the algorithm for the specific sampler.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "based on CS (current state), used by algorithm TrackerBoosting.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "based on CSC (current state centered), used by MIL algorithm",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "This sampler is based on particle filtering.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Abstract base class for",
    "local": ""
  },
  {
    "origin": "that estimates the most likely target state.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "based on ADA-Boosting.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "based on SVM.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Abstract base class for",
    "local": ""
  },
  {
    "origin": "that represents a possible state of the target.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Typedefs",
    "local": ""
  },
  {
    "origin": "typedef std::vector&lt; std::pair&lt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "Represents the model of the target at frame \\(k\\) (all states and scores)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "Represents the estimate states for all frames.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Long-term optical tracking API",
    "local": ""
  },
  {
    "origin": "Long-term optical tracking is an important issue for many computer vision applications in real world scenario. The development in this area is very fragmented and this API is an unique interface useful for plug several algorithms and compare them. This work is partially based on",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "These algorithms start from a bounding box of the target and with their internal representation they avoid the drift during the tracking. These long-term trackers are able to evaluate online the quality of the location of the target in the new frame, without ground truth.",
    "local": ""
  },
  {
    "origin": "There are three main components: the TrackerContribSampler, the TrackerContribFeatureSet and the TrackerModel. The first component is the object that computes the patches over the frame based on the last target location. The TrackerContribFeatureSet is the class that manages the Features, is possible plug many kind of these (HAAR, HOG, LBP,",
    "local": ""
  },
  {
    "origin": ", etc). The last component is the internal representation of the target, it is the appearance model. It stores all state candidates and compute the trajectory (the most likely target states). The class TrackerTargetState represents a possible state of the target. The TrackerContribSampler and the TrackerContribFeatureSet are the visual representation of the target, instead the TrackerModel is the statistical model.",
    "local": ""
  },
  {
    "origin": "A recent benchmark between these algorithms can be found in",
    "local": ""
  },
  {
    "origin": "Creating Your Own Tracker",
    "local": ""
  },
  {
    "origin": "If you want to create a new tracker, here's what you have to do. First, decide on the name of the class for the tracker (to meet the existing style, we suggest something with prefix \"tracker\", e.g. trackerMIL, trackerBoosting) &ndash; we shall refer to this choice as to \"classname\" in subsequent.",
    "local": ""
  },
  {
    "origin": "Declare your tracker in modules/tracking/include/opencv2/tracking/tracker.hpp. Your tracker should inherit from",
    "local": ""
  },
  {
    "origin": "(please, see the example below). You should declare the specialized Param structure, where you probably will want to put the data, needed to initialize your tracker. You should get something similar to :",
    "local": ""
  },
  {
    "origin": "of course, you can also add any additional methods of your choice. It should be pointed out, however, that it is not expected to have a constructor declared, as creation should be done via the corresponding create() method.",
    "local": ""
  },
  {
    "origin": "Finally, you should implement the function with signature :",
    "local": ""
  },
  {
    "origin": "That function can (and probably will) return a pointer to some derived class of \"classname\", which will probably have a real constructor.",
    "local": ""
  },
  {
    "origin": "Every tracker has three component TrackerContribSampler, TrackerContribFeatureSet and TrackerModel. The first two are instantiated from",
    "local": ""
  },
  {
    "origin": "base class, instead the last component is abstract, so you must implement your TrackerModel.",
    "local": ""
  },
  {
    "origin": "TrackerContribSampler",
    "local": ""
  },
  {
    "origin": "TrackerContribSampler is already instantiated, but you should define the sampling algorithm and add the classes (or single class) to TrackerContribSampler. You can choose one of the ready implementation as TrackerContribSamplerCSC or you can implement your sampling method, in this case the class must inherit TrackerContribSamplerAlgorithm. Fill the samplingImpl method that writes the result in \"sample\" output argument.",
    "local": ""
  },
  {
    "origin": "Example of creating specialized TrackerContribSamplerAlgorithm TrackerContribSamplerCSC : :",
    "local": ""
  },
  {
    "origin": "Example of adding TrackerContribSamplerAlgorithm to TrackerContribSampler : :",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "TrackerContribSamplerCSC, TrackerContribSamplerAlgorithm",
    "local": ""
  },
  {
    "origin": "TrackerContribFeatureSet",
    "local": ""
  },
  {
    "origin": "TrackerContribFeatureSet is already instantiated (as first) , but you should define what kinds of features you'll use in your tracker. You can use multiple feature types, so you can add a ready implementation as TrackerContribFeatureHAAR in your TrackerContribFeatureSet or develop your own implementation. In this case, in the computeImpl method put the code that extract the features and in the selection method optionally put the code for the refinement and selection of the features.",
    "local": ""
  },
  {
    "origin": "Example of creating specialized TrackerFeature TrackerContribFeatureHAAR : :",
    "local": ""
  },
  {
    "origin": "Example of adding TrackerFeature to TrackerContribFeatureSet : :",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "TrackerContribFeatureHAAR, TrackerContribFeatureSet",
    "local": ""
  },
  {
    "origin": "TrackerModel",
    "local": ""
  },
  {
    "origin": "TrackerModel is abstract, so in your implementation you must develop your TrackerModel that inherit from TrackerModel. Fill the method for the estimation of the state \"modelEstimationImpl\", that estimates the most likely target location, see",
    "local": ""
  },
  {
    "origin": "table I (ME) for further information. Fill \"modelUpdateImpl\" in order to update the model, see",
    "local": ""
  },
  {
    "origin": "table I (MU). In this class you can use the :cConfidenceMap and :cTrajectory to storing the model. The first represents the model on the all possible candidate states and the second represents the list of all estimated states.",
    "local": ""
  },
  {
    "origin": "Example of creating specialized TrackerModel TrackerMILModel : :",
    "local": ""
  },
  {
    "origin": "And add it in your",
    "local": ""
  },
  {
    "origin": ": :",
    "local": ""
  },
  {
    "origin": "In the last step you should define the TrackerStateEstimator based on your implementation or you can use one of ready class as TrackerStateEstimatorMILBoosting. It represent the statistical part of the model that estimates the most likely target state.",
    "local": ""
  },
  {
    "origin": "Example of creating specialized TrackerStateEstimator TrackerStateEstimatorMILBoosting : :",
    "local": ""
  },
  {
    "origin": "And add it in your TrackerModel : :",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "TrackerModel, TrackerStateEstimatorMILBoosting, TrackerTargetState",
    "local": ""
  },
  {
    "origin": "During this step, you should define your TrackerTargetState based on your implementation. TrackerTargetState base class has only the bounding box (upper-left position, width and height), you can enrich it adding scale factor, target rotation, etc.",
    "local": ""
  },
  {
    "origin": "Example of creating specialized TrackerTargetState TrackerMILTargetState : :",
    "local": ""
  },
  {
    "origin": "Typedef Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ConfidenceMap",
    "local": ""
  },
  {
    "origin": "typedef std::vector&lt;std::pair&lt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;, float&gt; &gt;",
    "local": ""
  },
  {
    "origin": "Represents the model of the target at frame \\(k\\) (all states and scores)",
    "local": ""
  },
  {
    "origin": "See",
    "local": ""
  },
  {
    "origin": "The set of the pair \\(\\langle \\hat{x}^{i}_{k}, C^{i}_{k} \\rangle\\)",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Trajectory",
    "local": ""
  },
  {
    "origin": "typedef std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &gt;",
    "local": ""
  },
  {
    "origin": "Represents the estimate states for all frames.",
    "local": ""
  },
  {
    "origin": "\\(x_{k}\\) is the trajectory of the target up to time \\(k\\)",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:41 for OpenCV by &#160;",
    "local": ""
  }
]