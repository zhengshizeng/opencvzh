[
  {
    "origin": "OpenCV: opencv2/features2d.hpp File Reference",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Namespaces",
    "local": ""
  },
  {
    "origin": "Typedefs",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "features2d.hpp File Reference",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Class for implementing the wrapper which makes detectors and extractors to be affine invariant, described as ASIFT in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Wrapping class for feature detection using the AGAST method. :",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class implementing the",
    "local": ""
  },
  {
    "origin": "keypoint detector and descriptor extractor, described in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Brute-force descriptor matcher.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class to compute an image descriptor using the",
    "local": ""
  },
  {
    "origin": "bag of visual words",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "kmeans -based class to train visual vocabulary using the",
    "local": ""
  },
  {
    "origin": "bag of visual words",
    "local": ""
  },
  {
    "origin": "approach. :",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Abstract base class for training the",
    "local": ""
  },
  {
    "origin": "bag of visual words",
    "local": ""
  },
  {
    "origin": "vocabulary from a set of descriptors.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class implementing the",
    "local": ""
  },
  {
    "origin": "keypoint detector and descriptor extractor, described in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Abstract base class for matching keypoint descriptors.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Wrapping class for feature detection using the FAST method. :",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Abstract base class for 2D image feature detectors and descriptor extractors.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Flann-based descriptor matcher.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Wrapping class for feature detection using the goodFeaturesToTrack function. :",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class implementing the",
    "local": ""
  },
  {
    "origin": "keypoint detector and descriptor extractor, described in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "A class filters a vector of keypoints.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Maximally stable extremal region extractor.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class implementing the",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "oriented BRIEF",
    "local": ""
  },
  {
    "origin": ") keypoint detector and descriptor extractor.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class for extracting keypoints and computing descriptors using the Scale Invariant Feature Transform (",
    "local": ""
  },
  {
    "origin": ") algorithm by D. Lowe",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class for extracting blobs from an image. :",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Namespaces",
    "local": ""
  },
  {
    "origin": "\"black box\" representation of the file storage associated with a file on disk.",
    "local": ""
  },
  {
    "origin": "Typedefs",
    "local": ""
  },
  {
    "origin": "typedef Feature2D&#160;",
    "local": ""
  },
  {
    "origin": "typedef Feature2D&#160;",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "(InputArray image, std::vector&lt; KeyPoint &gt; &amp;keypoints, int threshold, bool nonmaxSuppression=true)",
    "local": ""
  },
  {
    "origin": "(InputArray image, std::vector&lt; KeyPoint &gt; &amp;keypoints, int threshold, bool nonmaxSuppression, AgastFeatureDetector::DetectorType type)",
    "local": ""
  },
  {
    "origin": "Detects corners using the AGAST algorithm.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt; std::vector&lt; DMatch &gt; &gt; &amp;matches1to2, const std::vector&lt; std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &gt; &amp;correctMatches1to2Mask, std::vector&lt; Point2f &gt; &amp;recallPrecisionCurve)",
    "local": ""
  },
  {
    "origin": "(InputArray image, const std::vector&lt; KeyPoint &gt; &amp;keypoints, InputOutputArray outImage, const Scalar &amp;color=Scalar::all(-1), DrawMatchesFlags flags=DrawMatchesFlags::DEFAULT)",
    "local": ""
  },
  {
    "origin": "Draws keypoints.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(InputArray img1, const std::vector&lt; KeyPoint &gt; &amp;keypoints1, InputArray img2, const std::vector&lt; KeyPoint &gt; &amp;keypoints2, const std::vector&lt; DMatch &gt; &amp;matches1to2, InputOutputArray outImg, const Scalar &amp;matchColor=Scalar::all(-1), const Scalar &amp;singlePointColor=Scalar::all(-1), const std::vector&lt; char &gt; &amp;matchesMask=std::vector&lt; char &gt;(), DrawMatchesFlags flags=DrawMatchesFlags::DEFAULT)",
    "local": ""
  },
  {
    "origin": "Draws the found matches of keypoints from two images.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(InputArray img1, const std::vector&lt; KeyPoint &gt; &amp;keypoints1, InputArray img2, const std::vector&lt; KeyPoint &gt; &amp;keypoints2, const std::vector&lt; std::vector&lt; DMatch &gt; &gt; &amp;matches1to2, InputOutputArray outImg, const Scalar &amp;matchColor=Scalar::all(-1), const Scalar &amp;singlePointColor=Scalar::all(-1), const std::vector&lt; std::vector&lt; char &gt; &gt; &amp;matchesMask=std::vector&lt; std::vector&lt; char &gt; &gt;(), DrawMatchesFlags flags=DrawMatchesFlags::DEFAULT)",
    "local": ""
  },
  {
    "origin": "(const Mat &amp;img1, const Mat &amp;img2, const Mat &amp;H1to2, std::vector&lt; KeyPoint &gt; *keypoints1, std::vector&lt; KeyPoint &gt; *keypoints2, float &amp;repeatability, int &amp;correspCount, const Ptr&lt; FeatureDetector &gt; &amp;fdetector=Ptr&lt; FeatureDetector &gt;())",
    "local": ""
  },
  {
    "origin": "(InputArray image, std::vector&lt; KeyPoint &gt; &amp;keypoints, int threshold, bool nonmaxSuppression=true)",
    "local": ""
  },
  {
    "origin": "(InputArray image, std::vector&lt; KeyPoint &gt; &amp;keypoints, int threshold, bool nonmaxSuppression, FastFeatureDetector::DetectorType type)",
    "local": ""
  },
  {
    "origin": "Detects corners using the FAST algorithm.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt; Point2f &gt; &amp;recallPrecisionCurve, float l_precision)",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt; Point2f &gt; &amp;recallPrecisionCurve, float l_precision)",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:33 for OpenCV by &#160;",
    "local": ""
  }
]