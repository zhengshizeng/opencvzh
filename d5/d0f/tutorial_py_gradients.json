[
  {
    "origin": "OpenCV: Image Gradients",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Image Gradients",
    "local": ""
  },
  {
    "origin": "Goal",
    "local": ""
  },
  {
    "origin": "In this chapter, we will learn to:",
    "local": ""
  },
  {
    "origin": "Find Image gradients, edges etc",
    "local": ""
  },
  {
    "origin": "We will see following functions :",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "etc",
    "local": ""
  },
  {
    "origin": "Theory",
    "local": ""
  },
  {
    "origin": "OpenCV provides three types of gradient filters or High-pass filters, Sobel, Scharr and Laplacian. We will see each one of them.",
    "local": ""
  },
  {
    "origin": "1. Sobel and Scharr Derivatives",
    "local": ""
  },
  {
    "origin": "Sobel operators is a joint Gausssian smoothing plus differentiation operation, so it is more resistant to noise. You can specify the direction of derivatives to be taken, vertical or horizontal (by the arguments, yorder and xorder respectively). You can also specify the size of kernel by the argument ksize. If ksize = -1, a 3x3 Scharr filter is used which gives better results than 3x3 Sobel filter. Please see the docs for kernels used.",
    "local": ""
  },
  {
    "origin": "2. Laplacian Derivatives",
    "local": ""
  },
  {
    "origin": "It calculates the Laplacian of the image given by the relation, \\(\\Delta src = \\frac{\\partial ^2{src}}{\\partial x^2} + \\frac{\\partial ^2{src}}{\\partial y^2}\\) where each derivative is found using Sobel derivatives. If ksize = 1, then following kernel is used for filtering:",
    "local": ""
  },
  {
    "origin": "\\[kernel = \\begin{bmatrix} 0 &amp; 1 &amp; 0 \\\\ 1 &amp; -4 &amp; 1 \\\\ 0 &amp; 1 &amp; 0 \\end{bmatrix}\\]",
    "local": ""
  },
  {
    "origin": "Code",
    "local": ""
  },
  {
    "origin": "Below code shows all operators in a single diagram. All kernels are of 5x5 size. Depth of output image is passed -1 to get the result in np.uint8 type.",
    "local": ""
  },
  {
    "origin": "Result:",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "One Important Matter!",
    "local": ""
  },
  {
    "origin": "In our last example, output datatype is cv.CV_8U or np.uint8. But there is a slight problem with that. Black-to-White transition is taken as Positive slope (it has a positive value) while White-to-Black transition is taken as a Negative slope (It has negative value). So when you convert data to np.uint8, all negative slopes are made zero. In simple words, you miss that edge.",
    "local": ""
  },
  {
    "origin": "If you want to detect both edges, better option is to keep the output datatype to some higher forms, like cv.CV_16S, cv.CV_64F etc, take its absolute value and then convert back to cv.CV_8U. Below code demonstrates this procedure for a horizontal Sobel filter and difference in results.",
    "local": ""
  },
  {
    "origin": "Check the result below:",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "Additional Resources",
    "local": ""
  },
  {
    "origin": "Exercises",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:37 for OpenCV by &#160;",
    "local": ""
  }
]