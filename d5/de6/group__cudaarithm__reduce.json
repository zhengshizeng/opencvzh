[
  {
    "origin": "OpenCV: Matrix Reductions",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "Matrix Reductions",
    "local": ""
  },
  {
    "origin": "&raquo;",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "mask=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Returns the sum of absolute values for matrix elements.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "dst,",
    "local": ""
  },
  {
    "origin": "mask=",
    "local": ""
  },
  {
    "origin": "(),",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "dst, int normType,",
    "local": ""
  },
  {
    "origin": "mask=",
    "local": ""
  },
  {
    "origin": "(),",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src1,",
    "local": ""
  },
  {
    "origin": "src2,",
    "local": ""
  },
  {
    "origin": "dst, int normType=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "dst,",
    "local": ""
  },
  {
    "origin": "mask=",
    "local": ""
  },
  {
    "origin": "(),",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "dst,",
    "local": ""
  },
  {
    "origin": "mask=",
    "local": ""
  },
  {
    "origin": "(),",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src)",
    "local": ""
  },
  {
    "origin": "Counts non-zero matrix elements.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "dst,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "dst,",
    "local": ""
  },
  {
    "origin": "mask=",
    "local": ""
  },
  {
    "origin": "(),",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "minMaxVals,",
    "local": ""
  },
  {
    "origin": "loc,",
    "local": ""
  },
  {
    "origin": "mask=",
    "local": ""
  },
  {
    "origin": "(),",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Computes an integral image.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "mtx,",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;stddev)",
    "local": ""
  },
  {
    "origin": "Computes a mean value and a standard deviation of matrix elements.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "mtx,",
    "local": ""
  },
  {
    "origin": "dst,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src, double *minVal, double *maxVal,",
    "local": ""
  },
  {
    "origin": "mask=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Finds global minimum and maximum matrix elements and returns their values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src, double *minVal, double *maxVal,",
    "local": ""
  },
  {
    "origin": "*minLoc,",
    "local": ""
  },
  {
    "origin": "*maxLoc,",
    "local": ""
  },
  {
    "origin": "mask=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Finds global minimum and maximum matrix elements and returns their values with locations.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src1, int normType,",
    "local": ""
  },
  {
    "origin": "mask=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Returns the norm of a matrix (or difference of two matrices).",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src1,",
    "local": ""
  },
  {
    "origin": "src2, int normType=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns the difference of two matrices.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "dst, double alpha, double beta, int norm_type, int dtype,",
    "local": ""
  },
  {
    "origin": "mask=",
    "local": ""
  },
  {
    "origin": "(),",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Normalizes the norm or value range of an array.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst,",
    "local": ""
  },
  {
    "origin": "rect,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Computes a standard deviation of integral images.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "mtx,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Reduces a matrix to a vector.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "sqsum,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Computes a squared integral image.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "mask=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Returns the squared sum of matrix elements.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "mask=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Returns the sum of matrix elements.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Function Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "absSum()",
    "local": ""
  },
  {
    "origin": "cv::cuda::absSum",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns the sum of absolute values for matrix elements.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Source image of any depth except for CV_64F .",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "optional operation mask; it must have the same size as src1 and CV_8UC1 type.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "calcAbsSum()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::calcAbsSum",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "calcNorm()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::calcNorm",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "normType",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "calcNormDiff()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::calcNormDiff",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "src2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "normType",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "calcSqrSum()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::calcSqrSum",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "calcSum()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::calcSum",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "countNonZero()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "int cv::cuda::countNonZero",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Counts non-zero matrix elements.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Single-channel source image.",
    "local": ""
  },
  {
    "origin": "The function does not work with CV_64F images on GPUs with the compute capability &lt; 1.3.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "countNonZero()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "void cv::cuda::countNonZero",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "findMinMax()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::findMinMax",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "findMinMaxLoc()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::findMinMaxLoc",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "minMaxVals",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "loc",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "integral()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::integral",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "sum",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Computes an integral image.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Source image. Only CV_8UC1 images are supported for now.",
    "local": ""
  },
  {
    "origin": "sum",
    "local": ""
  },
  {
    "origin": "Integral image containing 32-bit unsigned integer values packed into CV_32SC1 .",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "for the asynchronous version.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "meanStdDev()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "void cv::cuda::meanStdDev",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "mtx",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "mean",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stddev",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Computes a mean value and a standard deviation of matrix elements.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "mtx",
    "local": ""
  },
  {
    "origin": "Source matrix. CV_8UC1 matrices are supported for now.",
    "local": ""
  },
  {
    "origin": "mean",
    "local": ""
  },
  {
    "origin": "Mean value.",
    "local": ""
  },
  {
    "origin": "stddev",
    "local": ""
  },
  {
    "origin": "Standard deviation value.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "meanStdDev()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "void cv::cuda::meanStdDev",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "mtx",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "minMax()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::minMax",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "minVal",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "maxVal",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Finds global minimum and maximum matrix elements and returns their values.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Single-channel source image.",
    "local": ""
  },
  {
    "origin": "minVal",
    "local": ""
  },
  {
    "origin": "Pointer to the returned minimum value. Use NULL if not required.",
    "local": ""
  },
  {
    "origin": "maxVal",
    "local": ""
  },
  {
    "origin": "Pointer to the returned maximum value. Use NULL if not required.",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "Optional mask to select a sub-matrix.",
    "local": ""
  },
  {
    "origin": "The function does not work with CV_64F images on GPUs with the compute capability &lt; 1.3.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "minMaxLoc()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::minMaxLoc",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "minVal",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "maxVal",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "minLoc",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "maxLoc",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Finds global minimum and maximum matrix elements and returns their values with locations.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Single-channel source image.",
    "local": ""
  },
  {
    "origin": "minVal",
    "local": ""
  },
  {
    "origin": "Pointer to the returned minimum value. Use NULL if not required.",
    "local": ""
  },
  {
    "origin": "maxVal",
    "local": ""
  },
  {
    "origin": "Pointer to the returned maximum value. Use NULL if not required.",
    "local": ""
  },
  {
    "origin": "minLoc",
    "local": ""
  },
  {
    "origin": "Pointer to the returned minimum location. Use NULL if not required.",
    "local": ""
  },
  {
    "origin": "maxLoc",
    "local": ""
  },
  {
    "origin": "Pointer to the returned maximum location. Use NULL if not required.",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "Optional mask to select a sub-matrix.",
    "local": ""
  },
  {
    "origin": "The function does not work with CV_64F images on GPU with the compute capability &lt; 1.3.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "norm()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "double cv::cuda::norm",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "normType",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns the norm of a matrix (or difference of two matrices).",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src1",
    "local": ""
  },
  {
    "origin": "Source matrix. Any matrices except 64F are supported.",
    "local": ""
  },
  {
    "origin": "normType",
    "local": ""
  },
  {
    "origin": "Norm type. NORM_L1 , NORM_L2 , and NORM_INF are supported for now.",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "optional operation mask; it must have the same size as src1 and CV_8UC1 type.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "norm()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "double cv::cuda::norm",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "src2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "normType",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns the difference of two matrices.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src1",
    "local": ""
  },
  {
    "origin": "Source matrix. Any matrices except 64F are supported.",
    "local": ""
  },
  {
    "origin": "src2",
    "local": ""
  },
  {
    "origin": "Second source matrix (if any) with the same size and type as src1.",
    "local": ""
  },
  {
    "origin": "normType",
    "local": ""
  },
  {
    "origin": "Norm type. NORM_L1 , NORM_L2 , and NORM_INF are supported for now.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "normalize()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::normalize",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "alpha",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "beta",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "norm_type",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dtype",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Normalizes the norm or value range of an array.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Input array.",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "Output array of the same size as src .",
    "local": ""
  },
  {
    "origin": "alpha",
    "local": ""
  },
  {
    "origin": "Norm value to normalize to or the lower range boundary in case of the range normalization.",
    "local": ""
  },
  {
    "origin": "beta",
    "local": ""
  },
  {
    "origin": "Upper range boundary in case of the range normalization; it is not used for the norm normalization.",
    "local": ""
  },
  {
    "origin": "norm_type",
    "local": ""
  },
  {
    "origin": "Normalization type ( NORM_MINMAX , NORM_L2 , NORM_L1 or NORM_INF ).",
    "local": ""
  },
  {
    "origin": "dtype",
    "local": ""
  },
  {
    "origin": "When negative, the output array has the same type as src; otherwise, it has the same number of channels as src and the depth =",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "Optional operation mask.",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "for the asynchronous version.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "rectStdDev()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::rectStdDev",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "sqr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "rect",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Computes a standard deviation of integral images.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Source image. Only the CV_32SC1 type is supported.",
    "local": ""
  },
  {
    "origin": "sqr",
    "local": ""
  },
  {
    "origin": "Squared source image. Only the CV_32FC1 type is supported.",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "Destination image with the same type and size as src .",
    "local": ""
  },
  {
    "origin": "rect",
    "local": ""
  },
  {
    "origin": "Rectangular window.",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "for the asynchronous version.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "reduce()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::reduce",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "mtx",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "vec",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dim",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "reduceOp",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dtype",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Reduces a matrix to a vector.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "mtx",
    "local": ""
  },
  {
    "origin": "Source 2D matrix.",
    "local": ""
  },
  {
    "origin": "vec",
    "local": ""
  },
  {
    "origin": "Destination vector. Its size and type is defined by dim and dtype parameters.",
    "local": ""
  },
  {
    "origin": "dim",
    "local": ""
  },
  {
    "origin": "Dimension index along which the matrix is reduced. 0 means that the matrix is reduced to a single row. 1 means that the matrix is reduced to a single column.",
    "local": ""
  },
  {
    "origin": "reduceOp",
    "local": ""
  },
  {
    "origin": "Reduction operation that could be one of the following:",
    "local": ""
  },
  {
    "origin": "CV_REDUCE_SUM",
    "local": ""
  },
  {
    "origin": "The output is the sum of all rows/columns of the matrix.",
    "local": ""
  },
  {
    "origin": "CV_REDUCE_AVG",
    "local": ""
  },
  {
    "origin": "The output is the mean vector of all rows/columns of the matrix.",
    "local": ""
  },
  {
    "origin": "CV_REDUCE_MAX",
    "local": ""
  },
  {
    "origin": "The output is the maximum (column/row-wise) of all rows/columns of the matrix.",
    "local": ""
  },
  {
    "origin": "CV_REDUCE_MIN",
    "local": ""
  },
  {
    "origin": "The output is the minimum (column/row-wise) of all rows/columns of the matrix.",
    "local": ""
  },
  {
    "origin": "dtype",
    "local": ""
  },
  {
    "origin": "When it is negative, the destination vector will have the same type as the source matrix. Otherwise, its type will be CV_MAKE_TYPE(",
    "local": ""
  },
  {
    "origin": ", mtx.channels()) .",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "for the asynchronous version.",
    "local": ""
  },
  {
    "origin": "The function reduce reduces the matrix to a vector by treating the matrix rows/columns as a set of 1D vectors and performing the specified operation on the vectors until a single row/column is obtained. For example, the function can be used to compute horizontal and vertical projections of a raster image. In case of CV_REDUCE_SUM and CV_REDUCE_AVG , the output may have a larger element bit-depth to preserve accuracy. And multi-channel arrays are also supported in these two reduction modes.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "sqrIntegral()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::sqrIntegral",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "sqsum",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Computes a squared integral image.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Source image. Only CV_8UC1 images are supported for now.",
    "local": ""
  },
  {
    "origin": "sqsum",
    "local": ""
  },
  {
    "origin": "Squared integral image containing 64-bit unsigned integer values packed into CV_64FC1 .",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "for the asynchronous version.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "sqrSum()",
    "local": ""
  },
  {
    "origin": "cv::cuda::sqrSum",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns the squared sum of matrix elements.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Source image of any depth except for CV_64F .",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "optional operation mask; it must have the same size as src1 and CV_8UC1 type.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "sum()",
    "local": ""
  },
  {
    "origin": "cv::cuda::sum",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns the sum of matrix elements.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Source image of any depth except for CV_64F .",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "optional operation mask; it must have the same size as src1 and CV_8UC1 type.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:41 for OpenCV by &#160;",
    "local": ""
  }
]