[
  {
    "origin": "OpenCV: cv::face::FaceRecognizer Class Reference",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "Protected Attributes",
    "local": ""
  },
  {
    "origin": "List of all members",
    "local": ""
  },
  {
    "origin": "cv::face::FaceRecognizer Class Reference",
    "local": ""
  },
  {
    "origin": "abstract",
    "local": ""
  },
  {
    "origin": "Abstract base class for all face recognition models.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Inheritance diagram for cv::face::FaceRecognizer:",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "virtual bool",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "(int label) const",
    "local": ""
  },
  {
    "origin": "Gets string information by label.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual std::vector&lt; int &gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;str) const",
    "local": ""
  },
  {
    "origin": "Gets vector of labels by string.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual double",
    "local": ""
  },
  {
    "origin": "threshold parameter accessor - required for default BestMinDist collector",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src) const",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src, int &amp;label, double &amp;confidence) const",
    "local": ""
  },
  {
    "origin": "Predicts a label and associated confidence (e.g. distance) for a given input image.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "if implemented - send all result of prediction to collector that can be used for somehow custom result handling",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename)",
    "local": ""
  },
  {
    "origin": "Loads a",
    "local": ""
  },
  {
    "origin": "and its model state.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;fn)",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(int label, const",
    "local": ""
  },
  {
    "origin": "&amp;strInfo)",
    "local": ""
  },
  {
    "origin": "Sets string info for the specified model's label.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "Sets threshold of model.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "Trains a",
    "local": ""
  },
  {
    "origin": "with given data and associated labels.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "labels)",
    "local": ""
  },
  {
    "origin": "Updates a",
    "local": ""
  },
  {
    "origin": "with given data and associated labels.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename) const",
    "local": ""
  },
  {
    "origin": "Saves a",
    "local": ""
  },
  {
    "origin": "and its model state.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;fs) const",
    "local": ""
  },
  {
    "origin": "Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Clears the algorithm state.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename) const",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;fs, const",
    "local": ""
  },
  {
    "origin": "&amp;name=",
    "local": ""
  },
  {
    "origin": "()) const",
    "local": ""
  },
  {
    "origin": "simplified API for language bindings This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Protected Attributes",
    "local": ""
  },
  {
    "origin": "std::map&lt; int,",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "Additional Inherited Members",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename, const",
    "local": ""
  },
  {
    "origin": "&amp;objname=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Loads algorithm from the file.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;strModel, const",
    "local": ""
  },
  {
    "origin": "&amp;objname=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Loads algorithm from a String.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;fn)",
    "local": ""
  },
  {
    "origin": "Reads algorithm from the file node.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Protected Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;fs) const",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Abstract base class for all face recognition models.",
    "local": ""
  },
  {
    "origin": "All face recognition models in OpenCV are derived from the abstract base class",
    "local": ""
  },
  {
    "origin": ", which provides a unified access to all face recongition algorithms in OpenCV.",
    "local": ""
  },
  {
    "origin": "Description",
    "local": ""
  },
  {
    "origin": "I'll go a bit more into detail explaining",
    "local": ""
  },
  {
    "origin": ", because it doesn't look like a powerful interface at first sight. But: Every",
    "local": ""
  },
  {
    "origin": "is an",
    "local": ""
  },
  {
    "origin": ", so you can easily get/set all model internals (if allowed by the implementation).",
    "local": ""
  },
  {
    "origin": "is a relatively new OpenCV concept, which is available since the 2.4 release. I suggest you take a look at its description.",
    "local": ""
  },
  {
    "origin": "provides the following features for all derived classes:",
    "local": ""
  },
  {
    "origin": "So called \"virtual constructor\". That is, each",
    "local": ""
  },
  {
    "origin": "derivative is registered at program start and you can get the list of registered algorithms and create instance of a particular algorithm by its name (see Algorithm::create). If you plan to add your own algorithms, it is good practice to add a unique prefix to your algorithms to distinguish them from other algorithms.",
    "local": ""
  },
  {
    "origin": "Setting/Retrieving algorithm parameters by name. If you used video capturing functionality from OpenCV highgui module, you are probably familar with cv::cvSetCaptureProperty, ocvcvGetCaptureProperty,",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "provides similar method where instead of integer id's you specify the parameter names as text Strings. See Algorithm::set and Algorithm::get for details.",
    "local": ""
  },
  {
    "origin": "Reading and writing parameters from/to XML or YAML files. Every",
    "local": ""
  },
  {
    "origin": "derivative can store all its parameters and then read them back. There is no need to re-implement it each time.",
    "local": ""
  },
  {
    "origin": "Moreover every",
    "local": ""
  },
  {
    "origin": "supports the:",
    "local": ""
  },
  {
    "origin": "Training",
    "local": ""
  },
  {
    "origin": "of a",
    "local": ""
  },
  {
    "origin": "with",
    "local": ""
  },
  {
    "origin": "on a given set of images (your face database!).",
    "local": ""
  },
  {
    "origin": "Prediction",
    "local": ""
  },
  {
    "origin": "of a given sample image, that means a face. The image is given as a",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Loading/Saving",
    "local": ""
  },
  {
    "origin": "the model state from/to a given XML or YAML.",
    "local": ""
  },
  {
    "origin": "Setting/Getting labels info",
    "local": ""
  },
  {
    "origin": ", that is stored as a string. String labels info is useful for keeping names of the recognized people.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "When using the",
    "local": ""
  },
  {
    "origin": "interface in combination with Python, please stick to Python 2. Some underlying scripts like create_csv will not work in other versions, like Python 3. Setting the Thresholds +++++++++++++++++++++++",
    "local": ""
  },
  {
    "origin": "Sometimes you run into the situation, when you want to apply a threshold on the prediction. A common scenario in face recognition is to tell, whether a face belongs to the training dataset or if it is unknown. You might wonder, why there's no public API in",
    "local": ""
  },
  {
    "origin": "to set the threshold for the prediction, but rest assured: It's supported. It just means there's no generic way in an abstract class to provide an interface for setting/getting the thresholds of",
    "local": ""
  },
  {
    "origin": "every possible",
    "local": ""
  },
  {
    "origin": "algorithm. The appropriate place to set the thresholds is in the constructor of the specific",
    "local": ""
  },
  {
    "origin": "and since every",
    "local": ""
  },
  {
    "origin": "is a",
    "local": ""
  },
  {
    "origin": "(see above), you can get/set the thresholds at runtime!",
    "local": ""
  },
  {
    "origin": "Here is an example of setting a threshold for the Eigenfaces method, when creating the model:",
    "local": ""
  },
  {
    "origin": "Sometimes it's impossible to train the model, just to experiment with threshold values. Thanks to",
    "local": ""
  },
  {
    "origin": "it's possible to set internal model thresholds during runtime. Let's see how we would set/get the prediction for the Eigenface model, we've created above:",
    "local": ""
  },
  {
    "origin": "If you've set the threshold to 0.0 as we did above, then:",
    "local": ""
  },
  {
    "origin": "is going to yield -1 as predicted label, which states this face is unknown.",
    "local": ""
  },
  {
    "origin": "Getting the name of a",
    "local": ""
  },
  {
    "origin": "Since every",
    "local": ""
  },
  {
    "origin": "is a",
    "local": ""
  },
  {
    "origin": ", you can use Algorithm::name to get the name of a",
    "local": ""
  },
  {
    "origin": ":",
    "local": ""
  },
  {
    "origin": "Member Function Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "empty()",
    "local": ""
  },
  {
    "origin": "virtual bool cv::face::FaceRecognizer::empty",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Reimplemented from",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Implemented in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getLabelInfo()",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "cv::face::FaceRecognizer::getLabelInfo",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "label",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face_FaceRecognizer.getLabelInfo(",
    "local": ""
  },
  {
    "origin": "label",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Gets string information by label.",
    "local": ""
  },
  {
    "origin": "If an unknown label id is provided or there is no label information associated with the specified label id the method returns an empty string.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getLabelsByString()",
    "local": ""
  },
  {
    "origin": "virtual std::vector&lt;int&gt; cv::face::FaceRecognizer::getLabelsByString",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "str",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face_FaceRecognizer.getLabelsByString(",
    "local": ""
  },
  {
    "origin": "str",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Gets vector of labels by string.",
    "local": ""
  },
  {
    "origin": "The function searches for the labels containing the specified sub-string in the associated string info.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getThreshold()",
    "local": ""
  },
  {
    "origin": "virtual double cv::face::FaceRecognizer::getThreshold",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "threshold parameter accessor - required for default BestMinDist collector",
    "local": ""
  },
  {
    "origin": "Implemented in",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "predict()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "int cv::face::FaceRecognizer::predict",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "label, confidence",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face_FaceRecognizer.predict(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face_FaceRecognizer.predict_collect(",
    "local": ""
  },
  {
    "origin": "src, collector",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face_FaceRecognizer.predict_label(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "predict()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "void cv::face::FaceRecognizer::predict",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int &amp;",
    "local": ""
  },
  {
    "origin": "label",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double &amp;",
    "local": ""
  },
  {
    "origin": "confidence",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "label, confidence",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face_FaceRecognizer.predict(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face_FaceRecognizer.predict_collect(",
    "local": ""
  },
  {
    "origin": "src, collector",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face_FaceRecognizer.predict_label(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Predicts a label and associated confidence (e.g. distance) for a given input image.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Sample image to get a prediction from.",
    "local": ""
  },
  {
    "origin": "label",
    "local": ""
  },
  {
    "origin": "The predicted label for the given image.",
    "local": ""
  },
  {
    "origin": "confidence",
    "local": ""
  },
  {
    "origin": "Associated confidence (e.g. distance) for the predicted label.",
    "local": ""
  },
  {
    "origin": "The suffix const means that prediction does not affect the internal model state, so the method can be safely called from within different threads.",
    "local": ""
  },
  {
    "origin": "The following example shows how to get a prediction from a trained model:",
    "local": ""
  },
  {
    "origin": "Or to get a prediction and the associated confidence (e.g. distance):",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "predict()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "virtual void cv::face::FaceRecognizer::predict",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "collector",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "label, confidence",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face_FaceRecognizer.predict(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face_FaceRecognizer.predict_collect(",
    "local": ""
  },
  {
    "origin": "src, collector",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face_FaceRecognizer.predict_label(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "if implemented - send all result of prediction to collector that can be used for somehow custom result handling",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Sample image to get a prediction from.",
    "local": ""
  },
  {
    "origin": "collector",
    "local": ""
  },
  {
    "origin": "User-defined collector object that accepts all results",
    "local": ""
  },
  {
    "origin": "To implement this method u just have to do same internal cycle as in predict(InputArray src, CV_OUT int &amp;label, CV_OUT double &amp;confidence) but not try to get \"best@ result, just resend it to caller side with given collector",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "virtual void cv::face::FaceRecognizer::read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "filename",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face_FaceRecognizer.read(",
    "local": ""
  },
  {
    "origin": "filename",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Loads a",
    "local": ""
  },
  {
    "origin": "and its model state.",
    "local": ""
  },
  {
    "origin": "Loads a persisted model and state from a given XML or YAML file . Every",
    "local": ""
  },
  {
    "origin": "has to overwrite FaceRecognizer::load(FileStorage&amp; fs) to enable loading the model state. FaceRecognizer::load(FileStorage&amp; fs) in turn gets called by FaceRecognizer::load(const String&amp; filename), to ease saving a model.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "virtual void cv::face::FaceRecognizer::read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "fn",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face_FaceRecognizer.read(",
    "local": ""
  },
  {
    "origin": "filename",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Reimplemented from",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Implemented in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "setLabelInfo()",
    "local": ""
  },
  {
    "origin": "virtual void cv::face::FaceRecognizer::setLabelInfo",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "label",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "strInfo",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face_FaceRecognizer.setLabelInfo(",
    "local": ""
  },
  {
    "origin": "label, strInfo",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Sets string info for the specified model's label.",
    "local": ""
  },
  {
    "origin": "The string info is replaced by the provided value if it was set before for the specified label.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "setThreshold()",
    "local": ""
  },
  {
    "origin": "virtual void cv::face::FaceRecognizer::setThreshold",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Sets threshold of model.",
    "local": ""
  },
  {
    "origin": "Implemented in",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "train()",
    "local": ""
  },
  {
    "origin": "virtual void cv::face::FaceRecognizer::train",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "labels",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face_FaceRecognizer.train(",
    "local": ""
  },
  {
    "origin": "src, labels",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Trains a",
    "local": ""
  },
  {
    "origin": "with given data and associated labels.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "The training images, that means the faces you want to learn. The data has to be given as a vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt;.",
    "local": ""
  },
  {
    "origin": "labels",
    "local": ""
  },
  {
    "origin": "The labels corresponding to the images have to be given either as a vector&lt;int&gt; or a",
    "local": ""
  },
  {
    "origin": "of type CV_32SC1.",
    "local": ""
  },
  {
    "origin": "The following source code snippet shows you how to learn a Fisherfaces model on a given set of images. The images are read with imread and pushed into a std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt;. The labels of each image are stored within a std::vector&lt;int&gt; (you could also use a",
    "local": ""
  },
  {
    "origin": "of type CV_32SC1). Think of the label as the subject (the person) this image belongs to, so same subjects (persons) should have the same label. For the available",
    "local": ""
  },
  {
    "origin": "you don't have to pay any attention to the order of the labels, just make sure same persons have the same label:",
    "local": ""
  },
  {
    "origin": "Now that you have read some images, we can create a new",
    "local": ""
  },
  {
    "origin": ". In this example I'll create a Fisherfaces model and decide to keep all of the possible Fisherfaces:",
    "local": ""
  },
  {
    "origin": "And finally train it on the given dataset (the face images and labels):",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "update()",
    "local": ""
  },
  {
    "origin": "virtual void cv::face::FaceRecognizer::update",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "labels",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face_FaceRecognizer.update(",
    "local": ""
  },
  {
    "origin": "src, labels",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Updates a",
    "local": ""
  },
  {
    "origin": "with given data and associated labels.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "The training images, that means the faces you want to learn. The data has to be given as a vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt;.",
    "local": ""
  },
  {
    "origin": "labels",
    "local": ""
  },
  {
    "origin": "The labels corresponding to the images have to be given either as a vector&lt;int&gt; or a",
    "local": ""
  },
  {
    "origin": "of type CV_32SC1.",
    "local": ""
  },
  {
    "origin": "This method updates a (probably trained)",
    "local": ""
  },
  {
    "origin": ", but only if the algorithm supports it. The Local Binary Patterns Histograms (LBPH) recognizer (see createLBPHFaceRecognizer) can be updated. For the Eigenfaces and Fisherfaces method, this is algorithmically not possible and you have to re-estimate the model with",
    "local": ""
  },
  {
    "origin": ". In any case, a call to train empties the existing model and learns a new model, while update does not delete any model data.",
    "local": ""
  },
  {
    "origin": "Calling update on an Eigenfaces model (see",
    "local": ""
  },
  {
    "origin": "), which doesn't support updating, will throw an error similar to:",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "The",
    "local": ""
  },
  {
    "origin": "does not store your training images, because this would be very memory intense and it's not the responsibility of te",
    "local": ""
  },
  {
    "origin": "to do so. The caller is responsible for maintaining the dataset, he want to work with.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "write()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "virtual void cv::face::FaceRecognizer::write",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "filename",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face_FaceRecognizer.write(",
    "local": ""
  },
  {
    "origin": "filename",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Saves a",
    "local": ""
  },
  {
    "origin": "and its model state.",
    "local": ""
  },
  {
    "origin": "Saves this model to a given filename, either as XML or YAML.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "filename",
    "local": ""
  },
  {
    "origin": "The filename to store this",
    "local": ""
  },
  {
    "origin": "to (either XML/YAML).",
    "local": ""
  },
  {
    "origin": "Every",
    "local": ""
  },
  {
    "origin": "overwrites FaceRecognizer::save(FileStorage&amp; fs) to save the internal model state. FaceRecognizer::save(const String&amp; filename) saves the state of a model to the given filename.",
    "local": ""
  },
  {
    "origin": "The suffix const means that prediction does not affect the internal model state, so the method can be safely called from within different threads.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "write()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "virtual void cv::face::FaceRecognizer::write",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "fs",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.face_FaceRecognizer.write(",
    "local": ""
  },
  {
    "origin": "filename",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Saves this model to a given",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "fs",
    "local": ""
  },
  {
    "origin": "The",
    "local": ""
  },
  {
    "origin": "to store this",
    "local": ""
  },
  {
    "origin": "to.",
    "local": ""
  },
  {
    "origin": "Reimplemented from",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Implemented in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Member Data Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "_labelsInfo",
    "local": ""
  },
  {
    "origin": "std::map&lt;int,",
    "local": ""
  },
  {
    "origin": "&gt; cv::face::FaceRecognizer::_labelsInfo",
    "local": ""
  },
  {
    "origin": "protected",
    "local": ""
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": ""
  },
  {
    "origin": "opencv2/",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:47 for OpenCV by",
    "local": ""
  }
]