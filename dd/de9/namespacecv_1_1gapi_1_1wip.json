[
  {
    "origin": "OpenCV: cv::gapi::wip Namespace Reference",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Namespaces",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "cv::gapi::wip Namespace Reference",
    "local": ""
  },
  {
    "origin": "Namespaces",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "struct",
    "local": ""
  },
  {
    "origin": "This aggregate type represents all types which G-API can handle (via variant).",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "A class to group async requests to cancel them in a single shot.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "OpenCV's VideoCapture-based streaming source.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Abstract streaming pipeline source.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;gcmpld, std::function&lt; void(std::exception_ptr)&gt; &amp;&amp;callback,",
    "local": ""
  },
  {
    "origin": "&amp;&amp;ins,",
    "local": ""
  },
  {
    "origin": "&amp;&amp;outs)",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;gcmpld, std::function&lt; void(std::exception_ptr)&gt; &amp;&amp;callback,",
    "local": ""
  },
  {
    "origin": "&amp;&amp;ins,",
    "local": ""
  },
  {
    "origin": "&amp;&amp;outs,",
    "local": ""
  },
  {
    "origin": "&amp;ctx)",
    "local": ""
  },
  {
    "origin": "std::future&lt; void &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;gcmpld,",
    "local": ""
  },
  {
    "origin": "&amp;&amp;ins,",
    "local": ""
  },
  {
    "origin": "&amp;&amp;outs)",
    "local": ""
  },
  {
    "origin": "std::future&lt; void &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;gcmpld,",
    "local": ""
  },
  {
    "origin": "&amp;&amp;ins,",
    "local": ""
  },
  {
    "origin": "&amp;&amp;outs,",
    "local": ""
  },
  {
    "origin": "&amp;ctx)",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;gcomp, std::function&lt; void(std::exception_ptr)&gt; &amp;&amp;callback,",
    "local": ""
  },
  {
    "origin": "&amp;&amp;ins,",
    "local": ""
  },
  {
    "origin": "&amp;&amp;outs,",
    "local": ""
  },
  {
    "origin": "&amp;&amp;args={})",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;gcomp, std::function&lt; void(std::exception_ptr)&gt; &amp;&amp;callback,",
    "local": ""
  },
  {
    "origin": "&amp;&amp;ins,",
    "local": ""
  },
  {
    "origin": "&amp;&amp;outs,",
    "local": ""
  },
  {
    "origin": "&amp;&amp;args,",
    "local": ""
  },
  {
    "origin": "&amp;ctx)",
    "local": ""
  },
  {
    "origin": "std::future&lt; void &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;gcomp,",
    "local": ""
  },
  {
    "origin": "&amp;&amp;ins,",
    "local": ""
  },
  {
    "origin": "&amp;&amp;outs,",
    "local": ""
  },
  {
    "origin": "&amp;&amp;args={})",
    "local": ""
  },
  {
    "origin": "std::future&lt; void &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;gcomp,",
    "local": ""
  },
  {
    "origin": "&amp;&amp;ins,",
    "local": ""
  },
  {
    "origin": "&amp;&amp;outs,",
    "local": ""
  },
  {
    "origin": "&amp;&amp;args,",
    "local": ""
  },
  {
    "origin": "&amp;ctx)",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(const std::string &amp;path)",
    "local": ""
  },
  {
    "origin": "template&lt;class T , class... Args&gt;",
    "local": ""
  },
  {
    "origin": "(Args &amp;&amp;... args)",
    "local": ""
  },
  {
    "origin": "Function Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "async()",
    "local": ""
  },
  {
    "origin": "[1/4]",
    "local": ""
  },
  {
    "origin": "void cv::gapi::wip::async",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "gcmpld",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::function&lt; void(std::exception_ptr)&gt; &amp;&amp;",
    "local": ""
  },
  {
    "origin": "callback",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;&amp;",
    "local": ""
  },
  {
    "origin": "ins",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;&amp;",
    "local": ""
  },
  {
    "origin": "outs",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "These functions asynchronously (i.e. probably on a separate thread of execution) call GCompiled::operator() member function of their first argument with copies of rest of arguments (except callback) passed in. The difference between the function is the way to get the completion notification (via callback or a waiting on std::future object) If exception is occurred during execution of apply it is transferred to the callback (via function parameter) or passed to future (and will be thrown on call to std::future::get)",
    "local": ""
  },
  {
    "origin": "N.B. : Input arguments are copied on call to async function (actually on call to",
    "local": ""
  },
  {
    "origin": ") and thus do not have to outlive the actual completion of asynchronous activity. While output arguments are \"captured\" by reference(pointer) and therefore",
    "local": ""
  },
  {
    "origin": "must",
    "local": ""
  },
  {
    "origin": "outlive the asynchronous activity (i.e. live at least until callback is called or future is unblocked)",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "gcmpld",
    "local": ""
  },
  {
    "origin": "Compiled computation (graph) to start asynchronously",
    "local": ""
  },
  {
    "origin": "callback",
    "local": ""
  },
  {
    "origin": "Callback to be called when execution of gcmpld is done",
    "local": ""
  },
  {
    "origin": "ins",
    "local": ""
  },
  {
    "origin": "Input parameters for gcmpld",
    "local": ""
  },
  {
    "origin": "outs",
    "local": ""
  },
  {
    "origin": "Output parameters for gcmpld",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "async()",
    "local": ""
  },
  {
    "origin": "[2/4]",
    "local": ""
  },
  {
    "origin": "void cv::gapi::wip::async",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "gcmpld",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::function&lt; void(std::exception_ptr)&gt; &amp;&amp;",
    "local": ""
  },
  {
    "origin": "callback",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;&amp;",
    "local": ""
  },
  {
    "origin": "ins",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;&amp;",
    "local": ""
  },
  {
    "origin": "outs",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "ctx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "gcmpld",
    "local": ""
  },
  {
    "origin": "Compiled computation (graph) to run asynchronously",
    "local": ""
  },
  {
    "origin": "callback",
    "local": ""
  },
  {
    "origin": "Callback to be called when execution of gcmpld is done",
    "local": ""
  },
  {
    "origin": "ins",
    "local": ""
  },
  {
    "origin": "Input parameters for gcmpld",
    "local": ""
  },
  {
    "origin": "outs",
    "local": ""
  },
  {
    "origin": "Output parameters for gcmpld",
    "local": ""
  },
  {
    "origin": "ctx",
    "local": ""
  },
  {
    "origin": "Context this request belongs to",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "async()",
    "local": ""
  },
  {
    "origin": "[3/4]",
    "local": ""
  },
  {
    "origin": "std::future&lt;void&gt; cv::gapi::wip::async",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "gcmpld",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;&amp;",
    "local": ""
  },
  {
    "origin": "ins",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;&amp;",
    "local": ""
  },
  {
    "origin": "outs",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "gcmpld",
    "local": ""
  },
  {
    "origin": "Compiled computation (graph) to run asynchronously",
    "local": ""
  },
  {
    "origin": "ins",
    "local": ""
  },
  {
    "origin": "Input parameters for gcmpld",
    "local": ""
  },
  {
    "origin": "outs",
    "local": ""
  },
  {
    "origin": "Output parameters for gcmpld",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "std::future&lt;void&gt; object to wait for completion of async operation",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "async()",
    "local": ""
  },
  {
    "origin": "[4/4]",
    "local": ""
  },
  {
    "origin": "std::future&lt;void&gt; cv::gapi::wip::async",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "gcmpld",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;&amp;",
    "local": ""
  },
  {
    "origin": "ins",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;&amp;",
    "local": ""
  },
  {
    "origin": "outs",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "ctx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "gcmpld",
    "local": ""
  },
  {
    "origin": "Compiled computation (graph) to run asynchronously",
    "local": ""
  },
  {
    "origin": "ins",
    "local": ""
  },
  {
    "origin": "Input parameters for gcmpld",
    "local": ""
  },
  {
    "origin": "outs",
    "local": ""
  },
  {
    "origin": "Output parameters for gcmpld",
    "local": ""
  },
  {
    "origin": "ctx",
    "local": ""
  },
  {
    "origin": "Context this request belongs to",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "std::future&lt;void&gt; object to wait for completion of async operation",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "async_apply()",
    "local": ""
  },
  {
    "origin": "[1/4]",
    "local": ""
  },
  {
    "origin": "void cv::gapi::wip::async_apply",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "gcomp",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::function&lt; void(std::exception_ptr)&gt; &amp;&amp;",
    "local": ""
  },
  {
    "origin": "callback",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;&amp;",
    "local": ""
  },
  {
    "origin": "ins",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;&amp;",
    "local": ""
  },
  {
    "origin": "outs",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;&amp;",
    "local": ""
  },
  {
    "origin": "args",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "In contrast to",
    "local": ""
  },
  {
    "origin": "functions, these do call",
    "local": ""
  },
  {
    "origin": "member function of the",
    "local": ""
  },
  {
    "origin": "passed in.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "gcomp",
    "local": ""
  },
  {
    "origin": "Computation (graph) to run asynchronously",
    "local": ""
  },
  {
    "origin": "callback",
    "local": ""
  },
  {
    "origin": "Callback to be called when execution of gcomp is done",
    "local": ""
  },
  {
    "origin": "ins",
    "local": ""
  },
  {
    "origin": "Input parameters for gcomp",
    "local": ""
  },
  {
    "origin": "outs",
    "local": ""
  },
  {
    "origin": "Output parameters for gcomp",
    "local": ""
  },
  {
    "origin": "args",
    "local": ""
  },
  {
    "origin": "Compile arguments to pass to",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "async_apply()",
    "local": ""
  },
  {
    "origin": "[2/4]",
    "local": ""
  },
  {
    "origin": "void cv::gapi::wip::async_apply",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "gcomp",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::function&lt; void(std::exception_ptr)&gt; &amp;&amp;",
    "local": ""
  },
  {
    "origin": "callback",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;&amp;",
    "local": ""
  },
  {
    "origin": "ins",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;&amp;",
    "local": ""
  },
  {
    "origin": "outs",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;&amp;",
    "local": ""
  },
  {
    "origin": "args",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "ctx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "gcomp",
    "local": ""
  },
  {
    "origin": "Computation (graph) to run asynchronously",
    "local": ""
  },
  {
    "origin": "callback",
    "local": ""
  },
  {
    "origin": "Callback to be called when execution of gcomp is done",
    "local": ""
  },
  {
    "origin": "ins",
    "local": ""
  },
  {
    "origin": "Input parameters for gcomp",
    "local": ""
  },
  {
    "origin": "outs",
    "local": ""
  },
  {
    "origin": "Output parameters for gcomp",
    "local": ""
  },
  {
    "origin": "args",
    "local": ""
  },
  {
    "origin": "Compile arguments to pass to",
    "local": ""
  },
  {
    "origin": "ctx",
    "local": ""
  },
  {
    "origin": "Context this request belongs to",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "async_apply()",
    "local": ""
  },
  {
    "origin": "[3/4]",
    "local": ""
  },
  {
    "origin": "std::future&lt;void&gt; cv::gapi::wip::async_apply",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "gcomp",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;&amp;",
    "local": ""
  },
  {
    "origin": "ins",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;&amp;",
    "local": ""
  },
  {
    "origin": "outs",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;&amp;",
    "local": ""
  },
  {
    "origin": "args",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "gcomp",
    "local": ""
  },
  {
    "origin": "Computation (graph) to run asynchronously",
    "local": ""
  },
  {
    "origin": "ins",
    "local": ""
  },
  {
    "origin": "Input parameters for gcomp",
    "local": ""
  },
  {
    "origin": "outs",
    "local": ""
  },
  {
    "origin": "Output parameters for gcomp",
    "local": ""
  },
  {
    "origin": "args",
    "local": ""
  },
  {
    "origin": "Compile arguments to pass to",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "std::future&lt;void&gt; object to wait for completion of async operation",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "async_apply()",
    "local": ""
  },
  {
    "origin": "[4/4]",
    "local": ""
  },
  {
    "origin": "std::future&lt;void&gt; cv::gapi::wip::async_apply",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "gcomp",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;&amp;",
    "local": ""
  },
  {
    "origin": "ins",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;&amp;",
    "local": ""
  },
  {
    "origin": "outs",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;&amp;",
    "local": ""
  },
  {
    "origin": "args",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "ctx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "gcomp",
    "local": ""
  },
  {
    "origin": "Computation (graph) to run asynchronously",
    "local": ""
  },
  {
    "origin": "ins",
    "local": ""
  },
  {
    "origin": "Input parameters for gcomp",
    "local": ""
  },
  {
    "origin": "outs",
    "local": ""
  },
  {
    "origin": "Output parameters for gcomp",
    "local": ""
  },
  {
    "origin": "args",
    "local": ""
  },
  {
    "origin": "Compile arguments to pass to",
    "local": ""
  },
  {
    "origin": "ctx",
    "local": ""
  },
  {
    "origin": "Context this request belongs to",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "std::future&lt;void&gt; object to wait for completion of async operation",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "make_capture_src()",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; cv::gapi::wip::make_capture_src",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const std::string &amp;",
    "local": ""
  },
  {
    "origin": "path",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.gapi.wip.make_capture_src(",
    "local": ""
  },
  {
    "origin": "path",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "make_src()",
    "local": ""
  },
  {
    "origin": "template&lt;class T , class... Args&gt;",
    "local": ""
  },
  {
    "origin": "cv::gapi::wip::make_src",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "Args &amp;&amp;...",
    "local": ""
  },
  {
    "origin": "args",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:47 for OpenCV by",
    "local": ""
  }
]