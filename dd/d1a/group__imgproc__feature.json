[
  {
    "origin": "OpenCV: Feature Detection",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "Feature Detection",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Line segment detector class.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "Variants of a Hough transform.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "Variants of Line Segment Detector.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image,",
    "local": ""
  },
  {
    "origin": "edges, double threshold1, double threshold2, int apertureSize=3, bool L2gradient=false)",
    "local": ""
  },
  {
    "origin": "Finds edges in an image using the Canny algorithm",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "dx,",
    "local": ""
  },
  {
    "origin": "dy,",
    "local": ""
  },
  {
    "origin": "edges, double threshold1, double threshold2, bool L2gradient=false)",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "dst, int blockSize, int ksize, int borderType=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Calculates eigenvalues and eigenvectors of image blocks for corner detection.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "dst, int blockSize, int ksize, double k, int borderType=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Harris corner detector.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "dst, int blockSize, int ksize=3, int borderType=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Calculates the minimal eigenvalue of gradient matrices for corner detection.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image,",
    "local": ""
  },
  {
    "origin": "corners,",
    "local": ""
  },
  {
    "origin": "winSize,",
    "local": ""
  },
  {
    "origin": "zeroZone,",
    "local": ""
  },
  {
    "origin": "criteria)",
    "local": ""
  },
  {
    "origin": "Refines the corner locations.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(int _refine=",
    "local": ""
  },
  {
    "origin": ", double _scale=0.8, double _sigma_scale=0.6, double _quant=2.0, double _ang_th=22.5, double _log_eps=0, double _density_th=0.7, int _n_bins=1024)",
    "local": ""
  },
  {
    "origin": "Creates a smart pointer to a",
    "local": ""
  },
  {
    "origin": "object and initializes it.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image,",
    "local": ""
  },
  {
    "origin": "corners, int maxCorners, double qualityLevel, double minDistance,",
    "local": ""
  },
  {
    "origin": "mask=",
    "local": ""
  },
  {
    "origin": "(), int blockSize=3, bool useHarrisDetector=false, double k=0.04)",
    "local": ""
  },
  {
    "origin": "Determines strong corners on an image.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image,",
    "local": ""
  },
  {
    "origin": "corners, int maxCorners, double qualityLevel, double minDistance,",
    "local": ""
  },
  {
    "origin": "mask, int blockSize, int gradientSize, bool useHarrisDetector=false, double k=0.04)",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image,",
    "local": ""
  },
  {
    "origin": "corners, int maxCorners, double qualityLevel, double minDistance,",
    "local": ""
  },
  {
    "origin": "mask,",
    "local": ""
  },
  {
    "origin": "cornersQuality, int blockSize=3, int gradientSize=3, bool useHarrisDetector=false, double k=0.04)",
    "local": ""
  },
  {
    "origin": "Same as above, but returns also quality measure of the detected corners.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image,",
    "local": ""
  },
  {
    "origin": "circles, int method, double dp, double minDist, double param1=100, double param2=100, int minRadius=0, int maxRadius=0)",
    "local": ""
  },
  {
    "origin": "Finds circles in a grayscale image using the Hough transform.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image,",
    "local": ""
  },
  {
    "origin": "lines, double rho, double theta, int",
    "local": ""
  },
  {
    "origin": ", double srn=0, double stn=0, double min_theta=0, double max_theta=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Finds lines in a binary image using the standard Hough transform.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image,",
    "local": ""
  },
  {
    "origin": "lines, double rho, double theta, int",
    "local": ""
  },
  {
    "origin": ", double minLineLength=0, double maxLineGap=0)",
    "local": ""
  },
  {
    "origin": "Finds line segments in a binary image using the probabilistic Hough transform.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "_point,",
    "local": ""
  },
  {
    "origin": "_lines, int lines_max, int",
    "local": ""
  },
  {
    "origin": ", double min_rho, double max_rho, double rho_step, double min_theta, double max_theta, double theta_step)",
    "local": ""
  },
  {
    "origin": "Finds lines in a set of points using the standard Hough transform.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "dst, int ksize, int borderType=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Calculates a feature map for corner detection.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Enumeration Type Documentation",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "HoughModes",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "Variants of a Hough transform.",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "HOUGH_STANDARD",
    "local": ""
  },
  {
    "origin": "Python: cv.HOUGH_STANDARD",
    "local": ""
  },
  {
    "origin": "classical or standard Hough transform. Every line is represented by two floating-point numbers \\((\\rho, \\theta)\\) , where \\(\\rho\\) is a distance between (0,0) point and the line, and \\(\\theta\\) is the angle between x-axis and the normal to the line. Thus, the matrix must be (the created sequence will be) of CV_32FC2 type",
    "local": ""
  },
  {
    "origin": "HOUGH_PROBABILISTIC",
    "local": ""
  },
  {
    "origin": "Python: cv.HOUGH_PROBABILISTIC",
    "local": ""
  },
  {
    "origin": "probabilistic Hough transform (more efficient in case if the picture contains a few long linear segments). It returns line segments rather than the whole line. Each segment is represented by starting and ending points, and the matrix must be (the created sequence will be) of the CV_32SC4 type.",
    "local": ""
  },
  {
    "origin": "HOUGH_MULTI_SCALE",
    "local": ""
  },
  {
    "origin": "Python: cv.HOUGH_MULTI_SCALE",
    "local": ""
  },
  {
    "origin": "multi-scale variant of the classical Hough transform. The lines are encoded the same way as HOUGH_STANDARD.",
    "local": ""
  },
  {
    "origin": "HOUGH_GRADIENT",
    "local": ""
  },
  {
    "origin": "Python: cv.HOUGH_GRADIENT",
    "local": ""
  },
  {
    "origin": "basically",
    "local": ""
  },
  {
    "origin": "21HT",
    "local": ""
  },
  {
    "origin": ", described in",
    "local": ""
  },
  {
    "origin": "HOUGH_GRADIENT_ALT",
    "local": ""
  },
  {
    "origin": "Python: cv.HOUGH_GRADIENT_ALT",
    "local": ""
  },
  {
    "origin": "variation of HOUGH_GRADIENT to get better accuracy",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "LineSegmentDetectorModes",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "Variants of Line Segment Detector.",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "LSD_REFINE_NONE",
    "local": ""
  },
  {
    "origin": "Python: cv.LSD_REFINE_NONE",
    "local": ""
  },
  {
    "origin": "No refinement applied.",
    "local": ""
  },
  {
    "origin": "LSD_REFINE_STD",
    "local": ""
  },
  {
    "origin": "Python: cv.LSD_REFINE_STD",
    "local": ""
  },
  {
    "origin": "Standard refinement is applied. E.g. breaking arches into smaller straighter line approximations.",
    "local": ""
  },
  {
    "origin": "LSD_REFINE_ADV",
    "local": ""
  },
  {
    "origin": "Python: cv.LSD_REFINE_ADV",
    "local": ""
  },
  {
    "origin": "Advanced refinement. Number of false alarms is calculated, lines are refined through increase of precision, decrement in size, etc.",
    "local": ""
  },
  {
    "origin": "Function Documentation",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "Canny()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "void cv::Canny",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "edges",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "threshold1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "threshold2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "apertureSize",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "L2gradient",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "edges",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.Canny(",
    "local": ""
  },
  {
    "origin": "image, threshold1, threshold2[, edges[, apertureSize[, L2gradient]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "edges",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.Canny(",
    "local": ""
  },
  {
    "origin": "dx, dy, threshold1, threshold2[, edges[, L2gradient]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Finds edges in an image using the Canny algorithm",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "The function finds edges in the input image and marks them in the output map edges using the Canny algorithm. The smallest value between threshold1 and threshold2 is used for edge linking. The largest value is used to find initial segments of strong edges. See",
    "local": ""
  },
  {
    "origin": "http://en.wikipedia.org/wiki/Canny_edge_detector",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "8-bit input image.",
    "local": ""
  },
  {
    "origin": "edges",
    "local": ""
  },
  {
    "origin": "output edge map; single channels 8-bit image, which has the same size as image .",
    "local": ""
  },
  {
    "origin": "threshold1",
    "local": ""
  },
  {
    "origin": "first threshold for the hysteresis procedure.",
    "local": ""
  },
  {
    "origin": "threshold2",
    "local": ""
  },
  {
    "origin": "second threshold for the hysteresis procedure.",
    "local": ""
  },
  {
    "origin": "apertureSize",
    "local": ""
  },
  {
    "origin": "aperture size for the Sobel operator.",
    "local": ""
  },
  {
    "origin": "L2gradient",
    "local": ""
  },
  {
    "origin": "a flag, indicating whether a more accurate \\(L_2\\) norm \\(=\\sqrt{(dI/dx)^2 + (dI/dy)^2}\\) should be used to calculate the image gradient magnitude ( L2gradient=true ), or whether the default \\(L_1\\) norm \\(=|dI/dx|+|dI/dy|\\) is enough ( L2gradient=false ).",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "Canny()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "void cv::Canny",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "dx",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dy",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "edges",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "threshold1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "threshold2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "L2gradient",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "edges",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.Canny(",
    "local": ""
  },
  {
    "origin": "image, threshold1, threshold2[, edges[, apertureSize[, L2gradient]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "edges",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.Canny(",
    "local": ""
  },
  {
    "origin": "dx, dy, threshold1, threshold2[, edges[, L2gradient]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Finds edges in an image using the Canny algorithm with custom image gradient.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "dx",
    "local": ""
  },
  {
    "origin": "16-bit x derivative of input image (CV_16SC1 or CV_16SC3).",
    "local": ""
  },
  {
    "origin": "dy",
    "local": ""
  },
  {
    "origin": "16-bit y derivative of input image (same type as dx).",
    "local": ""
  },
  {
    "origin": "edges",
    "local": ""
  },
  {
    "origin": "output edge map; single channels 8-bit image, which has the same size as image .",
    "local": ""
  },
  {
    "origin": "threshold1",
    "local": ""
  },
  {
    "origin": "first threshold for the hysteresis procedure.",
    "local": ""
  },
  {
    "origin": "threshold2",
    "local": ""
  },
  {
    "origin": "second threshold for the hysteresis procedure.",
    "local": ""
  },
  {
    "origin": "L2gradient",
    "local": ""
  },
  {
    "origin": "a flag, indicating whether a more accurate \\(L_2\\) norm \\(=\\sqrt{(dI/dx)^2 + (dI/dy)^2}\\) should be used to calculate the image gradient magnitude ( L2gradient=true ), or whether the default \\(L_1\\) norm \\(=|dI/dx|+|dI/dy|\\) is enough ( L2gradient=false ).",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "cornerEigenValsAndVecs()",
    "local": ""
  },
  {
    "origin": "void cv::cornerEigenValsAndVecs",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "blockSize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "ksize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "borderType",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cornerEigenValsAndVecs(",
    "local": ""
  },
  {
    "origin": "src, blockSize, ksize[, dst[, borderType]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Calculates eigenvalues and eigenvectors of image blocks for corner detection.",
    "local": ""
  },
  {
    "origin": "For every pixel \\(p\\) , the function cornerEigenValsAndVecs considers a blockSize \\(\\times\\) blockSize neighborhood \\(S(p)\\) . It calculates the covariation matrix of derivatives over the neighborhood as:",
    "local": ""
  },
  {
    "origin": "\\[M = \\begin{bmatrix} \\sum _{S(p)}(dI/dx)^2 &amp; \\sum _{S(p)}dI/dx dI/dy \\\\ \\sum _{S(p)}dI/dx dI/dy &amp; \\sum _{S(p)}(dI/dy)^2 \\end{bmatrix}\\]",
    "local": ""
  },
  {
    "origin": "where the derivatives are computed using the Sobel operator.",
    "local": ""
  },
  {
    "origin": "After that, it finds eigenvectors and eigenvalues of \\(M\\) and stores them in the destination image as \\((\\lambda_1, \\lambda_2, x_1, y_1, x_2, y_2)\\) where",
    "local": ""
  },
  {
    "origin": "\\(\\lambda_1, \\lambda_2\\) are the non-sorted eigenvalues of \\(M\\)",
    "local": ""
  },
  {
    "origin": "\\(x_1, y_1\\) are the eigenvectors corresponding to \\(\\lambda_1\\)",
    "local": ""
  },
  {
    "origin": "\\(x_2, y_2\\) are the eigenvectors corresponding to \\(\\lambda_2\\)",
    "local": ""
  },
  {
    "origin": "The output of the function can be used for robust edge or corner detection.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Input single-channel 8-bit or floating-point image.",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "Image to store the results. It has the same size as src and the type",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "blockSize",
    "local": ""
  },
  {
    "origin": "Neighborhood size (see details below).",
    "local": ""
  },
  {
    "origin": "ksize",
    "local": ""
  },
  {
    "origin": "Aperture parameter for the Sobel operator.",
    "local": ""
  },
  {
    "origin": "borderType",
    "local": ""
  },
  {
    "origin": "Pixel extrapolation method. See",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "is not supported.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "cornerHarris()",
    "local": ""
  },
  {
    "origin": "void cv::cornerHarris",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "blockSize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "ksize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "k",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "borderType",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cornerHarris(",
    "local": ""
  },
  {
    "origin": "src, blockSize, ksize, k[, dst[, borderType]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Harris corner detector.",
    "local": ""
  },
  {
    "origin": "The function runs the Harris corner detector on the image. Similarly to cornerMinEigenVal and cornerEigenValsAndVecs , for each pixel \\((x, y)\\) it calculates a \\(2\\times2\\) gradient covariance matrix \\(M^{(x,y)}\\) over a \\(\\texttt{blockSize} \\times \\texttt{blockSize}\\) neighborhood. Then, it computes the following characteristic:",
    "local": ""
  },
  {
    "origin": "\\[\\texttt{dst} (x,y) = \\mathrm{det} M^{(x,y)} - k \\cdot \\left ( \\mathrm{tr} M^{(x,y)} \\right )^2\\]",
    "local": ""
  },
  {
    "origin": "Corners in the image can be found as the local maxima of this response map.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Input single-channel 8-bit or floating-point image.",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "Image to store the Harris detector responses. It has the type CV_32FC1 and the same size as src .",
    "local": ""
  },
  {
    "origin": "blockSize",
    "local": ""
  },
  {
    "origin": "Neighborhood size (see the details on",
    "local": ""
  },
  {
    "origin": ").",
    "local": ""
  },
  {
    "origin": "ksize",
    "local": ""
  },
  {
    "origin": "Aperture parameter for the Sobel operator.",
    "local": ""
  },
  {
    "origin": "k",
    "local": ""
  },
  {
    "origin": "Harris detector free parameter. See the formula above.",
    "local": ""
  },
  {
    "origin": "borderType",
    "local": ""
  },
  {
    "origin": "Pixel extrapolation method. See",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "is not supported.",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "cornerMinEigenVal()",
    "local": ""
  },
  {
    "origin": "void cv::cornerMinEigenVal",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "blockSize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "ksize",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "borderType",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cornerMinEigenVal(",
    "local": ""
  },
  {
    "origin": "src, blockSize[, dst[, ksize[, borderType]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Calculates the minimal eigenvalue of gradient matrices for corner detection.",
    "local": ""
  },
  {
    "origin": "The function is similar to cornerEigenValsAndVecs but it calculates and stores only the minimal eigenvalue of the covariance matrix of derivatives, that is, \\(\\min(\\lambda_1, \\lambda_2)\\) in terms of the formulae in the cornerEigenValsAndVecs description.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Input single-channel 8-bit or floating-point image.",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "Image to store the minimal eigenvalues. It has the type CV_32FC1 and the same size as src .",
    "local": ""
  },
  {
    "origin": "blockSize",
    "local": ""
  },
  {
    "origin": "Neighborhood size (see the details on",
    "local": ""
  },
  {
    "origin": ").",
    "local": ""
  },
  {
    "origin": "ksize",
    "local": ""
  },
  {
    "origin": "Aperture parameter for the Sobel operator.",
    "local": ""
  },
  {
    "origin": "borderType",
    "local": ""
  },
  {
    "origin": "Pixel extrapolation method. See",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "is not supported.",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "cornerSubPix()",
    "local": ""
  },
  {
    "origin": "void cv::cornerSubPix",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "corners",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "winSize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "zeroZone",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "criteria",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "corners",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cornerSubPix(",
    "local": ""
  },
  {
    "origin": "image, corners, winSize, zeroZone, criteria",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Refines the corner locations.",
    "local": ""
  },
  {
    "origin": "The function iterates to find the sub-pixel accurate location of corners or radial saddle points as described in",
    "local": ""
  },
  {
    "origin": ", and as shown on the figure below.",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "Sub-pixel accurate corner locator is based on the observation that every vector from the center \\(q\\) to a point \\(p\\) located within a neighborhood of \\(q\\) is orthogonal to the image gradient at \\(p\\) subject to image and measurement noise. Consider the expression:",
    "local": ""
  },
  {
    "origin": "\\[\\epsilon _i = {DI_{p_i}}^T \\cdot (q - p_i)\\]",
    "local": ""
  },
  {
    "origin": "where \\({DI_{p_i}}\\) is an image gradient at one of the points \\(p_i\\) in a neighborhood of \\(q\\) . The value of \\(q\\) is to be found so that \\(\\epsilon_i\\) is minimized. A system of equations may be set up with \\(\\epsilon_i\\) set to zero:",
    "local": ""
  },
  {
    "origin": "\\[\\sum _i(DI_{p_i} \\cdot {DI_{p_i}}^T) \\cdot q - \\sum _i(DI_{p_i} \\cdot {DI_{p_i}}^T \\cdot p_i)\\]",
    "local": ""
  },
  {
    "origin": "where the gradients are summed within a neighborhood (\"search window\") of \\(q\\) . Calling the first gradient term \\(G\\) and the second gradient term \\(b\\) gives:",
    "local": ""
  },
  {
    "origin": "\\[q = G^{-1} \\cdot b\\]",
    "local": ""
  },
  {
    "origin": "The algorithm sets the center of the neighborhood window at this new center \\(q\\) and then iterates until the center stays within a set threshold.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "Input single-channel, 8-bit or float image.",
    "local": ""
  },
  {
    "origin": "corners",
    "local": ""
  },
  {
    "origin": "Initial coordinates of the input corners and refined coordinates provided for output.",
    "local": ""
  },
  {
    "origin": "winSize",
    "local": ""
  },
  {
    "origin": "Half of the side length of the search window. For example, if winSize=Size(5,5) , then a \\((5*2+1) \\times (5*2+1) = 11 \\times 11\\) search window is used.",
    "local": ""
  },
  {
    "origin": "zeroZone",
    "local": ""
  },
  {
    "origin": "Half of the size of the dead region in the middle of the search zone over which the summation in the formula below is not done. It is used sometimes to avoid possible singularities of the autocorrelation matrix. The value of (-1,-1) indicates that there is no such a size.",
    "local": ""
  },
  {
    "origin": "criteria",
    "local": ""
  },
  {
    "origin": "Criteria for termination of the iterative process of corner refinement. That is, the process of corner position refinement stops either after criteria.maxCount iterations or when the corner position moves by less than criteria.epsilon on some iteration.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "createLineSegmentDetector()",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; cv::createLineSegmentDetector",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "_refine",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "_scale",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "_sigma_scale",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "_quant",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "_ang_th",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "_log_eps",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "_density_th",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "_n_bins",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.createLineSegmentDetector(",
    "local": ""
  },
  {
    "origin": "[, _refine[, _scale[, _sigma_scale[, _quant[, _ang_th[, _log_eps[, _density_th[, _n_bins]]]]]]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Creates a smart pointer to a",
    "local": ""
  },
  {
    "origin": "object and initializes it.",
    "local": ""
  },
  {
    "origin": "The",
    "local": ""
  },
  {
    "origin": "algorithm is defined using the standard values. Only advanced users may want to edit those, as to tailor it for their own application.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "_refine",
    "local": ""
  },
  {
    "origin": "The way found lines will be refined, see",
    "local": ""
  },
  {
    "origin": "_scale",
    "local": ""
  },
  {
    "origin": "The scale of the image that will be used to find the lines.",
    "local": ""
  },
  {
    "origin": "(0..1].",
    "local": ""
  },
  {
    "origin": "_sigma_scale",
    "local": ""
  },
  {
    "origin": "Sigma for Gaussian filter. It is computed as sigma = _sigma_scale/_scale.",
    "local": ""
  },
  {
    "origin": "_quant",
    "local": ""
  },
  {
    "origin": "Bound to the quantization error on the gradient norm.",
    "local": ""
  },
  {
    "origin": "_ang_th",
    "local": ""
  },
  {
    "origin": "Gradient angle tolerance in degrees.",
    "local": ""
  },
  {
    "origin": "_log_eps",
    "local": ""
  },
  {
    "origin": "Detection threshold: -log10(NFA) &gt; log_eps. Used only when advance refinement is chosen.",
    "local": ""
  },
  {
    "origin": "_density_th",
    "local": ""
  },
  {
    "origin": "Minimal density of aligned region points in the enclosing rectangle.",
    "local": ""
  },
  {
    "origin": "_n_bins",
    "local": ""
  },
  {
    "origin": "Number of bins in pseudo-ordering of gradient modulus.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Implementation has been removed due original code license conflict",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "goodFeaturesToTrack()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "void cv::goodFeaturesToTrack",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "corners",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "maxCorners",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "qualityLevel",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "minDistance",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "blockSize",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "useHarrisDetector",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "k",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "corners",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.goodFeaturesToTrack(",
    "local": ""
  },
  {
    "origin": "image, maxCorners, qualityLevel, minDistance[, corners[, mask[, blockSize[, useHarrisDetector[, k]]]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "corners",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.goodFeaturesToTrack(",
    "local": ""
  },
  {
    "origin": "image, maxCorners, qualityLevel, minDistance, mask, blockSize, gradientSize[, corners[, useHarrisDetector[, k]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "corners, cornersQuality",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.goodFeaturesToTrackWithQuality(",
    "local": ""
  },
  {
    "origin": "image, maxCorners, qualityLevel, minDistance, mask[, corners[, cornersQuality[, blockSize[, gradientSize[, useHarrisDetector[, k]]]]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Determines strong corners on an image.",
    "local": ""
  },
  {
    "origin": "The function finds the most prominent corners in the image or in the specified image region, as described in",
    "local": ""
  },
  {
    "origin": "Function calculates the corner quality measure at every source image pixel using the",
    "local": ""
  },
  {
    "origin": "or",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Function performs a non-maximum suppression (the local maximums in",
    "local": ""
  },
  {
    "origin": "3 x 3",
    "local": ""
  },
  {
    "origin": "neighborhood are retained).",
    "local": ""
  },
  {
    "origin": "The corners with the minimal eigenvalue less than \\(\\texttt{qualityLevel} \\cdot \\max_{x,y} qualityMeasureMap(x,y)\\) are rejected.",
    "local": ""
  },
  {
    "origin": "The remaining corners are sorted by the quality measure in the descending order.",
    "local": ""
  },
  {
    "origin": "Function throws away each corner for which there is a stronger corner at a distance less than maxDistance.",
    "local": ""
  },
  {
    "origin": "The function can be used to initialize a point-based tracker of an object.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "If the function is called with different values A and B of the parameter qualityLevel , and A &gt; B, the vector of returned corners with qualityLevel=A will be the prefix of the output vector with qualityLevel=B .",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "Input 8-bit or floating-point 32-bit, single-channel image.",
    "local": ""
  },
  {
    "origin": "corners",
    "local": ""
  },
  {
    "origin": "Output vector of detected corners.",
    "local": ""
  },
  {
    "origin": "maxCorners",
    "local": ""
  },
  {
    "origin": "Maximum number of corners to return. If there are more corners than are found, the strongest of them is returned.",
    "local": ""
  },
  {
    "origin": "implies that no limit on the maximum is set and all detected corners are returned.",
    "local": ""
  },
  {
    "origin": "qualityLevel",
    "local": ""
  },
  {
    "origin": "Parameter characterizing the minimal accepted quality of image corners. The parameter value is multiplied by the best corner quality measure, which is the minimal eigenvalue (see",
    "local": ""
  },
  {
    "origin": ") or the Harris function response (see",
    "local": ""
  },
  {
    "origin": "). The corners with the quality measure less than the product are rejected. For example, if the best corner has the quality measure = 1500, and the qualityLevel=0.01 , then all the corners with the quality measure less than 15 are rejected.",
    "local": ""
  },
  {
    "origin": "minDistance",
    "local": ""
  },
  {
    "origin": "Minimum possible Euclidean distance between the returned corners.",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "Optional region of interest. If the image is not empty (it needs to have the type CV_8UC1 and the same size as image ), it specifies the region in which the corners are detected.",
    "local": ""
  },
  {
    "origin": "blockSize",
    "local": ""
  },
  {
    "origin": "Size of an average block for computing a derivative covariation matrix over each pixel neighborhood. See cornerEigenValsAndVecs .",
    "local": ""
  },
  {
    "origin": "useHarrisDetector",
    "local": ""
  },
  {
    "origin": "Parameter indicating whether to use a Harris detector (see",
    "local": ""
  },
  {
    "origin": ") or",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "k",
    "local": ""
  },
  {
    "origin": "Free parameter of the Harris detector.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "goodFeaturesToTrack()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "void cv::goodFeaturesToTrack",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "corners",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "maxCorners",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "qualityLevel",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "minDistance",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "blockSize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "gradientSize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "useHarrisDetector",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "k",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "corners",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.goodFeaturesToTrack(",
    "local": ""
  },
  {
    "origin": "image, maxCorners, qualityLevel, minDistance[, corners[, mask[, blockSize[, useHarrisDetector[, k]]]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "corners",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.goodFeaturesToTrack(",
    "local": ""
  },
  {
    "origin": "image, maxCorners, qualityLevel, minDistance, mask, blockSize, gradientSize[, corners[, useHarrisDetector[, k]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "corners, cornersQuality",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.goodFeaturesToTrackWithQuality(",
    "local": ""
  },
  {
    "origin": "image, maxCorners, qualityLevel, minDistance, mask[, corners[, cornersQuality[, blockSize[, gradientSize[, useHarrisDetector[, k]]]]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "goodFeaturesToTrack()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "void cv::goodFeaturesToTrack",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "corners",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "maxCorners",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "qualityLevel",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "minDistance",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "cornersQuality",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "blockSize",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "gradientSize",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "useHarrisDetector",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "k",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "corners",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.goodFeaturesToTrack(",
    "local": ""
  },
  {
    "origin": "image, maxCorners, qualityLevel, minDistance[, corners[, mask[, blockSize[, useHarrisDetector[, k]]]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "corners",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.goodFeaturesToTrack(",
    "local": ""
  },
  {
    "origin": "image, maxCorners, qualityLevel, minDistance, mask, blockSize, gradientSize[, corners[, useHarrisDetector[, k]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "corners, cornersQuality",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.goodFeaturesToTrackWithQuality(",
    "local": ""
  },
  {
    "origin": "image, maxCorners, qualityLevel, minDistance, mask[, corners[, cornersQuality[, blockSize[, gradientSize[, useHarrisDetector[, k]]]]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Same as above, but returns also quality measure of the detected corners.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "Input 8-bit or floating-point 32-bit, single-channel image.",
    "local": ""
  },
  {
    "origin": "corners",
    "local": ""
  },
  {
    "origin": "Output vector of detected corners.",
    "local": ""
  },
  {
    "origin": "maxCorners",
    "local": ""
  },
  {
    "origin": "Maximum number of corners to return. If there are more corners than are found, the strongest of them is returned.",
    "local": ""
  },
  {
    "origin": "implies that no limit on the maximum is set and all detected corners are returned.",
    "local": ""
  },
  {
    "origin": "qualityLevel",
    "local": ""
  },
  {
    "origin": "Parameter characterizing the minimal accepted quality of image corners. The parameter value is multiplied by the best corner quality measure, which is the minimal eigenvalue (see",
    "local": ""
  },
  {
    "origin": ") or the Harris function response (see",
    "local": ""
  },
  {
    "origin": "). The corners with the quality measure less than the product are rejected. For example, if the best corner has the quality measure = 1500, and the qualityLevel=0.01 , then all the corners with the quality measure less than 15 are rejected.",
    "local": ""
  },
  {
    "origin": "minDistance",
    "local": ""
  },
  {
    "origin": "Minimum possible Euclidean distance between the returned corners.",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "Region of interest. If the image is not empty (it needs to have the type CV_8UC1 and the same size as image ), it specifies the region in which the corners are detected.",
    "local": ""
  },
  {
    "origin": "cornersQuality",
    "local": ""
  },
  {
    "origin": "Output vector of quality measure of the detected corners.",
    "local": ""
  },
  {
    "origin": "blockSize",
    "local": ""
  },
  {
    "origin": "Size of an average block for computing a derivative covariation matrix over each pixel neighborhood. See cornerEigenValsAndVecs .",
    "local": ""
  },
  {
    "origin": "gradientSize",
    "local": ""
  },
  {
    "origin": "Aperture parameter for the Sobel operator used for derivatives computation. See cornerEigenValsAndVecs .",
    "local": ""
  },
  {
    "origin": "useHarrisDetector",
    "local": ""
  },
  {
    "origin": "Parameter indicating whether to use a Harris detector (see",
    "local": ""
  },
  {
    "origin": ") or",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "k",
    "local": ""
  },
  {
    "origin": "Free parameter of the Harris detector.",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "HoughCircles()",
    "local": ""
  },
  {
    "origin": "void cv::HoughCircles",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "circles",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "method",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "dp",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "minDist",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "param1",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "param2",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "minRadius",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "maxRadius",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "circles",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.HoughCircles(",
    "local": ""
  },
  {
    "origin": "image, method, dp, minDist[, circles[, param1[, param2[, minRadius[, maxRadius]]]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Finds circles in a grayscale image using the Hough transform.",
    "local": ""
  },
  {
    "origin": "The function finds circles in a grayscale image using a modification of the Hough transform.",
    "local": ""
  },
  {
    "origin": "Example: :",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Usually the function detects the centers of circles well. However, it may fail to find correct radii. You can assist to the function by specifying the radius range ( minRadius and maxRadius ) if you know it. Or, in the case of",
    "local": ""
  },
  {
    "origin": "method you may set maxRadius to a negative number to return centers only without radius search, and find the correct radius using an additional procedure.",
    "local": ""
  },
  {
    "origin": "It also helps to smooth image a bit unless it's already soft. For example,",
    "local": ""
  },
  {
    "origin": "with 7x7 kernel and 1.5x1.5 sigma or similar blurring may help.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "8-bit, single-channel, grayscale input image.",
    "local": ""
  },
  {
    "origin": "circles",
    "local": ""
  },
  {
    "origin": "Output vector of found circles. Each vector is encoded as 3 or 4 element floating-point vector \\((x, y, radius)\\) or \\((x, y, radius, votes)\\) .",
    "local": ""
  },
  {
    "origin": "method",
    "local": ""
  },
  {
    "origin": "Detection method, see",
    "local": ""
  },
  {
    "origin": ". The available methods are",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "dp",
    "local": ""
  },
  {
    "origin": "Inverse ratio of the accumulator resolution to the image resolution. For example, if dp=1 , the accumulator has the same resolution as the input image. If dp=2 , the accumulator has half as big width and height. For",
    "local": ""
  },
  {
    "origin": "the recommended value is dp=1.5, unless some small very circles need to be detected.",
    "local": ""
  },
  {
    "origin": "minDist",
    "local": ""
  },
  {
    "origin": "Minimum distance between the centers of the detected circles. If the parameter is too small, multiple neighbor circles may be falsely detected in addition to a true one. If it is too large, some circles may be missed.",
    "local": ""
  },
  {
    "origin": "param1",
    "local": ""
  },
  {
    "origin": "First method-specific parameter. In case of",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": ", it is the higher threshold of the two passed to the Canny edge detector (the lower one is twice smaller). Note that",
    "local": ""
  },
  {
    "origin": "uses",
    "local": ""
  },
  {
    "origin": "algorithm to compute image derivatives, so the threshold value shough normally be higher, such as 300 or normally exposed and contrasty images.",
    "local": ""
  },
  {
    "origin": "param2",
    "local": ""
  },
  {
    "origin": "Second method-specific parameter. In case of",
    "local": ""
  },
  {
    "origin": ", it is the accumulator threshold for the circle centers at the detection stage. The smaller it is, the more false circles may be detected. Circles, corresponding to the larger accumulator values, will be returned first. In the case of",
    "local": ""
  },
  {
    "origin": "algorithm, this is the circle \"perfectness\" measure. The closer it to 1, the better shaped circles algorithm selects. In most cases 0.9 should be fine. If you want get better detection of small circles, you may decrease it to 0.85, 0.8 or even less. But then also try to limit the search range [minRadius, maxRadius] to avoid many false circles.",
    "local": ""
  },
  {
    "origin": "minRadius",
    "local": ""
  },
  {
    "origin": "Minimum circle radius.",
    "local": ""
  },
  {
    "origin": "maxRadius",
    "local": ""
  },
  {
    "origin": "Maximum circle radius. If &lt;= 0, uses the maximum image dimension. If &lt; 0,",
    "local": ""
  },
  {
    "origin": "returns centers without finding the radius.",
    "local": ""
  },
  {
    "origin": "always computes circle radiuses.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "HoughLines()",
    "local": ""
  },
  {
    "origin": "void cv::HoughLines",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "lines",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "rho",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "theta",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "threshold",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "srn",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "stn",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "min_theta",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "max_theta",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "lines",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.HoughLines(",
    "local": ""
  },
  {
    "origin": "image, rho, theta, threshold[, lines[, srn[, stn[, min_theta[, max_theta]]]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Finds lines in a binary image using the standard Hough transform.",
    "local": ""
  },
  {
    "origin": "The function implements the standard or standard multi-scale Hough transform algorithm for line detection. See",
    "local": ""
  },
  {
    "origin": "http://homepages.inf.ed.ac.uk/rbf/HIPR2/hough.htm",
    "local": ""
  },
  {
    "origin": "for a good explanation of Hough transform.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "8-bit, single-channel binary source image. The image may be modified by the function.",
    "local": ""
  },
  {
    "origin": "lines",
    "local": ""
  },
  {
    "origin": "Output vector of lines. Each line is represented by a 2 or 3 element vector \\((\\rho, \\theta)\\) or \\((\\rho, \\theta, \\textrm{votes})\\) . \\(\\rho\\) is the distance from the coordinate origin \\((0,0)\\) (top-left corner of the image). \\(\\theta\\) is the line rotation angle in radians ( \\(0 \\sim \\textrm{vertical line}, \\pi/2 \\sim \\textrm{horizontal line}\\) ). \\(\\textrm{votes}\\) is the value of accumulator.",
    "local": ""
  },
  {
    "origin": "rho",
    "local": ""
  },
  {
    "origin": "Distance resolution of the accumulator in pixels.",
    "local": ""
  },
  {
    "origin": "theta",
    "local": ""
  },
  {
    "origin": "Angle resolution of the accumulator in radians.",
    "local": ""
  },
  {
    "origin": "threshold",
    "local": ""
  },
  {
    "origin": "threshold parameter. Only those lines are returned that get enough votes ( \\(&gt;\\texttt{threshold}\\) ).",
    "local": ""
  },
  {
    "origin": "srn",
    "local": ""
  },
  {
    "origin": "For the multi-scale Hough transform, it is a divisor for the distance resolution rho . The coarse accumulator distance resolution is rho and the accurate accumulator resolution is rho/srn . If both srn=0 and stn=0 , the classical Hough transform is used. Otherwise, both these parameters should be positive.",
    "local": ""
  },
  {
    "origin": "stn",
    "local": ""
  },
  {
    "origin": "For the multi-scale Hough transform, it is a divisor for the distance resolution theta.",
    "local": ""
  },
  {
    "origin": "min_theta",
    "local": ""
  },
  {
    "origin": "For standard and multi-scale Hough transform, minimum angle to check for lines. Must fall between 0 and max_theta.",
    "local": ""
  },
  {
    "origin": "max_theta",
    "local": ""
  },
  {
    "origin": "For standard and multi-scale Hough transform, maximum angle to check for lines. Must fall between min_theta and CV_PI.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "HoughLinesP()",
    "local": ""
  },
  {
    "origin": "void cv::HoughLinesP",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "lines",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "rho",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "theta",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "threshold",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "minLineLength",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "maxLineGap",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "lines",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.HoughLinesP(",
    "local": ""
  },
  {
    "origin": "image, rho, theta, threshold[, lines[, minLineLength[, maxLineGap]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Finds line segments in a binary image using the probabilistic Hough transform.",
    "local": ""
  },
  {
    "origin": "The function implements the probabilistic Hough transform algorithm for line detection, described in",
    "local": ""
  },
  {
    "origin": "See the line detection example below:",
    "local": ""
  },
  {
    "origin": "This is a sample picture the function parameters have been tuned for:",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "And this is the output of the above program in case of the probabilistic Hough transform:",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "8-bit, single-channel binary source image. The image may be modified by the function.",
    "local": ""
  },
  {
    "origin": "lines",
    "local": ""
  },
  {
    "origin": "Output vector of lines. Each line is represented by a 4-element vector \\((x_1, y_1, x_2, y_2)\\) , where \\((x_1,y_1)\\) and \\((x_2, y_2)\\) are the ending points of each detected line segment.",
    "local": ""
  },
  {
    "origin": "rho",
    "local": ""
  },
  {
    "origin": "Distance resolution of the accumulator in pixels.",
    "local": ""
  },
  {
    "origin": "theta",
    "local": ""
  },
  {
    "origin": "Angle resolution of the accumulator in radians.",
    "local": ""
  },
  {
    "origin": "threshold",
    "local": ""
  },
  {
    "origin": "threshold parameter. Only those lines are returned that get enough votes ( \\(&gt;\\texttt{threshold}\\) ).",
    "local": ""
  },
  {
    "origin": "minLineLength",
    "local": ""
  },
  {
    "origin": "Minimum line length. Line segments shorter than that are rejected.",
    "local": ""
  },
  {
    "origin": "maxLineGap",
    "local": ""
  },
  {
    "origin": "Maximum allowed gap between points on the same line to link them.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "HoughLinesPointSet()",
    "local": ""
  },
  {
    "origin": "void cv::HoughLinesPointSet",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "_point",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "_lines",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "lines_max",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "threshold",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "min_rho",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "max_rho",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "rho_step",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "min_theta",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "max_theta",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "theta_step",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "_lines",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.HoughLinesPointSet(",
    "local": ""
  },
  {
    "origin": "_point, lines_max, threshold, min_rho, max_rho, rho_step, min_theta, max_theta, theta_step[, _lines]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Finds lines in a set of points using the standard Hough transform.",
    "local": ""
  },
  {
    "origin": "The function finds lines in a set of points using a modification of the Hough transform.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "_point",
    "local": ""
  },
  {
    "origin": "Input vector of points. Each vector must be encoded as a Point vector \\((x,y)\\). Type must be CV_32FC2 or CV_32SC2.",
    "local": ""
  },
  {
    "origin": "_lines",
    "local": ""
  },
  {
    "origin": "Output vector of found lines. Each vector is encoded as a vector&lt;Vec3d&gt; \\((votes, rho, theta)\\). The larger the value of 'votes', the higher the reliability of the Hough line.",
    "local": ""
  },
  {
    "origin": "lines_max",
    "local": ""
  },
  {
    "origin": "Max count of hough lines.",
    "local": ""
  },
  {
    "origin": "threshold",
    "local": ""
  },
  {
    "origin": "threshold parameter. Only those lines are returned that get enough votes ( \\(&gt;\\texttt{threshold}\\) )",
    "local": ""
  },
  {
    "origin": "min_rho",
    "local": ""
  },
  {
    "origin": "Minimum Distance value of the accumulator in pixels.",
    "local": ""
  },
  {
    "origin": "max_rho",
    "local": ""
  },
  {
    "origin": "Maximum Distance value of the accumulator in pixels.",
    "local": ""
  },
  {
    "origin": "rho_step",
    "local": ""
  },
  {
    "origin": "Distance resolution of the accumulator in pixels.",
    "local": ""
  },
  {
    "origin": "min_theta",
    "local": ""
  },
  {
    "origin": "Minimum angle value of the accumulator in radians.",
    "local": ""
  },
  {
    "origin": "max_theta",
    "local": ""
  },
  {
    "origin": "Maximum angle value of the accumulator in radians.",
    "local": ""
  },
  {
    "origin": "theta_step",
    "local": ""
  },
  {
    "origin": "Angle resolution of the accumulator in radians.",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "preCornerDetect()",
    "local": ""
  },
  {
    "origin": "void cv::preCornerDetect",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "ksize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "borderType",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.preCornerDetect(",
    "local": ""
  },
  {
    "origin": "src, ksize[, dst[, borderType]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Calculates a feature map for corner detection.",
    "local": ""
  },
  {
    "origin": "The function calculates the complex spatial derivative-based function of the source image",
    "local": ""
  },
  {
    "origin": "\\[\\texttt{dst} = (D_x \\texttt{src} )^2 \\cdot D_{yy} \\texttt{src} + (D_y \\texttt{src} )^2 \\cdot D_{xx} \\texttt{src} - 2 D_x \\texttt{src} \\cdot D_y \\texttt{src} \\cdot D_{xy} \\texttt{src}\\]",
    "local": ""
  },
  {
    "origin": "where \\(D_x\\), \\(D_y\\) are the first image derivatives, \\(D_{xx}\\), \\(D_{yy}\\) are the second image derivatives, and \\(D_{xy}\\) is the mixed derivative.",
    "local": ""
  },
  {
    "origin": "The corners can be found as local maximums of the functions, as shown below:",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Source single-channel 8-bit of floating-point image.",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "Output image that has the type CV_32F and the same size as src .",
    "local": ""
  },
  {
    "origin": "ksize",
    "local": ""
  },
  {
    "origin": "Aperture size of the Sobel .",
    "local": ""
  },
  {
    "origin": "borderType",
    "local": ""
  },
  {
    "origin": "Pixel extrapolation method. See",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "is not supported.",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:40 for OpenCV by",
    "local": ""
  }
]