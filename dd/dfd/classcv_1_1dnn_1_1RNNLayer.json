[
  {
    "origin": "OpenCV: cv::dnn::RNNLayer Class Reference",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions",
    "local": ""
  },
  {
    "origin": "List of all members",
    "local": ""
  },
  {
    "origin": "cv::dnn::RNNLayer Class Reference",
    "local": ""
  },
  {
    "origin": "abstract",
    "local": ""
  },
  {
    "origin": "&raquo;",
    "local": ""
  },
  {
    "origin": "Classical recurrent layer.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Inheritance diagram for cv::dnn::RNNLayer:",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "If this flag is set to true then layer will produce \\( h_t \\) as second output.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;Wxh, const",
    "local": ""
  },
  {
    "origin": "&amp;bh, const",
    "local": ""
  },
  {
    "origin": "&amp;Whh, const",
    "local": ""
  },
  {
    "origin": "&amp;Who, const",
    "local": ""
  },
  {
    "origin": "&#160;Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;params)",
    "local": ""
  },
  {
    "origin": "Initializes only",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "fields.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;node, const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "*&gt; &amp;inputs, const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;outputs, int targetId) const",
    "local": ""
  },
  {
    "origin": "Automatic Halide scheduling based on layer hyper-parameters.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "*&gt; &amp;input, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;output)",
    "local": ""
  },
  {
    "origin": "Computes and sets internal parameters according to inputs, outputs and blobs.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "inputs,",
    "local": ""
  },
  {
    "origin": "outputs)",
    "local": ""
  },
  {
    "origin": "Computes and sets internal parameters according to inputs, outputs and blobs.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;inputs, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;outputs)",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;inputs)",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(std::vector&lt;",
    "local": ""
  },
  {
    "origin": "*&gt; &amp;input, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;output, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;internals)",
    "local": ""
  },
  {
    "origin": "Given the",
    "local": ""
  },
  {
    "origin": "blobs, computes the output",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "inputs,",
    "local": ""
  },
  {
    "origin": "outputs,",
    "local": ""
  },
  {
    "origin": "internals)",
    "local": ""
  },
  {
    "origin": "Given the",
    "local": ""
  },
  {
    "origin": "blobs, computes the output",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "inputs,",
    "local": ""
  },
  {
    "origin": "outputs,",
    "local": ""
  },
  {
    "origin": "internals)",
    "local": ""
  },
  {
    "origin": "Given the",
    "local": ""
  },
  {
    "origin": "blobs, computes the output",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;inputs, const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;outputs) const",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;inputs, const int requiredOutputs, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;outputs, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;internals) const",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;scale,",
    "local": ""
  },
  {
    "origin": "&amp;shift) const",
    "local": ""
  },
  {
    "origin": "Returns parameters of layers with channel-wise multiplication and addition.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(void *context, const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;&gt; &amp;inputs, const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;&gt; &amp;outputs)",
    "local": ""
  },
  {
    "origin": "Returns a CUDA backend node.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &gt; &amp;inputs)",
    "local": ""
  },
  {
    "origin": "Returns Halide backend node.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &gt; &amp;inputs)",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &gt; &amp;inputs, const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &gt; &amp;nodes)",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &gt; &amp;inputs)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "inputName)",
    "local": ""
  },
  {
    "origin": "Returns index of input blob into the input array.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;outputName)",
    "local": ""
  },
  {
    "origin": "Returns index of output blob in output array.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;inputs, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;outputs, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;internals)",
    "local": ""
  },
  {
    "origin": "Allocates layer and computes output.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;layer)",
    "local": ""
  },
  {
    "origin": "Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;params)",
    "local": ""
  },
  {
    "origin": "Initializes only",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "fields.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int backendId)",
    "local": ""
  },
  {
    "origin": "Ask layer if it support specific backend for doing computations.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;node)",
    "local": ""
  },
  {
    "origin": "Implement layers fusing.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;top)",
    "local": ""
  },
  {
    "origin": "Try to fuse current layer with a next one.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "\"Deattaches\" all the layers, attached to particular layer.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;inputs)",
    "local": ""
  },
  {
    "origin": "&#160;Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Clears the algorithm state.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Returns true if the",
    "local": ""
  },
  {
    "origin": "is empty (e.g. in the very beginning or after unsuccessful read.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;fn)",
    "local": ""
  },
  {
    "origin": "Reads algorithm parameters from a file storage.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename) const",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;fs) const",
    "local": ""
  },
  {
    "origin": "Stores algorithm parameters in a file storage.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;fs, const",
    "local": ""
  },
  {
    "origin": "&amp;name=",
    "local": ""
  },
  {
    "origin": "()) const",
    "local": ""
  },
  {
    "origin": "simplified API for language bindings This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;params)",
    "local": ""
  },
  {
    "origin": "&#160;Static Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename, const",
    "local": ""
  },
  {
    "origin": "&amp;objname=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Loads algorithm from the file.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;strModel, const",
    "local": ""
  },
  {
    "origin": "&amp;objname=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Loads algorithm from a String.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;fn)",
    "local": ""
  },
  {
    "origin": "Reads algorithm from the file node.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Additional Inherited Members",
    "local": ""
  },
  {
    "origin": "&#160;Public Attributes inherited from",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "List of learned parameters must be stored here to allow read them by using",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Name of the layer instance, can be used for logging or other internal purposes.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "prefer target for layer forwarding",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Type name which was used for creating layer by layer factory.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&#160;Protected Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;fs) const",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Classical recurrent layer.",
    "local": ""
  },
  {
    "origin": "Accepts two inputs \\(x_t\\) and \\(h_{t-1}\\) and compute two outputs \\(o_t\\) and \\(h_t\\).",
    "local": ""
  },
  {
    "origin": "input: should contain packed input \\(x_t\\).",
    "local": ""
  },
  {
    "origin": "output: should contain output \\(o_t\\) (and \\(h_t\\) if",
    "local": ""
  },
  {
    "origin": "is set to true).",
    "local": ""
  },
  {
    "origin": "input[0] should have shape [",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "] where",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "is number of timestamps and number of independent samples of \\(x_t\\) respectively.",
    "local": ""
  },
  {
    "origin": "output[0] will have shape [",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", \\(N_o\\)], where \\(N_o\\) is number of rows in \\( W_{xo} \\) matrix.",
    "local": ""
  },
  {
    "origin": "If",
    "local": ""
  },
  {
    "origin": "is set to true then",
    "local": ""
  },
  {
    "origin": "[1] will contain a",
    "local": ""
  },
  {
    "origin": "with shape [",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", \\(N_h\\)], where \\(N_h\\) is number of rows in \\( W_{hh} \\) matrix.",
    "local": ""
  },
  {
    "origin": "Member Function Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "create()",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; cv::dnn::RNNLayer::create",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "params",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Creates instance of",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "setProduceHiddenOutput()",
    "local": ""
  },
  {
    "origin": "virtual void cv::dnn::RNNLayer::setProduceHiddenOutput",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "produce",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "If this flag is set to true then layer will produce \\( h_t \\) as second output.",
    "local": ""
  },
  {
    "origin": "Shape of the second output is the same as first output.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "setWeights()",
    "local": ""
  },
  {
    "origin": "virtual void cv::dnn::RNNLayer::setWeights",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Wxh",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "bh",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Whh",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Who",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "bo",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Setups learned weights.",
    "local": ""
  },
  {
    "origin": "Recurrent-layer behavior on each step is defined by current input \\( x_t \\), previous state \\( h_t \\) and learned weights as follows:",
    "local": ""
  },
  {
    "origin": "\\begin{eqnarray*} h_t &amp;= tanh&amp;(W_{hh} h_{t-1} + W_{xh} x_t + b_h), \\\\ o_t &amp;= tanh&amp;(W_{ho} h_t + b_o), \\end{eqnarray*}",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "Wxh",
    "local": ""
  },
  {
    "origin": "is \\( W_{xh} \\) matrix",
    "local": ""
  },
  {
    "origin": "bh",
    "local": ""
  },
  {
    "origin": "is \\( b_{h} \\) vector",
    "local": ""
  },
  {
    "origin": "Whh",
    "local": ""
  },
  {
    "origin": "is \\( W_{hh} \\) matrix",
    "local": ""
  },
  {
    "origin": "Who",
    "local": ""
  },
  {
    "origin": "is \\( W_{xo} \\) matrix",
    "local": ""
  },
  {
    "origin": "bo",
    "local": ""
  },
  {
    "origin": "is \\( b_{o} \\) vector",
    "local": ""
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": ""
  },
  {
    "origin": "opencv2/dnn/",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:47 for OpenCV by &#160;",
    "local": ""
  }
]