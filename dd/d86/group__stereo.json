[
  {
    "origin": "OpenCV: Stereo Correspondance Algorithms",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "Variables",
    "local": ""
  },
  {
    "origin": "Stereo Correspondance Algorithms",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "struct",
    "local": ""
  },
  {
    "origin": "struct",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Class containing the methods needed for Quasi Dense Stereo computation.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Class for computing stereo correspondence using the block matching algorithm, introduced and contributed to OpenCV by K. Konolige.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "The class implements the modified H. Hirschmuller algorithm",
    "local": ""
  },
  {
    "origin": "that differs from the original one as follows:",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Filters off small noise blobs (speckles) in the disparity map.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "speckle removal algorithms. These algorithms have the purpose of removing small regions",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "subpixel interpolationm methods for disparities.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "destructor Method to free all the memory allocated by matrices and vectors in this class.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "monoImgSize,",
    "local": ""
  },
  {
    "origin": "paramFilepath=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(std::vector&lt;",
    "local": ""
  },
  {
    "origin": "Get The dense corresponding points.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Compute and return the disparity map based on the correspondences found in the \"process\" method.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Specify pixel coordinates in the left image and get its corresponding location in the right image.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(std::vector&lt;",
    "local": ""
  },
  {
    "origin": "Get The sparse corresponding points.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual int",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "Load a file containing the configuration parameters of the class.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;rhs) const",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;imgLeft, const",
    "local": ""
  },
  {
    "origin": "Main process of the algorithm. This method computes the sparse seeds and then densifies them.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual int",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "Save a file containing all the configuration parameters the class is currently set to.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Variables",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Enumeration Type Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "anonymous enum",
    "local": ""
  },
  {
    "origin": "anonymous enum",
    "local": ""
  },
  {
    "origin": "speckle removal algorithms. These algorithms have the purpose of removing small regions",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "CV_SPECKLE_REMOVAL_ALGORITHM",
    "local": ""
  },
  {
    "origin": "Python: cv.stereo.CV_SPECKLE_REMOVAL_ALGORITHM",
    "local": ""
  },
  {
    "origin": "CV_SPECKLE_REMOVAL_AVG_ALGORITHM",
    "local": ""
  },
  {
    "origin": "Python: cv.stereo.CV_SPECKLE_REMOVAL_AVG_ALGORITHM",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "anonymous enum",
    "local": ""
  },
  {
    "origin": "anonymous enum",
    "local": ""
  },
  {
    "origin": "subpixel interpolationm methods for disparities.",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "CV_QUADRATIC_INTERPOLATION",
    "local": ""
  },
  {
    "origin": "Python: cv.stereo.CV_QUADRATIC_INTERPOLATION",
    "local": ""
  },
  {
    "origin": "CV_SIMETRICV_INTERPOLATION",
    "local": ""
  },
  {
    "origin": "Python: cv.stereo.CV_SIMETRICV_INTERPOLATION",
    "local": ""
  },
  {
    "origin": "Function Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "MatchQuasiDense()",
    "local": ""
  },
  {
    "origin": "cv::stereo::MatchQuasiDense::MatchQuasiDense",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "~QuasiDenseStereo()",
    "local": ""
  },
  {
    "origin": "virtual cv::stereo::QuasiDenseStereo::~QuasiDenseStereo",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "destructor Method to free all the memory allocated by matrices and vectors in this class.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "create()",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; cv::stereo::QuasiDenseStereo::create",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "monoImgSize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "paramFilepath",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.stereo.QuasiDenseStereo_create(",
    "local": ""
  },
  {
    "origin": "monoImgSize[, paramFilepath]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getDenseMatches()",
    "local": ""
  },
  {
    "origin": "virtual void cv::stereo::QuasiDenseStereo::getDenseMatches",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "denseMatches",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "denseMatches",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.stereo_QuasiDenseStereo.getDenseMatches(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Get The dense corresponding points.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "[out]",
    "local": ""
  },
  {
    "origin": "denseMatches",
    "local": ""
  },
  {
    "origin": "A vector containing all dense matches.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "The method clears the denseMatches vector.",
    "local": ""
  },
  {
    "origin": "The returned Match elements inside the sMatches vector, do not use corr member.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getDisparity()",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "cv::stereo::QuasiDenseStereo::getDisparity",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.stereo_QuasiDenseStereo.getDisparity(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Compute and return the disparity map based on the correspondences found in the \"process\" method.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "containing a the disparity image in grayscale.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "computeDisparity",
    "local": ""
  },
  {
    "origin": "quantizeDisparity",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getMatch()",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "cv::stereo::QuasiDenseStereo::getMatch",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const int",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const int",
    "local": ""
  },
  {
    "origin": "y",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.stereo_QuasiDenseStereo.getMatch(",
    "local": ""
  },
  {
    "origin": "x, y",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Specify pixel coordinates in the left image and get its corresponding location in the right image.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "The x pixel coordinate in the left image channel.",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "y",
    "local": ""
  },
  {
    "origin": "The y pixel coordinate in the left image channel.",
    "local": ""
  },
  {
    "origin": "Return values",
    "local": ""
  },
  {
    "origin": "cv::Point(x,y)",
    "local": ""
  },
  {
    "origin": "The location of the corresponding pixel in the right image.",
    "local": ""
  },
  {
    "origin": "cv::Point(0,0)",
    "local": ""
  },
  {
    "origin": "(NO_MATCH) if no match is found in the right image for the specified pixel location in the left image.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "This method should be always called after process, otherwise the matches will not be correct.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getSparseMatches()",
    "local": ""
  },
  {
    "origin": "virtual void cv::stereo::QuasiDenseStereo::getSparseMatches",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "sMatches",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "sMatches",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.stereo_QuasiDenseStereo.getSparseMatches(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Get The sparse corresponding points.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "[out]",
    "local": ""
  },
  {
    "origin": "sMatches",
    "local": ""
  },
  {
    "origin": "A vector containing all sparse correspondences.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "The method clears the sMatches vector.",
    "local": ""
  },
  {
    "origin": "The returned Match elements inside the sMatches vector, do not use corr member.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "loadParameters()",
    "local": ""
  },
  {
    "origin": "virtual int cv::stereo::QuasiDenseStereo::loadParameters",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "filepath",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.stereo_QuasiDenseStereo.loadParameters(",
    "local": ""
  },
  {
    "origin": "filepath",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Load a file containing the configuration parameters of the class.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "filepath",
    "local": ""
  },
  {
    "origin": "The location of the .YAML file containing the configuration parameters.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "default value is an empty string in which case the default parameters will be loaded.",
    "local": ""
  },
  {
    "origin": "Return values",
    "local": ""
  },
  {
    "origin": "If the path is not empty and the program loaded the parameters successfully.",
    "local": ""
  },
  {
    "origin": "If the path is empty and the program loaded default parameters.",
    "local": ""
  },
  {
    "origin": "If the file location is not valid or the program could not open the file and loaded default parameters from defaults.hpp.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "The method is automatically called in the constructor and configures the class.",
    "local": ""
  },
  {
    "origin": "Loading different parameters will have an effect on the output. This is useful for tuning in case of video processing.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "operator&lt;()",
    "local": ""
  },
  {
    "origin": "bool cv::stereo::MatchQuasiDense::operator&lt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "rhs",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "process()",
    "local": ""
  },
  {
    "origin": "virtual void cv::stereo::QuasiDenseStereo::process",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "imgLeft",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "imgRight",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.stereo_QuasiDenseStereo.process(",
    "local": ""
  },
  {
    "origin": "imgLeft, imgRight",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Main process of the algorithm. This method computes the sparse seeds and then densifies them.",
    "local": ""
  },
  {
    "origin": "Initially input images are converted to gray-scale and then the sparseMatching method is called to obtain the sparse stereo. Finally quasiDenseMatching is called to densify the corresponding points.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "imgLeft",
    "local": ""
  },
  {
    "origin": "The left Channel of a stereo image pair.",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "imgRight",
    "local": ""
  },
  {
    "origin": "The right Channel of a stereo image pair.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "If input images are in color, the method assumes that are BGR and converts them to grayscale.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "sparseMatching",
    "local": ""
  },
  {
    "origin": "quasiDenseMatching",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "saveParameters()",
    "local": ""
  },
  {
    "origin": "virtual int cv::stereo::QuasiDenseStereo::saveParameters",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "filepath",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.stereo_QuasiDenseStereo.saveParameters(",
    "local": ""
  },
  {
    "origin": "filepath",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Save a file containing all the configuration parameters the class is currently set to.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "filepath",
    "local": ""
  },
  {
    "origin": "The location to store the parameters file.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Calling this method with no arguments will result in storing class parameters to a file names \"qds_parameters.yaml\" in the root project folder.",
    "local": ""
  },
  {
    "origin": "This method can be used to generate a template file for tuning the class.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "Variable Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "borderX",
    "local": ""
  },
  {
    "origin": "int cv::stereo::PropagationParameters::borderX",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "borderY",
    "local": ""
  },
  {
    "origin": "int cv::stereo::PropagationParameters::borderY",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "corr",
    "local": ""
  },
  {
    "origin": "float cv::stereo::MatchQuasiDense::corr",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "correlationThreshold",
    "local": ""
  },
  {
    "origin": "float cv::stereo::PropagationParameters::correlationThreshold",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "corrWinSizeX",
    "local": ""
  },
  {
    "origin": "int cv::stereo::PropagationParameters::corrWinSizeX",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "corrWinSizeY",
    "local": ""
  },
  {
    "origin": "int cv::stereo::PropagationParameters::corrWinSizeY",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "disparityGradient",
    "local": ""
  },
  {
    "origin": "int cv::stereo::PropagationParameters::disparityGradient",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "gftMaxNumFeatures",
    "local": ""
  },
  {
    "origin": "int cv::stereo::PropagationParameters::gftMaxNumFeatures",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "gftMinSeperationDist",
    "local": ""
  },
  {
    "origin": "int cv::stereo::PropagationParameters::gftMinSeperationDist",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "gftQualityThres",
    "local": ""
  },
  {
    "origin": "float cv::stereo::PropagationParameters::gftQualityThres",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "lkPyrLvl",
    "local": ""
  },
  {
    "origin": "int cv::stereo::PropagationParameters::lkPyrLvl",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "lkTemplateSize",
    "local": ""
  },
  {
    "origin": "int cv::stereo::PropagationParameters::lkTemplateSize",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "lkTermParam1",
    "local": ""
  },
  {
    "origin": "int cv::stereo::PropagationParameters::lkTermParam1",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "lkTermParam2",
    "local": ""
  },
  {
    "origin": "float cv::stereo::PropagationParameters::lkTermParam2",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "neighborhoodSize",
    "local": ""
  },
  {
    "origin": "int cv::stereo::PropagationParameters::neighborhoodSize",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "p0",
    "local": ""
  },
  {
    "origin": "cv::stereo::MatchQuasiDense::p0",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "p1",
    "local": ""
  },
  {
    "origin": "cv::stereo::MatchQuasiDense::p1",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "Param",
    "local": ""
  },
  {
    "origin": "cv::stereo::QuasiDenseStereo::Param",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "textrureThreshold",
    "local": ""
  },
  {
    "origin": "float cv::stereo::PropagationParameters::textrureThreshold",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:41 for OpenCV by",
    "local": ""
  }
]