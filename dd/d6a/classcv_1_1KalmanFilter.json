[
  {
    "origin": "OpenCV: cv::KalmanFilter Class Reference",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "Public Attributes",
    "local": ""
  },
  {
    "origin": "List of all members",
    "local": ""
  },
  {
    "origin": "cv::KalmanFilter Class Reference",
    "local": ""
  },
  {
    "origin": "»",
    "local": ""
  },
  {
    "origin": "Kalman filter class.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "(int dynamParams, int measureParams, int controlParams=0, int type=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;measurement)",
    "local": ""
  },
  {
    "origin": "Updates the predicted state from the measurement.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(int dynamParams, int measureParams, int controlParams=0, int type=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Re-initializes Kalman filter. The previous content is destroyed.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;control=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Computes a predicted state.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Public Attributes",
    "local": ""
  },
  {
    "origin": "control matrix (B) (not used if there is no control)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "posteriori error estimate covariance matrix (P(k)): P(k)=(I-K(k)*H)*P'(k)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "priori error estimate covariance matrix (P'(k)): P'(k)=A*P(k-1)*At + Q)*/",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Kalman gain matrix (K(k)): K(k)=P'(k)*Ht*inv(H*P'(k)*Ht+R)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "measurement matrix (H)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "measurement noise covariance matrix (R)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "process noise covariance matrix (Q)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "corrected state (x(k)): x(k)=x'(k)+K(k)*(z(k)-H*x'(k))",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "predicted state (x'(k)): x(k)=A*x(k-1)+B*u(k)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "state transition matrix (A)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Kalman filter class.",
    "local": ""
  },
  {
    "origin": "The class implements a standard Kalman filter",
    "local": ""
  },
  {
    "origin": "http://en.wikipedia.org/wiki/Kalman_filter",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ". However, you can modify transitionMatrix, controlMatrix, and measurementMatrix to get an extended Kalman filter functionality.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "In C API when CvKalman* kalmanFilter structure is not needed anymore, it should be released with cvReleaseKalman(&amp;kalmanFilter)",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Constructor &amp; Destructor Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "KalmanFilter()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "cv::KalmanFilter::KalmanFilter",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "&lt;KalmanFilter object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.KalmanFilter(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;KalmanFilter object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.KalmanFilter(",
    "local": ""
  },
  {
    "origin": "dynamParams, measureParams[, controlParams[, type]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "KalmanFilter()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "cv::KalmanFilter::KalmanFilter",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "dynamParams",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "measureParams",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "controlParams",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "type",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "&lt;KalmanFilter object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.KalmanFilter(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;KalmanFilter object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.KalmanFilter(",
    "local": ""
  },
  {
    "origin": "dynamParams, measureParams[, controlParams[, type]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "dynamParams",
    "local": ""
  },
  {
    "origin": "Dimensionality of the state.",
    "local": ""
  },
  {
    "origin": "measureParams",
    "local": ""
  },
  {
    "origin": "Dimensionality of the measurement.",
    "local": ""
  },
  {
    "origin": "controlParams",
    "local": ""
  },
  {
    "origin": "Dimensionality of the control vector.",
    "local": ""
  },
  {
    "origin": "type",
    "local": ""
  },
  {
    "origin": "Type of the created matrices that should be CV_32F or CV_64F.",
    "local": ""
  },
  {
    "origin": "Member Function Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "correct()",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp; cv::KalmanFilter::correct",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "measurement",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.KalmanFilter.correct(",
    "local": ""
  },
  {
    "origin": "measurement",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Updates the predicted state from the measurement.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "measurement",
    "local": ""
  },
  {
    "origin": "The measured system parameters",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "init()",
    "local": ""
  },
  {
    "origin": "void cv::KalmanFilter::init",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "dynamParams",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "measureParams",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "controlParams",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "type",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Re-initializes Kalman filter. The previous content is destroyed.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "dynamParams",
    "local": ""
  },
  {
    "origin": "Dimensionality of the state.",
    "local": ""
  },
  {
    "origin": "measureParams",
    "local": ""
  },
  {
    "origin": "Dimensionality of the measurement.",
    "local": ""
  },
  {
    "origin": "controlParams",
    "local": ""
  },
  {
    "origin": "Dimensionality of the control vector.",
    "local": ""
  },
  {
    "origin": "type",
    "local": ""
  },
  {
    "origin": "Type of the created matrices that should be CV_32F or CV_64F.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "predict()",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp; cv::KalmanFilter::predict",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "control",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.KalmanFilter.predict(",
    "local": ""
  },
  {
    "origin": "[, control]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Computes a predicted state.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "control",
    "local": ""
  },
  {
    "origin": "The optional input control",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Member Data Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "controlMatrix",
    "local": ""
  },
  {
    "origin": "cv::KalmanFilter::controlMatrix",
    "local": ""
  },
  {
    "origin": "control matrix (B) (not used if there is no control)",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "errorCovPost",
    "local": ""
  },
  {
    "origin": "cv::KalmanFilter::errorCovPost",
    "local": ""
  },
  {
    "origin": "posteriori error estimate covariance matrix (P(k)): P(k)=(I-K(k)*H)*P'(k)",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "errorCovPre",
    "local": ""
  },
  {
    "origin": "cv::KalmanFilter::errorCovPre",
    "local": ""
  },
  {
    "origin": "priori error estimate covariance matrix (P'(k)): P'(k)=A*P(k-1)*At + Q)*/",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "gain",
    "local": ""
  },
  {
    "origin": "cv::KalmanFilter::gain",
    "local": ""
  },
  {
    "origin": "Kalman gain matrix (K(k)): K(k)=P'(k)*Ht*inv(H*P'(k)*Ht+R)",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "measurementMatrix",
    "local": ""
  },
  {
    "origin": "cv::KalmanFilter::measurementMatrix",
    "local": ""
  },
  {
    "origin": "measurement matrix (H)",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "measurementNoiseCov",
    "local": ""
  },
  {
    "origin": "cv::KalmanFilter::measurementNoiseCov",
    "local": ""
  },
  {
    "origin": "measurement noise covariance matrix (R)",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "processNoiseCov",
    "local": ""
  },
  {
    "origin": "cv::KalmanFilter::processNoiseCov",
    "local": ""
  },
  {
    "origin": "process noise covariance matrix (Q)",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "statePost",
    "local": ""
  },
  {
    "origin": "cv::KalmanFilter::statePost",
    "local": ""
  },
  {
    "origin": "corrected state (x(k)): x(k)=x'(k)+K(k)*(z(k)-H*x'(k))",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "statePre",
    "local": ""
  },
  {
    "origin": "cv::KalmanFilter::statePre",
    "local": ""
  },
  {
    "origin": "predicted state (x'(k)): x(k)=A*x(k-1)+B*u(k)",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "temp1",
    "local": ""
  },
  {
    "origin": "cv::KalmanFilter::temp1",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "temp2",
    "local": ""
  },
  {
    "origin": "cv::KalmanFilter::temp2",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "temp3",
    "local": ""
  },
  {
    "origin": "cv::KalmanFilter::temp3",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "temp4",
    "local": ""
  },
  {
    "origin": "cv::KalmanFilter::temp4",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "temp5",
    "local": ""
  },
  {
    "origin": "cv::KalmanFilter::temp5",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "transitionMatrix",
    "local": ""
  },
  {
    "origin": "cv::KalmanFilter::transitionMatrix",
    "local": ""
  },
  {
    "origin": "state transition matrix (A)",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": ""
  },
  {
    "origin": "opencv2/video/",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:43 for OpenCV by",
    "local": ""
  }
]