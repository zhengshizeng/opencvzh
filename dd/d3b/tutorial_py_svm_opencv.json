[
  {
    "origin": "OpenCV: OCR of Hand-written Data using SVM",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "OCR of Hand-written Data using SVM",
    "local": ""
  },
  {
    "origin": "Goal",
    "local": ""
  },
  {
    "origin": "In this chapter",
    "local": ""
  },
  {
    "origin": "We will revisit the hand-written data OCR, but, with SVM instead of kNN.",
    "local": ""
  },
  {
    "origin": "OCR of Hand-written Digits",
    "local": ""
  },
  {
    "origin": "In kNN, we directly used pixel intensity as the feature vector. This time we will use",
    "local": ""
  },
  {
    "origin": "Histogram of Oriented Gradients",
    "local": ""
  },
  {
    "origin": "(HOG) as feature vectors.",
    "local": ""
  },
  {
    "origin": "Here, before finding the HOG, we deskew the image using its second order moments. So we first define a function",
    "local": ""
  },
  {
    "origin": "deskew()",
    "local": ""
  },
  {
    "origin": "which takes a digit image and deskew it. Below is the deskew() function:",
    "local": ""
  },
  {
    "origin": "Below image shows above deskew function applied to an image of zero. Left image is the original image and right image is the deskewed image.",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "Next we have to find the HOG Descriptor of each cell. For that, we find Sobel derivatives of each cell in X and Y direction. Then find their magnitude and direction of gradient at each pixel. This gradient is quantized to 16 integer values. Divide this image to four sub-squares. For each sub-square, calculate the histogram of direction (16 bins) weighted with their magnitude. So each sub-square gives you a vector containing 16 values. Four such vectors (of four sub-squares) together gives us a feature vector containing 64 values. This is the feature vector we use to train our data.",
    "local": ""
  },
  {
    "origin": "Finally, as in the previous case, we start by splitting our big dataset into individual cells. For every digit, 250 cells are reserved for training data and remaining 250 data is reserved for testing. Full code is given below, you also can download it from",
    "local": ""
  },
  {
    "origin": "here",
    "local": ""
  },
  {
    "origin": ":",
    "local": ""
  },
  {
    "origin": "This particular technique gave me nearly 94% accuracy. You can try different values for various parameters of SVM to check if higher accuracy is possible. Or you can read technical papers on this area and try to implement them.",
    "local": ""
  },
  {
    "origin": "Additional Resources",
    "local": ""
  },
  {
    "origin": "Histograms of Oriented Gradients Video",
    "local": ""
  },
  {
    "origin": "Exercises",
    "local": ""
  },
  {
    "origin": "OpenCV samples contain digits.py which applies a slight improvement of the above method to get improved result. It also contains the reference. Check it and understand it.",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:37 for OpenCV by &#160;",
    "local": ""
  }
]