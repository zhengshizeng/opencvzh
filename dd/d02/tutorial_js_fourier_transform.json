[
  {
    "origin": "OpenCV: Fourier Transform",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Fourier Transform",
    "local": ""
  },
  {
    "origin": "Goal",
    "local": ""
  },
  {
    "origin": "To find the Fourier Transform of images using OpenCV",
    "local": ""
  },
  {
    "origin": "Some applications of Fourier Transform",
    "local": ""
  },
  {
    "origin": "We will learn following functions :",
    "local": ""
  },
  {
    "origin": "etc",
    "local": ""
  },
  {
    "origin": "Theory",
    "local": ""
  },
  {
    "origin": "Fourier Transform is used to analyze the frequency characteristics of various filters. For images,",
    "local": ""
  },
  {
    "origin": "2D Discrete Fourier Transform (DFT)",
    "local": ""
  },
  {
    "origin": "is used to find the frequency domain. A fast algorithm called",
    "local": ""
  },
  {
    "origin": "Fast Fourier Transform (FFT)",
    "local": ""
  },
  {
    "origin": "is used for calculation of DFT. Details about these can be found in any image processing or signal processing textbooks.",
    "local": ""
  },
  {
    "origin": "For a sinusoidal signal, \\(x(t) = A \\sin(2 \\pi ft)\\), we can say \\(f\\) is the frequency of signal, and if its frequency domain is taken, we can see a spike at \\(f\\). If signal is sampled to form a discrete signal, we get the same frequency domain, but is periodic in the range \\([- \\pi, \\pi]\\) or \\([0,2\\pi]\\) (or \\([0,N]\\) for N-point DFT). You can consider an image as a signal which is sampled in two directions. So taking fourier transform in both X and Y directions gives you the frequency representation of image.",
    "local": ""
  },
  {
    "origin": "More intuitively, for the sinusoidal signal, if the amplitude varies so fast in short time, you can say it is a high frequency signal. If it varies slowly, it is a low frequency signal. You can extend the same idea to images. Where does the amplitude varies drastically in images ? At the edge points, or noises. So we can say, edges and noises are high frequency contents in an image. If there is no much changes in amplitude, it is a low frequency component.",
    "local": ""
  },
  {
    "origin": "Performance of DFT calculation is better for some array size. It is fastest when array size is power of two. The arrays whose size is a product of 2’s, 3’s, and 5’s are also processed quite efficiently. So if you are worried about the performance of your code, you can modify the size of the array to any optimal size (by padding zeros) before finding DFT. OpenCV provides a function,",
    "local": ""
  },
  {
    "origin": "for this.",
    "local": ""
  },
  {
    "origin": "Now we will see how to find the Fourier Transform.",
    "local": ""
  },
  {
    "origin": "Fourier Transform in OpenCV",
    "local": ""
  },
  {
    "origin": "Performance of DFT calculation is better for some array size. It is fastest when array size is power of two. The arrays whose size is a product of 2’s, 3’s, and 5’s are also processed quite efficiently. So if you are worried about the performance of your code, you can modify the size of the array to any optimal size (by padding zeros). So how do we find this optimal size ? OpenCV provides a function,",
    "local": ""
  },
  {
    "origin": "for this.",
    "local": ""
  },
  {
    "origin": "We use the functions:",
    "local": ""
  },
  {
    "origin": "(src, dst, flags = 0, nonzeroRows = 0)",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "input array that could be real or complex.",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "output array whose size and type depends on the flags.",
    "local": ""
  },
  {
    "origin": "flags",
    "local": ""
  },
  {
    "origin": "transformation flags, representing a combination of the",
    "local": ""
  },
  {
    "origin": "nonzeroRows",
    "local": ""
  },
  {
    "origin": "when the parameter is not zero, the function assumes that only the first nonzeroRows rows of the input array (DFT_INVERSE is not set) or only the first nonzeroRows of the output array (DFT_INVERSE is set) contain non-zeros, thus, the function can handle the rest of the rows more efficiently and save some time; this technique is very useful for calculating array cross-correlation or convolution using DFT.",
    "local": ""
  },
  {
    "origin": "(vecsize)",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "vecsize",
    "local": ""
  },
  {
    "origin": "vector size.",
    "local": ""
  },
  {
    "origin": "(src, dst, top, bottom, left, right, borderType, value = new",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "input array that could be real or complex.",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "output array whose size and type depends on the flags.",
    "local": ""
  },
  {
    "origin": "top",
    "local": ""
  },
  {
    "origin": "parameter specifying how many top pixels in each direction from the source image rectangle to extrapolate.",
    "local": ""
  },
  {
    "origin": "bottom",
    "local": ""
  },
  {
    "origin": "parameter specifying how many bottom pixels in each direction from the source image rectangle to extrapolate.",
    "local": ""
  },
  {
    "origin": "left",
    "local": ""
  },
  {
    "origin": "parameter specifying how many left pixels in each direction from the source image rectangle to extrapolate.",
    "local": ""
  },
  {
    "origin": "right",
    "local": ""
  },
  {
    "origin": "parameter specifying how many right pixels in each direction from the source image rectangle to extrapolate.",
    "local": ""
  },
  {
    "origin": "borderType",
    "local": ""
  },
  {
    "origin": "border type.",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": "border value if borderType ==",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "(x, y, magnitude)",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "floating-point array of x-coordinates of the vectors.",
    "local": ""
  },
  {
    "origin": "y",
    "local": ""
  },
  {
    "origin": "floating-point array of y-coordinates of the vectors; it must have the same size as x.",
    "local": ""
  },
  {
    "origin": "magnitude",
    "local": ""
  },
  {
    "origin": "output array of the same size and type as x.",
    "local": ""
  },
  {
    "origin": "(m, mv)",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": "input multi-channel array.",
    "local": ""
  },
  {
    "origin": "mv",
    "local": ""
  },
  {
    "origin": "output vector of arrays; the arrays themselves are reallocated, if needed.",
    "local": ""
  },
  {
    "origin": "(mv, dst)",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "mv",
    "local": ""
  },
  {
    "origin": "input vector of matrices to be merged; all the matrices in mv must have the same size and the same depth.",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "output array of the same size and the same depth as mv[0]; The number of channels will be the total number of channels in the matrix array.",
    "local": ""
  },
  {
    "origin": "Try it",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:37 for OpenCV by &#160;",
    "local": ""
  }
]