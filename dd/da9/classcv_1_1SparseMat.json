[
  {
    "origin": "OpenCV: cv::SparseMat Class Reference",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Public Types",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "Public Attributes",
    "local": ""
  },
  {
    "origin": "List of all members",
    "local": ""
  },
  {
    "origin": "cv::SparseMat Class Reference",
    "local": ""
  },
  {
    "origin": "&raquo;",
    "local": ""
  },
  {
    "origin": "The class",
    "local": ""
  },
  {
    "origin": "represents multi-dimensional sparse numerical arrays.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Inheritance diagram for cv::SparseMat:",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "the sparse matrix header",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "sparse matrix node - element of a hash table",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Public Types",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "=0x42FD0000,",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "=0x5bd1e995,",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "=0x80000000",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Various",
    "local": ""
  },
  {
    "origin": "constructors.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int",
    "local": ""
  },
  {
    "origin": ", const int *_sizes, int _type)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;m)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;m)",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "the destructor",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "manually increments the reference counter to the header.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;m, int",
    "local": ""
  },
  {
    "origin": "=-1) const",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "returns the number of channels",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "sets all the sparse matrix elements to 0, which means clearing the hash table.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "creates full copy of the matrix",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;m, int rtype, double alpha=1) const",
    "local": ""
  },
  {
    "origin": "multiplies all the matrix elements by the specified scale factor alpha and converts the results to the specified data type",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;m, int rtype, double alpha=1, double beta=0) const",
    "local": ""
  },
  {
    "origin": "converts sparse matrix to dense n-dim matrix with optional type conversion and scaling.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;m) const",
    "local": ""
  },
  {
    "origin": "copies all the data to the destination matrix. All the previous content of m is erased",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;m) const",
    "local": ""
  },
  {
    "origin": "converts sparse matrix to dense matrix.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int",
    "local": ""
  },
  {
    "origin": ", const int *_sizes, int _type)",
    "local": ""
  },
  {
    "origin": "reallocates sparse matrix.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "returns the depth of sparse matrix elements",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "returns the matrix dimensionality",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "converts sparse matrix to the old-style representation; all the elements are copied.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "returns",
    "local": ""
  },
  {
    "origin": "/channels()",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "returns the sparse matrix iterator at the matrix end",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "returns the read-only sparse matrix iterator at the matrix end",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "returns the typed sparse matrix iterator at the matrix end",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "returns the typed read-only sparse matrix iterator at the matrix end",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int i0, int i1, size_t *hashval=0)",
    "local": ""
  },
  {
    "origin": "erases the specified element (2D case)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int i0, int i1, int i2, size_t *hashval=0)",
    "local": ""
  },
  {
    "origin": "erases the specified element (3D case)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const int *idx, size_t *hashval=0)",
    "local": ""
  },
  {
    "origin": "erases the specified element (nD case)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int i0) const",
    "local": ""
  },
  {
    "origin": "computes the element hash value (1D case)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int i0, int i1) const",
    "local": ""
  },
  {
    "origin": "computes the element hash value (2D case)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int i0, int i1, int i2) const",
    "local": ""
  },
  {
    "origin": "computes the element hash value (3D case)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const int *idx) const",
    "local": ""
  },
  {
    "origin": "computes the element hash value (nD case)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const int *idx, size_t hashval)",
    "local": ""
  },
  {
    "origin": "(size_t nidx)",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "(size_t nidx) const",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "returns the number of non-zero elements (=the number of hash table nodes)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;m)",
    "local": ""
  },
  {
    "origin": "assignment operator. This is O(1) operation, i.e. no data is copied",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;m)",
    "local": ""
  },
  {
    "origin": "equivalent to the corresponding constructor",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "(size_t hidx, size_t nidx, size_t previdx)",
    "local": ""
  },
  {
    "origin": "(size_t newsize)",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "returns the array of sizes, or NULL if the matrix is not allocated",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int i) const",
    "local": ""
  },
  {
    "origin": "returns the size of i-th matrix dimension (or 0)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "returns type of sparse matrix elements",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "*n)",
    "local": ""
  },
  {
    "origin": "returns the value stored in the sparse martix node",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*n) const",
    "local": ""
  },
  {
    "origin": "returns the value stored in the sparse martix node",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int i0, bool createMissing, size_t *hashval=0)",
    "local": ""
  },
  {
    "origin": "returns pointer to the specified element (1D case)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int i0, int i1, bool createMissing, size_t *hashval=0)",
    "local": ""
  },
  {
    "origin": "returns pointer to the specified element (2D case)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int i0, int i1, int i2, bool createMissing, size_t *hashval=0)",
    "local": ""
  },
  {
    "origin": "returns pointer to the specified element (3D case)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const int *idx, bool createMissing, size_t *hashval=0)",
    "local": ""
  },
  {
    "origin": "returns pointer to the specified element (nD case)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(int i0, size_t *hashval=0)",
    "local": ""
  },
  {
    "origin": "returns reference to the specified element (1D case)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(int i0, int i1, size_t *hashval=0)",
    "local": ""
  },
  {
    "origin": "returns reference to the specified element (2D case)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(int i0, int i1, int i2, size_t *hashval=0)",
    "local": ""
  },
  {
    "origin": "returns reference to the specified element (3D case)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const int *idx, size_t *hashval=0)",
    "local": ""
  },
  {
    "origin": "returns reference to the specified element (nD case)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(int i0, size_t *hashval=0) const",
    "local": ""
  },
  {
    "origin": "returns value of the specified element (1D case)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(int i0, int i1, size_t *hashval=0) const",
    "local": ""
  },
  {
    "origin": "returns value of the specified element (2D case)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(int i0, int i1, int i2, size_t *hashval=0) const",
    "local": ""
  },
  {
    "origin": "returns value of the specified element (3D case)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const int *idx, size_t *hashval=0) const",
    "local": ""
  },
  {
    "origin": "returns value of the specified element (nD case)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(int i0, size_t *hashval=0) const",
    "local": ""
  },
  {
    "origin": "returns pointer to the specified element (1D case)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(int i0, int i1, size_t *hashval=0) const",
    "local": ""
  },
  {
    "origin": "returns pointer to the specified element (2D case)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(int i0, int i1, int i2, size_t *hashval=0) const",
    "local": ""
  },
  {
    "origin": "returns pointer to the specified element (3D case)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const int *idx, size_t *hashval=0) const",
    "local": ""
  },
  {
    "origin": "returns pointer to the specified element (nD case)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "returns the sparse matrix iterator at the matrix beginning",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "returns the sparse matrix iterator at the matrix beginning",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "returns the read-only sparse matrix iterator at the matrix beginning",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "returns the read-only sparse matrix iterator at the matrix beginning",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Public Attributes",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "The class",
    "local": ""
  },
  {
    "origin": "represents multi-dimensional sparse numerical arrays.",
    "local": ""
  },
  {
    "origin": "Such a sparse array can store elements of any type that",
    "local": ""
  },
  {
    "origin": "can store.",
    "local": ""
  },
  {
    "origin": "Sparse",
    "local": ""
  },
  {
    "origin": "means that only non-zero elements are stored (though, as a result of operations on a sparse matrix, some of its stored elements can actually become 0. It is up to you to detect such elements and delete them using",
    "local": ""
  },
  {
    "origin": "). The non-zero elements are stored in a hash table that grows when it is filled so that the search time is O(1) in average (regardless of whether element is there or not). Elements can be accessed using the following methods:",
    "local": ""
  },
  {
    "origin": "Query operations (",
    "local": ""
  },
  {
    "origin": "and the higher-level",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "), for example:",
    "local": ""
  },
  {
    "origin": "Sparse matrix iterators. They are similar to MatIterator but different from",
    "local": ""
  },
  {
    "origin": ". That is, the iteration loop is familiar to STL users:",
    "local": ""
  },
  {
    "origin": "If you run this loop, you will notice that elements are not enumerated in a logical order (lexicographical, and so on). They come in the same order as they are stored in the hash table (semi-randomly). You may collect pointers to the nodes and sort them to get the proper ordering. Note, however, that pointers to the nodes may become invalid when you add more elements to the matrix. This may happen due to possible buffer reallocation.",
    "local": ""
  },
  {
    "origin": "Combination of the above 2 methods when you need to process 2 or more sparse matrices simultaneously. For example, this is how you can compute unnormalized cross-correlation of the 2 floating-point sparse matrices:",
    "local": ""
  },
  {
    "origin": "Member Typedef Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "const_iterator",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "iterator",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "Member Enumeration Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "anonymous enum",
    "local": ""
  },
  {
    "origin": "anonymous enum",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "Constructor &amp; Destructor Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "SparseMat()",
    "local": ""
  },
  {
    "origin": "[1/4]",
    "local": ""
  },
  {
    "origin": "cv::SparseMat::SparseMat",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Various",
    "local": ""
  },
  {
    "origin": "constructors.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "SparseMat()",
    "local": ""
  },
  {
    "origin": "[2/4]",
    "local": ""
  },
  {
    "origin": "cv::SparseMat::SparseMat",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "dims",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "_sizes",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "_type",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "dims",
    "local": ""
  },
  {
    "origin": "Array dimensionality.",
    "local": ""
  },
  {
    "origin": "_sizes",
    "local": ""
  },
  {
    "origin": "Sparce matrix size on all dementions.",
    "local": ""
  },
  {
    "origin": "_type",
    "local": ""
  },
  {
    "origin": "Sparse matrix data type.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "SparseMat()",
    "local": ""
  },
  {
    "origin": "[3/4]",
    "local": ""
  },
  {
    "origin": "cv::SparseMat::SparseMat",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": "Source matrix for copy constructor. If m is dense matrix (ocvMat) then it will be converted to sparse representation.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "SparseMat()",
    "local": ""
  },
  {
    "origin": "[4/4]",
    "local": ""
  },
  {
    "origin": "cv::SparseMat::SparseMat",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "explicit",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": "Source matrix for copy constructor. If m is dense matrix (ocvMat) then it will be converted to sparse representation.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "~SparseMat()",
    "local": ""
  },
  {
    "origin": "cv::SparseMat::~SparseMat",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "the destructor",
    "local": ""
  },
  {
    "origin": "Member Function Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "addref()",
    "local": ""
  },
  {
    "origin": "void cv::SparseMat::addref",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "manually increments the reference counter to the header.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "assignTo()",
    "local": ""
  },
  {
    "origin": "void cv::SparseMat::assignTo",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "type",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "begin()",
    "local": ""
  },
  {
    "origin": "[1/4]",
    "local": ""
  },
  {
    "origin": "cv::SparseMat::begin",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns the sparse matrix iterator at the matrix beginning",
    "local": ""
  },
  {
    "origin": "return the sparse matrix iterator pointing to the first sparse matrix element",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "begin()",
    "local": ""
  },
  {
    "origin": "[2/4]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt; cv::SparseMat::begin",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns the sparse matrix iterator at the matrix beginning",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "begin()",
    "local": ""
  },
  {
    "origin": "[3/4]",
    "local": ""
  },
  {
    "origin": "cv::SparseMat::begin",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns the read-only sparse matrix iterator at the matrix beginning",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "begin()",
    "local": ""
  },
  {
    "origin": "[4/4]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt; cv::SparseMat::begin",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns the read-only sparse matrix iterator at the matrix beginning",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "channels()",
    "local": ""
  },
  {
    "origin": "int cv::SparseMat::channels",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns the number of channels",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "clear()",
    "local": ""
  },
  {
    "origin": "void cv::SparseMat::clear",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "sets all the sparse matrix elements to 0, which means clearing the hash table.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "clone()",
    "local": ""
  },
  {
    "origin": "cv::SparseMat::clone",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "creates full copy of the matrix",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "convertTo()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "void cv::SparseMat::convertTo",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "rtype",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "alpha",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "multiplies all the matrix elements by the specified scale factor alpha and converts the results to the specified data type",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "convertTo()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "void cv::SparseMat::convertTo",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "rtype",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "alpha",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "beta",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "converts sparse matrix to dense n-dim matrix with optional type conversion and scaling.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "[out]",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": "- output matrix; if it does not have a proper size or type before the operation, it is reallocated",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "rtype",
    "local": ""
  },
  {
    "origin": "- desired output matrix type or, rather, the depth since the number of channels are the same as the input has; if rtype is negative, the output matrix will have the same type as the input.",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "alpha",
    "local": ""
  },
  {
    "origin": "- optional scale factor",
    "local": ""
  },
  {
    "origin": "[in]",
    "local": ""
  },
  {
    "origin": "beta",
    "local": ""
  },
  {
    "origin": "- optional delta added to the scaled values",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "copyTo()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "void cv::SparseMat::copyTo",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "copies all the data to the destination matrix. All the previous content of m is erased",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "copyTo()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "void cv::SparseMat::copyTo",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "converts sparse matrix to dense matrix.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "create()",
    "local": ""
  },
  {
    "origin": "void cv::SparseMat::create",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "dims",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "_sizes",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "_type",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "reallocates sparse matrix.",
    "local": ""
  },
  {
    "origin": "If the matrix already had the proper size and type, it is simply cleared with",
    "local": ""
  },
  {
    "origin": ", otherwise, the old matrix is released (using",
    "local": ""
  },
  {
    "origin": ") and the new one is allocated.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "depth()",
    "local": ""
  },
  {
    "origin": "int cv::SparseMat::depth",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns the depth of sparse matrix elements",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "dims()",
    "local": ""
  },
  {
    "origin": "int cv::SparseMat::dims",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns the matrix dimensionality",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "elemSize()",
    "local": ""
  },
  {
    "origin": "size_t cv::SparseMat::elemSize",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "converts sparse matrix to the old-style representation; all the elements are copied.",
    "local": ""
  },
  {
    "origin": "returns the size of each element in bytes (not including the overhead - the space occupied by",
    "local": ""
  },
  {
    "origin": "elements)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "elemSize1()",
    "local": ""
  },
  {
    "origin": "size_t cv::SparseMat::elemSize1",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns",
    "local": ""
  },
  {
    "origin": "/channels()",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "end()",
    "local": ""
  },
  {
    "origin": "[1/4]",
    "local": ""
  },
  {
    "origin": "cv::SparseMat::end",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns the sparse matrix iterator at the matrix end",
    "local": ""
  },
  {
    "origin": "return the sparse matrix iterator pointing to the element following the last sparse matrix element",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "end()",
    "local": ""
  },
  {
    "origin": "[2/4]",
    "local": ""
  },
  {
    "origin": "cv::SparseMat::end",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns the read-only sparse matrix iterator at the matrix end",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "end()",
    "local": ""
  },
  {
    "origin": "[3/4]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt; cv::SparseMat::end",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns the typed sparse matrix iterator at the matrix end",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "end()",
    "local": ""
  },
  {
    "origin": "[4/4]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt; cv::SparseMat::end",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns the typed read-only sparse matrix iterator at the matrix end",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "erase()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "void cv::SparseMat::erase",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "i0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "i1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hashval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "erases the specified element (2D case)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "erase()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "void cv::SparseMat::erase",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "i0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "i1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "i2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hashval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "erases the specified element (3D case)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "erase()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "void cv::SparseMat::erase",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hashval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "erases the specified element (nD case)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "find()",
    "local": ""
  },
  {
    "origin": "[1/4]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "const _Tp* cv::SparseMat::find",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "i0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hashval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns pointer to the specified element (1D case)",
    "local": ""
  },
  {
    "origin": "Return pointer to the specified sparse matrix element if it exists",
    "local": ""
  },
  {
    "origin": "is equivalent to",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "If the specified element does not exist, the methods return NULL.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "find()",
    "local": ""
  },
  {
    "origin": "[2/4]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "const _Tp* cv::SparseMat::find",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "i0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "i1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hashval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns pointer to the specified element (2D case)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "find()",
    "local": ""
  },
  {
    "origin": "[3/4]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "const _Tp* cv::SparseMat::find",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "i0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "i1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "i2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hashval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns pointer to the specified element (3D case)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "find()",
    "local": ""
  },
  {
    "origin": "[4/4]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "const _Tp* cv::SparseMat::find",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hashval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns pointer to the specified element (nD case)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "hash()",
    "local": ""
  },
  {
    "origin": "[1/4]",
    "local": ""
  },
  {
    "origin": "size_t cv::SparseMat::hash",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "i0",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "computes the element hash value (1D case)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "hash()",
    "local": ""
  },
  {
    "origin": "[2/4]",
    "local": ""
  },
  {
    "origin": "size_t cv::SparseMat::hash",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "i0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "i1",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "computes the element hash value (2D case)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "hash()",
    "local": ""
  },
  {
    "origin": "[3/4]",
    "local": ""
  },
  {
    "origin": "size_t cv::SparseMat::hash",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "i0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "i1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "i2",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "computes the element hash value (3D case)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "hash()",
    "local": ""
  },
  {
    "origin": "[4/4]",
    "local": ""
  },
  {
    "origin": "size_t cv::SparseMat::hash",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "computes the element hash value (nD case)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "newNode()",
    "local": ""
  },
  {
    "origin": "* cv::SparseMat::newNode",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hashval",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "node()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "* cv::SparseMat::node",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "nidx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "node()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "* cv::SparseMat::node",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "nidx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "nzcount()",
    "local": ""
  },
  {
    "origin": "size_t cv::SparseMat::nzcount",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns the number of non-zero elements (=the number of hash table nodes)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator=()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "&amp; cv::SparseMat::operator=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "assignment operator. This is O(1) operation, i.e. no data is copied",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator=()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "&amp; cv::SparseMat::operator=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "equivalent to the corresponding constructor",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ptr()",
    "local": ""
  },
  {
    "origin": "[1/4]",
    "local": ""
  },
  {
    "origin": "* cv::SparseMat::ptr",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "i0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "createMissing",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hashval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns pointer to the specified element (1D case)",
    "local": ""
  },
  {
    "origin": "specialized variants for 1D, 2D, 3D cases and the generic_type one for n-D case. return pointer to the matrix element.",
    "local": ""
  },
  {
    "origin": "if the element is there (it's non-zero), the pointer to it is returned",
    "local": ""
  },
  {
    "origin": "if it's not there and createMissing=false, NULL pointer is returned",
    "local": ""
  },
  {
    "origin": "if it's not there and createMissing=true, then the new element is created and initialized with 0. Pointer to it is returned",
    "local": ""
  },
  {
    "origin": "if the optional hashval pointer is not NULL, the element hash value is not computed, but *hashval is taken instead.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ptr()",
    "local": ""
  },
  {
    "origin": "[2/4]",
    "local": ""
  },
  {
    "origin": "* cv::SparseMat::ptr",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "i0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "i1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "createMissing",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hashval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns pointer to the specified element (2D case)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ptr()",
    "local": ""
  },
  {
    "origin": "[3/4]",
    "local": ""
  },
  {
    "origin": "* cv::SparseMat::ptr",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "i0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "i1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "i2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "createMissing",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hashval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns pointer to the specified element (3D case)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ptr()",
    "local": ""
  },
  {
    "origin": "[4/4]",
    "local": ""
  },
  {
    "origin": "* cv::SparseMat::ptr",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "createMissing",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hashval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns pointer to the specified element (nD case)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ref()",
    "local": ""
  },
  {
    "origin": "[1/4]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "_Tp&amp; cv::SparseMat::ref",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "i0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hashval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns reference to the specified element (1D case)",
    "local": ""
  },
  {
    "origin": "return read-write reference to the specified sparse matrix element.",
    "local": ""
  },
  {
    "origin": "is equivalent to",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ref()",
    "local": ""
  },
  {
    "origin": "[2/4]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "_Tp&amp; cv::SparseMat::ref",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "i0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "i1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hashval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns reference to the specified element (2D case)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ref()",
    "local": ""
  },
  {
    "origin": "[3/4]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "_Tp&amp; cv::SparseMat::ref",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "i0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "i1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "i2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hashval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns reference to the specified element (3D case)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ref()",
    "local": ""
  },
  {
    "origin": "[4/4]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "_Tp&amp; cv::SparseMat::ref",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hashval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns reference to the specified element (nD case)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "release()",
    "local": ""
  },
  {
    "origin": "void cv::SparseMat::release",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "removeNode()",
    "local": ""
  },
  {
    "origin": "void cv::SparseMat::removeNode",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "hidx",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "nidx",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "previdx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "resizeHashTab()",
    "local": ""
  },
  {
    "origin": "void cv::SparseMat::resizeHashTab",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "newsize",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "size()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "const int* cv::SparseMat::size",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns the array of sizes, or NULL if the matrix is not allocated",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "size()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "int cv::SparseMat::size",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "i",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns the size of i-th matrix dimension (or 0)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "type()",
    "local": ""
  },
  {
    "origin": "int cv::SparseMat::type",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns type of sparse matrix elements",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "value()",
    "local": ""
  },
  {
    "origin": "[1/6]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "_Tp cv::SparseMat::value",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "i0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hashval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns value of the specified element (1D case)",
    "local": ""
  },
  {
    "origin": "return value of the specified sparse matrix element.",
    "local": ""
  },
  {
    "origin": "is equivalent to",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "value()",
    "local": ""
  },
  {
    "origin": "[2/6]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "_Tp cv::SparseMat::value",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "i0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "i1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hashval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns value of the specified element (2D case)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "value()",
    "local": ""
  },
  {
    "origin": "[3/6]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "_Tp cv::SparseMat::value",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "i0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "i1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "i2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hashval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns value of the specified element (3D case)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "value()",
    "local": ""
  },
  {
    "origin": "[4/6]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "_Tp cv::SparseMat::value",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hashval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns value of the specified element (nD case)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "value()",
    "local": ""
  },
  {
    "origin": "[5/6]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "_Tp&amp; cv::SparseMat::value",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns the value stored in the sparse martix node",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "value()",
    "local": ""
  },
  {
    "origin": "[6/6]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "const _Tp&amp; cv::SparseMat::value",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns the value stored in the sparse martix node",
    "local": ""
  },
  {
    "origin": "Member Data Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "flags",
    "local": ""
  },
  {
    "origin": "int cv::SparseMat::flags",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "hdr",
    "local": ""
  },
  {
    "origin": "* cv::SparseMat::hdr",
    "local": ""
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": ""
  },
  {
    "origin": "opencv2/core/",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:43 for OpenCV by &#160;",
    "local": ""
  }
]