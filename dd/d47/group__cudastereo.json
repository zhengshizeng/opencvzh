[
  {
    "origin": "OpenCV: Stereo Correspondence",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "Stereo Correspondence",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Class refining a disparity map using joint bilateral filtering. :",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class computing stereo correspondence using the belief propagation algorithm. :",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class computing stereo correspondence (disparity map) using the block matching algorithm. :",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class computing stereo correspondence using the constant space belief propagation algorithm. :",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "The class implements the modified H. Hirschmuller algorithm",
    "local": ""
  },
  {
    "origin": ". Limitation and difference are as follows:",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(int ndisp=64, int radius=3, int iters=1)",
    "local": ""
  },
  {
    "origin": "Creates",
    "local": ""
  },
  {
    "origin": "object.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(int ndisp=64, int iters=5, int levels=5, int msg_type=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Creates",
    "local": ""
  },
  {
    "origin": "object.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(int numDisparities=64, int blockSize=19)",
    "local": ""
  },
  {
    "origin": "Creates",
    "local": ""
  },
  {
    "origin": "object.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(int ndisp=128, int iters=8, int levels=4, int nr_plane=4, int msg_type=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Creates",
    "local": ""
  },
  {
    "origin": "object.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(int minDisparity=0, int numDisparities=128, int P1=10, int P2=120, int uniquenessRatio=5, int mode=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Creates",
    "local": ""
  },
  {
    "origin": "object.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src_disp,",
    "local": ""
  },
  {
    "origin": "dst_disp, int ndisp,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Colors a disparity image.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "disp,",
    "local": ""
  },
  {
    "origin": "xyzw,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Reprojects a disparity image to 3D space.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Function Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "createDisparityBilateralFilter()",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; cv::cuda::createDisparityBilateralFilter",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ndisp",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "radius",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "iters",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Creates",
    "local": ""
  },
  {
    "origin": "object.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "ndisp",
    "local": ""
  },
  {
    "origin": "Number of disparities.",
    "local": ""
  },
  {
    "origin": "radius",
    "local": ""
  },
  {
    "origin": "radius.",
    "local": ""
  },
  {
    "origin": "iters",
    "local": ""
  },
  {
    "origin": "Number of iterations.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "createStereoBeliefPropagation()",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; cv::cuda::createStereoBeliefPropagation",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ndisp",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "iters",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "levels",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "msg_type",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Creates",
    "local": ""
  },
  {
    "origin": "object.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "ndisp",
    "local": ""
  },
  {
    "origin": "Number of disparities.",
    "local": ""
  },
  {
    "origin": "iters",
    "local": ""
  },
  {
    "origin": "Number of BP iterations on each level.",
    "local": ""
  },
  {
    "origin": "levels",
    "local": ""
  },
  {
    "origin": "Number of levels.",
    "local": ""
  },
  {
    "origin": "msg_type",
    "local": ""
  },
  {
    "origin": "Type for messages. CV_16SC1 and CV_32FC1 types are supported.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "createStereoBM()",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; cv::cuda::createStereoBM",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "numDisparities",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "blockSize",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Creates",
    "local": ""
  },
  {
    "origin": "object.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "numDisparities",
    "local": ""
  },
  {
    "origin": "the disparity search range. For each pixel algorithm will find the best disparity from 0 (default minimum disparity) to numDisparities. The search range can then be shifted by changing the minimum disparity.",
    "local": ""
  },
  {
    "origin": "blockSize",
    "local": ""
  },
  {
    "origin": "the linear size of the blocks compared by the algorithm. The size should be odd (as the block is centered at the current pixel). Larger block size implies smoother, though less accurate disparity map. Smaller block size gives more detailed disparity map, but there is higher chance for algorithm to find a wrong correspondence.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "createStereoConstantSpaceBP()",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; cv::cuda::createStereoConstantSpaceBP",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ndisp",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "iters",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "levels",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "nr_plane",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "msg_type",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Creates",
    "local": ""
  },
  {
    "origin": "object.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "ndisp",
    "local": ""
  },
  {
    "origin": "Number of disparities.",
    "local": ""
  },
  {
    "origin": "iters",
    "local": ""
  },
  {
    "origin": "Number of BP iterations on each level.",
    "local": ""
  },
  {
    "origin": "levels",
    "local": ""
  },
  {
    "origin": "Number of levels.",
    "local": ""
  },
  {
    "origin": "nr_plane",
    "local": ""
  },
  {
    "origin": "Number of disparity levels on the first level.",
    "local": ""
  },
  {
    "origin": "msg_type",
    "local": ""
  },
  {
    "origin": "Type for messages. CV_16SC1 and CV_32FC1 types are supported.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "createStereoSGM()",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; cv::cuda::createStereoSGM",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "minDisparity",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "numDisparities",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "P1",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "P2",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "uniquenessRatio",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "mode",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Creates",
    "local": ""
  },
  {
    "origin": "object.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "minDisparity",
    "local": ""
  },
  {
    "origin": "Minimum possible disparity value. Normally, it is zero but sometimes rectification algorithms can shift images, so this parameter needs to be adjusted accordingly.",
    "local": ""
  },
  {
    "origin": "numDisparities",
    "local": ""
  },
  {
    "origin": "Maximum disparity minus minimum disparity. The value must be 64, 128 or 256.",
    "local": ""
  },
  {
    "origin": "P1",
    "local": ""
  },
  {
    "origin": "The first parameter controlling the disparity smoothness.This parameter is used for the case of slanted surfaces (not fronto parallel).",
    "local": ""
  },
  {
    "origin": "P2",
    "local": ""
  },
  {
    "origin": "The second parameter controlling the disparity smoothness.This parameter is used for \"solving\" the depth discontinuities problem.",
    "local": ""
  },
  {
    "origin": "uniquenessRatio",
    "local": ""
  },
  {
    "origin": "Margin in percentage by which the best (minimum) computed cost function value should \"win\" the second best value to consider the found match correct. Normally, a value within the 5-15 range is good enough.",
    "local": ""
  },
  {
    "origin": "mode",
    "local": ""
  },
  {
    "origin": "Set it to",
    "local": ""
  },
  {
    "origin": "to run the full-scale two-pass dynamic programming algorithm. It will consume O(W*H*numDisparities) bytes. By default, it is set to",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "drawColorDisp()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::drawColorDisp",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src_disp",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst_disp",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "ndisp",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Colors a disparity image.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src_disp",
    "local": ""
  },
  {
    "origin": "Input single-channel 8-bit unsigned, 16-bit signed, 32-bit signed or 32-bit floating-point disparity image. If 16-bit signed format is used, the values are assumed to have no fractional bits.",
    "local": ""
  },
  {
    "origin": "dst_disp",
    "local": ""
  },
  {
    "origin": "Output disparity image. It has the same size as src_disp. The type is CV_8UC4 in BGRA format (alpha = 255).",
    "local": ""
  },
  {
    "origin": "ndisp",
    "local": ""
  },
  {
    "origin": "Number of disparities.",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "for the asynchronous version.",
    "local": ""
  },
  {
    "origin": "This function draws a colored disparity map by converting disparity values from [0..ndisp) interval first to HSV color space (where different disparity values correspond to different hues) and then converting the pixels to RGB for visualization.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "reprojectImageTo3D()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::reprojectImageTo3D",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "disp",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "xyzw",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Q",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst_cn",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Reprojects a disparity image to 3D space.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "disp",
    "local": ""
  },
  {
    "origin": "Input single-channel 8-bit unsigned, 16-bit signed, 32-bit signed or 32-bit floating-point disparity image. If 16-bit signed format is used, the values are assumed to have no fractional bits.",
    "local": ""
  },
  {
    "origin": "xyzw",
    "local": ""
  },
  {
    "origin": "Output 3- or 4-channel floating-point image of the same size as disp . Each element of xyzw(x,y) contains 3D coordinates (x,y,z) or (x,y,z,1) of the point (x,y) , computed from the disparity map.",
    "local": ""
  },
  {
    "origin": "Q",
    "local": ""
  },
  {
    "origin": "\\(4 \\times 4\\) perspective transformation matrix that can be obtained via stereoRectify .",
    "local": ""
  },
  {
    "origin": "dst_cn",
    "local": ""
  },
  {
    "origin": "The number of channels for output image. Can be 3 or 4.",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "for the asynchronous version.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:41 for OpenCV by &#160;",
    "local": ""
  }
]