[
  {
    "origin": "OpenCV: cv::cuda::HostMem Class Reference",
    "local": "OpenCV:cv:：cuda:：HostMem类引用"
  },
  {
    "origin": "OpenCV",
    "local": "打开CV"
  },
  {
    "origin": "Open Source Computer Vision",
    "local": "开源计算机视觉"
  },
  {
    "origin": "Public Types",
    "local": "公共类型"
  },
  {
    "origin": "Public Member Functions",
    "local": "公共成员职能"
  },
  {
    "origin": "Static Public Member Functions",
    "local": "静态公共成员函数"
  },
  {
    "origin": "Public Attributes",
    "local": "公共属性"
  },
  {
    "origin": "List of all members",
    "local": "所有成员的列表"
  },
  {
    "origin": "cv::cuda::HostMem Class Reference",
    "local": "cv:：cuda:：HostMem类引用"
  },
  {
    "origin": "»",
    "local": "»"
  },
  {
    "origin": "»",
    "local": "»"
  },
  {
    "origin": "Class with reference counting wrapping special memory type allocation functions from CUDA.",
    "local": "用引用计数包装CUDA中的特殊内存类型分配函数来初始化。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Public Types",
    "local": "公共类型"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "Public Member Functions",
    "local": "公共成员职能"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "=HostMem::AllocType::PAGE_LOCKED)",
    "local": "=HostMem:：AllocType:：页锁定）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;m)",
    "local": "&amp；米）"
  },
  {
    "origin": "(int",
    "local": "（内景）"
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "=HostMem::AllocType::PAGE_LOCKED)",
    "local": "=HostMem:：AllocType:：页锁定）"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "=HostMem::AllocType::PAGE_LOCKED)",
    "local": "=HostMem:：AllocType:：页锁定）"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "arr,",
    "local": "啊，"
  },
  {
    "origin": "=HostMem::AllocType::PAGE_LOCKED)",
    "local": "=HostMem:：AllocType:：页锁定）"
  },
  {
    "origin": "creates from host memory with coping data",
    "local": "从主机内存中创建数据"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "returns deep copy of the matrix, i.e. the data is copied",
    "local": "返回矩阵的深度副本，即复制数据"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(int",
    "local": "（内景）"
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "allocates new matrix data unless the matrix already has specified size and type.",
    "local": "分配新的矩阵数据，除非矩阵已经指定了大小和类型。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ", int",
    "local": "，内景"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "Maps CPU memory to GPU address space and creates the",
    "local": "将CPU内存映射到GPU地址空间并创建"
  },
  {
    "origin": "header without reference counting for it.",
    "local": "没有引用计数的标题。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "returns matrix header with disabled reference counting for",
    "local": "返回禁用引用计数的矩阵头"
  },
  {
    "origin": "data.",
    "local": "数据。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "size_t",
    "local": "大小\\u t"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "size_t",
    "local": "大小\\u t"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;m)",
    "local": "&amp；米）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "decrements reference counter and released memory if needed.",
    "local": "如果需要，减少参考计数器和释放的内存。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(int cn, int",
    "local": "（内景，内景）"
  },
  {
    "origin": "=0) const",
    "local": "=0）常数"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "size_t",
    "local": "大小\\u t"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;b)",
    "local": "&amp；（二）"
  },
  {
    "origin": "swaps with other smart pointer",
    "local": "与其他智能指针交换"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "Static Public Member Functions",
    "local": "静态公共成员函数"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "*",
    "local": "*"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "=HostMem::AllocType::PAGE_LOCKED)",
    "local": "=HostMem:：AllocType:：页锁定）"
  },
  {
    "origin": "Public Attributes",
    "local": "公共属性"
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "*",
    "local": "*"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "*",
    "local": "*"
  },
  {
    "origin": "*",
    "local": "*"
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "int *",
    "local": "内景*"
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "size_t",
    "local": "大小\\u t"
  },
  {
    "origin": "Detailed Description",
    "local": "详细说明"
  },
  {
    "origin": "Class with reference counting wrapping special memory type allocation functions from CUDA.",
    "local": "用引用计数包装CUDA中的特殊内存类型分配函数来初始化。"
  },
  {
    "origin": "Its interface is also Mat-like but with additional memory type parameters.",
    "local": "它的接口也是Mat-like，但是有额外的内存类型参数。"
  },
  {
    "origin": "PAGE_LOCKED",
    "local": "页面已锁定"
  },
  {
    "origin": "sets a page locked memory type used commonly for fast and asynchronous uploading/downloading data from/to GPU.",
    "local": "设置通常用于从GPU快速和异步上载/下载数据的页锁定内存类型。"
  },
  {
    "origin": "SHARED",
    "local": "共享"
  },
  {
    "origin": "specifies a zero copy memory allocation that enables mapping the host memory to GPU address space, if supported.",
    "local": "指定允许将主机内存映射到GPU地址空间（如果支持）的零拷贝内存分配。"
  },
  {
    "origin": "WRITE_COMBINED",
    "local": "写入\\u组合"
  },
  {
    "origin": "sets the write combined buffer that is not cached by CPU. Such buffers are used to supply GPU with data when GPU only reads it. The advantage is a better CPU cache utilization.",
    "local": "设置不由CPU缓存的写入组合缓冲区。当GPU只读取数据时，这些缓冲区用于向GPU提供数据。优点是CPU缓存利用率更好。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "Allocation size of such memory types is usually limited. For more details, see",
    "local": "这种内存类型的分配大小通常是有限的。有关详细信息，请参阅"
  },
  {
    "origin": "CUDA 2.2 Pinned Memory APIs",
    "local": "CUDA 2.2固定内存API"
  },
  {
    "origin": "document or",
    "local": "文件或"
  },
  {
    "origin": "CUDA C Programming Guide",
    "local": "CUDA C编程指南"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Member Enumeration Documentation",
    "local": "成员枚举文档"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "AllocType",
    "local": "同种型"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "Enumerator",
    "local": "枚举器"
  },
  {
    "origin": "PAGE_LOCKED",
    "local": "页面已锁定"
  },
  {
    "origin": "SHARED",
    "local": "共享"
  },
  {
    "origin": "WRITE_COMBINED",
    "local": "写入\\u组合"
  },
  {
    "origin": "Constructor &amp; Destructor Documentation",
    "local": "建造商和；析构函数文档"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "HostMem()",
    "local": "主机内存（）"
  },
  {
    "origin": "[1/5]",
    "local": "[1/5]"
  },
  {
    "origin": "cv::cuda::HostMem::HostMem",
    "local": "简历：：cuda：：HostMem：：HostMem"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "alloc_type",
    "local": "分配类型"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "explicit",
    "local": "明确的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "&lt;cuda_HostMem object&gt;",
    "local": "&lt；cudaïU HostMem对象&gt；"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem(",
    "local": "库达·霍斯特姆简历("
  },
  {
    "origin": "[, alloc_type]",
    "local": "[，分配类型]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "&lt;cuda_HostMem object&gt;",
    "local": "&lt；cudaïU HostMem对象&gt；"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem(",
    "local": "库达·霍斯特姆简历("
  },
  {
    "origin": "rows, cols, type[, alloc_type]",
    "local": "行，列，类型[，分配类型]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "&lt;cuda_HostMem object&gt;",
    "local": "&lt；cudaïU HostMem对象&gt；"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem(",
    "local": "库达·霍斯特姆简历("
  },
  {
    "origin": "size, type[, alloc_type]",
    "local": "大小，类型[，分配类型]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "&lt;cuda_HostMem object&gt;",
    "local": "&lt；cudaïU HostMem对象&gt；"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem(",
    "local": "库达·霍斯特姆简历("
  },
  {
    "origin": "arr[, alloc_type]",
    "local": "ARR[，分配类型]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "HostMem()",
    "local": "主机内存（）"
  },
  {
    "origin": "[2/5]",
    "local": "[2/5]"
  },
  {
    "origin": "cv::cuda::HostMem::HostMem",
    "local": "简历：：cuda：：HostMem：：HostMem"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "&lt;cuda_HostMem object&gt;",
    "local": "&lt；cudaïU HostMem对象&gt；"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem(",
    "local": "库达·霍斯特姆简历("
  },
  {
    "origin": "[, alloc_type]",
    "local": "[，分配类型]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "&lt;cuda_HostMem object&gt;",
    "local": "&lt；cudaïU HostMem对象&gt；"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem(",
    "local": "库达·霍斯特姆简历("
  },
  {
    "origin": "rows, cols, type[, alloc_type]",
    "local": "行，列，类型[，分配类型]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "&lt;cuda_HostMem object&gt;",
    "local": "&lt；cudaïU HostMem对象&gt；"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem(",
    "local": "库达·霍斯特姆简历("
  },
  {
    "origin": "size, type[, alloc_type]",
    "local": "大小，类型[，分配类型]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "&lt;cuda_HostMem object&gt;",
    "local": "&lt；cudaïU HostMem对象&gt；"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem(",
    "local": "库达·霍斯特姆简历("
  },
  {
    "origin": "arr[, alloc_type]",
    "local": "ARR[，分配类型]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "HostMem()",
    "local": "主机内存（）"
  },
  {
    "origin": "[3/5]",
    "local": "[3/5]"
  },
  {
    "origin": "cv::cuda::HostMem::HostMem",
    "local": "简历：：cuda：：HostMem：：HostMem"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "rows",
    "local": "排"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "cols",
    "local": "胶水"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "alloc_type",
    "local": "分配类型"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "&lt;cuda_HostMem object&gt;",
    "local": "&lt；cudaïU HostMem对象&gt；"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem(",
    "local": "库达·霍斯特姆简历("
  },
  {
    "origin": "[, alloc_type]",
    "local": "[，分配类型]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "&lt;cuda_HostMem object&gt;",
    "local": "&lt；cudaïU HostMem对象&gt；"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem(",
    "local": "库达·霍斯特姆简历("
  },
  {
    "origin": "rows, cols, type[, alloc_type]",
    "local": "行，列，类型[，分配类型]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "&lt;cuda_HostMem object&gt;",
    "local": "&lt；cudaïU HostMem对象&gt；"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem(",
    "local": "库达·霍斯特姆简历("
  },
  {
    "origin": "size, type[, alloc_type]",
    "local": "大小，类型[，分配类型]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "&lt;cuda_HostMem object&gt;",
    "local": "&lt；cudaïU HostMem对象&gt；"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem(",
    "local": "库达·霍斯特姆简历("
  },
  {
    "origin": "arr[, alloc_type]",
    "local": "ARR[，分配类型]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "HostMem()",
    "local": "主机内存（）"
  },
  {
    "origin": "[4/5]",
    "local": "[4/5]"
  },
  {
    "origin": "cv::cuda::HostMem::HostMem",
    "local": "简历：：cuda：：HostMem：：HostMem"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "size",
    "local": "大小"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "alloc_type",
    "local": "分配类型"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "&lt;cuda_HostMem object&gt;",
    "local": "&lt；cudaïU HostMem对象&gt；"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem(",
    "local": "库达·霍斯特姆简历("
  },
  {
    "origin": "[, alloc_type]",
    "local": "[，分配类型]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "&lt;cuda_HostMem object&gt;",
    "local": "&lt；cudaïU HostMem对象&gt；"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem(",
    "local": "库达·霍斯特姆简历("
  },
  {
    "origin": "rows, cols, type[, alloc_type]",
    "local": "行，列，类型[，分配类型]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "&lt;cuda_HostMem object&gt;",
    "local": "&lt；cudaïU HostMem对象&gt；"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem(",
    "local": "库达·霍斯特姆简历("
  },
  {
    "origin": "size, type[, alloc_type]",
    "local": "大小，类型[，分配类型]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "&lt;cuda_HostMem object&gt;",
    "local": "&lt；cudaïU HostMem对象&gt；"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem(",
    "local": "库达·霍斯特姆简历("
  },
  {
    "origin": "arr[, alloc_type]",
    "local": "ARR[，分配类型]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "HostMem()",
    "local": "主机内存（）"
  },
  {
    "origin": "[5/5]",
    "local": "[5/5]"
  },
  {
    "origin": "cv::cuda::HostMem::HostMem",
    "local": "简历：：cuda：：HostMem：：HostMem"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "arr",
    "local": "阿里尔"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "alloc_type",
    "local": "分配类型"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "explicit",
    "local": "明确的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "&lt;cuda_HostMem object&gt;",
    "local": "&lt；cudaïU HostMem对象&gt；"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem(",
    "local": "库达·霍斯特姆简历("
  },
  {
    "origin": "[, alloc_type]",
    "local": "[，分配类型]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "&lt;cuda_HostMem object&gt;",
    "local": "&lt；cudaïU HostMem对象&gt；"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem(",
    "local": "库达·霍斯特姆简历("
  },
  {
    "origin": "rows, cols, type[, alloc_type]",
    "local": "行，列，类型[，分配类型]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "&lt;cuda_HostMem object&gt;",
    "local": "&lt；cudaïU HostMem对象&gt；"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem(",
    "local": "库达·霍斯特姆简历("
  },
  {
    "origin": "size, type[, alloc_type]",
    "local": "大小，类型[，分配类型]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "&lt;cuda_HostMem object&gt;",
    "local": "&lt；cudaïU HostMem对象&gt；"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem(",
    "local": "库达·霍斯特姆简历("
  },
  {
    "origin": "arr[, alloc_type]",
    "local": "ARR[，分配类型]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "creates from host memory with coping data",
    "local": "从主机内存中创建数据"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "~HostMem()",
    "local": "~HostMem（）"
  },
  {
    "origin": "cv::cuda::HostMem::~HostMem",
    "local": "简历：：库达：：霍思曼：：霍思曼"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Member Function Documentation",
    "local": "成员功能文档"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "channels()",
    "local": "频道（）"
  },
  {
    "origin": "int cv::cuda::HostMem::channels",
    "local": "int cv:：cuda:：HostMem:：通道"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem.channels(",
    "local": "cv.cuda\\u HostMem.channels公司("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "clone()",
    "local": "克隆（）"
  },
  {
    "origin": "cv::cuda::HostMem::clone",
    "local": "cv:：cuda:：HostMem:：克隆"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem.clone(",
    "local": "克隆("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "returns deep copy of the matrix, i.e. the data is copied",
    "local": "返回矩阵的深度副本，即复制数据"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "create()",
    "local": "创建（）"
  },
  {
    "origin": "[1/2]",
    "local": "[1/2]"
  },
  {
    "origin": "void cv::cuda::HostMem::create",
    "local": "void cv：：cuda：：HostMem：：创建"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "rows",
    "local": "排"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "cols",
    "local": "胶水"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem.create(",
    "local": "cv.cuda\\u HostMem.create创建("
  },
  {
    "origin": "rows, cols, type",
    "local": "行，列，类型"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "allocates new matrix data unless the matrix already has specified size and type.",
    "local": "分配新的矩阵数据，除非矩阵已经指定了大小和类型。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "create()",
    "local": "创建（）"
  },
  {
    "origin": "[2/2]",
    "local": "[2/2]"
  },
  {
    "origin": "void cv::cuda::HostMem::create",
    "local": "void cv：：cuda：：HostMem：：创建"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "size",
    "local": "大小"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem.create(",
    "local": "cv.cuda\\u HostMem.create创建("
  },
  {
    "origin": "rows, cols, type",
    "local": "行，列，类型"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "createGpuMatHeader()",
    "local": "CreateGpuMatHeader（）"
  },
  {
    "origin": "cv::cuda::HostMem::createGpuMatHeader",
    "local": "简历：：cuda：：主机内存：：createGpuMatHeader"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Maps CPU memory to GPU address space and creates the",
    "local": "将CPU内存映射到GPU地址空间并创建"
  },
  {
    "origin": "header without reference counting for it.",
    "local": "没有引用计数的标题。"
  },
  {
    "origin": "This can be done only if memory was allocated with the SHARED flag and if it is supported by the hardware. Laptops often share video and CPU memory, so address spaces can be mapped, which eliminates an extra copy.",
    "local": "只有在使用共享标志分配内存并且硬件支持的情况下，才能执行此操作。笔记本电脑通常共享视频和CPU内存，因此可以映射地址空间，从而消除额外的拷贝。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "createMatHeader()",
    "local": "CreateMathHeader（）"
  },
  {
    "origin": "cv::cuda::HostMem::createMatHeader",
    "local": "简历：：cuda：：主机内存：：CreateMathHeader"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem.createMatHeader(",
    "local": "简历：cuda\\u HostMem.createMatHeader("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "returns matrix header with disabled reference counting for",
    "local": "返回禁用引用计数的矩阵头"
  },
  {
    "origin": "data.",
    "local": "数据。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "depth()",
    "local": "深度（）"
  },
  {
    "origin": "int cv::cuda::HostMem::depth",
    "local": "int cv:：cuda:：HostMem:：深度"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem.depth(",
    "local": "cv.cuda\\ U主机内存深度("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "elemSize()",
    "local": "元素"
  },
  {
    "origin": "size_t cv::cuda::HostMem::elemSize",
    "local": "大小\\u t cv:：cuda:：HostMem:：elemSize"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem.elemSize(",
    "local": "cv.cuda\\u HostMem.elemSize公司("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "elemSize1()",
    "local": "元素大小1（）"
  },
  {
    "origin": "size_t cv::cuda::HostMem::elemSize1",
    "local": "大小\\u t cv:：cuda:：HostMem:：elemSize1"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem.elemSize1(",
    "local": "简历：cuda_HostMem.elemSize1("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "empty()",
    "local": "空（）"
  },
  {
    "origin": "bool cv::cuda::HostMem::empty",
    "local": "bool cv:：cuda:：HostMem:：空"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem.empty(",
    "local": "cv.cuda\\u HostMem.empty空("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getAllocator()",
    "local": "getAllocator（）"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "* cv::cuda::HostMem::getAllocator",
    "local": "*cv:：cuda:：HostMem:：getAllocator"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "alloc_type",
    "local": "分配类型"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "isContinuous()",
    "local": "isContinuous（）"
  },
  {
    "origin": "bool cv::cuda::HostMem::isContinuous",
    "local": "bool cv:：cuda:：HostMem:：is连续"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem.isContinuous(",
    "local": "cv.cuda\\u HostMem.isContinuous公司("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "operator=()",
    "local": "运算符=（）"
  },
  {
    "origin": "&amp; cv::cuda::HostMem::operator=",
    "local": "&amp；cv:：cuda:：HostMem:：运算符="
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "m",
    "local": "米"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "release()",
    "local": "发布（）"
  },
  {
    "origin": "void cv::cuda::HostMem::release",
    "local": "void cv:：cuda:：HostMem:：释放"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "decrements reference counter and released memory if needed.",
    "local": "如果需要，减少参考计数器和释放的内存。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "reshape()",
    "local": "重塑（）"
  },
  {
    "origin": "cv::cuda::HostMem::reshape",
    "local": "cv:：cuda:：HostMem:：重塑"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "cn",
    "local": "中国"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "rows",
    "local": "排"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem.reshape(",
    "local": "cv.cuda\\ U HostMem.重塑("
  },
  {
    "origin": "cn[, rows]",
    "local": "cn[，行]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "creates alternative",
    "local": "创建备选方案"
  },
  {
    "origin": "header for the same data, with different number of channels and/or different number of rows",
    "local": "相同数据的标头，具有不同数量的通道和/或不同数量的行"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "size()",
    "local": "大小（）"
  },
  {
    "origin": "cv::cuda::HostMem::size",
    "local": "cv:：cuda:：HostMem:：大小"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem.size(",
    "local": "cv.cuda\\主机尺寸("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "step1()",
    "local": "步骤1（）"
  },
  {
    "origin": "size_t cv::cuda::HostMem::step1",
    "local": "大小\\u t cv:：cuda:：HostMem:：step1"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem.step1(",
    "local": "cv.cuda\\ U HostMem.步骤1("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "swap()",
    "local": "交换（）"
  },
  {
    "origin": "void cv::cuda::HostMem::swap",
    "local": "void cv:：cuda:：HostMem:：swap"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "b",
    "local": "b"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem.swap(",
    "local": "cv.cuda\\u HostMem.swap公司("
  },
  {
    "origin": "b",
    "local": "b"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "swaps with other smart pointer",
    "local": "与其他智能指针交换"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "type()",
    "local": "类型（）"
  },
  {
    "origin": "int cv::cuda::HostMem::type",
    "local": "int cv:：cuda:：HostMem:：type类型"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.cuda_HostMem.type(",
    "local": "cv.cuda\\主机类型("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Member Data Documentation",
    "local": "成员数据文档"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "alloc_type",
    "local": "分配类型"
  },
  {
    "origin": "cv::cuda::HostMem::alloc_type",
    "local": "cv:：cuda:：HostMem:：分配类型"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "cols",
    "local": "胶水"
  },
  {
    "origin": "int cv::cuda::HostMem::cols",
    "local": "int cv:：cuda:：HostMem:：cols"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "data",
    "local": "数据"
  },
  {
    "origin": "* cv::cuda::HostMem::data",
    "local": "*cv:：cuda:：HostMem:：数据"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "dataend",
    "local": "数据"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "* cv::cuda::HostMem::dataend",
    "local": "*简历：：cuda：：主机内存：：数据端"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "datastart",
    "local": "数据启动"
  },
  {
    "origin": "* cv::cuda::HostMem::datastart",
    "local": "*cv:：cuda:：HostMem:：datastart"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": "int cv::cuda::HostMem::flags",
    "local": "int cv:：cuda:：HostMem:：标志"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "refcount",
    "local": "参考计数"
  },
  {
    "origin": "int* cv::cuda::HostMem::refcount",
    "local": "int*cv:：cuda:：HostMem:：refcount"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "rows",
    "local": "排"
  },
  {
    "origin": "int cv::cuda::HostMem::rows",
    "local": "int cv:：cuda:：HostMem:：行"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "step",
    "local": "步"
  },
  {
    "origin": "size_t cv::cuda::HostMem::step",
    "local": "大小\\u t cv:：cuda:：HostMem:：step"
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": "此类的文档是从以下文件生成的："
  },
  {
    "origin": "opencv2/core/",
    "local": "opencv2/核心/"
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:44 for OpenCV by",
    "local": "于2021年4月2日星期五11:36:44为OpenCV生成"
  }
]