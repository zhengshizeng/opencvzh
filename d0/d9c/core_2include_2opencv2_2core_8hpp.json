[
  {
    "origin": "OpenCV: opencv2/core.hpp File Reference",
    "local": "OpenCV:opencv2/core.hpp文件参考"
  },
  {
    "origin": "Open Source Computer Vision",
    "local": "开源计算机视觉"
  },
  {
    "origin": "Classes",
    "local": "班级"
  },
  {
    "origin": "Namespaces",
    "local": "名称空间"
  },
  {
    "origin": "Enumerations",
    "local": "枚举"
  },
  {
    "origin": "Functions",
    "local": "功能"
  },
  {
    "origin": "core.hpp File Reference",
    "local": "core.hpp文件参考"
  },
  {
    "origin": "Classes",
    "local": "班级"
  },
  {
    "origin": "This is a base class for all more or less complex algorithms in OpenCV.",
    "local": "这是OpenCV中所有或多或少复杂算法的基类。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Class passed to an error.",
    "local": "类传递给一个错误。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Linear Discriminant Analysis.",
    "local": "线性判别分析。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Principal Component Analysis.",
    "local": "主成分分析。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Random Number Generator.",
    "local": "随机数发生器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Mersenne Twister random number generator.",
    "local": "梅森捻线机随机数发生器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Singular Value Decomposition.",
    "local": "奇异值分解。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Namespaces",
    "local": "名称空间"
  },
  {
    "origin": "\"black box\" representation of the file storage associated with a file on disk.",
    "local": "“黑盒”表示与磁盘上的文件相关联的文件存储。"
  },
  {
    "origin": "Enumerations",
    "local": "枚举"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 16",
    "local": "= 16"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "Covariation flags.",
    "local": "协变标志。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "k-Means flags",
    "local": "k-均值标志"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "&#160;&#160;",
    "local": "&#160;&#160;"
  },
  {
    "origin": "= 16",
    "local": "= 16"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "Functions",
    "local": "功能"
  },
  {
    "origin": "(InputArray src1, InputArray src2, OutputArray dst)",
    "local": "（输入阵列src1、输入阵列src2、输出阵列dst）"
  },
  {
    "origin": "Calculates the per-element absolute difference between two arrays or between an array and a scalar.",
    "local": "计算两个数组之间或数组与标量之间的每元素绝对差。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src1, InputArray src2, OutputArray dst, InputArray mask=noArray(), int dtype=-1)",
    "local": "（InputArray src1，InputArray src2，OutputArray dst，InputArray mask=noArray（），int dtype=-1）"
  },
  {
    "origin": "Calculates the per-element sum of two arrays or an array and a scalar.",
    "local": "计算两个数组或一个数组和一个标量的每元素和。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src1, double alpha, InputArray src2, double beta, double gamma, OutputArray dst, int dtype=-1)",
    "local": "（InputArray src1、double alpha、InputArray src2、double beta、double gamma、OutputArray dst、int dtype=-1）"
  },
  {
    "origin": "Calculates the weighted sum of two arrays.",
    "local": "计算两个数组的加权和。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src1, InputArray src2, OutputArray dist, int dtype, OutputArray nidx, int normType=NORM_L2, int K=0, InputArray mask=noArray(), int update=0, bool crosscheck=false)",
    "local": "（InputArray src1，InputArray src2，OutputArray dist，int dtype，OutputArray nidx，int normType=NORM\\u L2，int K=0，InputArray mask=noArray（），int update=0，bool crosscheck=false）"
  },
  {
    "origin": "naive nearest neighbor finder",
    "local": "朴素的近邻查找器"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src1, InputArray src2, OutputArray dst, InputArray mask=noArray())",
    "local": "（InputArray src1、InputArray src2、OutputArray dst、InputArray mask=noArray（））"
  },
  {
    "origin": "computes bitwise conjunction of the two arrays (dst = src1 &amp; src2) Calculates the per-element bit-wise conjunction of two arrays or an array and a scalar.",
    "local": "计算两个数组的按位合并（dst=src1&amp；src2）计算两个数组或一个数组和一个标量的逐元素逐位连接。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, InputArray mask=noArray())",
    "local": "（InputArray src，OutputArray dst，InputArray mask=noArray（））"
  },
  {
    "origin": "Inverts every bit of an array.",
    "local": "反转数组的每一位。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src1, InputArray src2, OutputArray dst, InputArray mask=noArray())",
    "local": "（InputArray src1、InputArray src2、OutputArray dst、InputArray mask=noArray（））"
  },
  {
    "origin": "Calculates the per-element bit-wise disjunction of two arrays or an array and a scalar.",
    "local": "计算两个数组或一个数组和一个标量的逐元素逐位析取。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src1, InputArray src2, OutputArray dst, InputArray mask=noArray())",
    "local": "（InputArray src1、InputArray src2、OutputArray dst、InputArray mask=noArray（））"
  },
  {
    "origin": "Calculates the per-element bit-wise \"exclusive or\" operation on two arrays or an array and a scalar.",
    "local": "计算对两个数组或一个数组和一个标量的逐元素逐位“异或”运算。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(int p, int len, int borderType)",
    "local": "（int p，int sheet，int borderType）"
  },
  {
    "origin": "Computes the source location of an extrapolated pixel.",
    "local": "计算外推像素的源位置。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const Mat *samples, int nsamples, Mat &amp;covar, Mat &amp;mean, int flags, int ctype=",
    "local": "（const Mat*样本，int nsamples，Mat&amp；covar、Mat和；平均值，int标志，int ctype="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the covariance matrix of a set of vectors.",
    "local": "计算一组向量的协方差矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray samples, OutputArray covar, InputOutputArray mean, int flags, int ctype=",
    "local": "（InputArray samples，OutputArray covar，InputOutputArray mean，int flags，int ctype）="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "(InputArray x, InputArray y, OutputArray magnitude, OutputArray angle, bool angleInDegrees=false)",
    "local": "（输入阵列Arx，输入阵列y，输出阵列震级，输出阵列Arangle，bool angleInDegrees=false）"
  },
  {
    "origin": "Calculates the magnitude and angle of 2D vectors.",
    "local": "计算二维矢量的幅值和角度。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray a, bool quiet=true, Point *pos=0, double minVal=-DBL_MAX, double maxVal=DBL_MAX)",
    "local": "（输入数组a，bool quiet=true，Point*pos=0，double minVal=-DBL\\u MAX，double maxVal=DBL\\u MAX）"
  },
  {
    "origin": "Checks every element of an input array for invalid values.",
    "local": "检查输入数组的每个元素是否存在无效值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src1, InputArray src2, OutputArray dst, int cmpop)",
    "local": "（输入数组src1、输入数组src2、输出数组dst、int cmpop）"
  },
  {
    "origin": "Performs the per-element comparison of two arrays or an array and scalar value.",
    "local": "对两个数组或一个数组和标量值执行每元素比较。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputOutputArray m, bool lowerToUpper=false)",
    "local": "（InputOutputArray m，bool lowerToUpper=假）"
  },
  {
    "origin": "Copies the lower or the upper half of a square matrix to its another half.",
    "local": "将方阵的下半部分或上半部分复制到另一半。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst)",
    "local": "（输入阵列src，输出阵列dst）"
  },
  {
    "origin": "Converts an array to half precision floating number.",
    "local": "将数组转换为半精度浮点数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, double alpha=1, double beta=0)",
    "local": "（输入数组src，输出数组dst，double alpha=1，double beta=0）"
  },
  {
    "origin": "Scales, calculates absolute values, and converts the result to 8-bit.",
    "local": "缩放、计算绝对值，并将结果转换为8位。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int top, int bottom, int left, int right, int borderType, const Scalar &amp;value=Scalar())",
    "local": "（InputArray src、OutputArray dst、int top、int bottom、int left、int right、int borderType、const Scalar&amp；值=标量（））"
  },
  {
    "origin": "Forms a border around an image.",
    "local": "在图像周围形成边框。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, InputArray mask)",
    "local": "（输入阵列src、输出阵列dst、输入阵列掩码）"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience (python) Copies the matrix to another one. When the operation mask is specified, if the",
    "local": "这是一个重载的成员函数，为方便起见（python）将矩阵复制到另一个。指定操作掩码时，如果"
  },
  {
    "origin": "call shown above reallocates the matrix, the newly allocated matrix is initialized with all zeros before copying the data.",
    "local": "上面显示的调用重新分配矩阵，新分配的矩阵在复制数据之前用全零初始化。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src)",
    "local": "（输入阵列src）"
  },
  {
    "origin": "Counts non-zero array elements.",
    "local": "计数非零数组元素。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int flags=0)",
    "local": "（inputarray src，outputarray dst，int flags=0）"
  },
  {
    "origin": "Performs a forward or inverse discrete Cosine transform of 1D or 2D array.",
    "local": "对一维或二维数组执行正或逆离散余弦变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray mtx)",
    "local": "（输入阵列mtx）"
  },
  {
    "origin": "Returns the determinant of a square floating-point matrix.",
    "local": "返回平方浮点矩阵的行列式。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int flags=0, int nonzeroRows=0)",
    "local": "（inputarray src，outputarray dst，int flags=0，int nonzerows=0）"
  },
  {
    "origin": "Performs a forward or inverse Discrete Fourier transform of a 1D or 2D floating-point array.",
    "local": "对一维或二维浮点数组执行正向或反向离散傅里叶变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src1, InputArray src2, OutputArray dst, double scale=1, int dtype=-1)",
    "local": "（inputarray src1，inputarray src2，outputarray dst，double scale=1，int dtype=-1）"
  },
  {
    "origin": "Performs per-element division of two arrays or a scalar by an array.",
    "local": "按元素对两个数组或一个标量进行除法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(double scale, InputArray src2, OutputArray dst, int dtype=-1)",
    "local": "（双刻度，输入数组src2，输出数组dst，int dtype=-1）"
  },
  {
    "origin": "(InputArray src, OutputArray eigenvalues, OutputArray eigenvectors=noArray())",
    "local": "（InputArray src，OutputArray特征值，OutputArray特征向量=noArray（））"
  },
  {
    "origin": "Calculates eigenvalues and eigenvectors of a symmetric matrix.",
    "local": "计算对称矩阵的特征值和特征向量。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray eigenvalues, OutputArray eigenvectors)",
    "local": "输入阵列src、输出阵列特征值、输出阵列特征向量）"
  },
  {
    "origin": "Calculates eigenvalues and eigenvectors of a non-symmetric matrix (real eigenvalues only).",
    "local": "计算非对称矩阵的特征值和特征向量（仅限实特征值）。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const Exception &amp;exc)",
    "local": "（常量异常&amp；Exc公司）"
  },
  {
    "origin": "Signals an error and raises the exception.",
    "local": "发出错误信号并引发异常。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst)",
    "local": "（输入阵列src，输出阵列dst）"
  },
  {
    "origin": "Calculates the exponent of every array element.",
    "local": "计算每个数组元素的指数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int coi)",
    "local": "（输入数组src，输出数组dst，int coi）"
  },
  {
    "origin": "Extracts a single channel from src (coi is 0-based index)",
    "local": "从src中提取单个通道（coi是基于0的索引）"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray idx)",
    "local": "（输入阵列src，输出阵列idx）"
  },
  {
    "origin": "Returns the list of locations of non-zero pixels.",
    "local": "返回非零像素的位置列表。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int flipCode)",
    "local": "（inputarray src，outputarray dst，int flipcode）"
  },
  {
    "origin": "Flips a 2D array around vertical, horizontal, or both axes.",
    "local": "围绕垂直、水平或两个轴翻转二维阵列。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src1, InputArray src2, double alpha, InputArray src3, double beta, OutputArray dst, int flags=0)",
    "local": "（inputarray src1，inputarray src2，double alpha，inputarray src3，double beta，outputarray dst，int flags=0）"
  },
  {
    "origin": "Performs generalized matrix multiplication.",
    "local": "执行广义矩阵乘法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(int vecsize)",
    "local": "（整数向量大小）"
  },
  {
    "origin": "Returns the optimal DFT size for a given vector size.",
    "local": "返回给定向量大小的最佳DFT大小。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const Mat *src, size_t nsrc, OutputArray dst)",
    "local": "（const Mat*src，大小\\t nsrc，输出阵列dst）"
  },
  {
    "origin": "Applies horizontal concatenation to given matrices.",
    "local": "对给定的矩阵应用水平连接。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src1, InputArray src2, OutputArray dst)",
    "local": "（输入阵列src1、输入阵列src2、输出阵列dst）"
  },
  {
    "origin": "(InputArrayOfArrays src, OutputArray dst)",
    "local": "（InputArrayOfArrays src，Outputray Ardst）"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int flags=0)",
    "local": "（inputarray src，outputarray dst，int flags=0）"
  },
  {
    "origin": "Calculates the inverse Discrete Cosine Transform of a 1D or 2D array.",
    "local": "计算一维或二维阵列的离散余弦逆变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int flags=0, int nonzeroRows=0)",
    "local": "（inputarray src，outputarray dst，int flags=0，int nonzerows=0）"
  },
  {
    "origin": "Calculates the inverse Discrete Fourier Transform of a 1D or 2D array.",
    "local": "计算一维或二维阵列的离散傅里叶逆变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, InputArray lowerb, InputArray upperb, OutputArray dst)",
    "local": "（输入阵列Arsrc、输入阵列lowerb、输入阵列upperb、输出阵列Ardst）"
  },
  {
    "origin": "Checks if array elements lie between the elements of two other arrays.",
    "local": "检查数组元素是否位于其他两个数组的元素之间。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, InputOutputArray dst, int coi)",
    "local": "（Inputarray SRC，Inputautputarray DST，INT COI）"
  },
  {
    "origin": "Inserts a single channel to dst (coi is 0-based index)",
    "local": "向dst插入单个通道（coi是基于0的索引）"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int flags=DECOMP_LU)",
    "local": "（InputArray src，OutputArray dst，int flags=DECOMP\\u LU）"
  },
  {
    "origin": "Finds the inverse or pseudo-inverse of a matrix.",
    "local": "求矩阵的逆或伪逆。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray data, int K, InputOutputArray bestLabels, TermCriteria criteria, int attempts, int flags, OutputArray centers=noArray())",
    "local": "（InputArray数据，int K，InputInputArray bestLabels，TermCriteria条件，int尝试，int标志，OutputArray centers=noArray（））"
  },
  {
    "origin": "Finds centers of clusters and groups input samples around the clusters.",
    "local": "查找簇的中心并围绕簇对输入样本进行分组。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst)",
    "local": "（输入阵列src，输出阵列dst）"
  },
  {
    "origin": "Calculates the natural logarithm of every array element.",
    "local": "计算每个数组元素的自然对数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, InputArray lut, OutputArray dst)",
    "local": "（输入阵列src、输入阵列lut、输出阵列dst）"
  },
  {
    "origin": "Performs a look-up table transform of an array.",
    "local": "执行数组的查找表转换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray x, InputArray y, OutputArray magnitude)",
    "local": "数组"
  },
  {
    "origin": "Calculates the magnitude of 2D vectors.",
    "local": "计算二维向量的幅值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray v1, InputArray v2, InputArray icovar)",
    "local": "InputArray v1、InputArray v2、InputArray icovar）"
  },
  {
    "origin": "Calculates the Mahalanobis distance between two vectors.",
    "local": "计算两个向量之间的马氏距离。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src1, InputArray src2, OutputArray dst)",
    "local": "（输入阵列src1、输入阵列src2、输出阵列dst）"
  },
  {
    "origin": "Calculates per-element maximum of two arrays or an array and a scalar.",
    "local": "计算每个元素最多两个数组或一个数组和一个标量。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const Mat &amp;src1, const Mat &amp;src2, Mat &amp;dst)",
    "local": "（施工材料和；src1，施工材料；src2，材料和；（夏时制）"
  },
  {
    "origin": "(const UMat &amp;src1, const UMat &amp;src2, UMat &amp;dst)",
    "local": "（施工图和）src1，施工；src2、UMat和；夏令时"
  },
  {
    "origin": "(InputArray src, InputArray mask=noArray())",
    "local": "InputArray src，InputArray mask=noArray（））"
  },
  {
    "origin": "Calculates an average (mean) of array elements.",
    "local": "计算数组元素的平均值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray mean, OutputArray stddev, InputArray mask=noArray())",
    "local": "（InputArray src，OutputArray mean，OutputArray stddev，InputArray mask=noArray（））"
  },
  {
    "origin": "(const Mat *mv, size_t count, OutputArray dst)",
    "local": "（常数矩阵*毫伏，大小计数，输出阵列dst）"
  },
  {
    "origin": "Creates one multi-channel array out of several single-channel ones.",
    "local": "从多个单通道阵列中创建一个多通道阵列。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArrayOfArrays mv, OutputArray dst)",
    "local": "（输入阵列微波，输出阵列dst）"
  },
  {
    "origin": "(InputArray src1, InputArray src2, OutputArray dst)",
    "local": "（输入阵列src1、输入阵列src2、输出阵列dst）"
  },
  {
    "origin": "Calculates per-element minimum of two arrays or an array and a scalar.",
    "local": "计算每个元素至少两个数组或一个数组和一个标量。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const Mat &amp;src1, const Mat &amp;src2, Mat &amp;dst)",
    "local": "（施工材料和；src1，施工材料；src2，材料和；（夏时制）"
  },
  {
    "origin": "(const UMat &amp;src1, const UMat &amp;src2, UMat &amp;dst)",
    "local": "（施工图和）src1，施工；src2、UMat和；夏令时"
  },
  {
    "origin": "(InputArray src, double *minVal, double *maxVal=0, int *minIdx=0, int *maxIdx=0, InputArray mask=noArray())",
    "local": "（inputarray src，double*minval，double*maxval=0，int*minidx=0，int*maxidx=0，inputarray mask=norray（））"
  },
  {
    "origin": "Finds the global minimum and maximum in an array.",
    "local": "查找数组中的全局最小值和最大值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, double *minVal, double *maxVal=0, Point *minLoc=0, Point *maxLoc=0, InputArray mask=noArray())",
    "local": "（InputArray src，double*minVal，double*maxVal=0，Point*minLoc=0，Point*maxLoc=0，InputArray mask=noArray（））"
  },
  {
    "origin": "Finds the global minimum and maximum in an array.",
    "local": "查找数组中的全局最小值和最大值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const SparseMat &amp;a, double *minVal, double *maxVal, int *minIdx=0, int *maxIdx=0)",
    "local": "（const SparseMat和；a、 double*minVal，double*maxVal，int*minIdx=0，int*maxIdx=0）"
  },
  {
    "origin": "(const Mat *src, size_t nsrcs, Mat *dst, size_t ndsts, const int *fromTo, size_t npairs)",
    "local": "（const Mat*src，size\\t nsrcs，Mat*dst，size\\t ndsts，const int*fromTo，size\\t npairs）"
  },
  {
    "origin": "Copies specified channels from input arrays to the specified channels of output arrays.",
    "local": "将指定通道从输入阵列复制到输出阵列的指定通道。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArrayOfArrays src, InputOutputArrayOfArrays dst, const int *fromTo, size_t npairs)",
    "local": "（inputarrayofarrays src，inputautputarrayofarrays dst，const int*fromto，size t npairs）"
  },
  {
    "origin": "(InputArrayOfArrays src, InputOutputArrayOfArrays dst, const std::vector&lt; int &gt; &amp;fromTo)",
    "local": "（Inputarrayofarrays src，Inputautputarrayofarrays dst，const std:：vector&lt；INT&gt；amp；Fromto）"
  },
  {
    "origin": "(InputArray a, InputArray b, OutputArray c, int flags, bool conjB=false)",
    "local": "（输入数组a、输入数组b、输出数组c、int标志、bool conjB=false）"
  },
  {
    "origin": "Performs the per-element multiplication of two Fourier spectrums.",
    "local": "执行两个傅立叶谱的每元素乘法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src1, InputArray src2, OutputArray dst, double scale=1, int dtype=-1)",
    "local": "（inputarray src1，inputarray src2，outputarray dst，double scale=1，int dtype=-1）"
  },
  {
    "origin": "Calculates the per-element scaled product of two arrays.",
    "local": "计算两个数组的每元素比例积。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, bool aTa, InputArray delta=noArray(), double scale=1, int dtype=-1)",
    "local": "（InputArray src，OutputArray dst，bool aTa，InputArray delta=noArray（），double scale=1，int dtype=-1）"
  },
  {
    "origin": "Calculates the product of a matrix and its transposition.",
    "local": "计算矩阵与其转置的乘积。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src1, int normType=NORM_L2, InputArray mask=noArray())",
    "local": "（InputArray src1，int normType=NORM\\u L2，InputArray mask=noArray（））"
  },
  {
    "origin": "Calculates the absolute norm of an array.",
    "local": "计算数组的绝对范数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src1, InputArray src2, int normType=NORM_L2, InputArray mask=noArray())",
    "local": "（inputarray src1，inputarray src2，int normtype=norm l2，inputarray mask=norray（））"
  },
  {
    "origin": "Calculates an absolute difference norm or a relative difference norm.",
    "local": "计算绝对差范数或相对差范数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const SparseMat &amp;src, int normType)",
    "local": "（const sparsemat&amp；SRC，int normtype）"
  },
  {
    "origin": "(InputArray src, InputOutputArray dst, double alpha=1, double beta=0, int norm_type=NORM_L2, int dtype=-1, InputArray mask=noArray())",
    "local": "（InputArray src，InputOutputArray dst，double alpha=1，double beta=0，int norm\\u type=norm\\u L2，int dtype=-1，InputArray mask=noArray（））"
  },
  {
    "origin": "Normalizes the norm or value range of an array.",
    "local": "规范化数组的范数或值范围。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const SparseMat &amp;src, SparseMat &amp;dst, double alpha, int normType)",
    "local": "（const SparseMat和；src、SparseMat和；dst，双alpha，int normType）"
  },
  {
    "origin": "(String &amp;out, Ptr&lt; Formatted &gt; fmtd)",
    "local": "（字符串和；输出，Ptr&lt；格式化&gt；fmtd）"
  },
  {
    "origin": "(String &amp;out, const Mat &amp;mtx)",
    "local": "（字符串和；外出，施工材料；（mtx）"
  },
  {
    "origin": "(InputOutputArray a, double val=0)",
    "local": "（InputOutputArray a，双值=0）"
  },
  {
    "origin": "converts NaNs to the given number",
    "local": "将nan转换为给定的数字"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray data, InputArray mean, InputArray eigenvectors, OutputArray result)",
    "local": "输入阵列数据、输入阵列平均值、输入阵列特征向量、输出阵列结果）"
  },
  {
    "origin": "(InputArray data, InputOutputArray mean, OutputArray eigenvectors, int maxComponents=0)",
    "local": "（输入阵列数据，输入阵列平均值，输出阵列特征向量，int maxComponents=0）"
  },
  {
    "origin": "(InputArray data, InputOutputArray mean, OutputArray eigenvectors, OutputArray eigenvalues, int maxComponents=0)",
    "local": "（输入阵列数据，输入阵列平均值，输出阵列特征向量，输出阵列特征值，int maxComponents=0）"
  },
  {
    "origin": "(InputArray data, InputOutputArray mean, OutputArray eigenvectors, double retainedVariance)",
    "local": "（输入阵列数据、输入阵列平均值、输出阵列特征向量、双保持方差）"
  },
  {
    "origin": "(InputArray data, InputOutputArray mean, OutputArray eigenvectors, OutputArray eigenvalues, double retainedVariance)",
    "local": "（输入阵列数据、输入阵列平均值、输出阵列特征向量、输出阵列特征值、双保持方差）"
  },
  {
    "origin": "(InputArray data, InputArray mean, InputArray eigenvectors, OutputArray result)",
    "local": "输入阵列数据、输入阵列平均值、输入阵列特征向量、输出阵列结果）"
  },
  {
    "origin": "(InputArray src, OutputArray dst, InputArray m)",
    "local": "（输入阵列src、输出阵列dst、输入阵列m）"
  },
  {
    "origin": "Performs the perspective matrix transformation of vectors.",
    "local": "执行向量的透视矩阵变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray x, InputArray y, OutputArray angle, bool angleInDegrees=false)",
    "local": "（Inputray Arx，InputArray y，OutputArray angle，bool angleInDegrees=false）"
  },
  {
    "origin": "Calculates the rotation angle of 2D vectors.",
    "local": "计算二维向量的旋转角度。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray magnitude, InputArray angle, OutputArray x, OutputArray y, bool angleInDegrees=false)",
    "local": "（输入阵列幅值、输入阵列角度、输出阵列x、输出阵列Ary、布尔角指数=假）"
  },
  {
    "origin": "Calculates x and y coordinates of 2D vectors from their magnitude and angle.",
    "local": "根据向量的大小和角度计算二维向量的x和y坐标。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, double power, OutputArray dst)",
    "local": "（输入阵列src，双电源，输出阵列dst）"
  },
  {
    "origin": "Raises every array element to a power.",
    "local": "将每个数组元素提升为幂。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src1, InputArray src2, double R=255.)",
    "local": "（Inputarray src1，Inputarray src2，double r=255.）"
  },
  {
    "origin": "Computes the Peak Signal-to-Noise Ratio (PSNR) image quality metric.",
    "local": "计算峰值信噪比（PSNR）图像质量度量。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputOutputArray dst, InputArray mean, InputArray stddev)",
    "local": "输入阵列dst，输入阵列平均值，输入阵列stddev）"
  },
  {
    "origin": "Fills the array with normally distributed random numbers.",
    "local": "用正态分布的随机数填充数组。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputOutputArray dst, double iterFactor=1., RNG *rng=0)",
    "local": "（InputOutputArray dst，双iterFactor=1.，RNG*RNG=0）"
  },
  {
    "origin": "Shuffles the array elements randomly.",
    "local": "随机洗牌数组元素。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputOutputArray dst, InputArray low, InputArray high)",
    "local": "输入阵列dst，输入阵列低，输入阵列高）"
  },
  {
    "origin": "Generates a single uniformly-distributed random number or an array of random numbers.",
    "local": "生成单个均匀分布的随机数或随机数数组。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int dim, int rtype, int dtype=-1)",
    "local": "（InputArray src，OutputArray dst，int dim，int rtype，int dtype=-1）"
  },
  {
    "origin": "Reduces a matrix to a vector.",
    "local": "把矩阵化为向量。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, int ny, int nx, OutputArray dst)",
    "local": "（InputArray src、int ny、int nx、OutputArray dst）"
  },
  {
    "origin": "Fills the output array with repeated copies of the input array.",
    "local": "用输入数组的重复副本填充输出数组。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const Mat &amp;src, int ny, int nx)",
    "local": "（施工材料和；src、int ny、int nx）"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int rotateCode)",
    "local": "（输入数组src，输出数组dst，int rotateCode）"
  },
  {
    "origin": "Rotates a 2D array in multiples of 90 degrees. The function",
    "local": "以90度的倍数旋转二维阵列。函数"
  },
  {
    "origin": "rotates the array in one of three different ways: Rotate by 90 degrees clockwise (rotateCode = ROTATE_90_CLOCKWISE). Rotate by 180 degrees clockwise (rotateCode = ROTATE_180). Rotate by 270 degrees clockwise (rotateCode = ROTATE_90_COUNTERCLOCKWISE).",
    "local": "以三种不同的方式之一旋转阵列：顺时针旋转90度（rotateCode=顺时针旋转90度）。顺时针旋转180度（rotateCode=旋转180度）。顺时针旋转270度（旋转代码=逆时针旋转90度）。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src1, double alpha, InputArray src2, OutputArray dst)",
    "local": "（inputarray src1，double alpha，inputarray src2，outputarray dst）"
  },
  {
    "origin": "Calculates the sum of a scaled array and another array.",
    "local": "计算缩放数组和另一个数组的和。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputOutputArray mtx, const Scalar &amp;s=Scalar(1))",
    "local": "（InputOutputArray mtx、常量标量和；s=标量（1））"
  },
  {
    "origin": "Initializes a scaled identity matrix.",
    "local": "初始化缩放的单位矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(int seed)",
    "local": "（int种子）"
  },
  {
    "origin": "Sets state of default random number generator.",
    "local": "设置默认随机数生成器的状态。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src1, InputArray src2, OutputArray dst, int flags=DECOMP_LU)",
    "local": "（inputarray src1，inputarray src2，outputarray dst，int flags=decomp lu）"
  },
  {
    "origin": "Solves one or more linear systems or least-squares problems.",
    "local": "解决一个或多个线性系统或最小二乘问题。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray coeffs, OutputArray roots)",
    "local": "（输入阵列系数，输出阵列根）"
  },
  {
    "origin": "Finds the real roots of a cubic equation.",
    "local": "求三次方程的实根。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray coeffs, OutputArray roots, int maxIters=300)",
    "local": "（输入阵列系数，输出阵列根，int maxIters=300）"
  },
  {
    "origin": "Finds the real or complex roots of a polynomial equation.",
    "local": "求多项式方程的实根或复数根。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int flags)",
    "local": "（inputarray src，outputarray dst，int flags）"
  },
  {
    "origin": "Sorts each row or each column of a matrix.",
    "local": "对矩阵的每一行或每一列进行排序。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, int flags)",
    "local": "（inputarray src，outputarray dst，int flags）"
  },
  {
    "origin": "Sorts each row or each column of a matrix.",
    "local": "对矩阵的每一行或每一列进行排序。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const Mat &amp;src, Mat *mvbegin)",
    "local": "施工材料；src、Mat*mvbegin（开始）"
  },
  {
    "origin": "Divides a multi-channel array into several single-channel arrays.",
    "local": "将多通道阵列划分为多个单通道阵列。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray m, OutputArrayOfArrays mv)",
    "local": "（输入臂，输出臂）"
  },
  {
    "origin": "(InputArray src, OutputArray dst)",
    "local": "（输入阵列src，输出阵列dst）"
  },
  {
    "origin": "Calculates a square root of array elements.",
    "local": "计算数组元素的平方根。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src1, InputArray src2, OutputArray dst, InputArray mask=noArray(), int dtype=-1)",
    "local": "（InputArray src1，InputArray src2，OutputArray dst，InputArray mask=noArray（），int dtype=-1）"
  },
  {
    "origin": "Calculates the per-element difference between two arrays or array and a scalar.",
    "local": "计算两个数组或数组与标量之间的每元素差。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src)",
    "local": "（输入阵列src）"
  },
  {
    "origin": "Calculates the sum of array elements.",
    "local": "计算数组元素之和。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray w, InputArray u, InputArray vt, InputArray rhs, OutputArray dst)",
    "local": "（输入阵列w、输入阵列u、输入阵列vt、输入阵列rhs、输出阵列dst）"
  },
  {
    "origin": "(InputArray src, OutputArray w, OutputArray u, OutputArray vt, int flags=0)",
    "local": "（Inputray Arsrc，OutputArray w，OutputArray u，OutputArray vt，int flags=0）"
  },
  {
    "origin": "(Mat &amp;a, Mat &amp;b)",
    "local": "（好的）A、 材料和材料；（二）"
  },
  {
    "origin": "Swaps two matrices.",
    "local": "交换两个矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(UMat &amp;a, UMat &amp;b)",
    "local": "（UMat&amp；a、 麻省理工大学；（二）"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Returns the default random number generator.",
    "local": "返回默认的随机数生成器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray mtx)",
    "local": "（输入阵列mtx）"
  },
  {
    "origin": "Returns the trace of a matrix.",
    "local": "返回矩阵的跟踪。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst, InputArray m)",
    "local": "（输入阵列src、输出阵列dst、输入阵列m）"
  },
  {
    "origin": "Performs the matrix transformation of every array element.",
    "local": "对每个数组元素执行矩阵变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src, OutputArray dst)",
    "local": "（输入阵列src，输出阵列dst）"
  },
  {
    "origin": "Transposes a matrix.",
    "local": "变换矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const Mat *src, size_t nsrc, OutputArray dst)",
    "local": "（const Mat*src，大小\\t nsrc，输出阵列dst）"
  },
  {
    "origin": "Applies vertical concatenation to given matrices.",
    "local": "对给定的矩阵应用垂直连接。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(InputArray src1, InputArray src2, OutputArray dst)",
    "local": "（输入阵列src1、输入阵列src2、输出阵列dst）"
  },
  {
    "origin": "(InputArrayOfArrays src, OutputArray dst)",
    "local": "（InputArrayOfArrays src，Outputray Ardst）"
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:33 for OpenCV by &#160;",
    "local": "2021年4月2日星期五11:36:33为OpenCV生成，&#160；"
  }
]