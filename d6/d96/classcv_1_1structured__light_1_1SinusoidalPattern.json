[
  {
    "origin": "OpenCV: cv::structured_light::SinusoidalPattern Class Reference",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions",
    "local": ""
  },
  {
    "origin": "List of all members",
    "local": ""
  },
  {
    "origin": "cv::structured_light::SinusoidalPattern Class Reference",
    "local": ""
  },
  {
    "origin": "abstract",
    "local": ""
  },
  {
    "origin": "Class implementing Fourier transform profilometry (FTP) , phase-shifting profilometry (PSP) and Fourier-assisted phase-shifting profilometry (FAPS) based on",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Inheritance diagram for cv::structured_light::SinusoidalPattern:",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "struct",
    "local": ""
  },
  {
    "origin": "Parameters of",
    "local": ""
  },
  {
    "origin": "constructor.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "patternImages,",
    "local": ""
  },
  {
    "origin": "dataModulationTerm,",
    "local": ""
  },
  {
    "origin": "compute the data modulation term.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "patternImages,",
    "local": ""
  },
  {
    "origin": "wrappedPhaseMap,",
    "local": ""
  },
  {
    "origin": "shadowMask=",
    "local": ""
  },
  {
    "origin": "(),",
    "local": ""
  },
  {
    "origin": "fundamental=",
    "local": ""
  },
  {
    "origin": "Compute a wrapped phase map from sinusoidal patterns.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "projUnwrappedPhaseMap,",
    "local": ""
  },
  {
    "origin": "camUnwrappedPhaseMap,",
    "local": ""
  },
  {
    "origin": "Find correspondences between the two devices thanks to unwrapped phase maps.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "wrappedPhaseMap,",
    "local": ""
  },
  {
    "origin": "unwrappedPhaseMap,",
    "local": ""
  },
  {
    "origin": "camSize,",
    "local": ""
  },
  {
    "origin": "shadowMask=",
    "local": ""
  },
  {
    "origin": "Unwrap the wrapped phase map to remove phase ambiguities.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "virtual bool",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt; std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &gt; &amp;patternImages,",
    "local": ""
  },
  {
    "origin": "disparityMap,",
    "local": ""
  },
  {
    "origin": "blackImages=",
    "local": ""
  },
  {
    "origin": "(),",
    "local": ""
  },
  {
    "origin": "whiteImages=",
    "local": ""
  },
  {
    "origin": "(), int flags=",
    "local": ""
  },
  {
    "origin": "Decodes the structured light pattern, generating a disparity map.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual bool",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "Generates the structured light pattern to project.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Clears the algorithm state.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual bool",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Returns true if the",
    "local": ""
  },
  {
    "origin": "is empty (e.g. in the very beginning or after unsuccessful read.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;fn)",
    "local": ""
  },
  {
    "origin": "Reads algorithm parameters from a file storage.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename) const",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;fs) const",
    "local": ""
  },
  {
    "origin": "Stores algorithm parameters in a file storage.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;fs, const",
    "local": ""
  },
  {
    "origin": "&amp;name=",
    "local": ""
  },
  {
    "origin": "()) const",
    "local": ""
  },
  {
    "origin": "simplified API for language bindings This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; parameters=",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;())",
    "local": ""
  },
  {
    "origin": "Constructor.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename, const",
    "local": ""
  },
  {
    "origin": "&amp;objname=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Loads algorithm from the file.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;strModel, const",
    "local": ""
  },
  {
    "origin": "&amp;objname=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Loads algorithm from a String.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;fn)",
    "local": ""
  },
  {
    "origin": "Reads algorithm from the file node.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Additional Inherited Members",
    "local": ""
  },
  {
    "origin": "Protected Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;fs) const",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Class implementing Fourier transform profilometry (FTP) , phase-shifting profilometry (PSP) and Fourier-assisted phase-shifting profilometry (FAPS) based on",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "This class generates sinusoidal patterns that can be used with FTP, PSP and FAPS.",
    "local": ""
  },
  {
    "origin": "Member Function Documentation",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "computeDataModulationTerm()",
    "local": ""
  },
  {
    "origin": "virtual void cv::structured_light::SinusoidalPattern::computeDataModulationTerm",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "patternImages",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dataModulationTerm",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "shadowMask",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "dataModulationTerm",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.structured_light_SinusoidalPattern.computeDataModulationTerm(",
    "local": ""
  },
  {
    "origin": "patternImages, shadowMask[, dataModulationTerm]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "compute the data modulation term.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "patternImages",
    "local": ""
  },
  {
    "origin": "captured images with projected patterns.",
    "local": ""
  },
  {
    "origin": "dataModulationTerm",
    "local": ""
  },
  {
    "origin": "where the data modulation term is saved.",
    "local": ""
  },
  {
    "origin": "shadowMask",
    "local": ""
  },
  {
    "origin": "Mask used to discard shadow regions.",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "computePhaseMap()",
    "local": ""
  },
  {
    "origin": "virtual void cv::structured_light::SinusoidalPattern::computePhaseMap",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "patternImages",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "wrappedPhaseMap",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "shadowMask",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "fundamental",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "wrappedPhaseMap, shadowMask",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.structured_light_SinusoidalPattern.computePhaseMap(",
    "local": ""
  },
  {
    "origin": "patternImages[, wrappedPhaseMap[, shadowMask[, fundamental]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Compute a wrapped phase map from sinusoidal patterns.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "patternImages",
    "local": ""
  },
  {
    "origin": "Input data to compute the wrapped phase map.",
    "local": ""
  },
  {
    "origin": "wrappedPhaseMap",
    "local": ""
  },
  {
    "origin": "Wrapped phase map obtained through one of the three methods.",
    "local": ""
  },
  {
    "origin": "shadowMask",
    "local": ""
  },
  {
    "origin": "Mask used to discard shadow regions.",
    "local": ""
  },
  {
    "origin": "fundamental",
    "local": ""
  },
  {
    "origin": "Fundamental matrix used to compute epipolar lines and ease the matching step.",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "create()",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; cv::structured_light::SinusoidalPattern::create",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "parameters",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.structured_light.SinusoidalPattern_create(",
    "local": ""
  },
  {
    "origin": "[, parameters]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Constructor.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "parameters",
    "local": ""
  },
  {
    "origin": "parameters",
    "local": ""
  },
  {
    "origin": ": width, height of the projector and patterns parameters.",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "findProCamMatches()",
    "local": ""
  },
  {
    "origin": "virtual void cv::structured_light::SinusoidalPattern::findProCamMatches",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "projUnwrappedPhaseMap",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "camUnwrappedPhaseMap",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "matches",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "matches",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.structured_light_SinusoidalPattern.findProCamMatches(",
    "local": ""
  },
  {
    "origin": "projUnwrappedPhaseMap, camUnwrappedPhaseMap[, matches]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Find correspondences between the two devices thanks to unwrapped phase maps.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "projUnwrappedPhaseMap",
    "local": ""
  },
  {
    "origin": "Projector's unwrapped phase map.",
    "local": ""
  },
  {
    "origin": "camUnwrappedPhaseMap",
    "local": ""
  },
  {
    "origin": "Camera's unwrapped phase map.",
    "local": ""
  },
  {
    "origin": "matches",
    "local": ""
  },
  {
    "origin": "Images used to display correspondences map.",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "unwrapPhaseMap()",
    "local": ""
  },
  {
    "origin": "virtual void cv::structured_light::SinusoidalPattern::unwrapPhaseMap",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "wrappedPhaseMap",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "unwrappedPhaseMap",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "camSize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "shadowMask",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "unwrappedPhaseMap",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.structured_light_SinusoidalPattern.unwrapPhaseMap(",
    "local": ""
  },
  {
    "origin": "wrappedPhaseMap, camSize[, unwrappedPhaseMap[, shadowMask]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Unwrap the wrapped phase map to remove phase ambiguities.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "wrappedPhaseMap",
    "local": ""
  },
  {
    "origin": "The wrapped phase map computed from the pattern.",
    "local": ""
  },
  {
    "origin": "unwrappedPhaseMap",
    "local": ""
  },
  {
    "origin": "The unwrapped phase map used to find correspondences between the two devices.",
    "local": ""
  },
  {
    "origin": "camSize",
    "local": ""
  },
  {
    "origin": "Resolution of the camera.",
    "local": ""
  },
  {
    "origin": "shadowMask",
    "local": ""
  },
  {
    "origin": "Mask used to discard shadow regions.",
    "local": ""
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": ""
  },
  {
    "origin": "opencv2/structured_light/",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:48 for OpenCV by",
    "local": ""
  }
]