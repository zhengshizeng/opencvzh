[
  {
    "origin": "OpenCV: Mat - The Basic Image Container",
    "local": "OpenCV:Mat-基本图像容器"
  },
  {
    "origin": "Open Source Computer Vision",
    "local": "Open Source Computer Vision"
  },
  {
    "origin": "Mat - The Basic Image Container",
    "local": "Mat-基本图像容器"
  },
  {
    "origin": "Next Tutorial:",
    "local": "下一个教程:"
  },
  {
    "origin": "Original author",
    "local": "原作者"
  },
  {
    "origin": "Bernát Gábor",
    "local": "Bernát Gábor"
  },
  {
    "origin": "Compatibility",
    "local": "兼容性"
  },
  {
    "origin": "OpenCV &gt;= 3.0",
    "local": "OpenCV &gt;= 3.0"
  },
  {
    "origin": "Goal",
    "local": "目标"
  },
  {
    "origin": "We have multiple ways to acquire digital images from the real world: digital cameras, scanners, computed tomography, and magnetic resonance imaging to name a few. In every case what we (humans) see are images. However, when transforming this to our digital devices what we record are numerical values for each of the points of the image.",
    "local": "我们有多种方法从现实世界中获取数字图像:数码相机、扫描仪、计算机断层扫描和磁共振成像等等.在任何情况下,我们(人类)看到的都是图像.然而,当把它转换到我们的数字设备时,我们记录的是图像中每个点的数值."
  },
  {
    "origin": "For example in the above image you can see that the mirror of the car is nothing more than a matrix containing all the intensity values of the pixel points. How we get and store the pixels values may vary according to our needs, but in the end all images inside a computer world may be reduced to numerical matrices and other information describing the matrix itself.",
    "local": "例如,在上图中,你可以看到汽车的后视镜不过是一个包含所有像素点强度值的矩阵.我们获取和存储像素值的方式可能会根据我们的需要而有所不同,但最终,计算机世界中的所有图像都可能被简化为数字矩阵和描述矩阵本身的其他信息."
  },
  {
    "origin": "OpenCV",
    "local": "OpenCV"
  },
  {
    "origin": "is a computer vision library whose main focus is to process and manipulate this information. Therefore, the first thing you need to be familiar with is how OpenCV stores and handles images.",
    "local": "是一个计算机视觉库,其主要任务是处理和操纵这些信息.因此,您首先需要熟悉OpenCV如何存储和处理图像."
  },
  {
    "origin": "Mat",
    "local": "Mat"
  },
  {
    "origin": "OpenCV has been around since 2001. In those days the library was built around a",
    "local": "OpenCV从2001年就开始出现了,那时的图书馆是围绕一个"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "interface and to store the image in the memory they used a C structure called",
    "local": "接口并将图像存储在内存中,他们使用了一个名为"
  },
  {
    "origin": "IplImage",
    "local": "IplImage"
  },
  {
    "origin": ". This is the one you'll see in most of the older tutorials and educational materials. The problem with this is that it brings to the table all the minuses of the C language. The biggest issue is the manual memory management. It builds on the assumption that the user is responsible for taking care of memory allocation and deallocation. While this is not a problem with smaller programs, once your code base grows it will be more of a struggle to handle all this rather than focusing on solving your development goal.",
    "local": ". 这是一个你会看到在大多数旧的教程和教材.这样做的问题是,它将C语言的所有缺点都摆到了桌面上.最大的问题是手动内存管理.它建立在用户负责内存分配和释放的假设之上.虽然这对于较小的程序来说不是问题,但一旦代码库增长,处理所有这些问题将比专注于解决开发目标更困难."
  },
  {
    "origin": "Luckily C++ came around and introduced the concept of classes making easier for the user through automatic memory management (more or less). The good news is that C++ is fully compatible with C so no compatibility issues can arise from making the change. Therefore, OpenCV 2.0 introduced a new C++ interface which offered a new way of doing things which means you do not need to fiddle with memory management, making your code concise (less to write, to achieve more). The main downside of the C++ interface is that many embedded development systems at the moment support only C. Therefore, unless you are targeting embedded platforms, there's no point to using the",
    "local": "幸运的是C++出现并介绍了通过自动内存管理(或多或少)为用户提供更容易的类的概念.好消息是C++完全兼容C,所以不需要从更改中产生兼容性问题.因此,OpenCV 2引入了一个新的C++接口,它提供了一种新的做事方式,这意味着你不需要费力地进行内存管理,使代码简洁(少写,多做).C++接口的主要缺点是,目前许多嵌入式开发系统只支持C.因此,除非您针对嵌入式平台,否则使用"
  },
  {
    "origin": "old",
    "local": "old"
  },
  {
    "origin": "methods (unless you're a masochist programmer and you're asking for trouble).",
    "local": "方法(除非你是一个受虐狂程序员,你是自找麻烦)."
  },
  {
    "origin": "The first thing you need to know about",
    "local": "你要知道的第一件事"
  },
  {
    "origin": "Mat",
    "local": "Mat"
  },
  {
    "origin": "is that you no longer need to manually allocate its memory and release it as soon as you do not need it. While doing this is still a possibility, most of the OpenCV functions will allocate its output data automatically. As a nice bonus if you pass on an already existing",
    "local": "您不再需要手动分配它的内存,并且在不需要时立即释放它.尽管这样做仍然是可能的,但大多数OpenCV函数将自动分配其输出数据.作为一个不错的奖励,如果你把一个已经存在的"
  },
  {
    "origin": "Mat",
    "local": "Mat"
  },
  {
    "origin": "object, which has already allocated the required space for the matrix, this will be reused. In other words we use at all times only as much memory as we need to perform the task.",
    "local": "对象,它已经为矩阵分配了所需的空间,这将被重用.换句话说,我们在任何时候都只使用执行任务所需的内存."
  },
  {
    "origin": "Mat",
    "local": "Mat"
  },
  {
    "origin": "is basically a class with two data parts: the matrix header (containing information such as the size of the matrix, the method used for storing, at which address is the matrix stored, and so on) and a pointer to the matrix containing the pixel values (taking any dimensionality depending on the method chosen for storing) . The matrix header size is constant, however the size of the matrix itself may vary from image to image and usually is larger by orders of magnitude.",
    "local": "基本上是一个包含两个数据部分的类:矩阵头(包含诸如矩阵大小、用于存储的方法、矩阵存储在哪个地址等信息)和指向包含像素值的矩阵的指针(根据选择的存储方法采用任何维数).矩阵头的大小是恒定的,但是矩阵本身的大小可能因图像而异,通常要大几个数量级."
  },
  {
    "origin": "OpenCV is an image processing library. It contains a large collection of image processing functions. To solve a computational challenge, most of the time you will end up using multiple functions of the library. Because of this, passing images to functions is a common practice. We should not forget that we are talking about image processing algorithms, which tend to be quite computational heavy. The last thing we want to do is further decrease the speed of your program by making unnecessary copies of potentially",
    "local": "OpenCV是一个图像处理库.它包含大量的图像处理函数集合.为了解决计算难题,大多数情况下,您将最终使用库的多个函数.因此,将图像传递给函数是一种常见的做法.我们不应该忘记,我们正在谈论的图像处理算法,往往是相当繁重的计算.我们最不想做的事情是进一步降低您的程序的速度,使不必要的副本"
  },
  {
    "origin": "large",
    "local": "大的"
  },
  {
    "origin": "images.",
    "local": "图像."
  },
  {
    "origin": "To tackle this issue OpenCV uses a reference counting system. The idea is that each",
    "local": "为了解决这个问题,OpenCV使用了一个引用计数系统.我们的想法是"
  },
  {
    "origin": "Mat",
    "local": "Mat"
  },
  {
    "origin": "object has its own header, however a matrix may be shared between two",
    "local": "对象有自己的头,但是两个对象之间可以共享一个矩阵"
  },
  {
    "origin": "Mat",
    "local": "Mat"
  },
  {
    "origin": "objects by having their matrix pointers point to the same address. Moreover, the copy operators",
    "local": "对象的矩阵指针指向同一地址.此外,复制运算符"
  },
  {
    "origin": "will only copy the headers",
    "local": "将只复制标题"
  },
  {
    "origin": "and the pointer to the large matrix, not the data itself.",
    "local": "指向大矩阵的指针,而不是数据本身."
  },
  {
    "origin": "All the above objects, in the end, point to the same single data matrix and making a modification using any of them will affect all the other ones as well. In practice the different objects just provide different access methods to the same underlying data. Nevertheless, their header parts are different. The real interesting part is that you can create headers which refer to only a subsection of the full data. For example, to create a region of interest (",
    "local": "最后,上述所有对象都指向同一个数据矩阵,使用其中任何一个对象进行修改都会影响其他所有对象.实际上,不同的对象只是为相同的底层数据提供了不同的访问方法.尽管如此,它们的标题部分是不同的.真正有趣的是,您可以创建只引用完整数据的一部分的头.例如,创建感兴趣的区域("
  },
  {
    "origin": "ROI",
    "local": "ROI"
  },
  {
    "origin": ") in an image you just create a new header with the new boundaries:",
    "local": ")在图像中,您只需创建一个具有新边界的新标题:"
  },
  {
    "origin": "Now you may ask &ndash; if the matrix itself may belong to multiple",
    "local": "现在你可以问-- 如果矩阵本身可能属于多个"
  },
  {
    "origin": "Mat",
    "local": "Mat"
  },
  {
    "origin": "objects who takes responsibility for cleaning it up when it's no longer needed. The short answer is: the last object that used it. This is handled by using a reference counting mechanism. Whenever somebody copies a header of a",
    "local": "当不再需要时负责清理的对象.简单的回答是:使用它的最后一个对象.这是通过使用引用计数机制来处理的.每当有人复制"
  },
  {
    "origin": "Mat",
    "local": "Mat"
  },
  {
    "origin": "object, a counter is increased for the matrix. Whenever a header is cleaned, this counter is decreased. When the counter reaches zero the matrix is freed. Sometimes you will want to copy the matrix itself too, so OpenCV provides",
    "local": "对象,则为矩阵增加一个计数器.每当清洁收割台时,此计数器就会减小.当计数器为零时,矩阵被释放.有时您还需要复制矩阵本身,因此OpenCV提供了"
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "functions.",
    "local": "功能."
  },
  {
    "origin": "Now modifying",
    "local": "正在修改"
  },
  {
    "origin": "F",
    "local": "F"
  },
  {
    "origin": "or",
    "local": ""
  },
  {
    "origin": "G",
    "local": "G"
  },
  {
    "origin": "will not affect the matrix pointed by the",
    "local": ""
  },
  {
    "origin": "A",
    "local": "A"
  },
  {
    "origin": "'s header. What you need to remember from all this is that:",
    "local": "的标题.你需要记住的是:"
  },
  {
    "origin": "Output image allocation for OpenCV functions is automatic (unless specified otherwise).",
    "local": "OpenCV函数的输出图像分配是自动的(除非另有规定)."
  },
  {
    "origin": "You do not need to think about memory management with OpenCV's C++ interface.",
    "local": ""
  },
  {
    "origin": "The assignment operator and the copy constructor only copies the header.",
    "local": ""
  },
  {
    "origin": "The underlying matrix of an image may be copied using the",
    "local": "图像的基础矩阵可以使用"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": "functions.",
    "local": "功能."
  },
  {
    "origin": "Storing methods",
    "local": "储存方法"
  },
  {
    "origin": "This is about how you store the pixel values. You can select the color space and the data type used. The color space refers to how we combine color components in order to code a given color. The simplest one is the grayscale where the colors at our disposal are black and white. The combination of these allows us to create many shades of gray.",
    "local": ""
  },
  {
    "origin": "For",
    "local": ""
  },
  {
    "origin": "colorful",
    "local": "丰富多彩的"
  },
  {
    "origin": "ways we have a lot more methods to choose from. Each of them breaks it down to three or four basic components and we can use the combination of these to create the others. The most popular one is RGB, mainly because this is also how our eye builds up colors. Its base colors are red, green and blue. To code the transparency of a color sometimes a fourth element: alpha (A) is added.",
    "local": "我们有很多方法可供选择.它们中的每一个都将其分解为三到四个基本组件,我们可以使用这些组件的组合来创建其他组件.最流行的是RGB,主要是因为这也是我们的眼睛如何建立颜色.它的基色是红、绿、蓝.为了对颜色的透明度进行编码,有时会添加第四个元素:alpha(a)."
  },
  {
    "origin": "There are, however, many other color systems each with their own advantages:",
    "local": ""
  },
  {
    "origin": "RGB is the most common as our eyes use something similar, however keep in mind that OpenCV standard display system composes colors using the BGR color space (red and blue channels are swapped places).",
    "local": "RGB是最常见的,因为我们的眼睛使用类似的东西,但是请记住,OpenCV标准显示系统使用BGR颜色空间组成颜色(红色和蓝色通道交换位置)."
  },
  {
    "origin": "The HSV and HLS decompose colors into their hue, saturation and value/luminance components, which is a more natural way for us to describe colors. You might, for example, dismiss the last component, making your algorithm less sensible to the light conditions of the input image.",
    "local": "HSV和HLS将颜色分解为色调、饱和度和值/亮度分量,这是一种更自然的颜色描述方法.例如,您可能会忽略最后一个组件,使算法对输入图像的光照条件不太敏感."
  },
  {
    "origin": "YCrCb is used by the popular JPEG image format.",
    "local": "YCrCb是流行的JPEG图像格式."
  },
  {
    "origin": "CIE L*a*b* is a perceptually uniform color space, which comes in handy if you need to measure the",
    "local": "CIE L*a*b*是一个感知一致的颜色空间,如果你需要测量颜色,它会很方便"
  },
  {
    "origin": "distance",
    "local": "距离"
  },
  {
    "origin": "of a given color to another color.",
    "local": "把一种颜色变成另一种颜色."
  },
  {
    "origin": "Each of the building components has its own valid domains. This leads to the data type used. How we store a component defines the control we have over its domain. The smallest data type possible is",
    "local": ""
  },
  {
    "origin": "char",
    "local": "烧焦"
  },
  {
    "origin": ", which means one byte or 8 bits. This may be unsigned (so can store values from 0 to 255) or signed (values from -127 to +127). Although in case of three components this already gives 16 million possible colors to represent (like in case of RGB) we may acquire an even finer control by using the float (4 byte = 32 bit) or double (8 byte = 64 bit) data types for each component. Nevertheless, remember that increasing the size of a component also increases the size of the whole picture in the memory.",
    "local": ",表示一个字节或8位.它可以是无符号的(因此可以存储0到255之间的值)或有符号的(值从-127到+127).尽管在三个组件的情况下,这已经提供了1600万种可能的颜色来表示(如在RGB的情况下),但是我们可以通过为每个组件使用浮点(4字节=32位)或双(8字节=64位)数据类型来获得更精细的控制.然而,请记住,增大组件的大小也会增大内存中整个图片的大小."
  },
  {
    "origin": "Creating a Mat object explicitly",
    "local": "显式创建材质对象"
  },
  {
    "origin": "In the",
    "local": "在"
  },
  {
    "origin": "tutorial you have already learned how to write a matrix to an image file by using the",
    "local": "教程您已经学习了如何使用"
  },
  {
    "origin": "function. However, for debugging purposes it's much more convenient to see the actual values. You can do this using the &lt;&lt; operator of",
    "local": ""
  },
  {
    "origin": "Mat",
    "local": "Mat"
  },
  {
    "origin": ". Be aware that this only works for two dimensional matrices.",
    "local": ""
  },
  {
    "origin": "Although",
    "local": "尽管"
  },
  {
    "origin": "Mat",
    "local": "Mat"
  },
  {
    "origin": "works really well as an image container, it is also a general matrix class. Therefore, it is possible to create and manipulate multidimensional matrices. You can create a Mat object in multiple ways:",
    "local": "作为一个图像容器工作得非常好,它也是一个通用的矩阵类.因此,可以创建和操作多维矩阵.可以通过多种方式创建材质对象:"
  },
  {
    "origin": "Constructor",
    "local": "建造师"
  },
  {
    "origin": "For two dimensional and multichannel images we first define their size: row and column count wise.",
    "local": "对于二维和多通道图像,我们首先定义它们的大小:按行和列计数."
  },
  {
    "origin": "Then we need to specify the data type to use for storing the elements and the number of channels per matrix point. To do this we have multiple definitions constructed according to the following convention:",
    "local": ""
  },
  {
    "origin": "For instance,",
    "local": "例如,"
  },
  {
    "origin": "CV_8UC3",
    "local": "CV8UC3"
  },
  {
    "origin": "means we use unsigned char types that are 8 bit long and each pixel has three of these to form the three channels. There are types predefined for up to four channels. The",
    "local": "意味着我们使用8位长的无符号字符类型,每个像素有三个这样的字符组成三个通道.最多可为四个通道预定义类型.这个"
  },
  {
    "origin": "is four element short vector. Specify it and you can initialize all matrix points with a custom value. If you need more you can create the type with the upper macro, setting the channel number in parenthesis as you can see below.",
    "local": "是四元素短向量.指定它,可以用自定义值初始化所有矩阵点.如果您需要更多,您可以使用上面的宏创建类型,设置括号中的通道号,如下所示."
  },
  {
    "origin": "Use C/C++ arrays and initialize via constructor",
    "local": "使用C/C++数组通过构造函数初始化"
  },
  {
    "origin": "The upper example shows how to create a matrix with more than two dimensions. Specify its dimension, then pass a pointer containing the size for each dimension and the rest remains the same.",
    "local": "上面的示例演示如何创建具有两个以上维度的矩阵.指定其维度,然后传递一个包含每个维度大小的指针,其余的保持不变."
  },
  {
    "origin": "function:",
    "local": "功能:"
  },
  {
    "origin": "You cannot initialize the matrix values with this construction. It will only reallocate its matrix data memory if the new size will not fit into the old one.",
    "local": "不能使用此构造初始化矩阵值.它只会重新分配其矩阵数据内存,如果新的大小不适合旧的."
  },
  {
    "origin": "MATLAB style initializer:",
    "local": "MATLAB风格的初始值设定项:"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ". Specify size and data type to use:",
    "local": ". 指定要使用的大小和数据类型:"
  },
  {
    "origin": "For small matrices you may use comma separated initializers or initializer lists (C++11 support is required in the last case):",
    "local": "对于小矩阵,可以使用逗号分隔的初始化器或初始化列表(在最后一种情况下需要C++ 11支持):"
  },
  {
    "origin": "Create a new header for an existing",
    "local": "为现有标题创建新标题"
  },
  {
    "origin": "Mat",
    "local": "Mat"
  },
  {
    "origin": "object and",
    "local": "对象和"
  },
  {
    "origin": "or",
    "local": "或"
  },
  {
    "origin": "it.",
    "local": "是的."
  },
  {
    "origin": "Note",
    "local": "Note"
  },
  {
    "origin": "You can fill out a matrix with random values using the",
    "local": "您可以使用"
  },
  {
    "origin": "function. You need to give a lower and upper limit for the random values:",
    "local": "功能.您需要给出随机值的下限和上限:"
  },
  {
    "origin": "Output formatting",
    "local": "输出格式"
  },
  {
    "origin": "In the above examples you could see the default formatting option. OpenCV, however, allows you to format your matrix output:",
    "local": "在上面的示例中,您可以看到默认的格式化选项.不过,OpenCV允许您格式化矩阵输出:"
  },
  {
    "origin": "Default",
    "local": "默认"
  },
  {
    "origin": "Python",
    "local": "Python"
  },
  {
    "origin": "Comma separated values (CSV)",
    "local": "Comma separated values (CSV)"
  },
  {
    "origin": "Numpy",
    "local": "Numpy"
  },
  {
    "origin": "C",
    "local": "C"
  },
  {
    "origin": "Output of other common items",
    "local": "其他常用项输出"
  },
  {
    "origin": "OpenCV offers support for output of other common OpenCV data structures too via the &lt;&lt; operator:",
    "local": "OpenCV还通过&lt;提供对其他常见OpenCV数据结构输出的支持&书信电报;操作员:"
  },
  {
    "origin": "2D Point",
    "local": "二维点"
  },
  {
    "origin": "3D Point",
    "local": "三维点"
  },
  {
    "origin": "std::vector via",
    "local": "std::vector via"
  },
  {
    "origin": "std::vector of points",
    "local": "std::vector of points"
  },
  {
    "origin": "Most of the samples here have been included in a small console application. You can download it from",
    "local": "这里的大多数示例都包含在一个小型控制台应用程序中.你可以从"
  },
  {
    "origin": "here",
    "local": "在这里"
  },
  {
    "origin": "or in the core section of the cpp samples.",
    "local": "或者在cpp样本的核心部分."
  },
  {
    "origin": "You can also find a quick video demonstration of this on",
    "local": "你也可以在网上找到一个快速的视频演示"
  },
  {
    "origin": "YouTube",
    "local": "YouTube"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:34 for OpenCV by &#160;",
    "local": "Generated on Fri Apr 2 2021 11:36:34 for OpenCV by zsz"
  }
]