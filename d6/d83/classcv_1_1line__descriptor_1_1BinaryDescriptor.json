[
  {
    "origin": "OpenCV: cv::line_descriptor::BinaryDescriptor Class Reference",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions",
    "local": ""
  },
  {
    "origin": "Protected Member Functions",
    "local": ""
  },
  {
    "origin": "List of all members",
    "local": ""
  },
  {
    "origin": "cv::line_descriptor::BinaryDescriptor Class Reference",
    "local": ""
  },
  {
    "origin": "Class implements both functionalities for detection of lines and computation of their binary descriptor.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Inheritance diagram for cv::line_descriptor::BinaryDescriptor:",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "struct",
    "local": ""
  },
  {
    "origin": "List of",
    "local": ""
  },
  {
    "origin": "parameters:",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;parameters=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Constructor.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;image, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;keylines,",
    "local": ""
  },
  {
    "origin": "&amp;descriptors, bool returnFloatDescr=false) const",
    "local": ""
  },
  {
    "origin": "Requires descriptors computation.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;images, std::vector&lt; std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &gt; &amp;keylines, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;descriptors, bool returnFloatDescr=false) const",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Return descriptor size.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Return data type.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;image, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;keypoints, const",
    "local": ""
  },
  {
    "origin": "&amp;mask=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Requires line detection.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;images, std::vector&lt; std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &gt; &amp;keylines, const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;masks=std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt;()) const",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Get current number of octaves.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Get current reduction ratio (used in Gaussian pyramids)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Get current width of bands.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image,",
    "local": ""
  },
  {
    "origin": "mask, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;keylines,",
    "local": ""
  },
  {
    "origin": "descriptors, bool useProvidedKeyLines=false, bool returnFloatDescr=false) const",
    "local": ""
  },
  {
    "origin": "Define operator '()' to perform detection of KeyLines and computation of descriptors in a row.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;fn)",
    "local": ""
  },
  {
    "origin": "Read parameters from a",
    "local": ""
  },
  {
    "origin": "object and store them.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(int octaves)",
    "local": ""
  },
  {
    "origin": "Set number of octaves.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(int rRatio)",
    "local": ""
  },
  {
    "origin": "Set reduction ratio (used in Gaussian pyramids)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(int width)",
    "local": ""
  },
  {
    "origin": "Set width of bands.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;fs) const",
    "local": ""
  },
  {
    "origin": "Store parameters to a",
    "local": ""
  },
  {
    "origin": "object.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Clears the algorithm state.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual bool",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Returns true if the",
    "local": ""
  },
  {
    "origin": "is empty (e.g. in the very beginning or after unsuccessful read.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename) const",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;fs, const",
    "local": ""
  },
  {
    "origin": "&amp;name=",
    "local": ""
  },
  {
    "origin": "()) const",
    "local": ""
  },
  {
    "origin": "simplified API for language bindings This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Create a",
    "local": ""
  },
  {
    "origin": "object with default parameters (or with the ones provided) and return a smart pointer to it.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "parameters)",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename, const",
    "local": ""
  },
  {
    "origin": "&amp;objname=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Loads algorithm from the file.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;strModel, const",
    "local": ""
  },
  {
    "origin": "&amp;objname=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Loads algorithm from a String.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;fn)",
    "local": ""
  },
  {
    "origin": "Reads algorithm from the file node.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Protected Member Functions",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;imageSrc, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;keylines,",
    "local": ""
  },
  {
    "origin": "&amp;descriptors, bool returnFloatDescr, bool useDetectionData) const",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;imageSrc, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;keylines, const",
    "local": ""
  },
  {
    "origin": "&amp;mask=",
    "local": ""
  },
  {
    "origin": "()) const",
    "local": ""
  },
  {
    "origin": "Protected Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;fs) const",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Class implements both functionalities for detection of lines and computation of their binary descriptor.",
    "local": ""
  },
  {
    "origin": "Class' interface is mainly based on the ones of classical detectors and extractors, such as Feature2d's",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": ". Retrieved information about lines is stored in",
    "local": ""
  },
  {
    "origin": "objects.",
    "local": ""
  },
  {
    "origin": "Constructor &amp; Destructor Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "BinaryDescriptor()",
    "local": ""
  },
  {
    "origin": "cv::line_descriptor::BinaryDescriptor::BinaryDescriptor",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "parameters",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Constructor.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "parameters",
    "local": ""
  },
  {
    "origin": "configuration parameters",
    "local": ""
  },
  {
    "origin": "If no argument is provided, constructor sets default values (see comments in the code snippet in previous section). Default values are strongly recommended.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "~BinaryDescriptor()",
    "local": ""
  },
  {
    "origin": "cv::line_descriptor::BinaryDescriptor::~BinaryDescriptor",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "destructor",
    "local": ""
  },
  {
    "origin": "Member Function Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "compute()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "void cv::line_descriptor::BinaryDescriptor::compute",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "keylines",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "descriptors",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "returnFloatDescr",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "keylines, descriptors",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.line_descriptor_BinaryDescriptor.compute(",
    "local": ""
  },
  {
    "origin": "image, keylines[, descriptors[, returnFloatDescr]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Requires descriptors computation.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "input image",
    "local": ""
  },
  {
    "origin": "keylines",
    "local": ""
  },
  {
    "origin": "vector containing lines for which descriptors must be computed",
    "local": ""
  },
  {
    "origin": "descriptors",
    "local": ""
  },
  {
    "origin": "returnFloatDescr",
    "local": ""
  },
  {
    "origin": "flag (when set to true, original non-binary descriptors are returned)",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "compute()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "void cv::line_descriptor::BinaryDescriptor::compute",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "images",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt; std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &gt; &amp;",
    "local": ""
  },
  {
    "origin": "keylines",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "descriptors",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "returnFloatDescr",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "keylines, descriptors",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.line_descriptor_BinaryDescriptor.compute(",
    "local": ""
  },
  {
    "origin": "image, keylines[, descriptors[, returnFloatDescr]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "images",
    "local": ""
  },
  {
    "origin": "input images",
    "local": ""
  },
  {
    "origin": "keylines",
    "local": ""
  },
  {
    "origin": "set of vectors containing lines for which descriptors must be computed",
    "local": ""
  },
  {
    "origin": "descriptors",
    "local": ""
  },
  {
    "origin": "returnFloatDescr",
    "local": ""
  },
  {
    "origin": "flag (when set to true, original non-binary descriptors are returned)",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "computeImpl()",
    "local": ""
  },
  {
    "origin": "virtual void cv::line_descriptor::BinaryDescriptor::computeImpl",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "imageSrc",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "keylines",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "descriptors",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "returnFloatDescr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "useDetectionData",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "protected",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "implementation of descriptors' computation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "createBinaryDescriptor()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; cv::line_descriptor::BinaryDescriptor::createBinaryDescriptor",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.line_descriptor.BinaryDescriptor_createBinaryDescriptor(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Create a",
    "local": ""
  },
  {
    "origin": "object with default parameters (or with the ones provided) and return a smart pointer to it.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "createBinaryDescriptor()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; cv::line_descriptor::BinaryDescriptor::createBinaryDescriptor",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "parameters",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.line_descriptor.BinaryDescriptor_createBinaryDescriptor(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "defaultNorm()",
    "local": ""
  },
  {
    "origin": "int cv::line_descriptor::BinaryDescriptor::defaultNorm",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns norm mode",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "descriptorSize()",
    "local": ""
  },
  {
    "origin": "int cv::line_descriptor::BinaryDescriptor::descriptorSize",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Return descriptor size.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "descriptorType()",
    "local": ""
  },
  {
    "origin": "int cv::line_descriptor::BinaryDescriptor::descriptorType",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Return data type.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "detect()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "void cv::line_descriptor::BinaryDescriptor::detect",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "keypoints",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "keypoints",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.line_descriptor_BinaryDescriptor.detect(",
    "local": ""
  },
  {
    "origin": "image[, mask]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Requires line detection.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "input image",
    "local": ""
  },
  {
    "origin": "keypoints",
    "local": ""
  },
  {
    "origin": "vector that will store extracted lines for one or more images",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "mask matrix to detect only KeyLines of interest",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "detect()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "void cv::line_descriptor::BinaryDescriptor::detect",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "images",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt; std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &gt; &amp;",
    "local": ""
  },
  {
    "origin": "keylines",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "masks",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "keypoints",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.line_descriptor_BinaryDescriptor.detect(",
    "local": ""
  },
  {
    "origin": "image[, mask]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "images",
    "local": ""
  },
  {
    "origin": "input images",
    "local": ""
  },
  {
    "origin": "keylines",
    "local": ""
  },
  {
    "origin": "set of vectors that will store extracted lines for one or more images",
    "local": ""
  },
  {
    "origin": "masks",
    "local": ""
  },
  {
    "origin": "vector of mask matrices to detect only KeyLines of interest from each input image",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "detectImpl()",
    "local": ""
  },
  {
    "origin": "virtual void cv::line_descriptor::BinaryDescriptor::detectImpl",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "imageSrc",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "keylines",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "protected",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "implementation of line detection",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getNumOfOctaves()",
    "local": ""
  },
  {
    "origin": "int cv::line_descriptor::BinaryDescriptor::getNumOfOctaves",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.line_descriptor_BinaryDescriptor.getNumOfOctaves(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Get current number of octaves.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getReductionRatio()",
    "local": ""
  },
  {
    "origin": "int cv::line_descriptor::BinaryDescriptor::getReductionRatio",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.line_descriptor_BinaryDescriptor.getReductionRatio(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Get current reduction ratio (used in Gaussian pyramids)",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getWidthOfBand()",
    "local": ""
  },
  {
    "origin": "int cv::line_descriptor::BinaryDescriptor::getWidthOfBand",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.line_descriptor_BinaryDescriptor.getWidthOfBand(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Get current width of bands.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "operator()()",
    "local": ""
  },
  {
    "origin": "virtual void cv::line_descriptor::BinaryDescriptor::operator()",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "keylines",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "descriptors",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "useProvidedKeyLines",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "returnFloatDescr",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Define operator '()' to perform detection of KeyLines and computation of descriptors in a row.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "input image",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "mask matrix to select which lines in KeyLines must be accepted among the ones extracted (used when",
    "local": ""
  },
  {
    "origin": "keylines",
    "local": ""
  },
  {
    "origin": "is not empty)",
    "local": ""
  },
  {
    "origin": "keylines",
    "local": ""
  },
  {
    "origin": "vector that contains input lines (when filled, the detection part will be skipped and input lines will be passed as input to the algorithm computing descriptors)",
    "local": ""
  },
  {
    "origin": "descriptors",
    "local": ""
  },
  {
    "origin": "matrix that will store final descriptors",
    "local": ""
  },
  {
    "origin": "useProvidedKeyLines",
    "local": ""
  },
  {
    "origin": "flag (when set to true, detection phase will be skipped and only computation of descriptors will be executed, using lines provided in",
    "local": ""
  },
  {
    "origin": "keylines",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returnFloatDescr",
    "local": ""
  },
  {
    "origin": "flag (when set to true, original non-binary descriptors are returned)",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "virtual void cv::line_descriptor::BinaryDescriptor::read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "fn",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Read parameters from a",
    "local": ""
  },
  {
    "origin": "object and store them.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "fn",
    "local": ""
  },
  {
    "origin": "source",
    "local": ""
  },
  {
    "origin": "file",
    "local": ""
  },
  {
    "origin": "Reimplemented from",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "setNumOfOctaves()",
    "local": ""
  },
  {
    "origin": "void cv::line_descriptor::BinaryDescriptor::setNumOfOctaves",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "octaves",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.line_descriptor_BinaryDescriptor.setNumOfOctaves(",
    "local": ""
  },
  {
    "origin": "octaves",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Set number of octaves.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "octaves",
    "local": ""
  },
  {
    "origin": "number of octaves",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "setReductionRatio()",
    "local": ""
  },
  {
    "origin": "void cv::line_descriptor::BinaryDescriptor::setReductionRatio",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "rRatio",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.line_descriptor_BinaryDescriptor.setReductionRatio(",
    "local": ""
  },
  {
    "origin": "rRatio",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Set reduction ratio (used in Gaussian pyramids)",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "rRatio",
    "local": ""
  },
  {
    "origin": "reduction ratio",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "setWidthOfBand()",
    "local": ""
  },
  {
    "origin": "void cv::line_descriptor::BinaryDescriptor::setWidthOfBand",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "width",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.line_descriptor_BinaryDescriptor.setWidthOfBand(",
    "local": ""
  },
  {
    "origin": "width",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Set width of bands.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "width",
    "local": ""
  },
  {
    "origin": "width of bands",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "write()",
    "local": ""
  },
  {
    "origin": "virtual void cv::line_descriptor::BinaryDescriptor::write",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "fs",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Store parameters to a",
    "local": ""
  },
  {
    "origin": "object.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "fs",
    "local": ""
  },
  {
    "origin": "output",
    "local": ""
  },
  {
    "origin": "file",
    "local": ""
  },
  {
    "origin": "Reimplemented from",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": ""
  },
  {
    "origin": "opencv2/line_descriptor/",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:48 for OpenCV by",
    "local": ""
  }
]