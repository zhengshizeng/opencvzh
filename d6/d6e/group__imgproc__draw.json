[
  {
    "origin": "OpenCV: Drawing Functions",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Macros",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "Drawing Functions",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Line iterator.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Macros",
    "local": ""
  },
  {
    "origin": "#define",
    "local": ""
  },
  {
    "origin": "(r, g, b)",
    "local": ""
  },
  {
    "origin": "((b), (g), (r), 0)",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "= 16",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "= 16",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img,",
    "local": ""
  },
  {
    "origin": "pt1,",
    "local": ""
  },
  {
    "origin": "pt2, const",
    "local": ""
  },
  {
    "origin": "&amp;color, int thickness=1, int line_type=8, int shift=0, double tipLength=0.1)",
    "local": ""
  },
  {
    "origin": "Draws a arrow segment pointing from the first point to the second one.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img,",
    "local": ""
  },
  {
    "origin": "center, int radius, const",
    "local": ""
  },
  {
    "origin": "&amp;color, int thickness=1, int lineType=",
    "local": ""
  },
  {
    "origin": ", int shift=0)",
    "local": ""
  },
  {
    "origin": "Draws a circle.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "imgSize,",
    "local": ""
  },
  {
    "origin": "&amp;pt1,",
    "local": ""
  },
  {
    "origin": "&amp;pt2)",
    "local": ""
  },
  {
    "origin": "Clips the line against the image rectangle.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "imgSize,",
    "local": ""
  },
  {
    "origin": "&amp;pt1,",
    "local": ""
  },
  {
    "origin": "&amp;pt2)",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "imgRect,",
    "local": ""
  },
  {
    "origin": "&amp;pt1,",
    "local": ""
  },
  {
    "origin": "&amp;pt2)",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image,",
    "local": ""
  },
  {
    "origin": "contours, int contourIdx, const",
    "local": ""
  },
  {
    "origin": "&amp;color, int thickness=1, int lineType=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hierarchy=",
    "local": ""
  },
  {
    "origin": "(), int maxLevel=INT_MAX,",
    "local": ""
  },
  {
    "origin": "offset=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Draws contours outlines or filled contours.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img,",
    "local": ""
  },
  {
    "origin": "position, const",
    "local": ""
  },
  {
    "origin": "&amp;color, int markerType=",
    "local": ""
  },
  {
    "origin": ", int markerSize=20, int thickness=1, int line_type=8)",
    "local": ""
  },
  {
    "origin": "Draws a marker on a predefined position in an image.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img,",
    "local": ""
  },
  {
    "origin": "center,",
    "local": ""
  },
  {
    "origin": "axes, double angle, double startAngle, double endAngle, const",
    "local": ""
  },
  {
    "origin": "&amp;color, int thickness=1, int lineType=",
    "local": ""
  },
  {
    "origin": ", int shift=0)",
    "local": ""
  },
  {
    "origin": "Draws a simple or thick elliptic arc or fills an ellipse sector.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img, const",
    "local": ""
  },
  {
    "origin": "&amp;box, const",
    "local": ""
  },
  {
    "origin": "&amp;color, int thickness=1, int lineType=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "center,",
    "local": ""
  },
  {
    "origin": "axes, int angle, int arcStart, int arcEnd, int delta, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;pts)",
    "local": ""
  },
  {
    "origin": "Approximates an elliptic arc with a polyline.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "center,",
    "local": ""
  },
  {
    "origin": "axes, int angle, int arcStart, int arcEnd, int delta, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;pts)",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img, const",
    "local": ""
  },
  {
    "origin": "*pts, int npts, const",
    "local": ""
  },
  {
    "origin": "&amp;color, int lineType=",
    "local": ""
  },
  {
    "origin": ", int shift=0)",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img,",
    "local": ""
  },
  {
    "origin": "points, const",
    "local": ""
  },
  {
    "origin": "&amp;color, int lineType=",
    "local": ""
  },
  {
    "origin": ", int shift=0)",
    "local": ""
  },
  {
    "origin": "Fills a convex polygon.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img, const",
    "local": ""
  },
  {
    "origin": "**pts, const int *npts, int ncontours, const",
    "local": ""
  },
  {
    "origin": "&amp;color, int lineType=",
    "local": ""
  },
  {
    "origin": "offset=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img,",
    "local": ""
  },
  {
    "origin": "pts, const",
    "local": ""
  },
  {
    "origin": "&amp;color, int lineType=",
    "local": ""
  },
  {
    "origin": "offset=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Fills the area bounded by one or more polygons.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "(const int fontFace, const int pixelHeight, const int thickness=1)",
    "local": ""
  },
  {
    "origin": "Calculates the font-specific size to use to achieve a given height in pixels.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;text, int fontFace, double fontScale, int thickness, int *baseLine)",
    "local": ""
  },
  {
    "origin": "Calculates the width and height of a text string.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img,",
    "local": ""
  },
  {
    "origin": "pt1,",
    "local": ""
  },
  {
    "origin": "pt2, const",
    "local": ""
  },
  {
    "origin": "&amp;color, int thickness=1, int lineType=",
    "local": ""
  },
  {
    "origin": ", int shift=0)",
    "local": ""
  },
  {
    "origin": "Draws a line segment connecting two points.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img, const",
    "local": ""
  },
  {
    "origin": "*const *pts, const int *npts, int ncontours, bool isClosed, const",
    "local": ""
  },
  {
    "origin": "&amp;color, int thickness=1, int lineType=",
    "local": ""
  },
  {
    "origin": ", int shift=0)",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img,",
    "local": ""
  },
  {
    "origin": "pts, bool isClosed, const",
    "local": ""
  },
  {
    "origin": "&amp;color, int thickness=1, int lineType=",
    "local": ""
  },
  {
    "origin": ", int shift=0)",
    "local": ""
  },
  {
    "origin": "Draws several polygonal curves.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img, const",
    "local": ""
  },
  {
    "origin": "&amp;text,",
    "local": ""
  },
  {
    "origin": "org, int fontFace, double fontScale,",
    "local": ""
  },
  {
    "origin": "color, int thickness=1, int lineType=",
    "local": ""
  },
  {
    "origin": ", bool bottomLeftOrigin=false)",
    "local": ""
  },
  {
    "origin": "Draws a text string.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img,",
    "local": ""
  },
  {
    "origin": "pt1,",
    "local": ""
  },
  {
    "origin": "pt2, const",
    "local": ""
  },
  {
    "origin": "&amp;color, int thickness=1, int lineType=",
    "local": ""
  },
  {
    "origin": ", int shift=0)",
    "local": ""
  },
  {
    "origin": "Draws a simple, thick, or filled up-right rectangle.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img,",
    "local": ""
  },
  {
    "origin": "rec, const",
    "local": ""
  },
  {
    "origin": "&amp;color, int thickness=1, int lineType=",
    "local": ""
  },
  {
    "origin": ", int shift=0)",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Drawing functions work with matrices/images of arbitrary depth. The boundaries of the shapes can be rendered with antialiasing (implemented only for 8-bit images for now). All the functions include the parameter color that uses an RGB value (that may be constructed with the Scalar constructor ) for color images and brightness for grayscale images. For color images, the channel ordering is normally",
    "local": ""
  },
  {
    "origin": "Blue, Green, Red",
    "local": ""
  },
  {
    "origin": ". This is what imshow, imread, and imwrite expect. So, if you form a color using the Scalar constructor, it should look like:",
    "local": ""
  },
  {
    "origin": "\\[\\texttt{Scalar} (blue \\_ component, green \\_ component, red \\_ component[, alpha \\_ component])\\]",
    "local": ""
  },
  {
    "origin": "If you are using your own image rendering and I/O functions, you can use any channel ordering. The drawing functions process each channel independently and do not depend on the channel order or even on the used color space. The whole image can be converted from BGR to RGB or to a different color space using cvtColor .",
    "local": ""
  },
  {
    "origin": "If a drawn figure is partially or completely outside the image, the drawing functions clip it. Also, many drawing functions can handle pixel coordinates specified with sub-pixel accuracy. This means that the coordinates can be passed as fixed-point numbers encoded as integers. The number of fractional bits is specified by the shift parameter and the real point coordinates are calculated as \\(\\texttt{Point}(x,y)\\rightarrow\\texttt{Point2f}(x*2^{-shift},y*2^{-shift})\\) . This feature is especially effective when rendering antialiased shapes.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "The functions do not support alpha-transparency when the target image is 4-channel. In this case, the color[3] is simply copied to the repainted pixels. Thus, if you want to paint semi-transparent shapes, you can paint them in a separate buffer and then blend it with the main image.",
    "local": ""
  },
  {
    "origin": "Macro Definition Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "CV_RGB",
    "local": ""
  },
  {
    "origin": "#define CV_RGB",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "r,",
    "local": ""
  },
  {
    "origin": "g,",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "((b), (g), (r), 0)",
    "local": ""
  },
  {
    "origin": "OpenCV color channel order is BGR[A]",
    "local": ""
  },
  {
    "origin": "Enumeration Type Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "HersheyFonts",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "Only a subset of Hershey fonts",
    "local": ""
  },
  {
    "origin": "https://en.wikipedia.org/wiki/Hershey_fonts",
    "local": ""
  },
  {
    "origin": "are supported",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "FONT_HERSHEY_SIMPLEX",
    "local": ""
  },
  {
    "origin": "Python: cv.FONT_HERSHEY_SIMPLEX",
    "local": ""
  },
  {
    "origin": "normal size sans-serif font",
    "local": ""
  },
  {
    "origin": "FONT_HERSHEY_PLAIN",
    "local": ""
  },
  {
    "origin": "Python: cv.FONT_HERSHEY_PLAIN",
    "local": ""
  },
  {
    "origin": "small size sans-serif font",
    "local": ""
  },
  {
    "origin": "FONT_HERSHEY_DUPLEX",
    "local": ""
  },
  {
    "origin": "Python: cv.FONT_HERSHEY_DUPLEX",
    "local": ""
  },
  {
    "origin": "normal size sans-serif font (more complex than FONT_HERSHEY_SIMPLEX)",
    "local": ""
  },
  {
    "origin": "FONT_HERSHEY_COMPLEX",
    "local": ""
  },
  {
    "origin": "Python: cv.FONT_HERSHEY_COMPLEX",
    "local": ""
  },
  {
    "origin": "normal size serif font",
    "local": ""
  },
  {
    "origin": "FONT_HERSHEY_TRIPLEX",
    "local": ""
  },
  {
    "origin": "Python: cv.FONT_HERSHEY_TRIPLEX",
    "local": ""
  },
  {
    "origin": "normal size serif font (more complex than FONT_HERSHEY_COMPLEX)",
    "local": ""
  },
  {
    "origin": "FONT_HERSHEY_COMPLEX_SMALL",
    "local": ""
  },
  {
    "origin": "Python: cv.FONT_HERSHEY_COMPLEX_SMALL",
    "local": ""
  },
  {
    "origin": "smaller version of FONT_HERSHEY_COMPLEX",
    "local": ""
  },
  {
    "origin": "FONT_HERSHEY_SCRIPT_SIMPLEX",
    "local": ""
  },
  {
    "origin": "Python: cv.FONT_HERSHEY_SCRIPT_SIMPLEX",
    "local": ""
  },
  {
    "origin": "hand-writing style font",
    "local": ""
  },
  {
    "origin": "FONT_HERSHEY_SCRIPT_COMPLEX",
    "local": ""
  },
  {
    "origin": "Python: cv.FONT_HERSHEY_SCRIPT_COMPLEX",
    "local": ""
  },
  {
    "origin": "more complex variant of FONT_HERSHEY_SCRIPT_SIMPLEX",
    "local": ""
  },
  {
    "origin": "FONT_ITALIC",
    "local": ""
  },
  {
    "origin": "Python: cv.FONT_ITALIC",
    "local": ""
  },
  {
    "origin": "flag for italic font",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "LineTypes",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "types of line",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "FILLED",
    "local": ""
  },
  {
    "origin": "Python: cv.FILLED",
    "local": ""
  },
  {
    "origin": "LINE_4",
    "local": ""
  },
  {
    "origin": "Python: cv.LINE_4",
    "local": ""
  },
  {
    "origin": "4-connected line",
    "local": ""
  },
  {
    "origin": "LINE_8",
    "local": ""
  },
  {
    "origin": "Python: cv.LINE_8",
    "local": ""
  },
  {
    "origin": "8-connected line",
    "local": ""
  },
  {
    "origin": "LINE_AA",
    "local": ""
  },
  {
    "origin": "Python: cv.LINE_AA",
    "local": ""
  },
  {
    "origin": "antialiased line",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "MarkerTypes",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "Possible set of marker types used for the",
    "local": ""
  },
  {
    "origin": "function",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "MARKER_CROSS",
    "local": ""
  },
  {
    "origin": "Python: cv.MARKER_CROSS",
    "local": ""
  },
  {
    "origin": "A crosshair marker shape.",
    "local": ""
  },
  {
    "origin": "MARKER_TILTED_CROSS",
    "local": ""
  },
  {
    "origin": "Python: cv.MARKER_TILTED_CROSS",
    "local": ""
  },
  {
    "origin": "A 45 degree tilted crosshair marker shape.",
    "local": ""
  },
  {
    "origin": "MARKER_STAR",
    "local": ""
  },
  {
    "origin": "Python: cv.MARKER_STAR",
    "local": ""
  },
  {
    "origin": "A star marker shape, combination of cross and tilted cross.",
    "local": ""
  },
  {
    "origin": "MARKER_DIAMOND",
    "local": ""
  },
  {
    "origin": "Python: cv.MARKER_DIAMOND",
    "local": ""
  },
  {
    "origin": "A diamond marker shape.",
    "local": ""
  },
  {
    "origin": "MARKER_SQUARE",
    "local": ""
  },
  {
    "origin": "Python: cv.MARKER_SQUARE",
    "local": ""
  },
  {
    "origin": "A square marker shape.",
    "local": ""
  },
  {
    "origin": "MARKER_TRIANGLE_UP",
    "local": ""
  },
  {
    "origin": "Python: cv.MARKER_TRIANGLE_UP",
    "local": ""
  },
  {
    "origin": "An upwards pointing triangle marker shape.",
    "local": ""
  },
  {
    "origin": "MARKER_TRIANGLE_DOWN",
    "local": ""
  },
  {
    "origin": "Python: cv.MARKER_TRIANGLE_DOWN",
    "local": ""
  },
  {
    "origin": "A downwards pointing triangle marker shape.",
    "local": ""
  },
  {
    "origin": "Function Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "arrowedLine()",
    "local": ""
  },
  {
    "origin": "void cv::arrowedLine",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "pt1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "pt2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "line_type",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "shift",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "tipLength",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.arrowedLine(",
    "local": ""
  },
  {
    "origin": "img, pt1, pt2, color[, thickness[, line_type[, shift[, tipLength]]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Draws a arrow segment pointing from the first point to the second one.",
    "local": ""
  },
  {
    "origin": "The function",
    "local": ""
  },
  {
    "origin": "draws an arrow between pt1 and pt2 points in the image. See also",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "Image.",
    "local": ""
  },
  {
    "origin": "pt1",
    "local": ""
  },
  {
    "origin": "The point the arrow starts from.",
    "local": ""
  },
  {
    "origin": "pt2",
    "local": ""
  },
  {
    "origin": "The point the arrow points to.",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": "Line color.",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": "Line thickness.",
    "local": ""
  },
  {
    "origin": "line_type",
    "local": ""
  },
  {
    "origin": "Type of the line. See",
    "local": ""
  },
  {
    "origin": "shift",
    "local": ""
  },
  {
    "origin": "Number of fractional bits in the point coordinates.",
    "local": ""
  },
  {
    "origin": "tipLength",
    "local": ""
  },
  {
    "origin": "The length of the arrow tip in relation to the arrow length",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "circle()",
    "local": ""
  },
  {
    "origin": "void cv::circle",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "center",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "radius",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "lineType",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "shift",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.circle(",
    "local": ""
  },
  {
    "origin": "img, center, radius, color[, thickness[, lineType[, shift]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Draws a circle.",
    "local": ""
  },
  {
    "origin": "The function",
    "local": ""
  },
  {
    "origin": "draws a simple or filled circle with a given center and radius.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "Image where the circle is drawn.",
    "local": ""
  },
  {
    "origin": "center",
    "local": ""
  },
  {
    "origin": "Center of the circle.",
    "local": ""
  },
  {
    "origin": "radius",
    "local": ""
  },
  {
    "origin": "Radius of the circle.",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": "Circle color.",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": "Thickness of the circle outline, if positive. Negative values, like",
    "local": ""
  },
  {
    "origin": ", mean that a filled circle is to be drawn.",
    "local": ""
  },
  {
    "origin": "lineType",
    "local": ""
  },
  {
    "origin": "Type of the circle boundary. See",
    "local": ""
  },
  {
    "origin": "shift",
    "local": ""
  },
  {
    "origin": "Number of fractional bits in the coordinates of the center and in the radius value.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "clipLine()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "bool cv::clipLine",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "imgSize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "pt1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "pt2",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval, pt1, pt2",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.clipLine(",
    "local": ""
  },
  {
    "origin": "imgRect, pt1, pt2",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Clips the line against the image rectangle.",
    "local": ""
  },
  {
    "origin": "The function",
    "local": ""
  },
  {
    "origin": "calculates a part of the line segment that is entirely within the specified rectangle. it returns false if the line segment is completely outside the rectangle. Otherwise, it returns true .",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "imgSize",
    "local": ""
  },
  {
    "origin": "Image size. The image rectangle is Rect(0, 0, imgSize.width, imgSize.height) .",
    "local": ""
  },
  {
    "origin": "pt1",
    "local": ""
  },
  {
    "origin": "First line point.",
    "local": ""
  },
  {
    "origin": "pt2",
    "local": ""
  },
  {
    "origin": "Second line point.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "clipLine()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "bool cv::clipLine",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "imgSize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "pt1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "pt2",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval, pt1, pt2",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.clipLine(",
    "local": ""
  },
  {
    "origin": "imgRect, pt1, pt2",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "imgSize",
    "local": ""
  },
  {
    "origin": "Image size. The image rectangle is Rect(0, 0, imgSize.width, imgSize.height) .",
    "local": ""
  },
  {
    "origin": "pt1",
    "local": ""
  },
  {
    "origin": "First line point.",
    "local": ""
  },
  {
    "origin": "pt2",
    "local": ""
  },
  {
    "origin": "Second line point.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "clipLine()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "bool cv::clipLine",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "imgRect",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "pt1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "pt2",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval, pt1, pt2",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.clipLine(",
    "local": ""
  },
  {
    "origin": "imgRect, pt1, pt2",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "imgRect",
    "local": ""
  },
  {
    "origin": "Image rectangle.",
    "local": ""
  },
  {
    "origin": "pt1",
    "local": ""
  },
  {
    "origin": "First line point.",
    "local": ""
  },
  {
    "origin": "pt2",
    "local": ""
  },
  {
    "origin": "Second line point.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "drawContours()",
    "local": ""
  },
  {
    "origin": "void cv::drawContours",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "contours",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "contourIdx",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "lineType",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hierarchy",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "maxLevel",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "offset",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.drawContours(",
    "local": ""
  },
  {
    "origin": "image, contours, contourIdx, color[, thickness[, lineType[, hierarchy[, maxLevel[, offset]]]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Draws contours outlines or filled contours.",
    "local": ""
  },
  {
    "origin": "The function draws contour outlines in the image if \\(\\texttt{thickness} \\ge 0\\) or fills the area bounded by the contours if \\(\\texttt{thickness}&lt;0\\) . The example below shows how to retrieve connected components from the binary image and label them: :",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "Destination image.",
    "local": ""
  },
  {
    "origin": "contours",
    "local": ""
  },
  {
    "origin": "All the input contours. Each contour is stored as a point vector.",
    "local": ""
  },
  {
    "origin": "contourIdx",
    "local": ""
  },
  {
    "origin": "Parameter indicating a contour to draw. If it is negative, all the contours are drawn.",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": "Color of the contours.",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": "Thickness of lines the contours are drawn with. If it is negative (for example, thickness=",
    "local": ""
  },
  {
    "origin": "), the contour interiors are drawn.",
    "local": ""
  },
  {
    "origin": "lineType",
    "local": ""
  },
  {
    "origin": "Line connectivity. See",
    "local": ""
  },
  {
    "origin": "hierarchy",
    "local": ""
  },
  {
    "origin": "Optional information about hierarchy. It is only needed if you want to draw only some of the contours (see maxLevel ).",
    "local": ""
  },
  {
    "origin": "maxLevel",
    "local": ""
  },
  {
    "origin": "Maximal level for drawn contours. If it is 0, only the specified contour is drawn. If it is 1, the function draws the contour(s) and all the nested contours. If it is 2, the function draws the contours, all the nested contours, all the nested-to-nested contours, and so on. This parameter is only taken into account when there is hierarchy available.",
    "local": ""
  },
  {
    "origin": "offset",
    "local": ""
  },
  {
    "origin": "Optional contour shift parameter. Shift all the drawn contours by the specified \\(\\texttt{offset}=(dx,dy)\\) .",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "When thickness=",
    "local": ""
  },
  {
    "origin": ", the function is designed to handle connected components with holes correctly even when no hierarchy date is provided. This is done by analyzing all the outlines together using even-odd rule. This may give incorrect results if you have a joint collection of separately retrieved contours. In order to solve this problem, you need to call",
    "local": ""
  },
  {
    "origin": "separately for each sub-group of contours, or iterate over the collection using contourIdx parameter.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "drawMarker()",
    "local": ""
  },
  {
    "origin": "void cv::drawMarker",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "position",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "markerType",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "markerSize",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "line_type",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.drawMarker(",
    "local": ""
  },
  {
    "origin": "img, position, color[, markerType[, markerSize[, thickness[, line_type]]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Draws a marker on a predefined position in an image.",
    "local": ""
  },
  {
    "origin": "The function",
    "local": ""
  },
  {
    "origin": "draws a marker on a given position in the image. For the moment several marker types are supported, see",
    "local": ""
  },
  {
    "origin": "for more information.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "Image.",
    "local": ""
  },
  {
    "origin": "position",
    "local": ""
  },
  {
    "origin": "The point where the crosshair is positioned.",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": "Line color.",
    "local": ""
  },
  {
    "origin": "markerType",
    "local": ""
  },
  {
    "origin": "The specific type of marker you want to use, see",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": "Line thickness.",
    "local": ""
  },
  {
    "origin": "line_type",
    "local": ""
  },
  {
    "origin": "Type of the line, See",
    "local": ""
  },
  {
    "origin": "markerSize",
    "local": ""
  },
  {
    "origin": "The length of the marker axis [default = 20 pixels]",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "ellipse()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "void cv::ellipse",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "center",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "axes",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "angle",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "startAngle",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "endAngle",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "lineType",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "shift",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.ellipse(",
    "local": ""
  },
  {
    "origin": "img, center, axes, angle, startAngle, endAngle, color[, thickness[, lineType[, shift]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.ellipse(",
    "local": ""
  },
  {
    "origin": "img, box, color[, thickness[, lineType]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Draws a simple or thick elliptic arc or fills an ellipse sector.",
    "local": ""
  },
  {
    "origin": "The function",
    "local": ""
  },
  {
    "origin": "with more parameters draws an ellipse outline, a filled ellipse, an elliptic arc, or a filled ellipse sector. The drawing code uses general parametric form. A piecewise-linear curve is used to approximate the elliptic arc boundary. If you need more control of the ellipse rendering, you can retrieve the curve using",
    "local": ""
  },
  {
    "origin": "and then render it with",
    "local": ""
  },
  {
    "origin": "or fill it with",
    "local": ""
  },
  {
    "origin": ". If you use the first variant of the function and want to draw the whole ellipse, not an arc, pass",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": ". If",
    "local": ""
  },
  {
    "origin": "is greater than",
    "local": ""
  },
  {
    "origin": ", they are swapped. The figure below explains the meaning of the parameters to draw the blue arc.",
    "local": ""
  },
  {
    "origin": "ellipse.svg",
    "local": ""
  },
  {
    "origin": "Parameters of Elliptic Arc",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "Image.",
    "local": ""
  },
  {
    "origin": "center",
    "local": ""
  },
  {
    "origin": "Center of the ellipse.",
    "local": ""
  },
  {
    "origin": "axes",
    "local": ""
  },
  {
    "origin": "Half of the size of the ellipse main axes.",
    "local": ""
  },
  {
    "origin": "angle",
    "local": ""
  },
  {
    "origin": "Ellipse rotation angle in degrees.",
    "local": ""
  },
  {
    "origin": "startAngle",
    "local": ""
  },
  {
    "origin": "Starting angle of the elliptic arc in degrees.",
    "local": ""
  },
  {
    "origin": "endAngle",
    "local": ""
  },
  {
    "origin": "Ending angle of the elliptic arc in degrees.",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": "Ellipse color.",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": "Thickness of the ellipse arc outline, if positive. Otherwise, this indicates that a filled ellipse sector is to be drawn.",
    "local": ""
  },
  {
    "origin": "lineType",
    "local": ""
  },
  {
    "origin": "Type of the ellipse boundary. See",
    "local": ""
  },
  {
    "origin": "shift",
    "local": ""
  },
  {
    "origin": "Number of fractional bits in the coordinates of the center and values of axes.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "ellipse()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "void cv::ellipse",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "box",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "lineType",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.ellipse(",
    "local": ""
  },
  {
    "origin": "img, center, axes, angle, startAngle, endAngle, color[, thickness[, lineType[, shift]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.ellipse(",
    "local": ""
  },
  {
    "origin": "img, box, color[, thickness[, lineType]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "Image.",
    "local": ""
  },
  {
    "origin": "box",
    "local": ""
  },
  {
    "origin": "Alternative ellipse representation via",
    "local": ""
  },
  {
    "origin": ". This means that the function draws an ellipse inscribed in the rotated rectangle.",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": "Ellipse color.",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": "Thickness of the ellipse arc outline, if positive. Otherwise, this indicates that a filled ellipse sector is to be drawn.",
    "local": ""
  },
  {
    "origin": "lineType",
    "local": ""
  },
  {
    "origin": "Type of the ellipse boundary. See",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "ellipse2Poly()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "void cv::ellipse2Poly",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "center",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "axes",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "angle",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "arcStart",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "arcEnd",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "delta",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "pts",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "pts",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.ellipse2Poly(",
    "local": ""
  },
  {
    "origin": "center, axes, angle, arcStart, arcEnd, delta",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Approximates an elliptic arc with a polyline.",
    "local": ""
  },
  {
    "origin": "The function ellipse2Poly computes the vertices of a polyline that approximates the specified elliptic arc. It is used by",
    "local": ""
  },
  {
    "origin": ". If",
    "local": ""
  },
  {
    "origin": "is greater than",
    "local": ""
  },
  {
    "origin": ", they are swapped.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "center",
    "local": ""
  },
  {
    "origin": "Center of the arc.",
    "local": ""
  },
  {
    "origin": "axes",
    "local": ""
  },
  {
    "origin": "Half of the size of the ellipse main axes. See",
    "local": ""
  },
  {
    "origin": "for details.",
    "local": ""
  },
  {
    "origin": "angle",
    "local": ""
  },
  {
    "origin": "Rotation angle of the ellipse in degrees. See",
    "local": ""
  },
  {
    "origin": "for details.",
    "local": ""
  },
  {
    "origin": "arcStart",
    "local": ""
  },
  {
    "origin": "Starting angle of the elliptic arc in degrees.",
    "local": ""
  },
  {
    "origin": "arcEnd",
    "local": ""
  },
  {
    "origin": "Ending angle of the elliptic arc in degrees.",
    "local": ""
  },
  {
    "origin": "delta",
    "local": ""
  },
  {
    "origin": "Angle between the subsequent polyline vertices. It defines the approximation accuracy.",
    "local": ""
  },
  {
    "origin": "pts",
    "local": ""
  },
  {
    "origin": "Output vector of polyline vertices.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "ellipse2Poly()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "void cv::ellipse2Poly",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "center",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "axes",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "angle",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "arcStart",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "arcEnd",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "delta",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "pts",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "pts",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.ellipse2Poly(",
    "local": ""
  },
  {
    "origin": "center, axes, angle, arcStart, arcEnd, delta",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "center",
    "local": ""
  },
  {
    "origin": "Center of the arc.",
    "local": ""
  },
  {
    "origin": "axes",
    "local": ""
  },
  {
    "origin": "Half of the size of the ellipse main axes. See",
    "local": ""
  },
  {
    "origin": "for details.",
    "local": ""
  },
  {
    "origin": "angle",
    "local": ""
  },
  {
    "origin": "Rotation angle of the ellipse in degrees. See",
    "local": ""
  },
  {
    "origin": "for details.",
    "local": ""
  },
  {
    "origin": "arcStart",
    "local": ""
  },
  {
    "origin": "Starting angle of the elliptic arc in degrees.",
    "local": ""
  },
  {
    "origin": "arcEnd",
    "local": ""
  },
  {
    "origin": "Ending angle of the elliptic arc in degrees.",
    "local": ""
  },
  {
    "origin": "delta",
    "local": ""
  },
  {
    "origin": "Angle between the subsequent polyline vertices. It defines the approximation accuracy.",
    "local": ""
  },
  {
    "origin": "pts",
    "local": ""
  },
  {
    "origin": "Output vector of polyline vertices.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "fillConvexPoly()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "void cv::fillConvexPoly",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "*",
    "local": ""
  },
  {
    "origin": "pts",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "npts",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "lineType",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "shift",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.fillConvexPoly(",
    "local": ""
  },
  {
    "origin": "img, points, color[, lineType[, shift]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "fillConvexPoly()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "void cv::fillConvexPoly",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "points",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "lineType",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "shift",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.fillConvexPoly(",
    "local": ""
  },
  {
    "origin": "img, points, color[, lineType[, shift]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Fills a convex polygon.",
    "local": ""
  },
  {
    "origin": "The function",
    "local": ""
  },
  {
    "origin": "draws a filled convex polygon. This function is much faster than the function",
    "local": ""
  },
  {
    "origin": ". It can fill not only convex polygons but any monotonic polygon without self-intersections, that is, a polygon whose contour intersects every horizontal line (scan line) twice at the most (though, its top-most and/or the bottom edge could be horizontal).",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "Image.",
    "local": ""
  },
  {
    "origin": "points",
    "local": ""
  },
  {
    "origin": "Polygon vertices.",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": "Polygon color.",
    "local": ""
  },
  {
    "origin": "lineType",
    "local": ""
  },
  {
    "origin": "Type of the polygon boundaries. See",
    "local": ""
  },
  {
    "origin": "shift",
    "local": ""
  },
  {
    "origin": "Number of fractional bits in the vertex coordinates.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "fillPoly()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "void cv::fillPoly",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "**",
    "local": ""
  },
  {
    "origin": "pts",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const int *",
    "local": ""
  },
  {
    "origin": "npts",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "ncontours",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "lineType",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "shift",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "offset",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.fillPoly(",
    "local": ""
  },
  {
    "origin": "img, pts, color[, lineType[, shift[, offset]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "fillPoly()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "void cv::fillPoly",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "pts",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "lineType",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "shift",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "offset",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.fillPoly(",
    "local": ""
  },
  {
    "origin": "img, pts, color[, lineType[, shift[, offset]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Fills the area bounded by one or more polygons.",
    "local": ""
  },
  {
    "origin": "The function",
    "local": ""
  },
  {
    "origin": "fills an area bounded by several polygonal contours. The function can fill complex areas, for example, areas with holes, contours with self-intersections (some of their parts), and so forth.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "Image.",
    "local": ""
  },
  {
    "origin": "pts",
    "local": ""
  },
  {
    "origin": "Array of polygons where each polygon is represented as an array of points.",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": "Polygon color.",
    "local": ""
  },
  {
    "origin": "lineType",
    "local": ""
  },
  {
    "origin": "Type of the polygon boundaries. See",
    "local": ""
  },
  {
    "origin": "shift",
    "local": ""
  },
  {
    "origin": "Number of fractional bits in the vertex coordinates.",
    "local": ""
  },
  {
    "origin": "offset",
    "local": ""
  },
  {
    "origin": "Optional offset of all points of the contours.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getFontScaleFromHeight()",
    "local": ""
  },
  {
    "origin": "double cv::getFontScaleFromHeight",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const int",
    "local": ""
  },
  {
    "origin": "fontFace",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const int",
    "local": ""
  },
  {
    "origin": "pixelHeight",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const int",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.getFontScaleFromHeight(",
    "local": ""
  },
  {
    "origin": "fontFace, pixelHeight[, thickness]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Calculates the font-specific size to use to achieve a given height in pixels.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "fontFace",
    "local": ""
  },
  {
    "origin": "Font to use, see",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "pixelHeight",
    "local": ""
  },
  {
    "origin": "Pixel height to compute the fontScale for",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": "Thickness of lines used to render the text.See putText for details.",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "The fontSize to use for",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getTextSize()",
    "local": ""
  },
  {
    "origin": "cv::getTextSize",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "text",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "fontFace",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "fontScale",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int *",
    "local": ""
  },
  {
    "origin": "baseLine",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval, baseLine",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.getTextSize(",
    "local": ""
  },
  {
    "origin": "text, fontFace, fontScale, thickness",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Calculates the width and height of a text string.",
    "local": ""
  },
  {
    "origin": "The function",
    "local": ""
  },
  {
    "origin": "calculates and returns the size of a box that contains the specified text. That is, the following code renders some text, the tight box surrounding it, and the baseline: :",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "text",
    "local": ""
  },
  {
    "origin": "Input text string.",
    "local": ""
  },
  {
    "origin": "fontFace",
    "local": ""
  },
  {
    "origin": "Font to use, see",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "fontScale",
    "local": ""
  },
  {
    "origin": "Font scale factor that is multiplied by the font-specific base size.",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": "Thickness of lines used to render the text. See",
    "local": ""
  },
  {
    "origin": "for details.",
    "local": ""
  },
  {
    "origin": "[out]",
    "local": ""
  },
  {
    "origin": "baseLine",
    "local": ""
  },
  {
    "origin": "y-coordinate of the baseline relative to the bottom-most text point.",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "The size of a box that contains the specified text.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "line()",
    "local": ""
  },
  {
    "origin": "void cv::line",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "pt1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "pt2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "lineType",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "shift",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.line(",
    "local": ""
  },
  {
    "origin": "img, pt1, pt2, color[, thickness[, lineType[, shift]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Draws a line segment connecting two points.",
    "local": ""
  },
  {
    "origin": "The function line draws the line segment between pt1 and pt2 points in the image. The line is clipped by the image boundaries. For non-antialiased lines with integer coordinates, the 8-connected or 4-connected Bresenham algorithm is used. Thick lines are drawn with rounding endings. Antialiased lines are drawn using Gaussian filtering.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "Image.",
    "local": ""
  },
  {
    "origin": "pt1",
    "local": ""
  },
  {
    "origin": "First point of the line segment.",
    "local": ""
  },
  {
    "origin": "pt2",
    "local": ""
  },
  {
    "origin": "Second point of the line segment.",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": "Line color.",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": "Line thickness.",
    "local": ""
  },
  {
    "origin": "lineType",
    "local": ""
  },
  {
    "origin": "Type of the line. See",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "shift",
    "local": ""
  },
  {
    "origin": "Number of fractional bits in the point coordinates.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "polylines()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "void cv::polylines",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "*const *",
    "local": ""
  },
  {
    "origin": "pts",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const int *",
    "local": ""
  },
  {
    "origin": "npts",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "ncontours",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "isClosed",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "lineType",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "shift",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.polylines(",
    "local": ""
  },
  {
    "origin": "img, pts, isClosed, color[, thickness[, lineType[, shift]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "polylines()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "void cv::polylines",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "pts",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "isClosed",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "lineType",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "shift",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.polylines(",
    "local": ""
  },
  {
    "origin": "img, pts, isClosed, color[, thickness[, lineType[, shift]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Draws several polygonal curves.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "Image.",
    "local": ""
  },
  {
    "origin": "pts",
    "local": ""
  },
  {
    "origin": "Array of polygonal curves.",
    "local": ""
  },
  {
    "origin": "isClosed",
    "local": ""
  },
  {
    "origin": "Flag indicating whether the drawn polylines are closed or not. If they are closed, the function draws a line from the last vertex of each curve to its first vertex.",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": "Polyline color.",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": "Thickness of the polyline edges.",
    "local": ""
  },
  {
    "origin": "lineType",
    "local": ""
  },
  {
    "origin": "Type of the line segments. See",
    "local": ""
  },
  {
    "origin": "shift",
    "local": ""
  },
  {
    "origin": "Number of fractional bits in the vertex coordinates.",
    "local": ""
  },
  {
    "origin": "The function",
    "local": ""
  },
  {
    "origin": "draws one or more polygonal curves.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "putText()",
    "local": ""
  },
  {
    "origin": "void cv::putText",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "text",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "org",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "fontFace",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "fontScale",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "lineType",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "bottomLeftOrigin",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.putText(",
    "local": ""
  },
  {
    "origin": "img, text, org, fontFace, fontScale, color[, thickness[, lineType[, bottomLeftOrigin]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Draws a text string.",
    "local": ""
  },
  {
    "origin": "The function",
    "local": ""
  },
  {
    "origin": "renders the specified text string in the image. Symbols that cannot be rendered using the specified font are replaced by question marks. See",
    "local": ""
  },
  {
    "origin": "for a text rendering code example.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "Image.",
    "local": ""
  },
  {
    "origin": "text",
    "local": ""
  },
  {
    "origin": "Text string to be drawn.",
    "local": ""
  },
  {
    "origin": "org",
    "local": ""
  },
  {
    "origin": "Bottom-left corner of the text string in the image.",
    "local": ""
  },
  {
    "origin": "fontFace",
    "local": ""
  },
  {
    "origin": "Font type, see",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "fontScale",
    "local": ""
  },
  {
    "origin": "Font scale factor that is multiplied by the font-specific base size.",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": "Text color.",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": "Thickness of the lines used to draw a text.",
    "local": ""
  },
  {
    "origin": "lineType",
    "local": ""
  },
  {
    "origin": "Line type. See",
    "local": ""
  },
  {
    "origin": "bottomLeftOrigin",
    "local": ""
  },
  {
    "origin": "When true, the image data origin is at the bottom-left corner. Otherwise, it is at the top-left corner.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "rectangle()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "void cv::rectangle",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "pt1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "pt2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "lineType",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "shift",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.rectangle(",
    "local": ""
  },
  {
    "origin": "img, pt1, pt2, color[, thickness[, lineType[, shift]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.rectangle(",
    "local": ""
  },
  {
    "origin": "img, rec, color[, thickness[, lineType[, shift]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Draws a simple, thick, or filled up-right rectangle.",
    "local": ""
  },
  {
    "origin": "The function",
    "local": ""
  },
  {
    "origin": "draws a rectangle outline or a filled rectangle whose two opposite corners are pt1 and pt2.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "Image.",
    "local": ""
  },
  {
    "origin": "pt1",
    "local": ""
  },
  {
    "origin": "Vertex of the rectangle.",
    "local": ""
  },
  {
    "origin": "pt2",
    "local": ""
  },
  {
    "origin": "Vertex of the rectangle opposite to pt1 .",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": "Rectangle color or brightness (grayscale image).",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": "Thickness of lines that make up the rectangle. Negative values, like",
    "local": ""
  },
  {
    "origin": ", mean that the function has to draw a filled rectangle.",
    "local": ""
  },
  {
    "origin": "lineType",
    "local": ""
  },
  {
    "origin": "Type of the line. See",
    "local": ""
  },
  {
    "origin": "shift",
    "local": ""
  },
  {
    "origin": "Number of fractional bits in the point coordinates.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "rectangle()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "void cv::rectangle",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "rec",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "lineType",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "shift",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.rectangle(",
    "local": ""
  },
  {
    "origin": "img, pt1, pt2, color[, thickness[, lineType[, shift]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.rectangle(",
    "local": ""
  },
  {
    "origin": "img, rec, color[, thickness[, lineType[, shift]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "use",
    "local": ""
  },
  {
    "origin": "parameter as alternative specification of the drawn rectangle:",
    "local": ""
  },
  {
    "origin": "are opposite corners",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:40 for OpenCV by",
    "local": ""
  }
]