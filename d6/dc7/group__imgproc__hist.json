[
  {
    "origin": "OpenCV: Histograms",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "Histograms",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Base class for Contrast Limited Adaptive Histogram Equalization.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "= HISTCMP_BHATTACHARYYA,",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*images, int nimages, const int *channels,",
    "local": ""
  },
  {
    "origin": "hist,",
    "local": ""
  },
  {
    "origin": "backProject, const float **ranges, double scale=1, bool uniform=true)",
    "local": ""
  },
  {
    "origin": "Calculates the back projection of a histogram.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*images, int nimages, const int *channels, const",
    "local": ""
  },
  {
    "origin": "&amp;hist,",
    "local": ""
  },
  {
    "origin": "backProject, const float **ranges, double scale=1, bool uniform=true)",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "images, const std::vector&lt; int &gt; &amp;channels,",
    "local": ""
  },
  {
    "origin": "hist,",
    "local": ""
  },
  {
    "origin": "dst, const std::vector&lt; float &gt; &amp;ranges, double scale)",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*images, int nimages, const int *channels,",
    "local": ""
  },
  {
    "origin": "mask,",
    "local": ""
  },
  {
    "origin": "hist, int dims, const int *histSize, const float **ranges, bool uniform=true, bool",
    "local": ""
  },
  {
    "origin": "=false)",
    "local": ""
  },
  {
    "origin": "Calculates a histogram of a set of arrays.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*images, int nimages, const int *channels,",
    "local": ""
  },
  {
    "origin": "mask,",
    "local": ""
  },
  {
    "origin": "&amp;hist, int dims, const int *histSize, const float **ranges, bool uniform=true, bool",
    "local": ""
  },
  {
    "origin": "=false)",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "images, const std::vector&lt; int &gt; &amp;channels,",
    "local": ""
  },
  {
    "origin": "mask,",
    "local": ""
  },
  {
    "origin": "hist, const std::vector&lt; int &gt; &amp;histSize, const std::vector&lt; float &gt; &amp;ranges, bool",
    "local": ""
  },
  {
    "origin": "=false)",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "H1,",
    "local": ""
  },
  {
    "origin": "H2, int method)",
    "local": ""
  },
  {
    "origin": "Compares two histograms.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;H1, const",
    "local": ""
  },
  {
    "origin": "&amp;H2, int method)",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(double clipLimit=40.0,",
    "local": ""
  },
  {
    "origin": "tileGridSize=",
    "local": ""
  },
  {
    "origin": "(8, 8))",
    "local": ""
  },
  {
    "origin": "Creates a smart pointer to a",
    "local": ""
  },
  {
    "origin": "class and initializes it.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "signature1,",
    "local": ""
  },
  {
    "origin": "signature2, int distType,",
    "local": ""
  },
  {
    "origin": "cost=",
    "local": ""
  },
  {
    "origin": "flow=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Computes the \"minimal work\" distance between two weighted point configurations.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "dst)",
    "local": ""
  },
  {
    "origin": "Equalizes the histogram of a grayscale image.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "signature1,",
    "local": ""
  },
  {
    "origin": "signature2, int distType,",
    "local": ""
  },
  {
    "origin": "cost=",
    "local": ""
  },
  {
    "origin": "(),",
    "local": ""
  },
  {
    "origin": "&lt; float &gt; lowerBound=",
    "local": ""
  },
  {
    "origin": "&lt; float &gt;(),",
    "local": ""
  },
  {
    "origin": "flow=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Enumeration Type Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "HistCompMethods",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "Histogram comparison methods",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "HISTCMP_CORREL",
    "local": ""
  },
  {
    "origin": "Python: cv.HISTCMP_CORREL",
    "local": ""
  },
  {
    "origin": "Correlation",
    "local": ""
  },
  {
    "origin": "\\[d(H_1,H_2) = \\frac{\\sum_I (H_1(I) - \\bar{H_1}) (H_2(I) - \\bar{H_2})}{\\sqrt{\\sum_I(H_1(I) - \\bar{H_1})^2 \\sum_I(H_2(I) - \\bar{H_2})^2}}\\]",
    "local": ""
  },
  {
    "origin": "where",
    "local": ""
  },
  {
    "origin": "\\[\\bar{H_k} = \\frac{1}{N} \\sum _J H_k(J)\\]",
    "local": ""
  },
  {
    "origin": "and \\(N\\) is a total number of histogram bins.",
    "local": ""
  },
  {
    "origin": "HISTCMP_CHISQR",
    "local": ""
  },
  {
    "origin": "Python: cv.HISTCMP_CHISQR",
    "local": ""
  },
  {
    "origin": "Chi-Square",
    "local": ""
  },
  {
    "origin": "\\[d(H_1,H_2) = \\sum _I \\frac{\\left(H_1(I)-H_2(I)\\right)^2}{H_1(I)}\\]",
    "local": ""
  },
  {
    "origin": "HISTCMP_INTERSECT",
    "local": ""
  },
  {
    "origin": "Python: cv.HISTCMP_INTERSECT",
    "local": ""
  },
  {
    "origin": "Intersection",
    "local": ""
  },
  {
    "origin": "\\[d(H_1,H_2) = \\sum _I \\min (H_1(I), H_2(I))\\]",
    "local": ""
  },
  {
    "origin": "HISTCMP_BHATTACHARYYA",
    "local": ""
  },
  {
    "origin": "Python: cv.HISTCMP_BHATTACHARYYA",
    "local": ""
  },
  {
    "origin": "Bhattacharyya distance (In fact, OpenCV computes Hellinger distance, which is related to Bhattacharyya coefficient.)",
    "local": ""
  },
  {
    "origin": "\\[d(H_1,H_2) = \\sqrt{1 - \\frac{1}{\\sqrt{\\bar{H_1} \\bar{H_2} N^2}} \\sum_I \\sqrt{H_1(I) \\cdot H_2(I)}}\\]",
    "local": ""
  },
  {
    "origin": "HISTCMP_HELLINGER",
    "local": ""
  },
  {
    "origin": "Python: cv.HISTCMP_HELLINGER",
    "local": ""
  },
  {
    "origin": "Synonym for HISTCMP_BHATTACHARYYA.",
    "local": ""
  },
  {
    "origin": "HISTCMP_CHISQR_ALT",
    "local": ""
  },
  {
    "origin": "Python: cv.HISTCMP_CHISQR_ALT",
    "local": ""
  },
  {
    "origin": "Alternative Chi-Square",
    "local": ""
  },
  {
    "origin": "\\[d(H_1,H_2) = 2 * \\sum _I \\frac{\\left(H_1(I)-H_2(I)\\right)^2}{H_1(I)+H_2(I)}\\]",
    "local": ""
  },
  {
    "origin": "This alternative formula is regularly used for texture comparison. See e.g.",
    "local": ""
  },
  {
    "origin": "HISTCMP_KL_DIV",
    "local": ""
  },
  {
    "origin": "Python: cv.HISTCMP_KL_DIV",
    "local": ""
  },
  {
    "origin": "Kullback-Leibler divergence",
    "local": ""
  },
  {
    "origin": "\\[d(H_1,H_2) = \\sum _I H_1(I) \\log \\left(\\frac{H_1(I)}{H_2(I)}\\right)\\]",
    "local": ""
  },
  {
    "origin": "Function Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "calcBackProject()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "void cv::calcBackProject",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "*",
    "local": ""
  },
  {
    "origin": "images",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "nimages",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const int *",
    "local": ""
  },
  {
    "origin": "channels",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hist",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "backProject",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const float **",
    "local": ""
  },
  {
    "origin": "ranges",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "scale",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "uniform",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.calcBackProject(",
    "local": ""
  },
  {
    "origin": "images, channels, hist, ranges, scale[, dst]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Calculates the back projection of a histogram.",
    "local": ""
  },
  {
    "origin": "The function",
    "local": ""
  },
  {
    "origin": "calculates the back project of the histogram. That is, similarly to",
    "local": ""
  },
  {
    "origin": ", at each location (x, y) the function collects the values from the selected channels in the input images and finds the corresponding histogram bin. But instead of incrementing it, the function reads the bin value, scales it by scale , and stores in backProject(x,y) . In terms of statistics, the function computes probability of each element value in respect with the empirical probability distribution represented by the histogram. See how, for example, you can find and track a bright-colored object in a scene:",
    "local": ""
  },
  {
    "origin": "Before tracking, show the object to the camera so that it covers almost the whole frame. Calculate a hue histogram. The histogram may have strong maximums, corresponding to the dominant colors in the object.",
    "local": ""
  },
  {
    "origin": "When tracking, calculate a back projection of a hue plane of each input video frame using that pre-computed histogram. Threshold the back projection to suppress weak colors. It may also make sense to suppress pixels with non-sufficient color saturation and too dark or too bright pixels.",
    "local": ""
  },
  {
    "origin": "Find connected components in the resulting picture and choose, for example, the largest component.",
    "local": ""
  },
  {
    "origin": "This is an approximate algorithm of the CamShift color object tracker.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "images",
    "local": ""
  },
  {
    "origin": "Source arrays. They all should have the same depth, CV_8U, CV_16U or CV_32F , and the same size. Each of them can have an arbitrary number of channels.",
    "local": ""
  },
  {
    "origin": "nimages",
    "local": ""
  },
  {
    "origin": "Number of source images.",
    "local": ""
  },
  {
    "origin": "channels",
    "local": ""
  },
  {
    "origin": "The list of channels used to compute the back projection. The number of channels must match the histogram dimensionality. The first array channels are numerated from 0 to images[0].channels()-1 , the second array channels are counted from images[0].channels() to images[0].channels() + images[1].channels()-1, and so on.",
    "local": ""
  },
  {
    "origin": "hist",
    "local": ""
  },
  {
    "origin": "Input histogram that can be dense or sparse.",
    "local": ""
  },
  {
    "origin": "backProject",
    "local": ""
  },
  {
    "origin": "Destination back projection array that is a single-channel array of the same size and depth as images[0] .",
    "local": ""
  },
  {
    "origin": "ranges",
    "local": ""
  },
  {
    "origin": "Array of arrays of the histogram bin boundaries in each dimension. See",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "scale",
    "local": ""
  },
  {
    "origin": "Optional scale factor for the output back projection.",
    "local": ""
  },
  {
    "origin": "uniform",
    "local": ""
  },
  {
    "origin": "Flag indicating whether the histogram is uniform or not (see above).",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "calcBackProject()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "void cv::calcBackProject",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "*",
    "local": ""
  },
  {
    "origin": "images",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "nimages",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const int *",
    "local": ""
  },
  {
    "origin": "channels",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "hist",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "backProject",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const float **",
    "local": ""
  },
  {
    "origin": "ranges",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "scale",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "uniform",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.calcBackProject(",
    "local": ""
  },
  {
    "origin": "images, channels, hist, ranges, scale[, dst]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "calcBackProject()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "void cv::calcBackProject",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "images",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const std::vector&lt; int &gt; &amp;",
    "local": ""
  },
  {
    "origin": "channels",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hist",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const std::vector&lt; float &gt; &amp;",
    "local": ""
  },
  {
    "origin": "ranges",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "scale",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.calcBackProject(",
    "local": ""
  },
  {
    "origin": "images, channels, hist, ranges, scale[, dst]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "calcHist()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "void cv::calcHist",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "*",
    "local": ""
  },
  {
    "origin": "images",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "nimages",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const int *",
    "local": ""
  },
  {
    "origin": "channels",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hist",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "dims",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const int *",
    "local": ""
  },
  {
    "origin": "histSize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const float **",
    "local": ""
  },
  {
    "origin": "ranges",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "uniform",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "accumulate",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "hist",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.calcHist(",
    "local": ""
  },
  {
    "origin": "images, channels, mask, histSize, ranges[, hist[, accumulate]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Calculates a histogram of a set of arrays.",
    "local": ""
  },
  {
    "origin": "The function",
    "local": ""
  },
  {
    "origin": "calculates the histogram of one or more arrays. The elements of a tuple used to increment a histogram bin are taken from the corresponding input arrays at the same location. The sample below shows how to compute a 2D Hue-Saturation histogram for a color image. :",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "images",
    "local": ""
  },
  {
    "origin": "Source arrays. They all should have the same depth, CV_8U, CV_16U or CV_32F , and the same size. Each of them can have an arbitrary number of channels.",
    "local": ""
  },
  {
    "origin": "nimages",
    "local": ""
  },
  {
    "origin": "Number of source images.",
    "local": ""
  },
  {
    "origin": "channels",
    "local": ""
  },
  {
    "origin": "List of the dims channels used to compute the histogram. The first array channels are numerated from 0 to images[0].channels()-1 , the second array channels are counted from images[0].channels() to images[0].channels() + images[1].channels()-1, and so on.",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "Optional mask. If the matrix is not empty, it must be an 8-bit array of the same size as images[i] . The non-zero mask elements mark the array elements counted in the histogram.",
    "local": ""
  },
  {
    "origin": "hist",
    "local": ""
  },
  {
    "origin": "Output histogram, which is a dense or sparse dims -dimensional array.",
    "local": ""
  },
  {
    "origin": "dims",
    "local": ""
  },
  {
    "origin": "Histogram dimensionality that must be positive and not greater than CV_MAX_DIMS (equal to 32 in the current OpenCV version).",
    "local": ""
  },
  {
    "origin": "histSize",
    "local": ""
  },
  {
    "origin": "Array of histogram sizes in each dimension.",
    "local": ""
  },
  {
    "origin": "ranges",
    "local": ""
  },
  {
    "origin": "Array of the dims arrays of the histogram bin boundaries in each dimension. When the histogram is uniform ( uniform =true), then for each dimension i it is enough to specify the lower (inclusive) boundary \\(L_0\\) of the 0-th histogram bin and the upper (exclusive) boundary \\(U_{\\texttt{histSize}[i]-1}\\) for the last histogram bin histSize[i]-1 . That is, in case of a uniform histogram each of ranges[i] is an array of 2 elements. When the histogram is not uniform ( uniform=false ), then each of ranges[i] contains histSize[i]+1 elements: \\(L_0, U_0=L_1, U_1=L_2, ..., U_{\\texttt{histSize[i]}-2}=L_{\\texttt{histSize[i]}-1}, U_{\\texttt{histSize[i]}-1}\\) . The array elements, that are not between \\(L_0\\) and \\(U_{\\texttt{histSize[i]}-1}\\) , are not counted in the histogram.",
    "local": ""
  },
  {
    "origin": "uniform",
    "local": ""
  },
  {
    "origin": "Flag indicating whether the histogram is uniform or not (see above).",
    "local": ""
  },
  {
    "origin": "accumulate",
    "local": ""
  },
  {
    "origin": "Accumulation flag. If it is set, the histogram is not cleared in the beginning when it is allocated. This feature enables you to compute a single histogram from several sets of arrays, or to update the histogram in time.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "calcHist()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "void cv::calcHist",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "*",
    "local": ""
  },
  {
    "origin": "images",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "nimages",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const int *",
    "local": ""
  },
  {
    "origin": "channels",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "hist",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "dims",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const int *",
    "local": ""
  },
  {
    "origin": "histSize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const float **",
    "local": ""
  },
  {
    "origin": "ranges",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "uniform",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "accumulate",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "hist",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.calcHist(",
    "local": ""
  },
  {
    "origin": "images, channels, mask, histSize, ranges[, hist[, accumulate]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "this variant uses SparseMat for output",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "calcHist()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "void cv::calcHist",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "images",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const std::vector&lt; int &gt; &amp;",
    "local": ""
  },
  {
    "origin": "channels",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hist",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const std::vector&lt; int &gt; &amp;",
    "local": ""
  },
  {
    "origin": "histSize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const std::vector&lt; float &gt; &amp;",
    "local": ""
  },
  {
    "origin": "ranges",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "accumulate",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "hist",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.calcHist(",
    "local": ""
  },
  {
    "origin": "images, channels, mask, histSize, ranges[, hist[, accumulate]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "compareHist()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "double cv::compareHist",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "H1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "H2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "method",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.compareHist(",
    "local": ""
  },
  {
    "origin": "H1, H2, method",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Compares two histograms.",
    "local": ""
  },
  {
    "origin": "The function",
    "local": ""
  },
  {
    "origin": "compares two dense or two sparse histograms using the specified method.",
    "local": ""
  },
  {
    "origin": "The function returns \\(d(H_1, H_2)\\) .",
    "local": ""
  },
  {
    "origin": "While the function works well with 1-, 2-, 3-dimensional dense histograms, it may not be suitable for high-dimensional sparse histograms. In such histograms, because of aliasing and sampling problems, the coordinates of non-zero histogram bins can slightly shift. To compare such histograms or more general sparse configurations of weighted points, consider using the",
    "local": ""
  },
  {
    "origin": "function.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "H1",
    "local": ""
  },
  {
    "origin": "First compared histogram.",
    "local": ""
  },
  {
    "origin": "H2",
    "local": ""
  },
  {
    "origin": "Second compared histogram of the same size as H1 .",
    "local": ""
  },
  {
    "origin": "method",
    "local": ""
  },
  {
    "origin": "Comparison method, see",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "compareHist()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "double cv::compareHist",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "H1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "H2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "method",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.compareHist(",
    "local": ""
  },
  {
    "origin": "H1, H2, method",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "createCLAHE()",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; cv::createCLAHE",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "clipLimit",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "tileGridSize",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.createCLAHE(",
    "local": ""
  },
  {
    "origin": "[, clipLimit[, tileGridSize]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Creates a smart pointer to a",
    "local": ""
  },
  {
    "origin": "class and initializes it.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "clipLimit",
    "local": ""
  },
  {
    "origin": "Threshold for contrast limiting.",
    "local": ""
  },
  {
    "origin": "tileGridSize",
    "local": ""
  },
  {
    "origin": "Size of grid for histogram equalization. Input image will be divided into equally sized rectangular tiles. tileGridSize defines the number of tiles in row and column.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "EMD()",
    "local": ""
  },
  {
    "origin": "float cv::EMD",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "signature1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "signature2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "distType",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "cost",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "float *",
    "local": ""
  },
  {
    "origin": "lowerBound",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "flow",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Computes the \"minimal work\" distance between two weighted point configurations.",
    "local": ""
  },
  {
    "origin": "The function computes the earth mover distance and/or a lower boundary of the distance between the two weighted point configurations. One of the applications described in",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "is multi-dimensional histogram comparison for image retrieval. EMD is a transportation problem that is solved using some modification of a simplex algorithm, thus the complexity is exponential in the worst case, though, on average it is much faster. In the case of a real metric the lower boundary can be calculated even faster (using linear-time algorithm) and it can be used to determine roughly whether the two signatures are far enough so that they cannot relate to the same object.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "signature1",
    "local": ""
  },
  {
    "origin": "First signature, a \\(\\texttt{size1}\\times \\texttt{dims}+1\\) floating-point matrix. Each row stores the point weight followed by the point coordinates. The matrix is allowed to have a single column (weights only) if the user-defined cost matrix is used. The weights must be non-negative and have at least one non-zero value.",
    "local": ""
  },
  {
    "origin": "signature2",
    "local": ""
  },
  {
    "origin": "Second signature of the same format as signature1 , though the number of rows may be different. The total weights may be different. In this case an extra \"dummy\" point is added to either signature1 or signature2. The weights must be non-negative and have at least one non-zero value.",
    "local": ""
  },
  {
    "origin": "distType",
    "local": ""
  },
  {
    "origin": "Used metric. See",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "cost",
    "local": ""
  },
  {
    "origin": "User-defined \\(\\texttt{size1}\\times \\texttt{size2}\\) cost matrix. Also, if a cost matrix is used, lower boundary lowerBound cannot be calculated because it needs a metric function.",
    "local": ""
  },
  {
    "origin": "lowerBound",
    "local": ""
  },
  {
    "origin": "flow",
    "local": ""
  },
  {
    "origin": "Resultant \\(\\texttt{size1} \\times \\texttt{size2}\\) flow matrix: \\(\\texttt{flow}_{i,j}\\) is a flow from \\(i\\) -th point of signature1 to \\(j\\) -th point of signature2 .",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "equalizeHist()",
    "local": ""
  },
  {
    "origin": "void cv::equalizeHist",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.equalizeHist(",
    "local": ""
  },
  {
    "origin": "src[, dst]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Equalizes the histogram of a grayscale image.",
    "local": ""
  },
  {
    "origin": "The function equalizes the histogram of the input image using the following algorithm:",
    "local": ""
  },
  {
    "origin": "Calculate the histogram \\(H\\) for src .",
    "local": ""
  },
  {
    "origin": "Compute the integral of the histogram:",
    "local": ""
  },
  {
    "origin": "\\[H'_i = \\sum _{0 \\le j &lt; i} H(j)\\]",
    "local": ""
  },
  {
    "origin": "Transform the image using \\(H'\\) as a look-up table: \\(\\texttt{dst}(x,y) = H'(\\texttt{src}(x,y))\\)",
    "local": ""
  },
  {
    "origin": "The algorithm normalizes the brightness and increases the contrast of the image.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Source 8-bit single channel image.",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "Destination image of the same size and type as src .",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "wrapperEMD()",
    "local": ""
  },
  {
    "origin": "float cv::wrapperEMD",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "signature1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "signature2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "distType",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "cost",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt; float &gt;",
    "local": ""
  },
  {
    "origin": "lowerBound",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "flow",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval, lowerBound, flow",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.EMD(",
    "local": ""
  },
  {
    "origin": "signature1, signature2, distType[, cost[, lowerBound[, flow]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:40 for OpenCV by",
    "local": ""
  }
]