[
  {
    "origin": "OpenCV: cv::gapi Namespace Reference",
    "local": "OpenCV:cv:：gapi命名空间引用"
  },
  {
    "origin": "OpenCV",
    "local": "打开CV"
  },
  {
    "origin": "Open Source Computer Vision",
    "local": "开源计算机视觉"
  },
  {
    "origin": "Namespaces",
    "local": "名称空间"
  },
  {
    "origin": "Classes",
    "local": "班级"
  },
  {
    "origin": "Enumerations",
    "local": "枚举"
  },
  {
    "origin": "Functions",
    "local": "功能"
  },
  {
    "origin": "cv::gapi Namespace Reference",
    "local": "cv:：gapi命名空间引用"
  },
  {
    "origin": "»",
    "local": "»"
  },
  {
    "origin": "»",
    "local": "»"
  },
  {
    "origin": "» |",
    "local": "» |"
  },
  {
    "origin": "Namespaces",
    "local": "名称空间"
  },
  {
    "origin": "Classes",
    "local": "班级"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "struct",
    "local": "结构"
  },
  {
    "origin": "Special network type.",
    "local": "特殊网络类型。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "A container class for heterogeneous kernel implementation collections and graph transformations.",
    "local": "用于异构内核实现集合和图形转换的容器类。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "struct",
    "local": "结构"
  },
  {
    "origin": "A container class for network configurations. Similar to GKernelPackage.Use",
    "local": "用于网络配置的容器类。类似于GKernelPackage。使用"
  },
  {
    "origin": "to construct this object.",
    "local": "来构造这个对象。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "struct",
    "local": "结构"
  },
  {
    "origin": "struct",
    "local": "结构"
  },
  {
    "origin": "Structure for the Kalman filter's initialization parameters.",
    "local": "卡尔曼滤波器初始化参数的结构。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "struct",
    "local": "结构"
  },
  {
    "origin": "cv::use_only() is a special combinator which hints G-API to use only kernels specified in",
    "local": "是一个特殊的组合符，它提示G-API只使用"
  },
  {
    "origin": "(and not to extend kernels available by default with that package).",
    "local": "（并且不扩展默认情况下该包提供的内核）。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Enumerations",
    "local": "枚举"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "Functions",
    "local": "功能"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2)",
    "local": "&amp；（src2）"
  },
  {
    "origin": "Calculates the per-element absolute difference between two matrices.",
    "local": "计算两个矩阵之间的每元素绝对差。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, const",
    "local": "&amp；SRC，const"
  },
  {
    "origin": "&amp;c)",
    "local": "&amp；（三）"
  },
  {
    "origin": "Calculates absolute value of matrix elements.",
    "local": "计算矩阵元素的绝对值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2, int ddepth=-1)",
    "local": "&amp；src2，int ddepth=-1）"
  },
  {
    "origin": "Calculates the per-element sum of two matrices.",
    "local": "计算两个矩阵的每元素和。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;c, int ddepth=-1)",
    "local": "&amp；c、 int ddepth=-1）"
  },
  {
    "origin": "Calculates the per-element sum of matrix and given scalar.",
    "local": "计算矩阵和给定标量的每元素和。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;c, const",
    "local": "&amp；c、 常数"
  },
  {
    "origin": "&amp;src1, int ddepth=-1)",
    "local": "&amp；src1，int ddepth=-1）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, double alpha, const",
    "local": "&amp；src1，双α，常数"
  },
  {
    "origin": "&amp;src2, double beta, double gamma, int ddepth=-1)",
    "local": "&amp；src2，双β，双γ，int ddepth=-1）"
  },
  {
    "origin": "Calculates the weighted sum of two matrices.",
    "local": "计算两个矩阵的加权和。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, const",
    "local": "&amp；SRC，const"
  },
  {
    "origin": "&amp;bsParams)",
    "local": "&amp；b参数）"
  },
  {
    "origin": "Gaussian Mixture-based or K-nearest neighbours-based Background/Foreground Segmentation",
    "local": "基于高斯混合或K近邻的背景/前景分割"
  },
  {
    "origin": ". The operation generates a foreground mask.",
    "local": ". 该操作生成前景掩码。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src_gr)",
    "local": "&amp；src\\ U gr公司）"
  },
  {
    "origin": "Converts an image from BayerGR color space to RGB. The function converts an input image from BayerGR color space to RGB. The conventional ranges for G, R, and B channel values are 0 to 255.",
    "local": "将图像从颜色空间转换为RGB。该函数用于将输入图像从颜色空间转换为RGB。G、R和B通道值的常规范围为0到255。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src)",
    "local": "&amp；（src）"
  },
  {
    "origin": "Converts an image from BGR color space to gray-scaled.",
    "local": "将图像从BGR颜色空间转换为灰度。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src)",
    "local": "&amp；（src）"
  },
  {
    "origin": "Converts an image from BGR color space to I420 color space.",
    "local": "将图像从BGR颜色空间转换为I420颜色空间。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src)",
    "local": "&amp；（src）"
  },
  {
    "origin": "Converts an image from BGR color space to LUV color space.",
    "local": "将图像从BGR颜色空间转换为LUV颜色空间。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src)",
    "local": "&amp；（src）"
  },
  {
    "origin": "Converts an image from BGR color space to RGB color space.",
    "local": "将图像从BGR颜色空间转换为RGB颜色空间。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src)",
    "local": "&amp；（src）"
  },
  {
    "origin": "Converts an image from BGR color space to YUV color space.",
    "local": "将图像从BGR颜色空间转换为YUV颜色空间。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, int d, double sigmaColor, double sigmaSpace, int borderType=",
    "local": "&amp；src，int d，双sigmaColor，双sigmaSpace，int borderType="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Applies the bilateral filter to an image.",
    "local": "对图像应用双边滤波器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;results)",
    "local": "&amp；结果）"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;out)",
    "local": "&amp；输出）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2)",
    "local": "&amp；（src2）"
  },
  {
    "origin": "computes bitwise conjunction of the two matrixes (src1 &amp; src2) Calculates the per-element bit-wise logical conjunction of two matrices of the same size.",
    "local": "计算两个矩阵（src1&amp；src2）计算两个大小相同的矩阵的逐元素逐位逻辑连接。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2)",
    "local": "&amp；（src2）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src)",
    "local": "&amp；（src）"
  },
  {
    "origin": "Inverts every bit of an array.",
    "local": "反转数组的每一位。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2)",
    "local": "&amp；（src2）"
  },
  {
    "origin": "computes bitwise disjunction of the two matrixes (src1 | src2) Calculates the per-element bit-wise logical disjunction of two matrices of the same size.",
    "local": "计算两个矩阵的逐位析取（src1 | src2）计算两个大小相同的矩阵的逐元素逐位逻辑析取。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2)",
    "local": "&amp；（src2）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2)",
    "local": "&amp；（src2）"
  },
  {
    "origin": "computes bitwise logical \"exclusive or\" of the two matrixes (src1 ^ src2) Calculates the per-element bit-wise logical \"exclusive or\" of two matrices of the same size.",
    "local": "计算两个矩阵的按位逻辑“异或”（src1^src2）计算两个大小相同的矩阵的按位逻辑“异或”。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2)",
    "local": "&amp；（src2）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, const",
    "local": "&amp；SRC，const"
  },
  {
    "origin": "&amp;ksize, const",
    "local": "&amp；K尺寸，常数"
  },
  {
    "origin": "&amp;anchor=",
    "local": "&amp；锚="
  },
  {
    "origin": "(-1,-1), int borderType=",
    "local": "（-1，-1），int borderType="
  },
  {
    "origin": ", const",
    "local": "，常量"
  },
  {
    "origin": "&amp;borderValue=",
    "local": "&amp；边界值="
  },
  {
    "origin": "(0))",
    "local": "(0))"
  },
  {
    "origin": "Blurs an image using the normalized box filter.",
    "local": "使用规范化的长方体过滤器模糊图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src)",
    "local": "&amp；（src）"
  },
  {
    "origin": "Calculates the up-right bounding rectangle of a point set or non-zero pixels of gray-scale image.",
    "local": "计算点集的右上边界矩形或灰度图像的非零像素。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;src)",
    "local": "&燃气轮机&amp；（src）"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;src)",
    "local": "&燃气轮机&amp；（src）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, int dtype, const",
    "local": "&amp；src，int dtype，常量"
  },
  {
    "origin": "&amp;ksize, const",
    "local": "&amp；K尺寸，常数"
  },
  {
    "origin": "&amp;anchor=",
    "local": "&amp；锚="
  },
  {
    "origin": "(-1,-1), bool",
    "local": "（-1，-1），布尔"
  },
  {
    "origin": "=true, int borderType=",
    "local": "=真，int borderType="
  },
  {
    "origin": ", const",
    "local": "，常量"
  },
  {
    "origin": "&amp;borderValue=",
    "local": "&amp；边界值="
  },
  {
    "origin": "(0))",
    "local": "(0))"
  },
  {
    "origin": "Blurs an image using the box filter.",
    "local": "使用长方体过滤器模糊图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "std::tuple&lt;",
    "local": "标准：：元组&lt；"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;,",
    "local": "&gt；，"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;img, const",
    "local": "&amp；IMG，const"
  },
  {
    "origin": "&amp;winSize, const",
    "local": "&amp；winSize，常量"
  },
  {
    "origin": "&amp;maxLevel, bool withDerivatives=true, int pyrBorder=",
    "local": "&amp；maxLevel，bool with derivatives=真，int="
  },
  {
    "origin": ", int derivBorder=",
    "local": "int派生顺序="
  },
  {
    "origin": ", bool tryReuseInputImage=true)",
    "local": "，bool tryReuseInputImage=真）"
  },
  {
    "origin": "Constructs the image pyramid which can be passed to calcOpticalFlowPyrLK.",
    "local": "构造可以传递给calcOpticalFlowPyrLK的图像金字塔。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "std::tuple&lt;",
    "local": "标准：：元组&lt；"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;,",
    "local": "&gt；，"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;,",
    "local": "&gt；，"
  },
  {
    "origin": "&lt; float &gt; &gt;",
    "local": "&lt；浮动&gt；&gt；燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;prevImg, const",
    "local": "&amp；Previmg，const"
  },
  {
    "origin": "&amp;nextImg, const",
    "local": "&amp；NextImg，const"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;prevPts, const",
    "local": "&gt；gt；amp；前文，常量"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;predPts, const",
    "local": "&燃气轮机&amp；预测，常数"
  },
  {
    "origin": "&amp;winSize=",
    "local": "&amp；winSize公司="
  },
  {
    "origin": "(21, 21), const",
    "local": "（21.21），常数"
  },
  {
    "origin": "&amp;maxLevel=3, const",
    "local": "&amp；最大电平=3，常数"
  },
  {
    "origin": "&amp;criteria=",
    "local": "&amp；标准="
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ", 30, 0.01), int flags=0, double minEigThresh=1e-4)",
    "local": "，30，0.01），int flags=0，double minEigThresh=1e-4）"
  },
  {
    "origin": "Calculates an optical flow for a sparse feature set using the iterative Lucas-Kanade method with pyramids.",
    "local": "使用带金字塔的迭代Lucas-Kanade方法计算稀疏特征集的光流。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "std::tuple&lt;",
    "local": "标准：：元组&lt；"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;,",
    "local": "&gt；，"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;,",
    "local": "&gt；，"
  },
  {
    "origin": "&lt; float &gt; &gt;",
    "local": "&lt；浮动&gt；&gt；燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;prevPyr, const",
    "local": "&gt；gt；amp；普雷维，康斯特"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;nextPyr, const",
    "local": "&gt；gt；amp；下一年，康斯特"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;prevPts, const",
    "local": "&gt；gt；amp；前文，常量"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;predPts, const",
    "local": "&燃气轮机&amp；预测，常数"
  },
  {
    "origin": "&amp;winSize=",
    "local": "&amp；winSize公司="
  },
  {
    "origin": "(21, 21), const",
    "local": "（21.21），常数"
  },
  {
    "origin": "&amp;maxLevel=3, const",
    "local": "&amp；最大电平=3，常数"
  },
  {
    "origin": "&amp;criteria=",
    "local": "&amp；标准="
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ", 30, 0.01), int flags=0, double minEigThresh=1e-4)",
    "local": "，30，0.01），int flags=0，double minEigThresh=1e-4）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;image, double threshold1, double threshold2, int apertureSize=3, bool L2gradient=false)",
    "local": "&amp；图像，双阈值1，双阈值2，int apertureSize=3，bool L2gradient=false）"
  },
  {
    "origin": "Finds edges in an image using the Canny algorithm.",
    "local": "使用Canny算法在图像中查找边缘。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "std::tuple&lt;",
    "local": "标准：：元组&lt；"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;x, const",
    "local": "&amp；x、 常数"
  },
  {
    "origin": "&amp;y, bool angleInDegrees=false)",
    "local": "&amp；布尔角=假）"
  },
  {
    "origin": "Calculates the magnitude and angle of 2D vectors.",
    "local": "计算二维矢量的幅值和角度。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2)",
    "local": "&amp；（src2）"
  },
  {
    "origin": "Performs the per-element comparison of two matrices checking if elements from first matrix are equal to elements in second.",
    "local": "执行两个矩阵的每元素比较，检查第一个矩阵中的元素是否等于第二个矩阵中的元素。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2)",
    "local": "&amp；（src2）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2)",
    "local": "&amp；（src2）"
  },
  {
    "origin": "Performs the per-element comparison of two matrices checking if elements from first matrix are greater or equal compare to elements in second.",
    "local": "执行两个矩阵的每元素比较，检查第一个矩阵中的元素是否大于或等于第二个矩阵中的元素。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2)",
    "local": "&amp；（src2）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2)",
    "local": "&amp；（src2）"
  },
  {
    "origin": "Performs the per-element comparison of two matrices checking if elements from first matrix are greater compare to elements in second.",
    "local": "执行两个矩阵的每元素比较，检查第一个矩阵中的元素是否大于第二个矩阵中的元素。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2)",
    "local": "&amp；（src2）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2)",
    "local": "&amp；（src2）"
  },
  {
    "origin": "Performs the per-element comparison of two matrices checking if elements from first matrix are less or equal compare to elements in second.",
    "local": "执行两个矩阵的每元素比较，检查第一个矩阵中的元素是否小于或等于第二个矩阵中的元素。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2)",
    "local": "&amp；（src2）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2)",
    "local": "&amp；（src2）"
  },
  {
    "origin": "Performs the per-element comparison of two matrices checking if elements from first matrix are less than elements in second.",
    "local": "执行两个矩阵的每元素比较，检查第一个矩阵中的元素是否少于第二个矩阵中的元素。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2)",
    "local": "&amp；（src2）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2)",
    "local": "&amp；（src2）"
  },
  {
    "origin": "Performs the per-element comparison of two matrices checking if elements from first matrix are not equal to elements in second.",
    "local": "执行两个矩阵的每元素比较，检查第一个矩阵中的元素是否与第二个矩阵中的元素不相等。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2)",
    "local": "&amp；（src2）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;lhs, const",
    "local": "&amp；左侧，常量"
  },
  {
    "origin": "&amp;rhs)",
    "local": "&amp；（右侧）"
  },
  {
    "origin": "template&lt;typename... Ps&gt;",
    "local": "模板&lt；类型名。。。Ps&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;a, const",
    "local": "&amp；a、 常数"
  },
  {
    "origin": "&amp;b, Ps &amp;&amp;... rest)",
    "local": "&amp；b、 Ps&amp；amp；。。。休息）"
  },
  {
    "origin": "Combines multiple G-API kernel packages into one.",
    "local": "将多个G-API内核包组合成一个。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2)",
    "local": "&amp；（src2）"
  },
  {
    "origin": "Applies horizontal concatenation to given matrices.",
    "local": "对给定的矩阵应用水平连接。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const std::vector&lt;",
    "local": "（const std：：向量&lt；"
  },
  {
    "origin": "&gt; &amp;v)",
    "local": "&燃气轮机&amp；五）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2)",
    "local": "&amp；（src2）"
  },
  {
    "origin": "Applies vertical concatenation to given matrices.",
    "local": "对给定的矩阵应用垂直连接。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const std::vector&lt;",
    "local": "（const std：：向量&lt；"
  },
  {
    "origin": "&gt; &amp;v)",
    "local": "&燃气轮机&amp；五）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, int rdepth, double alpha=1, double beta=0)",
    "local": "&amp；src，int rdepth，双α=1，双β=0）"
  },
  {
    "origin": "Converts a matrix to another data depth with optional scaling.",
    "local": "使用可选缩放将矩阵转换为另一个数据深度。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;in)",
    "local": "&amp；英寸）"
  },
  {
    "origin": "Makes a copy of the input image. Note that this copy may be not real (no actual data copied). Use this function to maintain graph contracts, e.g when graph's input needs to be passed directly to output, like in Streaming mode.",
    "local": "复制输入图像。请注意，此副本可能不是真实的（未复制实际数据）。使用此函数可维护图形契约，例如，当图形的输入需要直接传递到输出时（如在流模式下）。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;in)",
    "local": "&amp；英寸）"
  },
  {
    "origin": "Makes a copy of the input frame. Note that this copy may be not real (no actual data copied). Use this function to maintain graph contracts, e.g when graph's input needs to be passed directly to output, like in Streaming mode.",
    "local": "复制输入帧。请注意，此副本可能不是真实的（未复制实际数据）。使用此函数可维护图形契约，例如，当图形的输入需要直接传递到输出时（如在流模式下）。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt; int &gt;",
    "local": "&lt；内部&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src)",
    "local": "&amp；（src）"
  },
  {
    "origin": "Counts non-zero array elements.",
    "local": "计数非零数组元素。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, const",
    "local": "&amp；SRC，const"
  },
  {
    "origin": "&amp;rect)",
    "local": "&amp；矩形）"
  },
  {
    "origin": "Crops a 2D matrix.",
    "local": "裁剪二维矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "static T",
    "local": "静态T"
  },
  {
    "origin": "(const std::vector&lt; char &gt; &amp;p)",
    "local": "（const std：：向量&lt；字符&gt&amp；（p）"
  },
  {
    "origin": "template&lt;&gt;",
    "local": "模板&lt&燃气轮机；"
  },
  {
    "origin": "(const std::vector&lt; char &gt; &amp;p)",
    "local": "（const std：：向量&lt；字符&gt&amp；（p）"
  },
  {
    "origin": "template&lt;&gt;",
    "local": "模板&lt&燃气轮机；"
  },
  {
    "origin": "(const std::vector&lt; char &gt; &amp;p)",
    "local": "（const std：：向量&lt；字符&gt&amp；（p）"
  },
  {
    "origin": "template&lt;&gt;",
    "local": "模板&lt&燃气轮机；"
  },
  {
    "origin": "(const std::vector&lt; char &gt; &amp;p)",
    "local": "（const std：：向量&lt；字符&gt&amp；（p）"
  },
  {
    "origin": "template&lt;&gt;",
    "local": "模板&lt&燃气轮机；"
  },
  {
    "origin": "std::vector&lt; std::string &gt;",
    "local": "标准：：向量&lt；标准：：字符串&gt；"
  },
  {
    "origin": "(const std::vector&lt; char &gt; &amp;p)",
    "local": "（const std：：向量&lt；字符&gt&amp；（p）"
  },
  {
    "origin": "template&lt;typename T , typename... Types&gt;",
    "local": "模板&lt；键入T，键入名称。。。类型"
  },
  {
    "origin": "std::enable_if&lt; std::is_same&lt; T,",
    "local": "std：：启用\\u if&lt；std：：是否相同&lt；T，"
  },
  {
    "origin": "&gt;::value,",
    "local": "&gt；：：价值观，"
  },
  {
    "origin": "&gt;::type",
    "local": "&gt；：：类型"
  },
  {
    "origin": "(const std::vector&lt; char &gt; &amp;p)",
    "local": "（const std：：向量&lt；字符&gt&amp；（p）"
  },
  {
    "origin": "template&lt;typename T , typename RMatAdapterType &gt;",
    "local": "模板&lt；类型T，类型名称适配器类型&gt；"
  },
  {
    "origin": "std::enable_if&lt; std::is_same&lt; T,",
    "local": "std：：启用\\u if&lt；std：：是否相同&lt；T，"
  },
  {
    "origin": "&gt;::value,",
    "local": "&gt；：：价值观，"
  },
  {
    "origin": "&gt;::type",
    "local": "&gt；：：类型"
  },
  {
    "origin": "(const std::vector&lt; char &gt; &amp;p)",
    "local": "（const std：：向量&lt；字符&gt&amp；（p）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, const",
    "local": "&amp；SRC，const"
  },
  {
    "origin": "&amp;kernel, const",
    "local": "&amp；内核，常量"
  },
  {
    "origin": "&amp;anchor=",
    "local": "&amp；锚="
  },
  {
    "origin": "(-1,-1), int iterations=1, int borderType=",
    "local": "（-1，-1），int iterations=1，int borderType="
  },
  {
    "origin": ", const",
    "local": "，常量"
  },
  {
    "origin": "&amp;borderValue=",
    "local": "&amp；边界值="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Dilates an image by using a specific structuring element.",
    "local": "通过使用特定的结构元素来扩展图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, int iterations=1, int borderType=",
    "local": "&amp；src，int iterations=1，int borderType="
  },
  {
    "origin": ", const",
    "local": "，常量"
  },
  {
    "origin": "&amp;borderValue=",
    "local": "&amp；边界值="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Dilates an image by using 3 by 3 rectangular structuring element.",
    "local": "使用3×3的矩形结构元素来扩展图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2, double scale, int ddepth=-1)",
    "local": "&amp；src2，双刻度，int ddepth=-1）"
  },
  {
    "origin": "Performs per-element division of two matrices.",
    "local": "对两个矩阵按元素进行除法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, const",
    "local": "&amp；SRC，const"
  },
  {
    "origin": "&amp;divisor, double scale, int ddepth=-1)",
    "local": "&amp；除数，双刻度，int ddepth=-1）"
  },
  {
    "origin": "Divides matrix by scalar.",
    "local": "用标量除矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;divident, const",
    "local": "&amp；分配，常数"
  },
  {
    "origin": "&amp;src, double scale, int ddepth=-1)",
    "local": "&amp；src，双刻度，int ddepth=-1）"
  },
  {
    "origin": "Divides scalar by matrix.",
    "local": "将标量除以矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src)",
    "local": "&amp；（src）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, const",
    "local": "&amp；SRC，const"
  },
  {
    "origin": "&amp;kernel, const",
    "local": "&amp；内核，常量"
  },
  {
    "origin": "&amp;anchor=",
    "local": "&amp；锚="
  },
  {
    "origin": "(-1,-1), int iterations=1, int borderType=",
    "local": "（-1，-1），int iterations=1，int borderType="
  },
  {
    "origin": ", const",
    "local": "，常量"
  },
  {
    "origin": "&amp;borderValue=",
    "local": "&amp；边界值="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Erodes an image by using a specific structuring element.",
    "local": "使用特定的结构元素侵蚀图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, int iterations=1, int borderType=",
    "local": "&amp；src，int iterations=1，int borderType="
  },
  {
    "origin": ", const",
    "local": "，常量"
  },
  {
    "origin": "&amp;borderValue=",
    "local": "&amp；边界值="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Erodes an image by using 3 by 3 rectangular structuring element.",
    "local": "用3×3的矩形结构元素腐蚀图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, int ddepth, const",
    "local": "&amp；src，int ddepth，const"
  },
  {
    "origin": "&amp;kernel, const",
    "local": "&amp；内核，常量"
  },
  {
    "origin": "&amp;anchor=",
    "local": "&amp；锚="
  },
  {
    "origin": "(-1,-1), const",
    "local": "（-1，-1），常数"
  },
  {
    "origin": "&amp;delta=",
    "local": "&amp；三角洲="
  },
  {
    "origin": "(0), int borderType=",
    "local": "（0），int borderType="
  },
  {
    "origin": ", const",
    "local": "，常量"
  },
  {
    "origin": "&amp;borderValue=",
    "local": "&amp；边界值="
  },
  {
    "origin": "(0))",
    "local": "(0))"
  },
  {
    "origin": "Convolves an image with the kernel.",
    "local": "将图像与内核卷积。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &gt;",
    "local": "&燃气轮机&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, const",
    "local": "&amp；SRC，const"
  },
  {
    "origin": "mode, const",
    "local": "模式，常量"
  },
  {
    "origin": "method, const",
    "local": "方法，常量"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;offset)",
    "local": "&燃气轮机&amp；偏移量）"
  },
  {
    "origin": "Finds contours in a binary image.",
    "local": "在二值图像中查找轮廓。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &gt;",
    "local": "&燃气轮机&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, const",
    "local": "&amp；SRC，const"
  },
  {
    "origin": "mode, const",
    "local": "模式，常量"
  },
  {
    "origin": "method)",
    "local": "方法）"
  },
  {
    "origin": "std::tuple&lt;",
    "local": "标准：：元组&lt；"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &gt;,",
    "local": "&燃气轮机&gt；，"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &gt;",
    "local": "&燃气轮机&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, const",
    "local": "&amp；SRC，const"
  },
  {
    "origin": "mode, const",
    "local": "模式，常量"
  },
  {
    "origin": "method, const",
    "local": "方法，常量"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;offset)",
    "local": "&燃气轮机&amp；偏移量）"
  },
  {
    "origin": "Finds contours and their hierarchy in a binary image.",
    "local": "在二值图像中查找轮廓及其层次结构。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "std::tuple&lt;",
    "local": "标准：：元组&lt；"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &gt;,",
    "local": "&燃气轮机&gt；，"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &gt;",
    "local": "&燃气轮机&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, const",
    "local": "&amp；SRC，const"
  },
  {
    "origin": "mode, const",
    "local": "模式，常量"
  },
  {
    "origin": "method)",
    "local": "方法）"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, const",
    "local": "&amp；SRC，const"
  },
  {
    "origin": "distType, const double param=0., const double reps=0., const double aeps=0.)",
    "local": "distType，const double param=0.，const double reps=0.，const double aeps=0.）"
  },
  {
    "origin": "Fits a line to a 2D point set.",
    "local": "将直线拟合到二维点集。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;src, const",
    "local": "&燃气轮机&amp；src，施工"
  },
  {
    "origin": "distType, const double param=0., const double reps=0., const double aeps=0.)",
    "local": "distType，const double param=0.，const double reps=0.，const double aeps=0.）"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;src, const",
    "local": "&燃气轮机&amp；src，施工"
  },
  {
    "origin": "distType, const double param=0., const double reps=0., const double aeps=0.)",
    "local": "distType，const double param=0.，const double reps=0.，const double aeps=0.）"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;src, const",
    "local": "&燃气轮机&amp；src，施工"
  },
  {
    "origin": "distType, const double param=0., const double reps=0., const double aeps=0.)",
    "local": "distType，const double param=0.，const double reps=0.，const double aeps=0.）"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, const",
    "local": "&amp；SRC，const"
  },
  {
    "origin": "distType, const double param=0., const double reps=0., const double aeps=0.)",
    "local": "distType，const double param=0.，const double reps=0.，const double aeps=0.）"
  },
  {
    "origin": "Fits a line to a 3D point set.",
    "local": "将直线拟合到三维点集。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;src, const",
    "local": "&燃气轮机&amp；src，施工"
  },
  {
    "origin": "distType, const double param=0., const double reps=0., const double aeps=0.)",
    "local": "distType，const double param=0.，const double reps=0.，const double aeps=0.）"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;src, const",
    "local": "&燃气轮机&amp；src，施工"
  },
  {
    "origin": "distType, const double param=0., const double reps=0., const double aeps=0.)",
    "local": "distType，const double param=0.，const double reps=0.，const double aeps=0.）"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;src, const",
    "local": "&燃气轮机&amp；src，施工"
  },
  {
    "origin": "distType, const double param=0., const double reps=0., const double aeps=0.)",
    "local": "distType，const double param=0.，const double reps=0.，const double aeps=0.）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, int flipCode)",
    "local": "&amp；SRC，int Flipcode）"
  },
  {
    "origin": "Flips a 2D matrix around vertical, horizontal, or both axes.",
    "local": "围绕垂直、水平或两个轴翻转二维矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, const",
    "local": "&amp；SRC，const"
  },
  {
    "origin": "&amp;ksize, double sigmaX, double sigmaY=0, int borderType=",
    "local": "&amp；ksize，double sigmaX，double sigmaY=0，int borderType="
  },
  {
    "origin": ", const",
    "local": "，常量"
  },
  {
    "origin": "&amp;borderValue=",
    "local": "&amp；边界值="
  },
  {
    "origin": "(0))",
    "local": "(0))"
  },
  {
    "origin": "Blurs an image using a Gaussian filter.",
    "local": "使用高斯滤波器模糊图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "&lt; T &gt;",
    "local": "&lt；T&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;args)",
    "local": "&amp；参数）"
  },
  {
    "origin": "Retrieves particular compilation argument by its type from",
    "local": "从中按类型检索特定编译参数"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;image, int maxCorners, double qualityLevel, double minDistance, const",
    "local": "&amp；图像，int maxCorners，双质量级，双距离，常量"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "(), int blockSize=3, bool useHarrisDetector=false, double k=0.04)",
    "local": "（），int blockSize=3，bool usehrisdetector=false，double k=0.04）"
  },
  {
    "origin": "Determines strong corners on an image.",
    "local": "确定图像上的强角点。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src)",
    "local": "&amp；（src）"
  },
  {
    "origin": "Converts an image from I420 color space to BGR color space.",
    "local": "将图像从I420颜色空间转换为BGR颜色空间。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src)",
    "local": "&amp；（src）"
  },
  {
    "origin": "Converts an image from I420 color space to BGR color space.",
    "local": "将图像从I420颜色空间转换为BGR颜色空间。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename Net , typename T &gt;",
    "local": "模板&lt；类型Net，类型T&gt；"
  },
  {
    "origin": "Net::Result",
    "local": "净：：结果"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; roi, T in)",
    "local": "&燃气轮机；投资回报率（T英寸）"
  },
  {
    "origin": "Calculates response for the specified network (template parameter) for the specified region in the source image. Currently expects a single-input network only.",
    "local": "计算源映像中指定区域的指定网络（模板参数）的响应。目前只需要一个输入网络。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename Net , typename... Args&gt;",
    "local": "模板&lt；键入Net，键入Name。。。Args&gt；"
  },
  {
    "origin": "Net::ResultL",
    "local": "网络：：结果"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; roi, Args &amp;&amp;... args)",
    "local": "&燃气轮机；投资回报率&amp；。。。参数）"
  },
  {
    "origin": "Calculates responses for the specified network (template parameter) for every region in the source image.",
    "local": "为源图像中的每个区域计算指定网络（模板参数）的响应。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename Net , typename... Args&gt;",
    "local": "模板&lt；键入Net，键入Name。。。Args&gt；"
  },
  {
    "origin": "Net::Result",
    "local": "净：：结果"
  },
  {
    "origin": "(Args &amp;&amp;... args)",
    "local": "（Args和&amp；。。。参数）"
  },
  {
    "origin": "Calculates response for the specified network (template parameter) given the input data.",
    "local": "计算给定输入数据的指定网络（模板参数）的响应。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename T = Generic&gt;",
    "local": "模板&lt；typename T=通用&gt；"
  },
  {
    "origin": "(const std::string &amp;tag, const",
    "local": "（const std：：字符串&amp；标签，常量"
  },
  {
    "origin": "&amp;inputs)",
    "local": "&amp；输入）"
  },
  {
    "origin": "Calculates response for generic network.",
    "local": "计算通用网络的响应。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename T = Generic&gt;",
    "local": "模板&lt；typename T=通用&gt；"
  },
  {
    "origin": "(const std::string &amp;tag, const",
    "local": "（const std：：字符串&amp；标签，常量"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;roi, const",
    "local": "&燃气轮机&amp；投资回报率，常数"
  },
  {
    "origin": "&amp;inputs)",
    "local": "&amp；输入）"
  },
  {
    "origin": "Calculates response for the generic network for the specified region in the source image. Currently expects a single-input network only.",
    "local": "计算源映像中指定区域的通用网络响应。目前只需要一个输入网络。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename T = Generic&gt;",
    "local": "模板&lt；typename T=通用&gt；"
  },
  {
    "origin": "(const std::string &amp;tag, const",
    "local": "（const std：：字符串&amp；标签，常量"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;rois, const",
    "local": "&gt；&个安培；国王，常数"
  },
  {
    "origin": "&amp;inputs)",
    "local": "&amp；输入）"
  },
  {
    "origin": "Calculates responses for the specified network for every region in the source image.",
    "local": "为源映像中的每个区域计算指定网络的响应。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename Net , typename T , typename... Args&gt;",
    "local": "模板&lt；键入Net，键入T，键入Name。。。Args&gt；"
  },
  {
    "origin": "Net::ResultL",
    "local": "网络：：结果"
  },
  {
    "origin": "(T image,",
    "local": "（T图像，"
  },
  {
    "origin": "&lt; Args &gt;... args)",
    "local": "&lt；Args&gt；。。。参数）"
  },
  {
    "origin": "Calculates responses for the specified network (template parameter) for every region in the source image, extended version.",
    "local": "为源映像扩展版本中的每个区域计算指定网络（模板参数）的响应。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename T = Generic, typename Input &gt;",
    "local": "模板&lt；typename T=Generic，typename Input&gt；"
  },
  {
    "origin": "std::enable_if&lt;",
    "local": "std：：启用\\u if&lt；"
  },
  {
    "origin": "&lt; Input &gt;::value,",
    "local": "&lt；输入（&gt；：：价值观，"
  },
  {
    "origin": "&gt;::type",
    "local": "&gt；：：类型"
  },
  {
    "origin": "(const std::string &amp;tag, const Input &amp;in, const",
    "local": "（const std：：字符串&amp；标记、常量输入和；进来，康斯特"
  },
  {
    "origin": "&amp;inputs)",
    "local": "&amp；输入）"
  },
  {
    "origin": "Calculates responses for the specified network for every region in the source image, extended version.",
    "local": "为源映像扩展版本中的每个区域计算指定网络的响应。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, const",
    "local": "&amp；SRC，const"
  },
  {
    "origin": "&amp;threshLow, const",
    "local": "&amp；阈值，常数"
  },
  {
    "origin": "&amp;threshUp)",
    "local": "&amp；脱粒）"
  },
  {
    "origin": "Applies a range-level threshold to each matrix element.",
    "local": "对每个矩阵元素应用范围级别阈值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "std::tuple&lt;",
    "local": "标准：：元组&lt；"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, int sdepth=-1, int sqdepth=-1)",
    "local": "&amp；src，int sdepth=-1，int sqdepth=-1）"
  },
  {
    "origin": "Calculates the integral of an image.",
    "local": "计算图像的积分。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(const std::string &amp;name,",
    "local": "（const std：：字符串&amp；姓名，"
  },
  {
    "origin": "&amp;&amp;ins,",
    "local": "&amp&amp；ins公司，"
  },
  {
    "origin": "&amp;&amp;outs)",
    "local": "&amp&amp；出局）"
  },
  {
    "origin": "Define an tagged island (subgraph) within a computation.",
    "local": "在计算中定义带标记的孤岛（子图）。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;measurement, const",
    "local": "&amp；测量，常数"
  },
  {
    "origin": "&lt; bool &gt; &amp;haveMeasurement, const",
    "local": "&lt；布尔&gt；&gt；amp；测量，常数"
  },
  {
    "origin": "&amp;control, const",
    "local": "&amp；控制，const"
  },
  {
    "origin": "&amp;kfParams)",
    "local": "&amp；（参数）"
  },
  {
    "origin": "Standard Kalman filter algorithm",
    "local": "标准卡尔曼滤波算法"
  },
  {
    "origin": "http://en.wikipedia.org/wiki/Kalman_filter",
    "local": "http://en.wikipedia.org/wiki/Kalman_filter"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;measurement, const",
    "local": "&amp；测量，常数"
  },
  {
    "origin": "&lt; bool &gt; &amp;haveMeasurement, const",
    "local": "&lt；布尔&gt；&gt；amp；测量，常数"
  },
  {
    "origin": "&amp;kfParams)",
    "local": "&amp；（参数）"
  },
  {
    "origin": "template&lt;typename... KK&gt;",
    "local": "模板&lt；%1 (%2)KK&gt；"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Create a kernel package object containing kernels and transformations specified in variadic template argument.",
    "local": "创建包含可变模板参数中指定的内核和转换的内核包对象。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename... FF&gt;",
    "local": "模板&lt；类型名。。。FF&gt；"
  },
  {
    "origin": "(FF &amp;... functors)",
    "local": "（FF&amp；。。。函子）"
  },
  {
    "origin": "std::tuple&lt;",
    "local": "标准：：元组&lt；"
  },
  {
    "origin": "&lt; double &gt;,",
    "local": "&lt；双倍（&gt），"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;data, const int K, const",
    "local": "&amp；数据，常量int K，常量"
  },
  {
    "origin": "&amp;bestLabels, const",
    "local": "&amp；最佳标签，常量"
  },
  {
    "origin": "&amp;criteria, const int attempts, const",
    "local": "&amp；条件，常量int尝试，常量"
  },
  {
    "origin": "flags)",
    "local": "（标志）"
  },
  {
    "origin": "Finds centers of clusters and groups input samples around the clusters.",
    "local": "查找簇的中心并围绕簇对输入样本进行分组。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "std::tuple&lt;",
    "local": "标准：：元组&lt；"
  },
  {
    "origin": "&lt; double &gt;,",
    "local": "&lt；双倍（&gt），"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;data, const int K, const",
    "local": "&amp；数据，常量int K，常量"
  },
  {
    "origin": "&amp;criteria, const int attempts, const",
    "local": "&amp；条件，常量int尝试，常量"
  },
  {
    "origin": "flags)",
    "local": "（标志）"
  },
  {
    "origin": "std::tuple&lt;",
    "local": "标准：：元组&lt；"
  },
  {
    "origin": "&lt; double &gt;,",
    "local": "&lt；双倍（&gt），"
  },
  {
    "origin": "&lt; int &gt;,",
    "local": "&lt；整数&gt；，"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &gt;",
    "local": "&燃气轮机&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;data, const int K, const",
    "local": "&燃气轮机&amp；数据，常量int K，常量"
  },
  {
    "origin": "&lt; int &gt; &amp;bestLabels, const",
    "local": "&lt；内部&gt；amp；最佳标签，常量"
  },
  {
    "origin": "&amp;criteria, const int attempts, const",
    "local": "&amp；条件，常量int尝试，常量"
  },
  {
    "origin": "flags)",
    "local": "（标志）"
  },
  {
    "origin": "std::tuple&lt;",
    "local": "标准：：元组&lt；"
  },
  {
    "origin": "&lt; double &gt;,",
    "local": "&lt；双倍（&gt），"
  },
  {
    "origin": "&lt; int &gt;,",
    "local": "&lt；整数&gt；，"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &gt;",
    "local": "&燃气轮机&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;data, const int K, const",
    "local": "&燃气轮机&amp；数据，常量int K，常量"
  },
  {
    "origin": "&lt; int &gt; &amp;bestLabels, const",
    "local": "&lt；内部&gt；amp；最佳标签，常量"
  },
  {
    "origin": "&amp;criteria, const int attempts, const",
    "local": "&amp；条件，常量int尝试，常量"
  },
  {
    "origin": "flags)",
    "local": "（标志）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, int ddepth, int ksize=1, double scale=1, double delta=0, int borderType=",
    "local": "&amp；src，int ddepth，int ksize=1，double scale=1，double delta=0，int borderType="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the Laplacian of an image.",
    "local": "计算图像的拉普拉斯函数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, const",
    "local": "&amp；SRC，const"
  },
  {
    "origin": "&amp;lut)",
    "local": "&amp；逻辑单元（lut）"
  },
  {
    "origin": "Performs a look-up table transform of a matrix.",
    "local": "对矩阵执行查找表变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src)",
    "local": "&amp；（src）"
  },
  {
    "origin": "Converts an image from LUV color space to BGR color space.",
    "local": "将图像从LUV颜色空间转换为BGR颜色空间。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, const",
    "local": "&amp；SRC，const"
  },
  {
    "origin": "&amp;mask)",
    "local": "&amp；面罩）"
  },
  {
    "origin": "Applies a mask to a matrix.",
    "local": "对矩阵应用遮罩。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2)",
    "local": "&amp；（src2）"
  },
  {
    "origin": "Calculates per-element maximum of two matrices.",
    "local": "计算每个元素最多两个矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src)",
    "local": "&amp；（src）"
  },
  {
    "origin": "Calculates an average (mean) of matrix elements.",
    "local": "计算矩阵元素的平均值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, int ksize)",
    "local": "&amp；src，int ksize（内部大小）"
  },
  {
    "origin": "Blurs an image using the median filter.",
    "local": "使用中值滤波器模糊图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2, const",
    "local": "&amp；src2，const"
  },
  {
    "origin": "&amp;src3)",
    "local": "&amp；（src3）"
  },
  {
    "origin": "Creates one 3-channel matrix out of 3 single-channel ones.",
    "local": "从3个单通道矩阵中创建一个3通道矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2, const",
    "local": "&amp；src2，const"
  },
  {
    "origin": "&amp;src3, const",
    "local": "&amp；SRC3，const"
  },
  {
    "origin": "&amp;src4)",
    "local": "&amp；（src4）"
  },
  {
    "origin": "Creates one 4-channel matrix out of 4 single-channel ones.",
    "local": "从4个单通道矩阵中创建一个4通道矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2)",
    "local": "&amp；（src2）"
  },
  {
    "origin": "Calculates per-element minimum of two matrices.",
    "local": "计算每个元素两个矩阵的最小值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, const",
    "local": "&amp；SRC，const"
  },
  {
    "origin": "op, const",
    "local": "，常量"
  },
  {
    "origin": "&amp;kernel, const",
    "local": "&amp；内核，常量"
  },
  {
    "origin": "&amp;anchor=",
    "local": "&amp；锚="
  },
  {
    "origin": "(-1,-1), const int iterations=1, const",
    "local": "（-1，-1），常量int迭代次数=1，常量"
  },
  {
    "origin": "borderType=",
    "local": "边框类型="
  },
  {
    "origin": ", const",
    "local": "，常量"
  },
  {
    "origin": "&amp;borderValue=",
    "local": "&amp；边界值="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Performs advanced morphological transformations.",
    "local": "执行高级形态变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2, double scale=1.0, int ddepth=-1)",
    "local": "&amp；src2，双刻度=1.0，int ddepth=-1）"
  },
  {
    "origin": "Calculates the per-element scaled product of two matrices.",
    "local": "计算两个矩阵的每元素标度积。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, double multiplier, int ddepth=-1)",
    "local": "&amp；src，双乘法器，int ddepth=-1）"
  },
  {
    "origin": "Multiplies matrix by scalar.",
    "local": "将矩阵乘以标量。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, const",
    "local": "&amp；SRC，const"
  },
  {
    "origin": "&amp;multiplier, int ddepth=-1)",
    "local": "&amp；乘数，int ddepth=-1）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;multiplier, const",
    "local": "&amp；乘数，常数"
  },
  {
    "origin": "&amp;src, int ddepth=-1)",
    "local": "&amp；src，int ddepth=-1）"
  },
  {
    "origin": "template&lt;typename... Args&gt;",
    "local": "模板&lt；类型名。。。Args&gt；"
  },
  {
    "origin": "(Args &amp;&amp;... args)",
    "local": "（Args和&amp；。。。参数）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, double alpha, double beta, int norm_type, int ddepth=-1)",
    "local": "&amp；src，double alpha，double beta，int norm\\u type，int ddepth=-1）"
  },
  {
    "origin": "Normalizes the norm or value range of an array.",
    "local": "规范化数组的范数或值范围。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src)",
    "local": "&amp；（src）"
  },
  {
    "origin": "Calculates the absolute infinite norm of a matrix.",
    "local": "计算矩阵的绝对无穷范数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src)",
    "local": "&amp；（src）"
  },
  {
    "origin": "Calculates the absolute",
    "local": "计算绝对值"
  },
  {
    "origin": "norm of a matrix.",
    "local": "矩阵的范数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src)",
    "local": "&amp；（src）"
  },
  {
    "origin": "Calculates the absolute",
    "local": "计算绝对值"
  },
  {
    "origin": "norm of a matrix.",
    "local": "矩阵的范数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src_y, const",
    "local": "&amp；src y，常量"
  },
  {
    "origin": "&amp;src_uv)",
    "local": "&amp；src（紫外线）"
  },
  {
    "origin": "Converts an image from NV12 (YUV420p) color space to BGR. The function converts an input image from NV12 color space to RGB. The conventional ranges for Y, U, and V channel values are 0 to 255.",
    "local": "将图像从NV12（YUV420p）颜色空间转换为BGR。该函数将输入图像从NV12颜色空间转换为RGB。Y、U和V通道值的常规范围为0到255。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src_y, const",
    "local": "&amp；src y，常量"
  },
  {
    "origin": "&amp;src_uv)",
    "local": "&amp；src（紫外线）"
  },
  {
    "origin": "Converts an image from NV12 (YUV420p) color space to BGR. The function converts an input image from NV12 color space to BGR. The conventional ranges for Y, U, and V channel values are 0 to 255.",
    "local": "将图像从NV12（YUV420p）颜色空间转换为BGR。该函数将输入图像从NV12颜色空间转换为BGR。Y、U和V通道值的常规范围为0到255。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src_y, const",
    "local": "&amp；src y，常量"
  },
  {
    "origin": "&amp;src_uv)",
    "local": "&amp；src（紫外线）"
  },
  {
    "origin": "Converts an image from NV12 (YUV420p) color space to gray-scaled. The function converts an input image from NV12 color space to gray-scaled. The conventional ranges for Y, U, and V channel values are 0 to 255.",
    "local": "将图像从NV12（YUV420p）颜色空间转换为灰度。该函数将输入图像从NV12颜色空间转换为灰度。Y、U和V通道值的常规范围为0到255。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src_y, const",
    "local": "&amp；src y，常量"
  },
  {
    "origin": "&amp;src_uv)",
    "local": "&amp；src（紫外线）"
  },
  {
    "origin": "Converts an image from NV12 (YUV420p) color space to RGB. The function converts an input image from NV12 color space to RGB. The conventional ranges for Y, U, and V channel values are 0 to 255.",
    "local": "将图像从NV12（YUV420p）颜色空间转换为RGB。该函数将输入图像从NV12颜色空间转换为RGB。Y、U和V通道值的常规范围为0到255。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src_y, const",
    "local": "&amp；src y，常量"
  },
  {
    "origin": "&amp;src_uv)",
    "local": "&amp；src（紫外线）"
  },
  {
    "origin": "Converts an image from NV12 (YUV420p) color space to RGB. The function converts an input image from NV12 color space to RGB. The conventional ranges for Y, U, and V channel values are 0 to 255.",
    "local": "将图像从NV12（YUV420p）颜色空间转换为RGB。该函数将输入图像从NV12颜色空间转换为RGB。Y、U和V通道值的常规范围为0到255。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;lhs, const",
    "local": "&amp；左侧，常量"
  },
  {
    "origin": "&amp;rhs)",
    "local": "&amp；（右侧）"
  },
  {
    "origin": "std::tuple&lt;",
    "local": "标准：：元组&lt；"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;,",
    "local": "&gt；，"
  },
  {
    "origin": "&lt; int &gt; &gt;",
    "local": "&lt；内部&gt；&gt&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;in, const",
    "local": "&amp；进来，康斯特"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;inSz, const float confidenceThreshold=0.5f, const int filterLabel=-1)",
    "local": "&燃气轮机&amp；inSz，const float confidenceThreshold=0.5f，const int filterLabel=-1）"
  },
  {
    "origin": "Parses output of SSD network.",
    "local": "解析SSD网络的输出。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;in, const",
    "local": "&amp；进来，康斯特"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;inSz, const float confidenceThreshold=0.5f, const bool alignmentToSquare=false, const bool filterOutOfBounds=false)",
    "local": "&燃气轮机&amp；inSz，const float confidenceThreshold=0.5f，const bool alignmentToSquare=false，const bool filterOutOfBounds=false）"
  },
  {
    "origin": "std::tuple&lt;",
    "local": "标准：：元组&lt；"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;,",
    "local": "&gt；，"
  },
  {
    "origin": "&lt; int &gt; &gt;",
    "local": "&lt；内部&gt；&gt&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;in, const",
    "local": "&amp；进来，康斯特"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;inSz, const float confidenceThreshold=0.5f, const float nmsThreshold=0.5f, const std::vector&lt; float &gt; &amp;anchors=nn::parsers::GParseYolo::defaultAnchors())",
    "local": "&燃气轮机&amp；inSz，const float confidenceThreshold=0.5f，const float nmsThreshold=0.5f，const std:：vector&lt；浮动&gt&amp；anchors=nn:：parsers:：GParseYolo:：defaultAnchors（））"
  },
  {
    "origin": "Parses output of Yolo network.",
    "local": "解析Yolo网络的输出。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;x, const",
    "local": "&amp；x、 常数"
  },
  {
    "origin": "&amp;y, bool angleInDegrees=false)",
    "local": "&amp；布尔角=假）"
  },
  {
    "origin": "Calculates the rotation angle of 2D vectors.",
    "local": "计算二维向量的旋转角度。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "std::tuple&lt;",
    "local": "标准：：元组&lt；"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": ", const",
    "local": "，常量"
  },
  {
    "origin": "&amp;angle, bool angleInDegrees=false)",
    "local": "&amp；角度，bool angleInDegrees=false）"
  },
  {
    "origin": "Calculates x and y coordinates of 2D vectors from their magnitude and angle.",
    "local": "根据向量的大小和角度计算二维向量的x和y坐标。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, const",
    "local": "&amp；SRC，const"
  },
  {
    "origin": "&amp;map1, const",
    "local": "&amp；地图1，常量"
  },
  {
    "origin": "&amp;map2, int interpolation, int borderMode=",
    "local": "&amp；map2，int插值，int边界模式="
  },
  {
    "origin": ", const",
    "local": "，常量"
  },
  {
    "origin": "&amp;borderValue=",
    "local": "&amp；边界值="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Applies a generic geometrical transformation to an image.",
    "local": "对图像应用常规几何变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, const",
    "local": "&amp；SRC，const"
  },
  {
    "origin": "&amp;dsize, double fx=0, double fy=0, int interpolation=",
    "local": "&amp；dsize，double fx=0，double fy=0，int插值="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Resizes an image.",
    "local": "调整图像大小。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, const",
    "local": "&amp；SRC，const"
  },
  {
    "origin": "&amp;dsize, int interpolation=",
    "local": "&amp；dsize，int插值="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Resizes a planar image.",
    "local": "调整平面图像的大小。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src)",
    "local": "&amp；（src）"
  },
  {
    "origin": "Converts an image from RGB color space to gray-scaled.",
    "local": "将图像从RGB颜色空间转换为灰度。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, float rY, float gY, float bY)",
    "local": "&amp；src、float rY、float gY、float bY）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src)",
    "local": "&amp；（src）"
  },
  {
    "origin": "Converts an image from RGB color space to HSV. The function converts an input image from RGB color space to HSV. The conventional ranges for R, G, and B channel values are 0 to 255.",
    "local": "将图像从RGB颜色空间转换为HSV。该函数用于将输入图像从RGB颜色空间转换为HSV。R、G和B通道值的常规范围为0到255。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src)",
    "local": "&amp；（src）"
  },
  {
    "origin": "Converts an image from RGB color space to I420 color space.",
    "local": "将图像从RGB颜色空间转换为I420颜色空间。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src)",
    "local": "&amp；（src）"
  },
  {
    "origin": "Converts an image from RGB color space to Lab color space.",
    "local": "将图像从RGB颜色空间转换为实验室颜色空间。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src)",
    "local": "&amp；（src）"
  },
  {
    "origin": "Converts an image from RGB color space to YUV color space.",
    "local": "将图像从RGB颜色空间转换为YUV颜色空间。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src)",
    "local": "&amp；（src）"
  },
  {
    "origin": "Converts an image from RGB color space to YUV422. The function converts an input image from RGB color space to YUV422. The conventional ranges for R, G, and B channel values are 0 to 255.",
    "local": "将图像从RGB颜色空间转换为YUV422。该函数将输入图像从RGB颜色空间转换为YUV422。R、G和B通道值的常规范围为0到255。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2, const",
    "local": "&amp；src2，const"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Select values from either first or second of input matrices by given mask. The function set to the output matrix either the value from the first input matrix if corresponding value of mask matrix is 255, or value from the second input matrix (if value of mask matrix set to 0).",
    "local": "通过给定的掩码从第一个或第二个输入矩阵中选择值。如果掩模矩阵的对应值为255，则将来自第一输入矩阵的值设置为输出矩阵；如果掩模矩阵的值设置为0，则将来自第二输入矩阵的值设置为输出矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, int ddepth, const",
    "local": "&amp；src，int ddepth，const"
  },
  {
    "origin": "&amp;kernelX, const",
    "local": "&amp；克内尔克斯，康斯特"
  },
  {
    "origin": "&amp;kernelY, const",
    "local": "&amp；克内利，康斯特"
  },
  {
    "origin": "&amp;anchor, const",
    "local": "&amp；锚定，常数"
  },
  {
    "origin": "&amp;delta, int borderType=",
    "local": "&amp；增量，int borderType="
  },
  {
    "origin": ", const",
    "local": "，常量"
  },
  {
    "origin": "&amp;borderValue=",
    "local": "&amp；边界值="
  },
  {
    "origin": "(0))",
    "local": "(0))"
  },
  {
    "origin": "Applies a separable linear filter to a matrix(image).",
    "local": "对矩阵（图像）应用可分离线性滤波器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "std::vector&lt; char &gt;",
    "local": "标准：：向量&lt；字符&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;c)",
    "local": "&amp；（三）"
  },
  {
    "origin": "std::vector&lt; char &gt;",
    "local": "标准：：向量&lt；字符&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;)",
    "local": "&amp；）"
  },
  {
    "origin": "std::vector&lt; char &gt;",
    "local": "标准：：向量&lt；字符&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;)",
    "local": "&amp；）"
  },
  {
    "origin": "std::vector&lt; char &gt;",
    "local": "标准：：向量&lt；字符&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;)",
    "local": "&amp；）"
  },
  {
    "origin": "std::vector&lt; char &gt;",
    "local": "标准：：向量&lt；字符&gt；"
  },
  {
    "origin": "(const std::vector&lt; std::string &gt; &amp;)",
    "local": "（const std：：向量&lt；标准：：字符串&gt&amp；）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, int ddepth, int dx, int dy, int ksize=3, double scale=1, double delta=0, int borderType=",
    "local": "&amp；src，int ddepth，int dx，int dy，int ksize=3，双刻度=1，双增量=0，int borderType="
  },
  {
    "origin": ", const",
    "local": "，常量"
  },
  {
    "origin": "&amp;borderValue=",
    "local": "&amp；边界值="
  },
  {
    "origin": "(0))",
    "local": "(0))"
  },
  {
    "origin": "Calculates the first, second, third, or mixed image derivatives using an extended Sobel operator.",
    "local": "使用扩展的Sobel运算符计算第一、第二、第三或混合图像导数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "std::tuple&lt;",
    "local": "标准：：元组&lt；"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, int ddepth, int order, int ksize=3, double scale=1, double delta=0, int borderType=",
    "local": "&amp；src，int ddepth，int order，int ksize=3，double scale=1，double delta=0，int borderType="
  },
  {
    "origin": ", const",
    "local": "，常量"
  },
  {
    "origin": "&amp;borderValue=",
    "local": "&amp；边界值="
  },
  {
    "origin": "(0))",
    "local": "(0))"
  },
  {
    "origin": "Calculates the first, second, third, or mixed image derivatives using an extended Sobel operator.",
    "local": "使用扩展的Sobel运算符计算第一、第二、第三或混合图像导数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "std::tuple&lt;",
    "local": "标准：：元组&lt；"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src)",
    "local": "&amp；（src）"
  },
  {
    "origin": "Divides a 3-channel matrix into 3 single-channel matrices.",
    "local": "将3通道矩阵分为3个单通道矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "std::tuple&lt;",
    "local": "标准：：元组&lt；"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src)",
    "local": "&amp；（src）"
  },
  {
    "origin": "Divides a 4-channel matrix into 4 single-channel matrices.",
    "local": "将4通道矩阵分为4个单通道矩阵。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src)",
    "local": "&amp；（src）"
  },
  {
    "origin": "Calculates a square root of array elements.",
    "local": "计算数组元素的平方根。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;left, const",
    "local": "&amp；左，康斯特"
  },
  {
    "origin": "&amp;right, const",
    "local": "&amp；对，康斯特"
  },
  {
    "origin": "of=",
    "local": "的="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Extract disparity/depth information depending on passed StereoOutputFormat argument. The function extracts disparity/depth information depending on passed StereoOutputFormat argument from given stereo-pair.",
    "local": "根据传递的StereoOutputFormat参数提取视差/深度信息。该函数根据从给定立体对传递的StereoOutputFormat参数提取视差/深度信息。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src1, const",
    "local": "&amp；src1，const"
  },
  {
    "origin": "&amp;src2, int ddepth=-1)",
    "local": "&amp；src2，int ddepth=-1）"
  },
  {
    "origin": "Calculates the per-element difference between two matrices.",
    "local": "计算两个矩阵之间的每元素差。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, const",
    "local": "&amp；SRC，const"
  },
  {
    "origin": "&amp;c, int ddepth=-1)",
    "local": "&amp；c、 int ddepth=-1）"
  },
  {
    "origin": "Calculates the per-element difference between matrix and given scalar.",
    "local": "计算矩阵和给定标量之间的每元素差。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;c, const",
    "local": "&amp；c、 常数"
  },
  {
    "origin": "&amp;src, int ddepth=-1)",
    "local": "&amp；src，int ddepth=-1）"
  },
  {
    "origin": "Calculates the per-element difference between given scalar and the matrix.",
    "local": "计算给定标量和矩阵之间的每元素差。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src)",
    "local": "&amp；（src）"
  },
  {
    "origin": "Calculates sum of all matrix elements.",
    "local": "计算所有矩阵元素的和。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, const",
    "local": "&amp；SRC，const"
  },
  {
    "origin": "&amp;thresh, const",
    "local": "&amp；脱粒，常数"
  },
  {
    "origin": "&amp;maxval, int type)",
    "local": "&amp；最大值，int类型）"
  },
  {
    "origin": "Applies a fixed-level threshold to each matrix element.",
    "local": "对每个矩阵元素应用固定级别的阈值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "std::tuple&lt;",
    "local": "标准：：元组&lt；"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, const",
    "local": "&amp；SRC，const"
  },
  {
    "origin": "&amp;maxval, int type)",
    "local": "&amp；最大值，int类型）"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, const",
    "local": "&amp；SRC，const"
  },
  {
    "origin": "&amp;M, const",
    "local": "&amp；M、 常数"
  },
  {
    "origin": "&amp;dsize, int flags=",
    "local": "&amp；dsize，int标志="
  },
  {
    "origin": ", int borderMode=",
    "local": "，int边界模式="
  },
  {
    "origin": ", const",
    "local": "，常量"
  },
  {
    "origin": "&amp;borderValue=",
    "local": "&amp；边界值="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Applies an affine transformation to an image.",
    "local": "对图像应用仿射变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src, const",
    "local": "&amp；SRC，const"
  },
  {
    "origin": "&amp;M, const",
    "local": "&amp；M、 常数"
  },
  {
    "origin": "&amp;dsize, int flags=",
    "local": "&amp；dsize，int标志="
  },
  {
    "origin": ", int borderMode=",
    "local": "，int边界模式="
  },
  {
    "origin": ", const",
    "local": "，常量"
  },
  {
    "origin": "&amp;borderValue=",
    "local": "&amp；边界值="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Applies a perspective transformation to an image.",
    "local": "对图像应用透视变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src)",
    "local": "&amp；（src）"
  },
  {
    "origin": "Converts an image from YUV color space to BGR color space.",
    "local": "将图像从YUV颜色空间转换为BGR颜色空间。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;src)",
    "local": "&amp；（src）"
  },
  {
    "origin": "Converts an image from YUV color space to RGB. The function converts an input image from YUV color space to RGB. The conventional ranges for Y, U, and V channel values are 0 to 255.",
    "local": "将图像从YUV颜色空间转换为RGB。该函数将输入图像从YUV颜色空间转换为RGB。Y、U和V通道值的常规范围为0到255。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Enumeration Type Documentation",
    "local": "枚举类型文档"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "StereoOutputFormat",
    "local": "立体输出格式"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "strong",
    "local": "坚强的"
  },
  {
    "origin": "Enumerator",
    "local": "枚举器"
  },
  {
    "origin": "DEPTH_FLOAT16",
    "local": "深度\\u 16"
  },
  {
    "origin": "DEPTH_FLOAT32",
    "local": "深度32"
  },
  {
    "origin": "DISPARITY_FIXED16_11_5",
    "local": "视差固定16 11 5"
  },
  {
    "origin": "DISPARITY_FIXED16_12_4",
    "local": "视差固定16 12 4"
  },
  {
    "origin": "Function Documentation",
    "local": "功能文档"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "bind()",
    "local": "绑定（）"
  },
  {
    "origin": "[1/2]",
    "local": "[1/2]"
  },
  {
    "origin": "cv::gapi::bind",
    "local": "cv:：gapi:：绑定"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "results",
    "local": "结果"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "bind()",
    "local": "绑定（）"
  },
  {
    "origin": "[2/2]",
    "local": "[2/2]"
  },
  {
    "origin": "cv::gapi::bind",
    "local": "cv:：gapi:：绑定"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "out",
    "local": "外面的"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "combine()",
    "local": "合并（）"
  },
  {
    "origin": "[1/2]",
    "local": "[1/2]"
  },
  {
    "origin": "cv::gapi::combine",
    "local": "cv:：gapi:：联合收割机"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "lhs",
    "local": "左侧"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "rhs",
    "local": "右侧"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "lhs",
    "local": "左侧"
  },
  {
    "origin": "\"Left-hand-side\" package in the process",
    "local": "过程中的“左手边”包装"
  },
  {
    "origin": "rhs",
    "local": "右侧"
  },
  {
    "origin": "\"Right-hand-side\" package in the process",
    "local": "过程中的“右手边”包"
  },
  {
    "origin": "Returns",
    "local": "退换商品"
  },
  {
    "origin": "a new kernel package.",
    "local": "一个新的内核包。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "combine()",
    "local": "合并（）"
  },
  {
    "origin": "[2/2]",
    "local": "[2/2]"
  },
  {
    "origin": "template&lt;typename... Ps&gt;",
    "local": "模板&lt；类型名。。。Ps&gt；"
  },
  {
    "origin": "cv::gapi::combine",
    "local": "cv:：gapi:：联合收割机"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "a",
    "local": "一"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "b",
    "local": "b"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Ps &amp;&amp;...",
    "local": "Ps&amp&amp；。。。"
  },
  {
    "origin": "rest",
    "local": "休息"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Combines multiple G-API kernel packages into one.",
    "local": "将多个G-API内核包组合成一个。"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "This function successively combines the passed kernel packages using a right fold. Calling",
    "local": "此函数使用右折叠顺序组合传递的内核包。打电话"
  },
  {
    "origin": "is equal to",
    "local": "等于"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Returns",
    "local": "退换商品"
  },
  {
    "origin": "The resulting kernel package",
    "local": "生成的内核包"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "deserialize()",
    "local": "反序列化（）"
  },
  {
    "origin": "[1/7]",
    "local": "[1/7]"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "static T cv::gapi::deserialize",
    "local": "静态tcv：：gapi：：反序列化"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const std::vector&lt; char &gt; &amp;",
    "local": "常量标准：：向量&lt；字符&gt&amp；"
  },
  {
    "origin": "p",
    "local": "p"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "inline",
    "local": "内联"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "deserialize()",
    "local": "反序列化（）"
  },
  {
    "origin": "[2/7]",
    "local": "[2/7]"
  },
  {
    "origin": "template&lt;&gt;",
    "local": "模板&lt&燃气轮机；"
  },
  {
    "origin": "cv::gapi::deserialize",
    "local": "cv:：gapi:：反序列化"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const std::vector&lt; char &gt; &amp;",
    "local": "常量标准：：向量&lt；字符&gt&amp；"
  },
  {
    "origin": "p",
    "local": "p"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "inline",
    "local": "内联"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "deserialize()",
    "local": "反序列化（）"
  },
  {
    "origin": "[3/7]",
    "local": "[3/7]"
  },
  {
    "origin": "template&lt;&gt;",
    "local": "模板&lt&燃气轮机；"
  },
  {
    "origin": "cv::gapi::deserialize",
    "local": "cv:：gapi:：反序列化"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const std::vector&lt; char &gt; &amp;",
    "local": "常量标准：：向量&lt；字符&gt&amp；"
  },
  {
    "origin": "p",
    "local": "p"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "inline",
    "local": "内联"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "deserialize()",
    "local": "反序列化（）"
  },
  {
    "origin": "[4/7]",
    "local": "[4/7]"
  },
  {
    "origin": "template&lt;&gt;",
    "local": "模板&lt&燃气轮机；"
  },
  {
    "origin": "cv::gapi::deserialize",
    "local": "cv:：gapi:：反序列化"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const std::vector&lt; char &gt; &amp;",
    "local": "常量标准：：向量&lt；字符&gt&amp；"
  },
  {
    "origin": "p",
    "local": "p"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "inline",
    "local": "内联"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "deserialize()",
    "local": "反序列化（）"
  },
  {
    "origin": "[5/7]",
    "local": "[5/7]"
  },
  {
    "origin": "template&lt;&gt;",
    "local": "模板&lt&燃气轮机；"
  },
  {
    "origin": "std::vector&lt;std::string&gt; cv::gapi::deserialize",
    "local": "标准：：向量&lt；标准：：字符串&gt；cv:：gapi:：反序列化"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const std::vector&lt; char &gt; &amp;",
    "local": "常量标准：：向量&lt；字符&gt&amp；"
  },
  {
    "origin": "p",
    "local": "p"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "inline",
    "local": "内联"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "deserialize()",
    "local": "反序列化（）"
  },
  {
    "origin": "[6/7]",
    "local": "[6/7]"
  },
  {
    "origin": "template&lt;typename T , typename... Types&gt;",
    "local": "模板&lt；键入T，键入名称。。。类型"
  },
  {
    "origin": "std::enable_if&lt;std::is_same&lt;T,",
    "local": "std：：启用\\u if&lt；std：：是否相同&lt；T，"
  },
  {
    "origin": "&gt;::value,",
    "local": "&gt；：：价值观，"
  },
  {
    "origin": "&gt;:: type cv::gapi::deserialize",
    "local": "&gt；：：类型cv：：gapi：：反序列化"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const std::vector&lt; char &gt; &amp;",
    "local": "常量标准：：向量&lt；字符&gt&amp；"
  },
  {
    "origin": "p",
    "local": "p"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "inline",
    "local": "内联"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "deserialize()",
    "local": "反序列化（）"
  },
  {
    "origin": "[7/7]",
    "local": "[7/7]"
  },
  {
    "origin": "template&lt;typename T , typename RMatAdapterType &gt;",
    "local": "模板&lt；类型T，类型名称适配器类型&gt；"
  },
  {
    "origin": "std::enable_if&lt;std::is_same&lt;T,",
    "local": "std：：启用\\u if&lt；std：：是否相同&lt；T，"
  },
  {
    "origin": "&gt;::value,",
    "local": "&gt；：：价值观，"
  },
  {
    "origin": "&gt;:: type cv::gapi::deserialize",
    "local": "&gt；：：类型cv：：gapi：：反序列化"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const std::vector&lt; char &gt; &amp;",
    "local": "常量标准：：向量&lt；字符&gt&amp；"
  },
  {
    "origin": "p",
    "local": "p"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "inline",
    "local": "内联"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "equalizeHist()",
    "local": "均衡器（）"
  },
  {
    "origin": "cv::gapi::equalizeHist",
    "local": "cv：：gapi：：均衡历史"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "gapi_feature",
    "local": "gapi\\U特征"
  },
  {
    "origin": "The function equalizes the histogram of the input image using the following algorithm:",
    "local": "该函数使用以下算法均衡输入图像的直方图："
  },
  {
    "origin": "Calculate the histogram \\(H\\) for src .",
    "local": "计算src的直方图\\（H\\）。"
  },
  {
    "origin": "Compute the integral of the histogram:",
    "local": "计算直方图的积分："
  },
  {
    "origin": "\\[H'_i = \\sum _{0 \\le j &lt; i} H(j)\\]",
    "local": "\\\\[H'\\u i=\\sum{0\\le j&lt；i} H（j）\\]"
  },
  {
    "origin": "Transform the image using \\(H'\\) as a look-up table: \\(\\texttt{dst}(x,y) = H'(\\texttt{src}(x,y))\\)",
    "local": "使用\\（H'\\）作为查找表转换图像：\\（\\texttt{dst}（x，y）=H'（\\texttt{src}（x，y））\\）"
  },
  {
    "origin": "The algorithm normalizes the brightness and increases the contrast of the image.",
    "local": "该算法对图像的亮度进行了归一化处理，提高了图像的对比度。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "The returned image is of the same size and type as input.",
    "local": "返回的图像与输入的大小和类型相同。"
  },
  {
    "origin": "Function textual ID is \"org.opencv.imgproc.equalizeHist\"",
    "local": "函数文本ID为“org.opencv.imgproc.equalizeHist”"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "Source 8-bit single channel image.",
    "local": "源8位单通道图像。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getCompileArg()",
    "local": "getCompileArg（）"
  },
  {
    "origin": "template&lt;typename T &gt;",
    "local": "模板&lt；类型名T&gt；"
  },
  {
    "origin": "&lt;T&gt; cv::gapi::getCompileArg",
    "local": "&lt；T&gt；简历：：gapi：：getCompileArg"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "args",
    "local": "愤怒"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "inline",
    "local": "内联"
  },
  {
    "origin": "Retrieves particular compilation argument by its type from",
    "local": "从中按类型检索特定编译参数"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "infer()",
    "local": "推断（）"
  },
  {
    "origin": "[1/6]",
    "local": "[1/6]"
  },
  {
    "origin": "template&lt;typename Net , typename T &gt;",
    "local": "模板&lt；类型Net，类型T&gt；"
  },
  {
    "origin": "Net::Result cv::gapi::infer",
    "local": "网络：：结果cv：：gapi：：推断"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "roi",
    "local": "投资回报率"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "T",
    "local": "T"
  },
  {
    "origin": "in",
    "local": "在里面"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.infer(",
    "local": "简历：gapi.infere("
  },
  {
    "origin": "name, inputs",
    "local": "名称，输入"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.infer(",
    "local": "简历：gapi.infere("
  },
  {
    "origin": "name, roi, inputs",
    "local": "名称、roi、输入"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.infer(",
    "local": "简历：gapi.infere("
  },
  {
    "origin": "name, rois, inputs",
    "local": "名称、ROI、输入"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates response for the specified network (template parameter) for the specified region in the source image. Currently expects a single-input network only.",
    "local": "计算源映像中指定区域的指定网络（模板参数）的响应。目前只需要一个输入网络。"
  },
  {
    "origin": "Template Parameters",
    "local": "模板参数"
  },
  {
    "origin": "A",
    "local": "A"
  },
  {
    "origin": "network type defined with",
    "local": "用定义的网络类型"
  },
  {
    "origin": "macro.",
    "local": "宏。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "in",
    "local": "在里面"
  },
  {
    "origin": "input image where to take ROI from.",
    "local": "输入图像从何处获取ROI。"
  },
  {
    "origin": "roi",
    "local": "投资回报率"
  },
  {
    "origin": "an object describing the region of interest in the source image. May be calculated in the same graph dynamically.",
    "local": "描述源图像中感兴趣区域的对象。可在同一图形中动态计算。"
  },
  {
    "origin": "Returns",
    "local": "退换商品"
  },
  {
    "origin": "an object of return type as defined in",
    "local": "中定义的返回类型的对象"
  },
  {
    "origin": ". If a network has multiple return values (defined with a tuple), a tuple of objects of appropriate type is returned.",
    "local": ". 如果一个网络有多个返回值（用元组定义），则返回一个适当类型的对象元组。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "infer()",
    "local": "推断（）"
  },
  {
    "origin": "[2/6]",
    "local": "[2/6]"
  },
  {
    "origin": "template&lt;typename Net , typename... Args&gt;",
    "local": "模板&lt；键入Net，键入Name。。。Args&gt；"
  },
  {
    "origin": "Net::ResultL cv::gapi::infer",
    "local": "网络：：结果cv：：gapi：：推断"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "roi",
    "local": "投资回报率"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Args &amp;&amp;...",
    "local": "参数（&A）&amp；。。。"
  },
  {
    "origin": "args",
    "local": "愤怒"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.infer(",
    "local": "简历：gapi.infere("
  },
  {
    "origin": "name, inputs",
    "local": "名称，输入"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.infer(",
    "local": "简历：gapi.infere("
  },
  {
    "origin": "name, roi, inputs",
    "local": "名称、roi、输入"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.infer(",
    "local": "简历：gapi.infere("
  },
  {
    "origin": "name, rois, inputs",
    "local": "名称、ROI、输入"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates responses for the specified network (template parameter) for every region in the source image.",
    "local": "为源图像中的每个区域计算指定网络（模板参数）的响应。"
  },
  {
    "origin": "Template Parameters",
    "local": "模板参数"
  },
  {
    "origin": "A",
    "local": "A"
  },
  {
    "origin": "network type defined with",
    "local": "用定义的网络类型"
  },
  {
    "origin": "macro.",
    "local": "宏。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "roi",
    "local": "投资回报率"
  },
  {
    "origin": "a list of rectangles describing regions of interest in the source image. Usually an output of object detector or tracker.",
    "local": "描述源图像中感兴趣区域的矩形列表。通常是物体探测器或跟踪器的输出。"
  },
  {
    "origin": "args",
    "local": "愤怒"
  },
  {
    "origin": "network's input parameters as specified in",
    "local": "中指定的网络输入参数"
  },
  {
    "origin": "macro. NOTE: verified to work reliably with 1-input topologies only.",
    "local": "宏。注：经验证，仅适用于单输入拓扑。"
  },
  {
    "origin": "Returns",
    "local": "退换商品"
  },
  {
    "origin": "a list of objects of return type as defined in",
    "local": "中定义的返回类型的对象列表"
  },
  {
    "origin": ". If a network has multiple return values (defined with a tuple), a tuple of GArray&lt;&gt; objects is returned with the appropriate types inside.",
    "local": ". 如果一个网络有多个返回值（用一个元组定义），则一个GArray的元组&lt&燃气轮机；返回的对象中包含适当的类型。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "infer()",
    "local": "推断（）"
  },
  {
    "origin": "[3/6]",
    "local": "[3/6]"
  },
  {
    "origin": "template&lt;typename Net , typename... Args&gt;",
    "local": "模板&lt；键入Net，键入Name。。。Args&gt；"
  },
  {
    "origin": "Net::Result cv::gapi::infer",
    "local": "网络：：结果cv：：gapi：：推断"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "Args &amp;&amp;...",
    "local": "参数（&A）&amp；。。。"
  },
  {
    "origin": "args",
    "local": "愤怒"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.infer(",
    "local": "简历：gapi.infere("
  },
  {
    "origin": "name, inputs",
    "local": "名称，输入"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.infer(",
    "local": "简历：gapi.infere("
  },
  {
    "origin": "name, roi, inputs",
    "local": "名称、roi、输入"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.infer(",
    "local": "简历：gapi.infere("
  },
  {
    "origin": "name, rois, inputs",
    "local": "名称、ROI、输入"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates response for the specified network (template parameter) given the input data.",
    "local": "计算给定输入数据的指定网络（模板参数）的响应。"
  },
  {
    "origin": "Template Parameters",
    "local": "模板参数"
  },
  {
    "origin": "A",
    "local": "A"
  },
  {
    "origin": "network type defined with",
    "local": "用定义的网络类型"
  },
  {
    "origin": "macro.",
    "local": "宏。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "args",
    "local": "愤怒"
  },
  {
    "origin": "network's input parameters as specified in",
    "local": "中指定的网络输入参数"
  },
  {
    "origin": "macro.",
    "local": "宏。"
  },
  {
    "origin": "Returns",
    "local": "退换商品"
  },
  {
    "origin": "an object of return type as defined in",
    "local": "中定义的返回类型的对象"
  },
  {
    "origin": ". If a network has multiple return values (defined with a tuple), a tuple of objects of appropriate type is returned.",
    "local": ". 如果一个网络有多个返回值（用元组定义），则返回一个适当类型的对象元组。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "infer()",
    "local": "推断（）"
  },
  {
    "origin": "[4/6]",
    "local": "[4/6]"
  },
  {
    "origin": "template&lt;typename T = Generic&gt;",
    "local": "模板&lt；typename T=通用&gt；"
  },
  {
    "origin": "cv::gapi::infer",
    "local": "cv:：gapi:：推断"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const std::string &amp;",
    "local": "常量标准：：字符串（&S）；"
  },
  {
    "origin": "tag",
    "local": "标签"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "inputs",
    "local": "输入"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.infer(",
    "local": "简历：gapi.infere("
  },
  {
    "origin": "name, inputs",
    "local": "名称，输入"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.infer(",
    "local": "简历：gapi.infere("
  },
  {
    "origin": "name, roi, inputs",
    "local": "名称、roi、输入"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.infer(",
    "local": "简历：gapi.infere("
  },
  {
    "origin": "name, rois, inputs",
    "local": "名称、ROI、输入"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates response for generic network.",
    "local": "计算通用网络的响应。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "tag",
    "local": "标签"
  },
  {
    "origin": "a network tag",
    "local": "网络标签"
  },
  {
    "origin": "inputs",
    "local": "输入"
  },
  {
    "origin": "networks's inputs",
    "local": "网络的输入"
  },
  {
    "origin": "Returns",
    "local": "退换商品"
  },
  {
    "origin": "a GInferOutputs",
    "local": "金佛兰"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "infer()",
    "local": "推断（）"
  },
  {
    "origin": "[5/6]",
    "local": "[5/6]"
  },
  {
    "origin": "template&lt;typename T = Generic&gt;",
    "local": "模板&lt；typename T=通用&gt；"
  },
  {
    "origin": "cv::gapi::infer",
    "local": "cv:：gapi:：推断"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const std::string &amp;",
    "local": "常量标准：：字符串（&S）；"
  },
  {
    "origin": "tag",
    "local": "标签"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;",
    "local": "&燃气轮机&amp；"
  },
  {
    "origin": "roi",
    "local": "投资回报率"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "inputs",
    "local": "输入"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.infer(",
    "local": "简历：gapi.infere("
  },
  {
    "origin": "name, inputs",
    "local": "名称，输入"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.infer(",
    "local": "简历：gapi.infere("
  },
  {
    "origin": "name, roi, inputs",
    "local": "名称、roi、输入"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.infer(",
    "local": "简历：gapi.infere("
  },
  {
    "origin": "name, rois, inputs",
    "local": "名称、ROI、输入"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates response for the generic network for the specified region in the source image. Currently expects a single-input network only.",
    "local": "计算源映像中指定区域的通用网络响应。目前只需要一个输入网络。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "tag",
    "local": "标签"
  },
  {
    "origin": "a network tag",
    "local": "网络标签"
  },
  {
    "origin": "roi",
    "local": "投资回报率"
  },
  {
    "origin": "a an object describing the region of interest in the source image. May be calculated in the same graph dynamically.",
    "local": "描述源图像中感兴趣区域的对象。可在同一图形中动态计算。"
  },
  {
    "origin": "inputs",
    "local": "输入"
  },
  {
    "origin": "networks's inputs",
    "local": "网络的输入"
  },
  {
    "origin": "Returns",
    "local": "退换商品"
  },
  {
    "origin": "a",
    "local": "一"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "infer()",
    "local": "推断（）"
  },
  {
    "origin": "[6/6]",
    "local": "[6/6]"
  },
  {
    "origin": "template&lt;typename T = Generic&gt;",
    "local": "模板&lt；typename T=通用&gt；"
  },
  {
    "origin": "cv::gapi::infer",
    "local": "cv:：gapi:：推断"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const std::string &amp;",
    "local": "常量标准：：字符串（&S）；"
  },
  {
    "origin": "tag",
    "local": "标签"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;",
    "local": "&燃气轮机&amp；"
  },
  {
    "origin": "rois",
    "local": "国王"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "inputs",
    "local": "输入"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.infer(",
    "local": "简历：gapi.infere("
  },
  {
    "origin": "name, inputs",
    "local": "名称，输入"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.infer(",
    "local": "简历：gapi.infere("
  },
  {
    "origin": "name, roi, inputs",
    "local": "名称、roi、输入"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.infer(",
    "local": "简历：gapi.infere("
  },
  {
    "origin": "name, rois, inputs",
    "local": "名称、ROI、输入"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates responses for the specified network for every region in the source image.",
    "local": "为源映像中的每个区域计算指定网络的响应。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "tag",
    "local": "标签"
  },
  {
    "origin": "a network tag",
    "local": "网络标签"
  },
  {
    "origin": "rois",
    "local": "国王"
  },
  {
    "origin": "a list of rectangles describing regions of interest in the source image. Usually an output of object detector or tracker.",
    "local": "描述源图像中感兴趣区域的矩形列表。通常是物体探测器或跟踪器的输出。"
  },
  {
    "origin": "inputs",
    "local": "输入"
  },
  {
    "origin": "networks's inputs",
    "local": "网络的输入"
  },
  {
    "origin": "Returns",
    "local": "退换商品"
  },
  {
    "origin": "a",
    "local": "一"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "infer2()",
    "local": "推断2（）"
  },
  {
    "origin": "[1/2]",
    "local": "[1/2]"
  },
  {
    "origin": "template&lt;typename Net , typename T , typename... Args&gt;",
    "local": "模板&lt；键入Net，键入T，键入Name。。。Args&gt；"
  },
  {
    "origin": "Net::ResultL cv::gapi::infer2",
    "local": "Net：：ResultL cv：：gapi：：infer2"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "T",
    "local": "T"
  },
  {
    "origin": "image",
    "local": "形象"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&lt; Args &gt;...",
    "local": "&lt；参数&gt；…"
  },
  {
    "origin": "args",
    "local": "愤怒"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.infer2(",
    "local": "简历gapi.2("
  },
  {
    "origin": "name, in, inputs",
    "local": "名称、输入"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates responses for the specified network (template parameter) for every region in the source image, extended version.",
    "local": "为源映像扩展版本中的每个区域计算指定网络（模板参数）的响应。"
  },
  {
    "origin": "Template Parameters",
    "local": "模板参数"
  },
  {
    "origin": "A",
    "local": "A"
  },
  {
    "origin": "network type defined with",
    "local": "用定义的网络类型"
  },
  {
    "origin": "macro.",
    "local": "宏。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "image",
    "local": "形象"
  },
  {
    "origin": "A source image containing regions of interest",
    "local": "包含感兴趣区域的源图像"
  },
  {
    "origin": "args",
    "local": "愤怒"
  },
  {
    "origin": "GArray&lt;&gt; objects of",
    "local": "加里&lt&燃气轮机；的对象"
  },
  {
    "origin": "or",
    "local": "或"
  },
  {
    "origin": ", one per every network input:",
    "local": "，每个网络输入一个："
  },
  {
    "origin": "If a cv::GArray&lt;cv::Rect&gt; is passed, the appropriate regions are taken from",
    "local": "如果是简历：：加里&lt；cv：：矩形&gt；如果通过，则从"
  },
  {
    "origin": "and preprocessed to this particular network input;",
    "local": "并对这个特定的网络输入进行预处理；"
  },
  {
    "origin": "If a cv::GArray&lt;cv::GMat&gt; is passed, the underlying data traited as tensor (no automatic preprocessing happen).",
    "local": "如果是简历：：加里&lt；简历：：GMat&gt；传递时，底层数据以张量形式跟踪（不进行自动预处理）。"
  },
  {
    "origin": "Returns",
    "local": "退换商品"
  },
  {
    "origin": "a list of objects of return type as defined in",
    "local": "中定义的返回类型的对象列表"
  },
  {
    "origin": ". If a network has multiple return values (defined with a tuple), a tuple of GArray&lt;&gt; objects is returned with the appropriate types inside.",
    "local": ". 如果一个网络有多个返回值（用一个元组定义），则一个GArray的元组&lt&燃气轮机；返回的对象中包含适当的类型。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "infer2()",
    "local": "推断2（）"
  },
  {
    "origin": "[2/2]",
    "local": "[2/2]"
  },
  {
    "origin": "template&lt;typename T = Generic, typename Input &gt;",
    "local": "模板&lt；typename T=Generic，typename Input&gt；"
  },
  {
    "origin": "std::enable_if&lt;",
    "local": "std：：启用\\u if&lt；"
  },
  {
    "origin": "&lt;Input&gt;::value,",
    "local": "&lt；输入（&gt；：：价值观，"
  },
  {
    "origin": "&gt;::type cv::gapi::infer2",
    "local": "&gt；：：类型cv:：gapi:：infer2"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const std::string &amp;",
    "local": "常量标准：：字符串（&S）；"
  },
  {
    "origin": "tag",
    "local": "标签"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const Input &amp;",
    "local": "常量输入和；"
  },
  {
    "origin": "in",
    "local": "在里面"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "inputs",
    "local": "输入"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.infer2(",
    "local": "简历gapi.2("
  },
  {
    "origin": "name, in, inputs",
    "local": "名称、输入"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates responses for the specified network for every region in the source image, extended version.",
    "local": "为源映像扩展版本中的每个区域计算指定网络的响应。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "tag",
    "local": "标签"
  },
  {
    "origin": "a network tag",
    "local": "网络标签"
  },
  {
    "origin": "in",
    "local": "在里面"
  },
  {
    "origin": "a source image containing regions of interest.",
    "local": "包含感兴趣区域的源图像。"
  },
  {
    "origin": "inputs",
    "local": "输入"
  },
  {
    "origin": "networks's inputs",
    "local": "网络的输入"
  },
  {
    "origin": "Returns",
    "local": "退换商品"
  },
  {
    "origin": "a",
    "local": "一"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "island()",
    "local": "岛（）"
  },
  {
    "origin": "void cv::gapi::island",
    "local": "void cv:：gapi:：岛"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const std::string &amp;",
    "local": "常量标准：：字符串（&S）；"
  },
  {
    "origin": "name",
    "local": "名称"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&amp;&amp;",
    "local": "&amp&amp；"
  },
  {
    "origin": "ins",
    "local": "ins公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&amp;&amp;",
    "local": "&amp&amp；"
  },
  {
    "origin": "outs",
    "local": "出局"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Define an tagged island (subgraph) within a computation.",
    "local": "在计算中定义带标记的孤岛（子图）。"
  },
  {
    "origin": "Declare an Island tagged with",
    "local": "声明一个标记为"
  },
  {
    "origin": "and defined from",
    "local": "定义自"
  },
  {
    "origin": "to",
    "local": "到"
  },
  {
    "origin": "(exclusively, as ins/outs are data objects, and regioning is done on operations level). Throws if any operation between",
    "local": "（独占地，因为输入/输出是数据对象，并且区域化是在操作级别上完成的）。如果在"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": "are already assigned to another island.",
    "local": "已经分配到另一个岛。"
  },
  {
    "origin": "Islands allow to partition graph into subgraphs, fine-tuning the way it is scheduled by the underlying executor.",
    "local": "孤岛允许将图划分为子图，从而微调底层执行器对其进行调度的方式。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "name",
    "local": "名称"
  },
  {
    "origin": "name of the Island to create",
    "local": "要创建的岛的名称"
  },
  {
    "origin": "ins",
    "local": "ins公司"
  },
  {
    "origin": "vector of input data objects where the subgraph begins",
    "local": "子图开始处的输入数据对象的向量"
  },
  {
    "origin": "outs",
    "local": "出局"
  },
  {
    "origin": "vector of output data objects where the subgraph ends.",
    "local": "子图结束处的输出数据对象的向量。"
  },
  {
    "origin": "The way how an island is defined is similar to how",
    "local": "岛屿的定义方式与"
  },
  {
    "origin": "is defined on input/output data objects. Same rules apply here as well – if there's no functional dependency between inputs and outputs or there's not enough input data objects were specified to properly calculate all outputs, an exception is thrown.",
    "local": "在输入/输出数据对象上定义。同样的规则也适用于这里——如果输入和输出之间没有函数依赖关系，或者没有指定足够的输入数据对象来正确计算所有输出，则抛出异常。"
  },
  {
    "origin": "Use",
    "local": "使用"
  },
  {
    "origin": "/",
    "local": "/"
  },
  {
    "origin": "to specify input/output vectors.",
    "local": "指定输入/输出向量。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "kmeans()",
    "local": "kmeans（）"
  },
  {
    "origin": "[1/4]",
    "local": "[1/4]"
  },
  {
    "origin": "std::tuple&lt;",
    "local": "标准：：元组&lt；"
  },
  {
    "origin": "&lt;double&gt;,",
    "local": "&lt；双倍（&gt），"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&gt; cv::gapi::kmeans",
    "local": "&燃气轮机；cv:：gapi:：kmeans"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "data",
    "local": "数据"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const int",
    "local": "const int"
  },
  {
    "origin": "K",
    "local": "K"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "bestLabels",
    "local": "最佳标签"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "criteria",
    "local": "标准"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const int",
    "local": "const int"
  },
  {
    "origin": "attempts",
    "local": "尝试"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.kmeans(",
    "local": "简历gapi.kmeans("
  },
  {
    "origin": "data, K, criteria, attempts, flags",
    "local": "数据、K、条件、尝试、标志"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.kmeans(",
    "local": "简历gapi.kmeans("
  },
  {
    "origin": "data, K, bestLabels, criteria, attempts, flags",
    "local": "数据，K，最佳标签，标准，尝试，标志"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Finds centers of clusters and groups input samples around the clusters.",
    "local": "查找簇的中心并围绕簇对输入样本进行分组。"
  },
  {
    "origin": "The function kmeans implements a k-means algorithm that finds the centers of K clusters and groups the input samples around the clusters. As an output, \\(\\texttt{bestLabels}_i\\) contains a 0-based cluster index for the \\(i^{th}\\) sample.",
    "local": "函数kmeans实现了一个k-means算法，该算法找到k个簇的中心，并将输入样本分组到簇周围。作为输出，\\（\\texttt{bestLabels}\\u i\\）包含一个基于0的\\（i^{th}\\）样本聚类索引。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "Function textual ID is \"org.opencv.core.kmeansND\"",
    "local": "函数文本ID为“org.opencv.core.kmeansND”"
  },
  {
    "origin": "In case of an N-dimentional points' set given, input",
    "local": "在给定N维点集的情况下，输入"
  },
  {
    "origin": "can have the following traits: 2 dimensions, a single row or column if there are N channels, or N columns if there is a single channel.",
    "local": "可以具有以下特性：2维，如果有N个通道，则为一行或一列；如果有一个通道，则为N列。"
  },
  {
    "origin": "should have",
    "local": "应该有"
  },
  {
    "origin": "depth.",
    "local": "深度。"
  },
  {
    "origin": "Although, if",
    "local": "尽管，如果"
  },
  {
    "origin": "with height != 1, width != 1, channels != 1 given as data, n-dimensional samples are considered given in amount of A, where A = height, n = width * channels.",
    "local": "高度！=1，宽度！=1，频道！=1作为数据给出，n维样本视为以A的数量给出，其中A=高度，n=宽度*通道。"
  },
  {
    "origin": "In case of",
    "local": "万一"
  },
  {
    "origin": "given as data:",
    "local": "作为数据给出："
  },
  {
    "origin": "the output labels are returned as 1-channel",
    "local": "输出标签作为单通道返回"
  },
  {
    "origin": "with sizes width = 1, height = A, where A is samples amount, or width = bestLabels.width, height = bestLabels.height if bestLabels given;",
    "local": "尺寸宽度=1，高度=A，其中A是样本量，或宽度=bestLabels.width，高度=bestLabels.height（如果给定bestLabels）；"
  },
  {
    "origin": "the cluster centers are returned as 1-channel",
    "local": "集群中心作为单通道返回"
  },
  {
    "origin": "with sizes width = n, height = K, where n is samples' dimentionality and K is clusters' amount.",
    "local": "尺寸宽度=n，高度=K，其中n是样本的维数，K是簇的数量。"
  },
  {
    "origin": "As one of possible usages, if you want to control the initial labels for each attempt by yourself, you can utilize just the core of the function. To do that, set the number of attempts to 1, initialize labels each time using a custom algorithm, pass them with the ( flags =",
    "local": "作为一种可能的用法，如果您想自己控制每次尝试的初始标签，您可以只使用函数的核心。为此，请将尝试次数设置为1，每次使用自定义算法初始化标签，并使用（标志）传递它们="
  },
  {
    "origin": ") flag, and then choose the best (most-compact) clustering.",
    "local": ")标记，然后选择最佳（最紧凑的）聚类。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "data",
    "local": "数据"
  },
  {
    "origin": "Data for clustering. An array of N-Dimensional points with float coordinates is needed. Function can take GArray&lt;Point2f&gt;, GArray&lt;Point3f&gt; for 2D and 3D cases or",
    "local": "用于聚类的数据。需要一个具有浮动坐标的N维点数组。函数可以接受GArray&lt；点2f&gt；，加里&lt；点3f&gt；对于2D和3D情况或"
  },
  {
    "origin": "for any dimentionality and channels.",
    "local": "对于任何维度和通道。"
  },
  {
    "origin": "K",
    "local": "K"
  },
  {
    "origin": "Number of clusters to split the set by.",
    "local": "要拆分集合的簇数。"
  },
  {
    "origin": "bestLabels",
    "local": "最佳标签"
  },
  {
    "origin": "Optional input integer array that can store the supposed initial cluster indices for every sample. Used when ( flags =",
    "local": "可选的输入整数数组，可以存储每个样本的假定初始簇索引。使用时（标志）="
  },
  {
    "origin": ") flag is set.",
    "local": ")标志已设置。"
  },
  {
    "origin": "criteria",
    "local": "标准"
  },
  {
    "origin": "The algorithm termination criteria, that is, the maximum number of iterations and/or the desired accuracy. The accuracy is specified as criteria.epsilon. As soon as each of the cluster centers moves by less than criteria.epsilon on some iteration, the algorithm stops.",
    "local": "算法终止标准，即最大迭代次数和/或所需精度。准确度指定为criteria.epsilon。一旦每个聚类中心在某个迭代中的移动小于criteria.epsilon，算法就会停止。"
  },
  {
    "origin": "attempts",
    "local": "尝试"
  },
  {
    "origin": "Flag to specify the number of times the algorithm is executed using different initial labellings. The algorithm returns the labels that yield the best compactness (see the first function return value).",
    "local": "用于指定使用不同初始标签执行算法的次数的标志。该算法返回产生最佳紧性的标签（参见第一个函数返回值）。"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": "Flag that can take values of",
    "local": "可以接受的值的标志"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Returns",
    "local": "退换商品"
  },
  {
    "origin": "Compactness measure that is computed as",
    "local": "计算为"
  },
  {
    "origin": "\\[\\sum _i \\| \\texttt{samples} _i - \\texttt{centers} _{ \\texttt{labels} _i} \\| ^2\\]",
    "local": "\\[\\sum | \\texttt{samples}u i-\\texttt{centers}u{\\texttt{labels}u i}\\^2\\]"
  },
  {
    "origin": "after every attempt. The best (minimum) value is chosen and the corresponding labels and the compactness value are returned by the function.",
    "local": "每次尝试之后。选择最佳（最小）值，函数返回相应的标签和紧度值。"
  },
  {
    "origin": "Integer array that stores the cluster indices for every sample.",
    "local": "存储每个样本的群集索引的整数数组。"
  },
  {
    "origin": "Array of the cluster centers.",
    "local": "群集中心的数组。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "kmeans()",
    "local": "kmeans（）"
  },
  {
    "origin": "[2/4]",
    "local": "[2/4]"
  },
  {
    "origin": "std::tuple&lt;",
    "local": "标准：：元组&lt；"
  },
  {
    "origin": "&lt;double&gt;,",
    "local": "&lt；双倍（&gt），"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "&gt; cv::gapi::kmeans",
    "local": "&燃气轮机；cv:：gapi:：kmeans"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "data",
    "local": "数据"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const int",
    "local": "const int"
  },
  {
    "origin": "K",
    "local": "K"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "criteria",
    "local": "标准"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const int",
    "local": "const int"
  },
  {
    "origin": "attempts",
    "local": "尝试"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.kmeans(",
    "local": "简历gapi.kmeans("
  },
  {
    "origin": "data, K, criteria, attempts, flags",
    "local": "数据、K、条件、尝试、标志"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.kmeans(",
    "local": "简历gapi.kmeans("
  },
  {
    "origin": "data, K, bestLabels, criteria, attempts, flags",
    "local": "数据，K，最佳标签，标准，尝试，标志"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "Function textual ID is \"org.opencv.core.kmeansNDNoInit\"",
    "local": "函数文本ID为“org.opencv.core.kmeansNDNoInit”"
  },
  {
    "origin": "flag must not be set while using this overload.",
    "local": "使用此重载时不能设置标志。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "kmeans()",
    "local": "kmeans（）"
  },
  {
    "origin": "[3/4]",
    "local": "[3/4]"
  },
  {
    "origin": "std::tuple&lt;",
    "local": "标准：：元组&lt；"
  },
  {
    "origin": "&lt;double&gt;,",
    "local": "&lt；双倍（&gt），"
  },
  {
    "origin": "&lt;int&gt;,",
    "local": "&lt；整数&gt；，"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &gt; cv::gapi::kmeans",
    "local": "&gt；gt；燃气轮机；cv:：gapi:：kmeans"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;",
    "local": "&燃气轮机&amp；"
  },
  {
    "origin": "data",
    "local": "数据"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const int",
    "local": "const int"
  },
  {
    "origin": "K",
    "local": "K"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&lt; int &gt; &amp;",
    "local": "&lt；国际&gt；安培；"
  },
  {
    "origin": "bestLabels",
    "local": "最佳标签"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "criteria",
    "local": "标准"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const int",
    "local": "const int"
  },
  {
    "origin": "attempts",
    "local": "尝试"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.kmeans(",
    "local": "简历gapi.kmeans("
  },
  {
    "origin": "data, K, criteria, attempts, flags",
    "local": "数据、K、条件、尝试、标志"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.kmeans(",
    "local": "简历gapi.kmeans("
  },
  {
    "origin": "data, K, bestLabels, criteria, attempts, flags",
    "local": "数据，K，最佳标签，标准，尝试，标志"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "Function textual ID is \"org.opencv.core.kmeans2D\"",
    "local": "函数文本ID为“org.opencv.core.kmeans2D”"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "kmeans()",
    "local": "kmeans（）"
  },
  {
    "origin": "[4/4]",
    "local": "[4/4]"
  },
  {
    "origin": "std::tuple&lt;",
    "local": "标准：：元组&lt；"
  },
  {
    "origin": "&lt;double&gt;,",
    "local": "&lt；双倍（&gt），"
  },
  {
    "origin": "&lt;int&gt;,",
    "local": "&lt；整数&gt；，"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &gt; cv::gapi::kmeans",
    "local": "&gt；gt；燃气轮机；cv:：gapi:：kmeans"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;",
    "local": "&燃气轮机&amp；"
  },
  {
    "origin": "data",
    "local": "数据"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const int",
    "local": "const int"
  },
  {
    "origin": "K",
    "local": "K"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&lt; int &gt; &amp;",
    "local": "&lt；国际&gt；安培；"
  },
  {
    "origin": "bestLabels",
    "local": "最佳标签"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "criteria",
    "local": "标准"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const int",
    "local": "const int"
  },
  {
    "origin": "attempts",
    "local": "尝试"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "flags",
    "local": "旗帜"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.kmeans(",
    "local": "简历gapi.kmeans("
  },
  {
    "origin": "data, K, criteria, attempts, flags",
    "local": "数据、K、条件、尝试、标志"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.kmeans(",
    "local": "简历gapi.kmeans("
  },
  {
    "origin": "data, K, bestLabels, criteria, attempts, flags",
    "local": "数据，K，最佳标签，标准，尝试，标志"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "Function textual ID is \"org.opencv.core.kmeans3D\"",
    "local": "函数文本ID为“org.opencv.core.kmeans3D”"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "networks()",
    "local": "网络（）"
  },
  {
    "origin": "template&lt;typename... Args&gt;",
    "local": "模板&lt；类型名。。。Args&gt；"
  },
  {
    "origin": "cv::gapi::networks",
    "local": "cv:：gapi:：网络"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "Args &amp;&amp;...",
    "local": "参数（&A）&amp；。。。"
  },
  {
    "origin": "args",
    "local": "愤怒"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.networks(",
    "local": "简历：gapi.networks("
  },
  {
    "origin": "params",
    "local": "参数"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "operator!=()",
    "local": "操作员！=（）"
  },
  {
    "origin": "bool cv::gapi::operator!=",
    "local": "bool cv：：gapi：：运算符="
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "lhs",
    "local": "左侧"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "rhs",
    "local": "右侧"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "inline",
    "local": "内联"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "parseSSD()",
    "local": "parseSSD（）"
  },
  {
    "origin": "[1/2]",
    "local": "[1/2]"
  },
  {
    "origin": "std::tuple&lt;",
    "local": "标准：：元组&lt；"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;,",
    "local": "&gt；，"
  },
  {
    "origin": "&lt;int&gt; &gt; cv::gapi::parseSSD",
    "local": "&lt；内部&gt；&gt；燃气轮机；简历：：gapi：：parseSSD"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "in",
    "local": "在里面"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;",
    "local": "&燃气轮机&amp；"
  },
  {
    "origin": "inSz",
    "local": "inSz公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const float",
    "local": "常量浮点"
  },
  {
    "origin": "confidenceThreshold",
    "local": "信心阈值"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const int",
    "local": "const int"
  },
  {
    "origin": "filterLabel",
    "local": "滤波器"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.parseSSD(",
    "local": "简历：gapi.parseSSD("
  },
  {
    "origin": "in, inSz[, confidenceThreshold[, alignmentToSquare[, filterOutOfBounds]]]",
    "local": "在中，inSz[，confidenceThreshold[，alignmentToSquare[，filterOutOfBounds]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Parses output of SSD network.",
    "local": "解析SSD网络的输出。"
  },
  {
    "origin": "Extracts detection information (box, confidence, label) from SSD output and filters it by given confidence and label.",
    "local": "从SSD输出中提取检测信息（box、confidence、label），并根据给定的confidence和label对其进行过滤。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "Function textual ID is \"org.opencv.nn.parsers.parseSSD_BL\"",
    "local": "函数文本ID为“org.opencv.nn.parsers.parseSSD\\u BL”"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "in",
    "local": "在里面"
  },
  {
    "origin": "Input CV_32F tensor with {1,1,N,7} dimensions.",
    "local": "输入{1，1，N，7}维的cv32f张量。"
  },
  {
    "origin": "inSz",
    "local": "inSz公司"
  },
  {
    "origin": "Size to project detected boxes to (size of the input image).",
    "local": "将检测到的框投影到的大小（输入图像的大小）。"
  },
  {
    "origin": "confidenceThreshold",
    "local": "信心阈值"
  },
  {
    "origin": "If confidence of the detection is smaller than confidence threshold, detection is rejected.",
    "local": "如果检测的置信度小于置信阈值，则拒绝检测。"
  },
  {
    "origin": "filterLabel",
    "local": "滤波器"
  },
  {
    "origin": "If provided (!= -1), only detections with given label will get to the output.",
    "local": "如果提供（！=-1） ，只有具有给定标签的检测才会到达输出。"
  },
  {
    "origin": "Returns",
    "local": "退换商品"
  },
  {
    "origin": "a tuple with a vector of detected boxes and a vector of appropriate labels.",
    "local": "一个元组，包含一个检测到的框向量和一个适当标签向量。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "parseSSD()",
    "local": "parseSSD（）"
  },
  {
    "origin": "[2/2]",
    "local": "[2/2]"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; cv::gapi::parseSSD",
    "local": "&燃气轮机；简历：：gapi：：parseSSD"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "in",
    "local": "在里面"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;",
    "local": "&燃气轮机&amp；"
  },
  {
    "origin": "inSz",
    "local": "inSz公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const float",
    "local": "常量浮点"
  },
  {
    "origin": "confidenceThreshold",
    "local": "信心阈值"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const bool",
    "local": "康斯特布尔"
  },
  {
    "origin": "alignmentToSquare",
    "local": "对齐到正方形"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const bool",
    "local": "康斯特布尔"
  },
  {
    "origin": "filterOutOfBounds",
    "local": "过滤器自动边界"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.gapi.parseSSD(",
    "local": "简历：gapi.parseSSD("
  },
  {
    "origin": "in, inSz[, confidenceThreshold[, alignmentToSquare[, filterOutOfBounds]]]",
    "local": "在中，inSz[，confidenceThreshold[，alignmentToSquare[，filterOutOfBounds]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Extracts detection information (box, confidence) from SSD output and filters it by given confidence and by going out of bounds.",
    "local": "这是一个重载成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。从SSD输出中提取检测信息（框，置信度），并根据给定的置信度和越界对其进行过滤。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "Function textual ID is \"org.opencv.nn.parsers.parseSSD\"",
    "local": "函数文本ID为“org.opencv.nn.parsers.parseSSD”"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "in",
    "local": "在里面"
  },
  {
    "origin": "Input CV_32F tensor with {1,1,N,7} dimensions.",
    "local": "输入{1，1，N，7}维的cv32f张量。"
  },
  {
    "origin": "inSz",
    "local": "inSz公司"
  },
  {
    "origin": "Size to project detected boxes to (size of the input image).",
    "local": "将检测到的框投影到的大小（输入图像的大小）。"
  },
  {
    "origin": "confidenceThreshold",
    "local": "信心阈值"
  },
  {
    "origin": "If confidence of the detection is smaller than confidence threshold, detection is rejected.",
    "local": "如果检测的置信度小于置信阈值，则拒绝检测。"
  },
  {
    "origin": "alignmentToSquare",
    "local": "对齐到正方形"
  },
  {
    "origin": "If provided true, bounding boxes are extended to squares. The center of the rectangle remains unchanged, the side of the square is the larger side of the rectangle.",
    "local": "如果提供true，边界框将扩展为正方形。矩形的中心保持不变，正方形的边是矩形的大边。"
  },
  {
    "origin": "filterOutOfBounds",
    "local": "过滤器自动边界"
  },
  {
    "origin": "If provided true, out-of-frame boxes are filtered.",
    "local": "如果提供true，则过滤帧外框。"
  },
  {
    "origin": "Returns",
    "local": "退换商品"
  },
  {
    "origin": "a vector of detected bounding boxes.",
    "local": "检测到的边界框的向量。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "parseYolo()",
    "local": "parseYolo（）"
  },
  {
    "origin": "std::tuple&lt;",
    "local": "标准：：元组&lt；"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;,",
    "local": "&gt；，"
  },
  {
    "origin": "&lt;int&gt; &gt; cv::gapi::parseYolo",
    "local": "&lt；内部&gt；&gt；燃气轮机；简历：：gapi：：parseYolo"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "in",
    "local": "在里面"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;",
    "local": "&燃气轮机&amp；"
  },
  {
    "origin": "inSz",
    "local": "inSz公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const float",
    "local": "常量浮点"
  },
  {
    "origin": "confidenceThreshold",
    "local": "信心阈值"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const float",
    "local": "常量浮点"
  },
  {
    "origin": "nmsThreshold",
    "local": "NMS阈值"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const std::vector&lt; float &gt; &amp;",
    "local": "常量标准：：向量&lt；浮动&gt&amp；"
  },
  {
    "origin": "anchors",
    "local": "锚"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Parses output of Yolo network.",
    "local": "解析Yolo网络的输出。"
  },
  {
    "origin": "Extracts detection information (box, confidence, label) from Yolo output, filters it by given confidence and performs non-maximum supression for overlapping boxes.",
    "local": "从Yolo输出中提取检测信息（box，confidence，label），根据给定的置信度进行过滤，并对重叠的box进行非最大化抑制。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "Function textual ID is \"org.opencv.nn.parsers.parseYolo\"",
    "local": "函数文本ID为“org.opencv.nn.parsers.parseYolo”"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "in",
    "local": "在里面"
  },
  {
    "origin": "Input CV_32F tensor with {1,13,13,N} dimensions, N should satisfy:",
    "local": "输入{1,13,13，N}维的cv32f张量，N应满足："
  },
  {
    "origin": "\\[\\texttt{N} = (\\texttt{num_classes} + \\texttt{5}) * \\texttt{5},\\]",
    "local": "\\[\\ texttt{n}=（\\ texttt{num classes}+\\ texttt{5}）*\\ texttt{5}，\\"
  },
  {
    "origin": "where num_classes - a number of classes Yolo network was trained with.",
    "local": "其中num_类-Yolo network培训的许多类。"
  },
  {
    "origin": "inSz",
    "local": "inSz公司"
  },
  {
    "origin": "Size to project detected boxes to (size of the input image).",
    "local": "将检测到的框投影到的大小（输入图像的大小）。"
  },
  {
    "origin": "confidenceThreshold",
    "local": "信心阈值"
  },
  {
    "origin": "If confidence of the detection is smaller than confidence threshold, detection is rejected.",
    "local": "如果检测的置信度小于置信阈值，则拒绝检测。"
  },
  {
    "origin": "nmsThreshold",
    "local": "NMS阈值"
  },
  {
    "origin": "Non-maximum supression threshold which controls minimum relative box intersection area required for rejecting the box with a smaller confidence. If 1.f, nms is not performed and no boxes are rejected.",
    "local": "非最大抑制阈值，用于控制最小相对盒交叉区域，以拒绝置信度较小的盒。如果1.f，则不执行nms，并且不拒绝任何框。"
  },
  {
    "origin": "anchors",
    "local": "锚"
  },
  {
    "origin": "Anchors Yolo network was trained with.",
    "local": "主播约洛网络训练。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "The default anchor values are specified for YOLO v2 Tiny as described in Intel Open Model Zoo",
    "local": "默认锚定值是为YOLO v2 Tiny指定的，如Intel Open Model Zoo中所述"
  },
  {
    "origin": "documentation",
    "local": "文档"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Returns",
    "local": "退换商品"
  },
  {
    "origin": "a tuple with a vector of detected boxes and a vector of appropriate labels.",
    "local": "一个元组，包含一个检测到的框向量和一个适当标签向量。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "serialize()",
    "local": "序列化（）"
  },
  {
    "origin": "[1/5]",
    "local": "[1/5]"
  },
  {
    "origin": "std::vector&lt;char&gt; cv::gapi::serialize",
    "local": "标准：：向量&lt；字符&gt；cv:：gapi:：序列化"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "c",
    "local": "c"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "serialize()",
    "local": "序列化（）"
  },
  {
    "origin": "[2/5]",
    "local": "[2/5]"
  },
  {
    "origin": "std::vector&lt;char&gt; cv::gapi::serialize",
    "local": "标准：：向量&lt；字符&gt；cv:：gapi:：序列化"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "serialize()",
    "local": "序列化（）"
  },
  {
    "origin": "[3/5]",
    "local": "[3/5]"
  },
  {
    "origin": "std::vector&lt;char&gt; cv::gapi::serialize",
    "local": "标准：：向量&lt；字符&gt；cv:：gapi:：序列化"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "serialize()",
    "local": "序列化（）"
  },
  {
    "origin": "[4/5]",
    "local": "[4/5]"
  },
  {
    "origin": "std::vector&lt;char&gt; cv::gapi::serialize",
    "local": "标准：：向量&lt；字符&gt；cv:：gapi:：序列化"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "serialize()",
    "local": "序列化（）"
  },
  {
    "origin": "[5/5]",
    "local": "[5/5]"
  },
  {
    "origin": "std::vector&lt;char&gt; cv::gapi::serialize",
    "local": "标准：：向量&lt；字符&gt；cv:：gapi:：序列化"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const std::vector&lt; std::string &gt; &amp;",
    "local": "常量标准：：向量&lt；标准：：字符串&gt&amp；"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "stereo()",
    "local": "立体声（）"
  },
  {
    "origin": "cv::gapi::stereo",
    "local": "cv：：gapi：：立体声"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "left",
    "local": "左边"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "right",
    "local": "正确的"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "of",
    "local": "属于"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Extract disparity/depth information depending on passed StereoOutputFormat argument. The function extracts disparity/depth information depending on passed StereoOutputFormat argument from given stereo-pair.",
    "local": "根据传递的StereoOutputFormat参数提取视差/深度信息。该函数根据从给定立体对传递的StereoOutputFormat参数提取视差/深度信息。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "left",
    "local": "左边"
  },
  {
    "origin": "left 8-bit unsigned 1-channel image of",
    "local": "的左8位无符号单通道图像"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": "right",
    "local": "正确的"
  },
  {
    "origin": "right 8-bit unsigned 1-channel image of",
    "local": "右8位无符号单通道图像"
  },
  {
    "origin": "type",
    "local": "类型"
  },
  {
    "origin": "of",
    "local": "属于"
  },
  {
    "origin": "enum to specify output kind: depth or disparity and corresponding type",
    "local": "枚举以指定输出类型：深度或差异以及相应的类型"
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:47 for OpenCV by",
    "local": "于2021年4月2日星期五11:36:47为OpenCV生成"
  }
]