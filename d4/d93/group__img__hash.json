[
  {
    "origin": "OpenCV: The module brings implementations of different image hashing algorithms.",
    "local": "OpenCV：该模块提供了不同的图像哈希算法的实现。"
  },
  {
    "origin": "OpenCV",
    "local": "打开CV"
  },
  {
    "origin": "Open Source Computer Vision",
    "local": "开源计算机视觉"
  },
  {
    "origin": "Classes",
    "local": "班级"
  },
  {
    "origin": "Enumerations",
    "local": "枚举"
  },
  {
    "origin": "Functions",
    "local": "功能"
  },
  {
    "origin": "The module brings implementations of different image hashing algorithms.",
    "local": "该模块提供了不同的图像哈希算法的实现。"
  },
  {
    "origin": "Classes",
    "local": "班级"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "Computes average hash value of the input image.",
    "local": "计算输入图像的平均哈希值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "Image hash based on block mean.",
    "local": "基于块均值的图像哈希算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "Image hash based on color moments.",
    "local": "基于颜色矩的图像哈希。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "The base class for image hash algorithms.",
    "local": "图像哈希算法的基类。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "Marr-Hildreth Operator Based Hash, slowest but more discriminative.",
    "local": "基于Marr-Hildreth运算符的散列，速度最慢但更具区分性。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "pHash",
    "local": ""
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "class",
    "local": "班"
  },
  {
    "origin": "Image hash based on Radon transform.",
    "local": "基于Radon变换的图像哈希算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Enumerations",
    "local": "枚举"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "Functions",
    "local": "功能"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "inputArr,",
    "local": "输入端，"
  },
  {
    "origin": "outputArr)",
    "local": "输出（RR）"
  },
  {
    "origin": "Calculates",
    "local": "计算"
  },
  {
    "origin": "in one call.",
    "local": "一个电话。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "inputArr,",
    "local": "输入端，"
  },
  {
    "origin": "outputArr, int mode=",
    "local": "输出，int模式="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Computes block mean hash of the input image.",
    "local": "计算输入图像的块平均哈希。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "inputArr,",
    "local": "输入端，"
  },
  {
    "origin": "outputArr)",
    "local": "输出（RR）"
  },
  {
    "origin": "Computes color moment hash of the input, the algorithm is come from the paper \"Perceptual Hashing for Color Images Using Invariant Moments\".",
    "local": "计算输入的颜色矩散列，算法来源于“利用不变矩对彩色图像进行感知散列”一文。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "inputArr,",
    "local": "输入端，"
  },
  {
    "origin": "outputArr, float alpha=2.0f, float scale=1.0f)",
    "local": "输出，浮点alpha=2.0f，浮点标度=1.0f）"
  },
  {
    "origin": "Computes average hash value of the input image.",
    "local": "计算输入图像的平均哈希值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "inputArr,",
    "local": "输入端，"
  },
  {
    "origin": "outputArr)",
    "local": "输出（RR）"
  },
  {
    "origin": "Computes pHash value of the input image.",
    "local": "计算输入图像的相位值。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "inputArr,",
    "local": "输入端，"
  },
  {
    "origin": "outputArr, double sigma=1, int numOfAngleLine=180)",
    "local": "输出端，双西格玛=1，整数线=180）"
  },
  {
    "origin": "Computes radial variance hash of the input image.",
    "local": "计算输入图像的径向方差散列。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Detailed Description",
    "local": "详细说明"
  },
  {
    "origin": "Provide algorithms to extract the hash of images and fast way to figure out most similar images in huge data set.",
    "local": "给出了提取图像散列的算法，并给出了在海量数据集中快速提取最相似图像的方法。"
  },
  {
    "origin": "Namespace for all functions is",
    "local": "所有函数的命名空间都是"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Supported Algorithms",
    "local": "支持的算法"
  },
  {
    "origin": "Average hash (also called Different hash)",
    "local": "平均哈希（也称为不同哈希）"
  },
  {
    "origin": "(also called Perceptual hash)",
    "local": "（也称为知觉散列）"
  },
  {
    "origin": "Marr Hildreth Hash",
    "local": "马尔·希尔德雷思·哈什"
  },
  {
    "origin": "Radial Variance Hash",
    "local": "径向方差散列"
  },
  {
    "origin": "Block Mean Hash (modes 0 and 1)",
    "local": "块平均哈希（模式0和1）"
  },
  {
    "origin": "Color Moment Hash (this is the one and only hash algorithm resist to rotation attack(-90~90 degree))",
    "local": "彩色矩散列（这是唯一一种抵抗旋转攻击（-90~90度）的散列算法）"
  },
  {
    "origin": "You can study more about image hashing from following paper and websites:",
    "local": "您可以从以下论文和网站了解有关图像哈希的更多信息："
  },
  {
    "origin": "\"Implementation and benchmarking of perceptual image hash functions\"",
    "local": "“感知图像哈希函数的实现和基准测试”"
  },
  {
    "origin": "\"Looks Like It\"",
    "local": "“看起来像”"
  },
  {
    "origin": "Code Example",
    "local": "代码示例"
  },
  {
    "origin": "Performance under different attacks",
    "local": "不同攻击下的性能"
  },
  {
    "origin": "Performance chart",
    "local": "性能图表"
  },
  {
    "origin": "Speed comparison with",
    "local": "速度比较"
  },
  {
    "origin": "library (100 images from ukbench)",
    "local": "图书馆（来自ukbench的100张图片）"
  },
  {
    "origin": "Hash Computation chart",
    "local": "哈希计算图"
  },
  {
    "origin": "Hash comparison chart",
    "local": "哈希比较图"
  },
  {
    "origin": "As you can see, hash computation speed of",
    "local": "如您所见，哈希计算速度"
  },
  {
    "origin": "module outperform",
    "local": "模块性能优于"
  },
  {
    "origin": "PHash library",
    "local": "PHash库"
  },
  {
    "origin": "a lot.",
    "local": "很多。"
  },
  {
    "origin": "PS : I do not list out the comparison of Average hash,",
    "local": "PS：我没有列出平均哈希值的比较，"
  },
  {
    "origin": "and Color Moment hash, because I cannot find them in",
    "local": "因为我找不到它们"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Motivation",
    "local": "动机"
  },
  {
    "origin": "Collects useful image hash algorithms into opencv, so we do not need to rewrite them by ourselves again and again or rely on another 3rd party library(ex : PHash library). BOVW or correlation matching are good and robust, but they are very slow compare with image hash, if you need to deal with large scale CBIR(content based image retrieval) problem, image hash is a more reasonable solution.",
    "local": "将有用的图像哈希算法收集到opencv中，因此我们不需要自己一次又一次地重写它们，也不需要依赖另一个第三方库（例如：PHash库）。BOVW或相关匹配具有良好的鲁棒性，但与图像hash相比速度非常慢，如果需要处理大规模的CBIR（content-based image retrieval）问题，图像hash是一种比较合理的解决方案。"
  },
  {
    "origin": "More info",
    "local": "更多信息"
  },
  {
    "origin": "You can learn more about",
    "local": "你可以了解更多"
  },
  {
    "origin": "modules from following links, these links show you how to find similar image from ukbench dataset, provide thorough benchmark of different attacks(contrast, blur, noise(gaussion,pepper and salt), jpeg compression, watermark, resize).",
    "local": "以下链接中的模块，这些链接向您展示如何从ukbench数据集中找到相似的图像，提供不同攻击（对比度、模糊、噪声（高斯、胡椒和盐）、jpeg压缩、水印、调整大小）的全面基准。"
  },
  {
    "origin": "Introduction to image hash module of opencv",
    "local": "opencv图像哈希模块简介"
  },
  {
    "origin": "Speed up image hashing of opencv(img_hash) and introduce color moment hash",
    "local": "加速opencv（img\\u hash）的图像散列，引入颜色矩散列"
  },
  {
    "origin": "Contributors",
    "local": "贡献者"
  },
  {
    "origin": "Tham Ngap Wei,",
    "local": "横穿魏国，"
  },
  {
    "origin": "thamn",
    "local": "塔姆"
  },
  {
    "origin": ".nosp@m.",
    "local": "[喘息声]nosp@m."
  },
  {
    "origin": "gapw",
    "local": "gapw公司"
  },
  {
    "origin": ".nosp@m.",
    "local": "[喘息声]nosp@m."
  },
  {
    "origin": "ei@gm",
    "local": "ei@gm"
  },
  {
    "origin": ".nosp@m.",
    "local": "[喘息声]nosp@m."
  },
  {
    "origin": "ail.",
    "local": "艾尔。"
  },
  {
    "origin": ".nosp@m.",
    "local": "[喘息声]nosp@m."
  },
  {
    "origin": "com",
    "local": "通用域名格式"
  },
  {
    "origin": "Enumeration Type Documentation",
    "local": "枚举类型文档"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "BlockMeanHashMode",
    "local": "块模式"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "Enumerator",
    "local": "枚举器"
  },
  {
    "origin": "BLOCK_MEAN_HASH_MODE_0",
    "local": "块\\u平均\\u散列\\u模式\\u 0"
  },
  {
    "origin": "Python: cv.img_hash.BLOCK_MEAN_HASH_MODE_0",
    "local": "Python:cv.img\\u hash.BLOCK\\u MEAN\\u hash\\u MODE\\u 0"
  },
  {
    "origin": "use fewer block and generate 16*16/8 uchar hash value",
    "local": "使用更少的块并生成16*16/8 uchar散列值"
  },
  {
    "origin": "BLOCK_MEAN_HASH_MODE_1",
    "local": "块\\u平均\\u散列\\u模式\\u 1"
  },
  {
    "origin": "Python: cv.img_hash.BLOCK_MEAN_HASH_MODE_1",
    "local": "Python:cv.img\\u hash.BLOCK\\u MEAN\\u hash\\u MODE\\u 1"
  },
  {
    "origin": "use block blocks(step sizes/2), generate 31*31/8 + 1 uchar hash value",
    "local": "使用块块（步长/2），生成31*31/8+1 uchar散列值"
  },
  {
    "origin": "Function Documentation",
    "local": "功能文档"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "averageHash()",
    "local": "平均哈希（）"
  },
  {
    "origin": "void cv::img_hash::averageHash",
    "local": "void cv:：img hash:：averageHash无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "inputArr",
    "local": "输入端"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "outputArr",
    "local": "输出端"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "outputArr",
    "local": "输出端"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.img_hash.averageHash(",
    "local": "cv.img.hash.averageHash平均值("
  },
  {
    "origin": "inputArr[, outputArr]",
    "local": "inputArr[，outputArr]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates",
    "local": "计算"
  },
  {
    "origin": "in one call.",
    "local": "一个电话。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "inputArr",
    "local": "输入端"
  },
  {
    "origin": "input image want to compute hash value, type should be CV_8UC4, CV_8UC3 or CV_8UC1.",
    "local": "要计算哈希值的输入图像，类型应为CV\\u 8UC4、CV\\u 8UC3或CV\\u 8UC1。"
  },
  {
    "origin": "outputArr",
    "local": "输出端"
  },
  {
    "origin": "Hash value of input, it will contain 16 hex decimal number, return type is CV_8U",
    "local": "散列值的输入，它将包含16位十六进制十进制数，返回类型为CV\\ u8u"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "blockMeanHash()",
    "local": "blockMeanHash（）"
  },
  {
    "origin": "void cv::img_hash::blockMeanHash",
    "local": "void cv:：img/hash:：blockMeanHash"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "inputArr",
    "local": "输入端"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "outputArr",
    "local": "输出端"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "mode",
    "local": "模式"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "outputArr",
    "local": "输出端"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.img_hash.blockMeanHash(",
    "local": "cv.img.hash.blockMeanHash格式("
  },
  {
    "origin": "inputArr[, outputArr[, mode]]",
    "local": "inputArr[，outputArr[，mode]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Computes block mean hash of the input image.",
    "local": "计算输入图像的块平均哈希。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "inputArr",
    "local": "输入端"
  },
  {
    "origin": "input image want to compute hash value, type should be CV_8UC4, CV_8UC3 or CV_8UC1.",
    "local": "要计算哈希值的输入图像，类型应为CV\\u 8UC4、CV\\u 8UC3或CV\\u 8UC1。"
  },
  {
    "origin": "outputArr",
    "local": "输出端"
  },
  {
    "origin": "Hash value of input, it will contain 16 hex decimal number, return type is CV_8U",
    "local": "散列值的输入，它将包含16位十六进制十进制数，返回类型为CV\\ u8u"
  },
  {
    "origin": "mode",
    "local": "模式"
  },
  {
    "origin": "the mode",
    "local": "模式"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "colorMomentHash()",
    "local": "色差（）"
  },
  {
    "origin": "void cv::img_hash::colorMomentHash",
    "local": "void cv:：img-u哈希：：colorMomentHash"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "inputArr",
    "local": "输入端"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "outputArr",
    "local": "输出端"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "outputArr",
    "local": "输出端"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.img_hash.colorMomentHash(",
    "local": "cv.img.hash.colorMomentHash公司("
  },
  {
    "origin": "inputArr[, outputArr]",
    "local": "inputArr[，outputArr]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Computes color moment hash of the input, the algorithm is come from the paper \"Perceptual Hashing for Color Images Using Invariant Moments\".",
    "local": "计算输入的颜色矩散列，算法来源于“利用不变矩对彩色图像进行感知散列”一文。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "inputArr",
    "local": "输入端"
  },
  {
    "origin": "input image want to compute hash value, type should be CV_8UC4, CV_8UC3 or CV_8UC1.",
    "local": "要计算哈希值的输入图像，类型应为CV\\u 8UC4、CV\\u 8UC3或CV\\u 8UC1。"
  },
  {
    "origin": "outputArr",
    "local": "输出端"
  },
  {
    "origin": "42 hash values with type",
    "local": "42个哈希值，类型为"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "marrHildrethHash()",
    "local": "Marrhildrethash（）"
  },
  {
    "origin": "void cv::img_hash::marrHildrethHash",
    "local": "void cv:：img\\u hash:：marrHildrethHash无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "inputArr",
    "local": "输入端"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "outputArr",
    "local": "输出端"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "alpha",
    "local": "阿尔法"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "scale",
    "local": "规模"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "outputArr",
    "local": "输出端"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.img_hash.marrHildrethHash(",
    "local": "简历：img\\u hash.marrHildrethHash("
  },
  {
    "origin": "inputArr[, outputArr[, alpha[, scale]]]",
    "local": "inputArr[，outputArr[，alpha[，scale]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Computes average hash value of the input image.",
    "local": "计算输入图像的平均哈希值。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "inputArr",
    "local": "输入端"
  },
  {
    "origin": "input image want to compute hash value, type should be CV_8UC4, CV_8UC3, CV_8UC1.",
    "local": "输入图像要计算散列值，类型应为CV\\u 8UC4、CV\\u 8UC3、CV\\u 8UC1。"
  },
  {
    "origin": "outputArr",
    "local": "输出端"
  },
  {
    "origin": "Hash value of input, it will contain 16 hex decimal number, return type is CV_8U",
    "local": "散列值的输入，它将包含16位十六进制十进制数，返回类型为CV\\ u8u"
  },
  {
    "origin": "alpha",
    "local": "阿尔法"
  },
  {
    "origin": "int scale factor for marr wavelet (default=2).",
    "local": "marr小波的int比例因子（默认值=2）。"
  },
  {
    "origin": "scale",
    "local": "规模"
  },
  {
    "origin": "int level of scale factor (default = 1)",
    "local": "比例因子的整数级（默认值=1）"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "pHash()",
    "local": "相位（）"
  },
  {
    "origin": "void cv::img_hash::pHash",
    "local": "void cv:：img\\u哈希：：pHash"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "inputArr",
    "local": "输入端"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "outputArr",
    "local": "输出端"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "outputArr",
    "local": "输出端"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.img_hash.pHash(",
    "local": "CV.IMG Hash.phash（"
  },
  {
    "origin": "inputArr[, outputArr]",
    "local": "inputArr[，outputArr]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Computes pHash value of the input image.",
    "local": "计算输入图像的相位值。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "inputArr",
    "local": "输入端"
  },
  {
    "origin": "input image want to compute hash value, type should be CV_8UC4, CV_8UC3, CV_8UC1.",
    "local": "输入图像要计算散列值，类型应为CV\\u 8UC4、CV\\u 8UC3、CV\\u 8UC1。"
  },
  {
    "origin": "outputArr",
    "local": "输出端"
  },
  {
    "origin": "Hash value of input, it will contain 8 uchar value",
    "local": "输入的哈希值，它将包含8个uchar值"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "radialVarianceHash()",
    "local": "RadialVarianceHash（）"
  },
  {
    "origin": "void cv::img_hash::radialVarianceHash",
    "local": "void cv:：img\\u hash:：radialVarianceHash无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "inputArr",
    "local": "输入端"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "outputArr",
    "local": "输出端"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "sigma",
    "local": "西格玛"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "numOfAngleLine",
    "local": "纽姆角线"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "outputArr",
    "local": "输出端"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.img_hash.radialVarianceHash(",
    "local": "cv.img\\u hash.radialVarianceHash文件("
  },
  {
    "origin": "inputArr[, outputArr[, sigma[, numOfAngleLine]]]",
    "local": "inputArr[，outputArr[，sigma[，numOfAngleLine]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Computes radial variance hash of the input image.",
    "local": "计算输入图像的径向方差散列。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "inputArr",
    "local": "输入端"
  },
  {
    "origin": "input image want to compute hash value, type should be CV_8UC4, CV_8UC3, CV_8UC1.",
    "local": "输入图像要计算散列值，类型应为CV\\u 8UC4、CV\\u 8UC3、CV\\u 8UC1。"
  },
  {
    "origin": "outputArr",
    "local": "输出端"
  },
  {
    "origin": "Hash value of input",
    "local": "输入的哈希值"
  },
  {
    "origin": "sigma",
    "local": "西格玛"
  },
  {
    "origin": "Gaussian kernel standard deviation",
    "local": "高斯核标准差"
  },
  {
    "origin": "numOfAngleLine",
    "local": "纽姆角线"
  },
  {
    "origin": "The number of angles to consider",
    "local": "要考虑的角度数"
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:41 for OpenCV by",
    "local": "于2021年4月2日星期五11:36:41为OpenCV生成"
  }
]