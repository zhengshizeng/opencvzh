[
  {
    "origin": "OpenCV: Contours : Getting Started",
    "local": "OpenCV:轮廓：入门"
  },
  {
    "origin": "Open Source Computer Vision",
    "local": "开源计算机视觉"
  },
  {
    "origin": "Contours : Getting Started",
    "local": "轮廓：入门"
  },
  {
    "origin": "Goal",
    "local": "目标"
  },
  {
    "origin": "Understand what contours are.",
    "local": "了解什么是等高线。"
  },
  {
    "origin": "Learn to find contours, draw contours etc",
    "local": "学会寻找轮廓，画轮廓等"
  },
  {
    "origin": "You will see these functions :",
    "local": "您将看到以下功能："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "What are contours?",
    "local": "什么是等高线？"
  },
  {
    "origin": "Contours can be explained simply as a curve joining all the continuous points (along the boundary), having same color or intensity. The contours are a useful tool for shape analysis and object detection and recognition.",
    "local": "轮廓可以简单地解释为连接所有连续点（沿边界）的曲线，具有相同的颜色或强度。轮廓线是形状分析和目标检测与识别的有用工具。"
  },
  {
    "origin": "For better accuracy, use binary images. So before finding contours, apply threshold or canny edge detection.",
    "local": "为了获得更好的准确度，请使用二值图像。因此，在找到轮廓之前，应用阈值或canny边缘检测。"
  },
  {
    "origin": "no longer modifies the source image.",
    "local": "不再修改源图像。"
  },
  {
    "origin": "In OpenCV, finding contours is like finding white object from black background. So remember, object to be found should be white and background should be black.",
    "local": "在OpenCV中，查找轮廓就像从黑色背景中查找白色对象一样。所以记住，要找到的对象应该是白色的，背景应该是黑色的。"
  },
  {
    "origin": "Let's see how to find contours of a binary image:",
    "local": "让我们看看如何找到二值图像的轮廓："
  },
  {
    "origin": "See, there are three arguments in",
    "local": "你看，这里面有三个论点"
  },
  {
    "origin": "function, first one is source image, second is contour retrieval mode, third is contour approximation method. And it outputs the contours and hierarchy. Contours is a Python list of all the contours in the image. Each individual contour is a Numpy array of (x,y) coordinates of boundary points of the object.",
    "local": "函数，第一个是源图像，第二个是轮廓检索模式，第三个是轮廓逼近方法。并输出轮廓和层次。轮廓是图像中所有轮廓的Python列表。每个单独的轮廓是对象边界点的（x，y）坐标的Numpy数组。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "We will discuss second and third arguments and about hierarchy in details later. Until then, the values given to them in code sample will work fine for all images.",
    "local": "我们将在后面详细讨论第二个和第三个论点以及关于层次结构的问题。在此之前，代码示例中给定的值对所有图像都适用。"
  },
  {
    "origin": "How to draw the contours?",
    "local": "如何画轮廓？"
  },
  {
    "origin": "To draw the contours,",
    "local": "为了画出轮廓，"
  },
  {
    "origin": "function is used. It can also be used to draw any shape provided you have its boundary points. Its first argument is source image, second argument is the contours which should be passed as a Python list, third argument is index of contours (useful when drawing individual contour. To draw all contours, pass -1) and remaining arguments are color, thickness etc.",
    "local": "使用函数。它也可以用来绘制任何形状，只要你有它的边界点。它的第一个参数是源图像，第二个参数是轮廓，它应该作为Python列表传递，第三个参数是轮廓索引（在绘制单个轮廓时很有用）。要绘制所有轮廓，请传递-1），其余参数是颜色、厚度等。"
  },
  {
    "origin": "To draw all the contours in an image:",
    "local": "要绘制图像中的所有轮廓，请执行以下操作："
  },
  {
    "origin": "To draw an individual contour, say 4th contour:",
    "local": "要绘制单个等高线，请说第四等高线："
  },
  {
    "origin": "But most of the time, below method will be useful:",
    "local": "但大多数情况下，以下方法会很有用："
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "Last two methods are same, but when you go forward, you will see last one is more useful.",
    "local": "最后两种方法是相同的，但当您继续前进时，您将看到最后一种方法更有用。"
  },
  {
    "origin": "Contour Approximation Method",
    "local": "等高线逼近法"
  },
  {
    "origin": "This is the third argument in",
    "local": "这是本书的第三个论点"
  },
  {
    "origin": "function. What does it denote actually?",
    "local": "功能。它实际上意味着什么？"
  },
  {
    "origin": "Above, we told that contours are the boundaries of a shape with same intensity. It stores the (x,y) coordinates of the boundary of a shape. But does it store all the coordinates ? That is specified by this contour approximation method.",
    "local": "上面，我们说轮廓是一个具有相同强度的形状的边界。它存储形状边界的（x，y）坐标。但是它存储了所有的坐标吗？这是由这个轮廓近似方法指定的。"
  },
  {
    "origin": "If you pass",
    "local": "如果你通过了"
  },
  {
    "origin": ", all the boundary points are stored. But actually do we need all the points? For eg, you found the contour of a straight line. Do you need all the points on the line to represent that line? No, we need just two end points of that line. This is what",
    "local": "，存储所有边界点。但实际上我们需要所有的要点吗？例如，你发现了一条直线的轮廓。你需要线上所有的点来代表那条线吗？不，我们只需要那条线的两个端点。这是什么"
  },
  {
    "origin": "does. It removes all redundant points and compresses the contour, thereby saving memory.",
    "local": "做。它删除所有冗余点并压缩轮廓，从而节省内存。"
  },
  {
    "origin": "Below image of a rectangle demonstrate this technique. Just draw a circle on all the coordinates in the contour array (drawn in blue color). First image shows points I got with",
    "local": "下图是一个矩形，演示了这种技术。只需在轮廓数组中的所有坐标上画一个圆（用蓝色绘制）。第一张图显示了我的观点"
  },
  {
    "origin": "(734 points) and second image shows the one with",
    "local": "（734点）第二张图显示的是"
  },
  {
    "origin": "(only 4 points). See, how much memory it saves!!!",
    "local": "（只有4分）。看，它节省了多少内存！！！"
  },
  {
    "origin": "image",
    "local": "形象"
  },
  {
    "origin": "Additional Resources",
    "local": "额外资源"
  },
  {
    "origin": "Exercises",
    "local": "练习"
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:37 for OpenCV by &#160;",
    "local": "2021年4月2日星期五11:36:37为OpenCV生成，&#160；"
  }
]