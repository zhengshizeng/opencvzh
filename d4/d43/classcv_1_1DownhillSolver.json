[
  {
    "origin": "OpenCV: cv::DownhillSolver Class Reference",
    "local": "OpenCV:cv:：DownhillSolver类引用"
  },
  {
    "origin": "Open Source Computer Vision",
    "local": "开源计算机视觉"
  },
  {
    "origin": "Public Member Functions",
    "local": "公共成员职能"
  },
  {
    "origin": "Static Public Member Functions",
    "local": "静态公共成员函数"
  },
  {
    "origin": "List of all members",
    "local": "所有成员的列表"
  },
  {
    "origin": "cv::DownhillSolver Class Reference",
    "local": "cv:：DownhillSolver类引用"
  },
  {
    "origin": "abstract",
    "local": "摘要"
  },
  {
    "origin": "&raquo;",
    "local": "&引用；"
  },
  {
    "origin": "This class is used to perform the non-linear non-constrained minimization of a function,.",
    "local": "此类用于执行函数的非线性非约束最小化，。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Inheritance diagram for cv::DownhillSolver:",
    "local": "cv:：DownhillSolver的继承关系图："
  },
  {
    "origin": "Public Member Functions",
    "local": "公共成员职能"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "Returns the initial step that will be used in downhill simplex algorithm.",
    "local": "返回将在下坡单纯形算法中使用的初始步长。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "Sets the initial step that will be used in downhill simplex algorithm.",
    "local": "设置将在下坡单纯形算法中使用的初始步长。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&#160;Public Member Functions inherited from",
    "local": "&#160;公共成员函数继承自"
  },
  {
    "origin": "virtual",
    "local": "事实上的"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "Getter for the optimized function.",
    "local": "优化函数的Getter。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual",
    "local": "事实上的"
  },
  {
    "origin": "Getter for the previously set terminal criteria for this algorithm.",
    "local": "用于此算法的先前设置的终端条件的Getter。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "actually runs the algorithm and performs the minimization.",
    "local": "实际运行算法并执行最小化。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "Setter for the optimized function.",
    "local": "优化函数的Setter。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "Set terminal criteria for solver.",
    "local": "为解算器设置端子条件。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&#160;Public Member Functions inherited from",
    "local": "&#160;公共成员函数继承自"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Clears the algorithm state.",
    "local": "清除算法状态。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "Returns true if the",
    "local": "如果"
  },
  {
    "origin": "is empty (e.g. in the very beginning or after unsuccessful read.",
    "local": "为空（例如，在最开始或读取失败后）。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual",
    "local": "事实上的"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;fn)",
    "local": "&amp；（fn）"
  },
  {
    "origin": "Reads algorithm parameters from a file storage.",
    "local": "从文件存储器中读取算法参数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;filename) const",
    "local": "&amp；文件名）常量"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;fs) const",
    "local": "&amp；（f） 常数"
  },
  {
    "origin": "Stores algorithm parameters in a file storage.",
    "local": "将算法参数存储在文件存储器中。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;fs, const",
    "local": "&gt；gt；amp；fs，常数"
  },
  {
    "origin": "&amp;name=",
    "local": "&amp；姓名="
  },
  {
    "origin": "()) const",
    "local": "（））常数"
  },
  {
    "origin": "simplified API for language bindings This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "语言绑定的简化API这是一个重载的成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Static Public Member Functions",
    "local": "静态公共成员函数"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;f=",
    "local": "&燃气轮机&amp；f级="
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;(),",
    "local": "&gt；（），"
  },
  {
    "origin": "initStep=",
    "local": "初始化步骤="
  },
  {
    "origin": "&lt; double &gt;(1, 1, 0.0),",
    "local": "&lt；双倍（&gt）（1、1、0.0），"
  },
  {
    "origin": "termcrit=",
    "local": "特姆克里特="
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "+",
    "local": "+"
  },
  {
    "origin": ", 5000, 0.000001))",
    "local": ", 5000, 0.000001))"
  },
  {
    "origin": "This function returns the reference to the ready-to-use",
    "local": "此函数返回对准备使用的"
  },
  {
    "origin": "object.",
    "local": "对象。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "&#160;Static Public Member Functions inherited from",
    "local": "&#160;继承自的静态公共成员函数"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;filename, const",
    "local": "&amp；文件名，常量"
  },
  {
    "origin": "&amp;objname=",
    "local": "&amp；对象名="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Loads algorithm from the file.",
    "local": "从文件加载算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;strModel, const",
    "local": "&amp；strModel，常量"
  },
  {
    "origin": "&amp;objname=",
    "local": "&amp；对象名="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Loads algorithm from a String.",
    "local": "从字符串加载算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;fn)",
    "local": "&amp；（fn）"
  },
  {
    "origin": "Reads algorithm from the file node.",
    "local": "从文件节点读取算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Additional Inherited Members",
    "local": "其他继承成员"
  },
  {
    "origin": "&#160;Protected Member Functions inherited from",
    "local": "&#160;继承自的受保护成员函数"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;fs) const",
    "local": "&amp；（f） 常数"
  },
  {
    "origin": "Detailed Description",
    "local": "详细说明"
  },
  {
    "origin": "This class is used to perform the non-linear non-constrained minimization of a function,.",
    "local": "此类用于执行函数的非线性非约束最小化，。"
  },
  {
    "origin": "defined on an",
    "local": "定义在"
  },
  {
    "origin": "-dimensional Euclidean space, using the",
    "local": "-多维欧氏空间，使用"
  },
  {
    "origin": "Nelder-Mead method",
    "local": "尼尔-米德法"
  },
  {
    "origin": ", also known as downhill simplex method**. The basic idea about the method can be obtained from",
    "local": "，也称为下坡单纯形法**。该方法的基本思想可以从"
  },
  {
    "origin": "http://en.wikipedia.org/wiki/Nelder-Mead_method",
    "local": "http://en.wikipedia.org/wiki/Nelder-Mead_method"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "It should be noted, that this method, although deterministic, is rather a heuristic and therefore may converge to a local minima, not necessary a global one. It is iterative optimization technique, which at each step uses an information about the values of a function evaluated only at",
    "local": "应该注意的是，这种方法虽然是确定性的，但它是一种启发式方法，因此可能会收敛到局部极小值，而不是全局极小值。这是一种迭代优化技术，它在每一步都使用一个关于函数值的信息，而函数值只在某一步计算"
  },
  {
    "origin": "points, arranged as a",
    "local": "点，排列为"
  },
  {
    "origin": "simplex",
    "local": "单工"
  },
  {
    "origin": "in",
    "local": "在里面"
  },
  {
    "origin": "-dimensional space (hence the second name of the method). At each step new point is chosen to evaluate function at, obtained value is compared with previous ones and based on this information simplex changes it's shape , slowly moving to the local minimum. Thus this method is using",
    "local": "-维度空间（因此方法的第二个名称）。在每一步中选择新的点对函数进行求值，并将所得值与以前的值进行比较，然后根据此信息单纯形改变其形状，缓慢地移动到局部最小值。因此，这种方法是使用"
  },
  {
    "origin": "only",
    "local": "只有"
  },
  {
    "origin": "function values to make decision, on contrary to, say, Nonlinear Conjugate Gradient method (which is also implemented in optim).",
    "local": "与非线性共轭梯度法（也在optim中实现）相反，用函数值来做决定。"
  },
  {
    "origin": "stops when the number of function evaluations done exceeds termcrit.maxCount, when the function values at the vertices of simplex are within termcrit.epsilon range or simplex becomes so small that it can enclosed in a box with termcrit.epsilon sides, whatever comes first, for some defined by user positive integer termcrit.maxCount and positive non-integer termcrit.epsilon.",
    "local": "当完成的函数求值数超过termcrit.maxCount，当单纯形顶点处的函数值在termcrit.epsilon范围内，或单纯形变得很小以至于可以用termcrit.epsilon边封闭在一个框中时停止，无论哪个边先出现，对于用户定义的正整数termcrit.maxCount和正非整数termcrit.epsilon。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "is a derivative of the abstract interface",
    "local": "是抽象接口的派生"
  },
  {
    "origin": ", which in turn is derived from the",
    "local": "，这又是从"
  },
  {
    "origin": "interface and is used to encapsulate the functionality, common to all non-linear optimization algorithms in the optim module.",
    "local": "接口，用于封装optim模块中所有非线性优化算法通用的功能。"
  },
  {
    "origin": "term criteria should meet following condition:",
    "local": "期限标准应满足以下条件："
  },
  {
    "origin": "Member Function Documentation",
    "local": "成员功能文档"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "create()",
    "local": "创建（）"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; cv::DownhillSolver::create",
    "local": "&燃气轮机；cv:：DownhillSolver:：创建"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "f",
    "local": "f"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "initStep",
    "local": "初始化步骤"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "termcrit",
    "local": "特姆克里特"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "This function returns the reference to the ready-to-use",
    "local": "此函数返回对准备使用的"
  },
  {
    "origin": "object.",
    "local": "对象。"
  },
  {
    "origin": "All the parameters are optional, so this procedure can be called even without parameters at all. In this case, the default values will be used. As default value for terminal criteria are the only sensible ones,",
    "local": "所有参数都是可选的，因此即使没有参数也可以调用此过程。在这种情况下，将使用默认值。因为终端标准的默认值是唯一合理的，"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": "should be called upon the obtained object, if the respective parameters were not given to",
    "local": "如果未将相应的参数指定给"
  },
  {
    "origin": ". Otherwise, the two ways (give parameters to createDownhillSolver() or miss them out and call the",
    "local": ". 否则，这两种方法（为createDownhillSolver（）提供参数或忽略它们并调用"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": ") are absolutely equivalent (and will drop the same errors in the same way, should invalid input be detected).",
    "local": ")是绝对等价的（如果检测到无效输入，将以相同的方式删除相同的错误）。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "f",
    "local": "f"
  },
  {
    "origin": "Pointer to the function that will be minimized, similarly to the one you submit via",
    "local": "指向将最小化的函数的指针，类似于通过"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "initStep",
    "local": "初始化步骤"
  },
  {
    "origin": "Initial step, that will be used to construct the initial simplex, similarly to the one you submit via MinProblemSolver::setInitStep.",
    "local": "初始步骤，将用于构造初始单纯形，类似于通过MinProblemSolver:：setInitStep提交的单纯形。"
  },
  {
    "origin": "termcrit",
    "local": "特姆克里特"
  },
  {
    "origin": "Terminal criteria to the algorithm, similarly to the one you submit via",
    "local": "算法的终端条件，类似于您通过"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "getInitStep()",
    "local": "getInitStep（）"
  },
  {
    "origin": "virtual void cv::DownhillSolver::getInitStep",
    "local": "虚拟void cv:：DownhillSolver:：getInitStep"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "step",
    "local": "步"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Returns the initial step that will be used in downhill simplex algorithm.",
    "local": "返回将在下坡单纯形算法中使用的初始步长。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "step",
    "local": "步"
  },
  {
    "origin": "Initial step that will be used in algorithm. Note, that although corresponding setter accepts column-vectors as well as row-vectors, this method will return a row-vector.",
    "local": "将在算法中使用的初始步骤。注意，尽管相应的setter接受列向量和行向量，但是这个方法将返回一个行向量。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": "&#9670;&nbsp；"
  },
  {
    "origin": "setInitStep()",
    "local": "setInitStep（）"
  },
  {
    "origin": "virtual void cv::DownhillSolver::setInitStep",
    "local": "虚拟void cv:：DownhillSolver:：setInitStep"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "step",
    "local": "步"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Sets the initial step that will be used in downhill simplex algorithm.",
    "local": "设置将在下坡单纯形算法中使用的初始步长。"
  },
  {
    "origin": "Step, together with initial point (given in",
    "local": "步骤，连同初始点（见"
  },
  {
    "origin": ") are two",
    "local": ")是两个"
  },
  {
    "origin": "-dimensional vectors that are used to determine the shape of initial simplex. Roughly said, initial point determines the position of a simplex (it will become simplex's centroid), while step determines the spread (size in each dimension) of a simplex. To be more precise, if \\(s,x_0\\in\\mathbb{R}^n\\) are the initial step and initial point respectively, the vertices of a simplex will be: \\(v_0:=x_0-\\frac{1}{2} s\\) and \\(v_i:=x_0+s_i\\) for \\(i=1,2,\\dots,n\\) where \\(s_i\\) denotes projections of the initial step of",
    "local": "-用于确定初始单纯形形状的维数向量。粗略地说，初始点决定了单纯形的位置（它将成为单纯形的质心），而步长决定了单纯形的展开（每个维度的大小）。更精确地说，如果\\（s，x\\u0\\in\\mathbb{R}^n\\）分别是初始步和初始点，则单纯形的顶点将是：\\（v\\u0：=x\\u0-\\frac{1}{2}s\\）和\\（v\\u i：=x\\u 0+s\\u i\\）（i=1,2，\\点，n\\），其中\\（s\\u i\\）表示单纯形初始步的投影"
  },
  {
    "origin": "n",
    "local": "n"
  },
  {
    "origin": "-th coordinate (the result of projection is treated to be vector given by \\(s_i:=e_i\\cdot\\left&lt;e_i\\cdot s\\right&gt;\\), where \\(e_i\\) form canonical basis)",
    "local": "-th坐标（投影结果视为\\（s_i:=e_i\\cdot\\left&lt；e\\u i\\cdot s\\right&gt；\\），其中\\（e\\ i \\）构成规范基础）"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "step",
    "local": "步"
  },
  {
    "origin": "Initial step that will be used in algorithm. Roughly said, it determines the spread (size in each dimension) of an initial simplex.",
    "local": "将在算法中使用的初始步骤。粗略地说，它决定了初始单纯形的排列（每个维度的大小）。"
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": "此类的文档是从以下文件生成的："
  },
  {
    "origin": "opencv2/core/",
    "local": "opencv2/核心/"
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:42 for OpenCV by &#160;",
    "local": "2021年4月2日星期五11:36:42为OpenCV生成，&#160；"
  }
]