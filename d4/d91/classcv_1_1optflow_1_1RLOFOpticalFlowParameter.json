[
  {
    "origin": "OpenCV: cv::optflow::RLOFOpticalFlowParameter Class Reference",
    "local": "OpenCV:cv:：optflow:：RLOFOpticalFlowParameter类引用"
  },
  {
    "origin": "OpenCV",
    "local": "打开CV"
  },
  {
    "origin": "Open Source Computer Vision",
    "local": "开源计算机视觉"
  },
  {
    "origin": "Public Member Functions",
    "local": "公共成员职能"
  },
  {
    "origin": "Static Public Member Functions",
    "local": "静态公共成员函数"
  },
  {
    "origin": "Public Attributes",
    "local": "公共属性"
  },
  {
    "origin": "List of all members",
    "local": "所有成员的列表"
  },
  {
    "origin": "cv::optflow::RLOFOpticalFlowParameter Class Reference",
    "local": "cv:：optflow:：RLOFOpticalFlowParameter类引用"
  },
  {
    "origin": "This is used store and set up the parameters of the robust local optical flow (RLOF) algoritm.",
    "local": "这是用来存储和设置鲁棒局部光流（RLOF）算法的参数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Public Member Functions",
    "local": "公共成员职能"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(int val)",
    "local": "（内部值）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(float val)",
    "local": "（浮动值）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(int val)",
    "local": "（内部值）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(int val)",
    "local": "（内部值）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(int val)",
    "local": "（内部值）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(float val)",
    "local": "（浮动值）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(float val)",
    "local": "（浮动值）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(float val)",
    "local": "（浮动值）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(int val)",
    "local": "（内部值）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "val)",
    "local": "瓦尔）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "val)",
    "local": "瓦尔）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(bool val)",
    "local": "（布尔瀑布）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(bool val)",
    "local": "（布尔瀑布）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(bool val)",
    "local": "（布尔瀑布）"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(bool val)",
    "local": "（布尔瀑布）"
  },
  {
    "origin": "Enable M-estimator or disable and use least-square estimator.",
    "local": "启用M-估计器或禁用并使用最小二乘估计器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Static Public Member Functions",
    "local": "静态公共成员函数"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Creates instance of",
    "local": "创建的实例"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Public Attributes",
    "local": "公共属性"
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "Detailed Description",
    "local": "详细说明"
  },
  {
    "origin": "This is used store and set up the parameters of the robust local optical flow (RLOF) algoritm.",
    "local": "这是用来存储和设置鲁棒局部光流（RLOF）算法的参数。"
  },
  {
    "origin": "The RLOF is a fast local optical flow approach described in",
    "local": "RLOF是一种快速局部光流方法，如中所述"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": "similar to the pyramidal iterative Lucas-Kanade method as proposed by",
    "local": "类似于"
  },
  {
    "origin": ". More details and experiments can be found in the following thesis",
    "local": ". 更多的细节和实验可以在下面的论文中找到"
  },
  {
    "origin": ". The implementation is derived from",
    "local": ". 实现源于"
  },
  {
    "origin": ". This RLOF implementation can be seen as an improved pyramidal iterative Lucas-Kanade and includes a set of improving modules. The main improvements in respect to the pyramidal iterative Lucas-Kanade are:",
    "local": ". 这个RLOF实现可以看作是一个改进的金字塔迭代Lucas Kanade，包括一组改进的模块。金字塔形假名的主要改进有："
  },
  {
    "origin": "A more robust redecending M-estimator framework (see",
    "local": "一个更健壮的重新定义M估计框架（参见"
  },
  {
    "origin": ") to improve the accuracy at motion boundaries and appearing and disappearing pixels.",
    "local": ")提高运动边界和出现、消失像素的精度。"
  },
  {
    "origin": "an adaptive support region strategies to improve the accuracy at motion boundaries to reduce the corona effect, i.e oversmoothing of the PLK at motion/object boundaries. The cross-based segementation strategy (SR_CROSS) proposed in",
    "local": "一种自适应的支持域策略，用于提高运动边界处的精度，以减少电晕效应，即PLK在运动/对象边界处的过度平滑。本文提出了一种基于交叉的分段策略（SR\\u-cross）"
  },
  {
    "origin": "uses a simple segmenation approach to obtain the optimal shape of the support region.",
    "local": "使用简单的分段方法来获得支撑区域的最佳形状。"
  },
  {
    "origin": "To deal with illumination changes (outdoor sequences and shadow) the intensity constancy assumption based optical flow equation has been adopt with the Gennert and Negahdaripour illumination model (see",
    "local": "为了处理光照变化（室外序列和阴影），采用了基于强度恒定假设的光流方程和Gennert和Negahdaripour光照模型（见"
  },
  {
    "origin": "). This model can be switched on/off with the useIlluminationModel variable.",
    "local": "). 此模型可以使用useIlluminationModel变量打开/关闭。"
  },
  {
    "origin": "By using a global motion prior initialization (see",
    "local": "在初始化之前使用全局运动（请参见"
  },
  {
    "origin": ") of the iterative refinement the accuracy could be significantly improved for large displacements. This initialization can be switched on and of with useGlobalMotionPrior variable.",
    "local": ")对于大位移，迭代求精可以显著提高精度。可以使用useGlobalMotionPrevior变量打开和关闭此初始化。"
  },
  {
    "origin": "The RLOF can be computed with the",
    "local": "RLOF可以用"
  },
  {
    "origin": "class or function interface to track a set of features or with the",
    "local": "类或函数接口来跟踪一组特性或"
  },
  {
    "origin": "class or function interface to compute dense optical flow.",
    "local": "用于计算密集光流的类或函数接口。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Constructor &amp; Destructor Documentation",
    "local": "建造商和；析构函数文档"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "RLOFOpticalFlowParameter()",
    "local": "RLOFOpticalFlowParameter（）"
  },
  {
    "origin": "cv::optflow::RLOFOpticalFlowParameter::RLOFOpticalFlowParameter",
    "local": "cv:：optflow:：RLOFOpticalFlowParameter:：RLOFOpticalFlowParameter"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "inline",
    "local": "内联"
  },
  {
    "origin": "Member Function Documentation",
    "local": "成员功能文档"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "create()",
    "local": "创建（）"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; cv::optflow::RLOFOpticalFlowParameter::create",
    "local": "&燃气轮机；cv:：optflow:：RLOFOpticalFlowParameter:：创建"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow.RLOFOpticalFlowParameter_create(",
    "local": "cv.optflow.RLOFOpticalFlowParameter\\u创建("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Creates instance of",
    "local": "创建的实例"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getCrossSegmentationThreshold()",
    "local": "getCrossSegmentationThreshold（）"
  },
  {
    "origin": "int cv::optflow::RLOFOpticalFlowParameter::getCrossSegmentationThreshold",
    "local": "int cv:：optflow:：RLOFOpticalFlowParameter:：getCrossSegmentationThreshold=输入"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow_RLOFOpticalFlowParameter.getCrossSegmentationThreshold(",
    "local": "cv.optflow\\RLOFOpticalFlowParameter.getCrossSegmentationThreshold参数("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getGlobalMotionRansacThreshold()",
    "local": "getGlobalMotionTransactHreshold（）"
  },
  {
    "origin": "float cv::optflow::RLOFOpticalFlowParameter::getGlobalMotionRansacThreshold",
    "local": "浮点cv:：optflow:：RLOFOpticalFlowParameter:：GetGlobalMotionTransactHreshold"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow_RLOFOpticalFlowParameter.getGlobalMotionRansacThreshold(",
    "local": "cv.optflow\\ RLOFOpticalFlowParameter.GetGlobalMotionTransactHRED("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getLargeWinSize()",
    "local": "getLargeWinSize（）"
  },
  {
    "origin": "int cv::optflow::RLOFOpticalFlowParameter::getLargeWinSize",
    "local": "int cv:：optflow:：RLOFOptical lFlowParameter:：getLargeWinSize"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow_RLOFOpticalFlowParameter.getLargeWinSize(",
    "local": "cv.optflow公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getMaxIteration()",
    "local": "GetMaxiteration（）"
  },
  {
    "origin": "int cv::optflow::RLOFOpticalFlowParameter::getMaxIteration",
    "local": "int cv:：optflow:：RLOFOpticalFlowParameter:：getMaxIteration"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow_RLOFOpticalFlowParameter.getMaxIteration(",
    "local": "cv.optflow\\ RLOFOpticalFlowParameter.getMaxIteration参数("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getMaxLevel()",
    "local": "getMaxLevel（）"
  },
  {
    "origin": "int cv::optflow::RLOFOpticalFlowParameter::getMaxLevel",
    "local": "int cv:：optflow:：RLOFOpticalFlowParameter:：getMaxLevel"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow_RLOFOpticalFlowParameter.getMaxLevel(",
    "local": "cv.optflow公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getMinEigenValue()",
    "local": "getMinEigenValue（）"
  },
  {
    "origin": "float cv::optflow::RLOFOpticalFlowParameter::getMinEigenValue",
    "local": "浮点cv:：optflow:：RLOFOpticalFlowParameter:：getMinEigenValue"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow_RLOFOpticalFlowParameter.getMinEigenValue(",
    "local": "cv.optflow\\RLOFOpticalFlowParameter.getMinEigenValue参数("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getNormSigma0()",
    "local": "getNormSigma0（）"
  },
  {
    "origin": "float cv::optflow::RLOFOpticalFlowParameter::getNormSigma0",
    "local": "浮点cv:：optflow:：RLOFOpticalFlowParameter:：GetNormalSigma0"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow_RLOFOpticalFlowParameter.getNormSigma0(",
    "local": "cv.optflow\\ RLOFOpticalFlowParameter.GetNormalSigma0参数("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getNormSigma1()",
    "local": "getNormSigma1（）"
  },
  {
    "origin": "float cv::optflow::RLOFOpticalFlowParameter::getNormSigma1",
    "local": "浮点cv:：optflow:：RLOFOpticalFlowParameter:：GetNormalSigma1"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow_RLOFOpticalFlowParameter.getNormSigma1(",
    "local": "cv.optflow\\ RLOFOpticalFlowParameter.GetNormalSigma1参数("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getSmallWinSize()",
    "local": "getSmallWinSize（）"
  },
  {
    "origin": "int cv::optflow::RLOFOpticalFlowParameter::getSmallWinSize",
    "local": "int cv:：optflow:：RLOFOpticalFlowParameter:：getSmallWinSize"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow_RLOFOpticalFlowParameter.getSmallWinSize(",
    "local": "cv.optflow\\RLOFOpticalFlowParameter.getSmallWinSize("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getSolverType()",
    "local": "getSolverType（）"
  },
  {
    "origin": "cv::optflow::RLOFOpticalFlowParameter::getSolverType",
    "local": "cv:：optflow:：RLOFOpticalFlowParameter:：getSolverType"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow_RLOFOpticalFlowParameter.getSolverType(",
    "local": "cv.optflow\\RLOFOpticalFlowParameter.getSolverType("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getSupportRegionType()",
    "local": "getSupportRegionType（）"
  },
  {
    "origin": "cv::optflow::RLOFOpticalFlowParameter::getSupportRegionType",
    "local": "cv:：optflow:：RLOFOpticalFlowParameter:：getSupportRegionType"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow_RLOFOpticalFlowParameter.getSupportRegionType(",
    "local": "cv.optflow公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getUseGlobalMotionPrior()",
    "local": "getUseGlobalMotionPrior（）"
  },
  {
    "origin": "bool cv::optflow::RLOFOpticalFlowParameter::getUseGlobalMotionPrior",
    "local": "bool cv：：optflow：：rlofopticalflow参数：：getUseGlobalMotion之前"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow_RLOFOpticalFlowParameter.getUseGlobalMotionPrior(",
    "local": "cv.optflow.com RLOFOpticalFlowParameter.getUseGlobalMotionPrior("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getUseIlluminationModel()",
    "local": "getUseIlluminationModel（）"
  },
  {
    "origin": "bool cv::optflow::RLOFOpticalFlowParameter::getUseIlluminationModel",
    "local": "bool cv:：optflow:：RLOFOpticalFlowParameter:：getUseIlluminationModel"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow_RLOFOpticalFlowParameter.getUseIlluminationModel(",
    "local": "cv.optflow公司"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getUseInitialFlow()",
    "local": "getUseInitialFlow（）"
  },
  {
    "origin": "bool cv::optflow::RLOFOpticalFlowParameter::getUseInitialFlow",
    "local": "bool cv:：optflow:：RLOFOpticalFlowParameter:：getUseInitialFlow"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow_RLOFOpticalFlowParameter.getUseInitialFlow(",
    "local": "cv.optflow\\ RLOFOpticalFlowParameter.getUseInitialFlow参数("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "setCrossSegmentationThreshold()",
    "local": "setCrossSegmentationThreshold（）"
  },
  {
    "origin": "void cv::optflow::RLOFOpticalFlowParameter::setCrossSegmentationThreshold",
    "local": "void cv:：optflow:：RLOFOpticalFlowParameter:：setCrossSegmentationThreshold无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow_RLOFOpticalFlowParameter.setCrossSegmentationThreshold(",
    "local": "cv.optflow\\RLOFOpticalFlowParameter.setCrossSegmentationThreshold设置交叉分段阈值("
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "setGlobalMotionRansacThreshold()",
    "local": "setGlobalMotionTransactHreshold（）"
  },
  {
    "origin": "void cv::optflow::RLOFOpticalFlowParameter::setGlobalMotionRansacThreshold",
    "local": "void cv:：optflow:：RLOFOpticalFlowParameter:：setGlobalMotionTransactHreshold"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow_RLOFOpticalFlowParameter.setGlobalMotionRansacThreshold(",
    "local": "cv.optflow\\ RLOFOpticalFlowParameter.SetGlobalMotionTransactHRED阈值("
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "setLargeWinSize()",
    "local": "setLargeWinSize（）"
  },
  {
    "origin": "void cv::optflow::RLOFOpticalFlowParameter::setLargeWinSize",
    "local": "void cv:：optflow:：RLOFOpticalFlowParameter:：setLargeWinSize"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow_RLOFOpticalFlowParameter.setLargeWinSize(",
    "local": "cv.optflow公司"
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "setMaxIteration()",
    "local": "setMaxIteration（）"
  },
  {
    "origin": "void cv::optflow::RLOFOpticalFlowParameter::setMaxIteration",
    "local": "void cv:：optflow:：RLOFOpticalFlowParameter:：setMaxIteration无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow_RLOFOpticalFlowParameter.setMaxIteration(",
    "local": "cv.optflow\\ RLOFOpticalFlowParameter.setMaxIteration参数("
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "setMaxLevel()",
    "local": "setMaxLevel（）"
  },
  {
    "origin": "void cv::optflow::RLOFOpticalFlowParameter::setMaxLevel",
    "local": "void cv:：optflow:：RLOFOpticalFlowParameter:：setMaxLevel无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow_RLOFOpticalFlowParameter.setMaxLevel(",
    "local": "cv.optflow公司"
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "setMinEigenValue()",
    "local": "setMinEigenValue（）"
  },
  {
    "origin": "void cv::optflow::RLOFOpticalFlowParameter::setMinEigenValue",
    "local": "void cv:：optflow:：RLOFOpticalFlowParameter:：setMinEigenValue"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow_RLOFOpticalFlowParameter.setMinEigenValue(",
    "local": "cv.optflow\\ RLOFOpticalFlowParameter.setMinEigenValue参数("
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "setNormSigma0()",
    "local": "setNormSigma0（）"
  },
  {
    "origin": "void cv::optflow::RLOFOpticalFlowParameter::setNormSigma0",
    "local": "void cv:：optflow:：RLOFOpticalFlowParameter:：SetNormalSigma0"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow_RLOFOpticalFlowParameter.setNormSigma0(",
    "local": "cv.optflow\\ RLOFOpticalFlowParameter.SetNormalSigma0参数("
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "setNormSigma1()",
    "local": "setNormSigma1（）"
  },
  {
    "origin": "void cv::optflow::RLOFOpticalFlowParameter::setNormSigma1",
    "local": "void cv:：optflow:：RLOFOpticalFlowParameter:：SetNormalSigma1"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "float",
    "local": "浮动"
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow_RLOFOpticalFlowParameter.setNormSigma1(",
    "local": "cv.optflow\\ RLOFOpticalFlowParameter.SetNormalSigma1参数("
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "setSmallWinSize()",
    "local": "setSmallWinSize（）"
  },
  {
    "origin": "void cv::optflow::RLOFOpticalFlowParameter::setSmallWinSize",
    "local": "void cv:：optflow:：RLOFOpticalFlowParameter:：setSmallWinSize"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow_RLOFOpticalFlowParameter.setSmallWinSize(",
    "local": "cv.optflow\\RLOFOpticalFlowParameter.setSmallWinSize参数("
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "setSolverType()",
    "local": "setSolverType（）"
  },
  {
    "origin": "void cv::optflow::RLOFOpticalFlowParameter::setSolverType",
    "local": "void cv:：optflow:：RLOFOpticalFlowParameter:：setSolverType"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow_RLOFOpticalFlowParameter.setSolverType(",
    "local": "cv.optflow\\ RLOFOpticalFlowParameter.setSolverType参数("
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "setSupportRegionType()",
    "local": "设置支持区域类型（）"
  },
  {
    "origin": "void cv::optflow::RLOFOpticalFlowParameter::setSupportRegionType",
    "local": "void cv:：optflow:：RLOFOpticalFlowParameter:：setSupportRegionType无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow_RLOFOpticalFlowParameter.setSupportRegionType(",
    "local": "cv.optflow公司"
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "setUseGlobalMotionPrior()",
    "local": "setUseGlobalMotionPrior（）"
  },
  {
    "origin": "void cv::optflow::RLOFOpticalFlowParameter::setUseGlobalMotionPrior",
    "local": "void cv:：optflow:：RLOFOpticalFlowParameter:：setUseGlobalMotionPrior无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow_RLOFOpticalFlowParameter.setUseGlobalMotionPrior(",
    "local": "cv.optflow rlofopticalflowparameter.setuseglobalmotionprior（"
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "setUseIlluminationModel()",
    "local": "setUseIlluminationModel（）"
  },
  {
    "origin": "void cv::optflow::RLOFOpticalFlowParameter::setUseIlluminationModel",
    "local": "void cv:：optflow:：RLOFOpticalFlowParameter:：setUseIlluminationModel无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow_RLOFOpticalFlowParameter.setUseIlluminationModel(",
    "local": "cv.optflow公司"
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "setUseInitialFlow()",
    "local": "setUseInitialFlow（）"
  },
  {
    "origin": "void cv::optflow::RLOFOpticalFlowParameter::setUseInitialFlow",
    "local": "%s、 %s、%s、%s、svoid cv:：optflow:：RLOFOpticalFlowParameter:：setUseInitialFlow"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow_RLOFOpticalFlowParameter.setUseInitialFlow(",
    "local": "cv.optflow\\u RLOFOpticalFlowParameter.setUseInitialFlow参数("
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "setUseMEstimator()",
    "local": "setUseMEstimator（）"
  },
  {
    "origin": "void cv::optflow::RLOFOpticalFlowParameter::setUseMEstimator",
    "local": "void cv:：optflow:：RLOFOpticalFlowParameter:：setUseMEstimator无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "None",
    "local": "没有"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.optflow_RLOFOpticalFlowParameter.setUseMEstimator(",
    "local": "cv.optflow\\ RLOFOpticalFlowParameter.setUseMEstimator参数("
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Enable M-estimator or disable and use least-square estimator.",
    "local": "启用M-估计器或禁用并使用最小二乘估计器。"
  },
  {
    "origin": "Enables M-estimator by setting sigma parameters to (3.2, 7.0). Disabling M-estimator can reduce runtime, while enabling can improve the accuracy.",
    "local": "通过将sigma参数设置为（3.2，7.0）启用M-estimator。禁用M-estimator可以减少运行时间，启用M-estimator可以提高计算精度。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "val",
    "local": "瓦尔"
  },
  {
    "origin": "If true M-estimator is used. If false least-square estimator is used.",
    "local": "如果使用真M估计。如果使用伪最小二乘估计。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Member Data Documentation",
    "local": "成员数据文档"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "crossSegmentationThreshold",
    "local": "交叉分段阈值"
  },
  {
    "origin": "int cv::optflow::RLOFOpticalFlowParameter::crossSegmentationThreshold",
    "local": "int cv:：optflow:：RLOFOpticalFlowParameter:：交叉分段阈值"
  },
  {
    "origin": "Color similarity threshold used by cross-based segmentation following",
    "local": "颜色相似度阈值在基于交叉的图像分割中的应用"
  },
  {
    "origin": ". (Only used if supportRegionType is SR_CROSS). With the cross-bassed segmentation motion boundaries can be computed more accurately.",
    "local": ". (仅当supportRegionType为SR\\u CROSS时使用。通过交叉基分割可以更精确地计算运动边界。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "globalMotionRansacThreshold",
    "local": "全球运动勒索"
  },
  {
    "origin": "float cv::optflow::RLOFOpticalFlowParameter::globalMotionRansacThreshold",
    "local": "浮点cv:：optflow:：RLOFOpticalFlowParameter:：GlobalMotionTransactHreshold"
  },
  {
    "origin": "To apply the global motion prior motion vectors will be computed on a regulary sampled which are the basis for Homography estimation using RANSAC. The reprojection threshold is based on n-th percentil (given by this value [0 ... 100]) of the motion vectors magnitude. See",
    "local": "为了应用全局运动先验，运动矢量将在常规采样上计算，这是使用RANSAC进行单应估计的基础。重投影阈值基于第n个百分点（由该值[0。。。100]）的运动矢量。看到了吗"
  },
  {
    "origin": "for more details.",
    "local": "更多细节。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "largeWinSize",
    "local": "大WinSize"
  },
  {
    "origin": "int cv::optflow::RLOFOpticalFlowParameter::largeWinSize",
    "local": "int cv:：optflow:：RLOFOptical"
  },
  {
    "origin": "Maximal window size of the support region. If supportRegionType is SR_FIXED this gives the exact support region size. The speed of the RLOF is related to the applied win sizes. The smaller the window size the lower is the runtime, but the more sensitive to noise is the method.",
    "local": "支持区域的最大窗口大小。如果supportRegionType是SR\\u FIXED，则会给出确切的支持区域大小。RLOF的速度与应用的win大小有关。窗口越小，运行时越低，但方法对噪声越敏感。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "maxIteration",
    "local": "最大迭代"
  },
  {
    "origin": "int cv::optflow::RLOFOpticalFlowParameter::maxIteration",
    "local": "int cv:：optflow:：RLOFOpticalFlowParameter:：maxIteration"
  },
  {
    "origin": "Number of maximal iterations used for the iterative refinement. Lower values can reduce the runtime but also the accuracy.",
    "local": "用于迭代优化的最大迭代次数。较低的值会降低运行时间，但也会降低准确性。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "maxLevel",
    "local": "最大电平"
  },
  {
    "origin": "int cv::optflow::RLOFOpticalFlowParameter::maxLevel",
    "local": "int cv:：optflow:：RLOFOpticalFlowParameter:：maxLevel"
  },
  {
    "origin": "Maximal number of pyramid level used. The large this value is the more likely it is to obtain accurate solutions for long-range motions. The runtime is linear related to this parameter.",
    "local": "使用的金字塔级别的最大数目。该值越大，获得远距离运动精确解的可能性就越大。运行时与此参数呈线性关系。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "minEigenValue",
    "local": "最小"
  },
  {
    "origin": "float cv::optflow::RLOFOpticalFlowParameter::minEigenValue",
    "local": "浮点cv:：optflow:：RLOFOpticalFlowParameter:：minEigenValue"
  },
  {
    "origin": "Threshold for the minimal eigenvalue of the gradient matrix defines when to abort the iterative refinement.",
    "local": "梯度矩阵最小特征值的阈值定义了何时中止迭代求精。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "normSigma0",
    "local": "标准信号0"
  },
  {
    "origin": "float cv::optflow::RLOFOpticalFlowParameter::normSigma0",
    "local": "浮点cv:：optflow:：RLOFOpticalFlowParameter:：normSigma0"
  },
  {
    "origin": "&amp;sigma parameter of the shrinked Hampel norm introduced in",
    "local": "&amp；本文引入收缩Hampel范数的sigma参数"
  },
  {
    "origin": ". If &amp;sigma =",
    "local": ". 如果（&A）；西格玛="
  },
  {
    "origin": "the least-square estimator will be used instead of the M-estimator. Althoug M-estimator is more robust against outlier in the support region the least-square can be fast in computation.",
    "local": "用最小二乘估计代替M估计。虽然M估计对支持域内的异常点具有较强的鲁棒性，但最小二乘法计算速度较快。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "normSigma1",
    "local": "标准信号1"
  },
  {
    "origin": "float cv::optflow::RLOFOpticalFlowParameter::normSigma1",
    "local": "浮点cv:：optflow:：RLOFOpticalFlowParameter:：normSigma1"
  },
  {
    "origin": "&amp;sigma parameter of the shrinked Hampel norm introduced in",
    "local": "&amp；本文引入收缩Hampel范数的sigma参数"
  },
  {
    "origin": ". If &amp;sigma =",
    "local": ". 如果（&A）；西格玛="
  },
  {
    "origin": "the least-square estimator will be used instead of the M-estimator. Althoug M-estimator is more robust against outlier in the support region the least-square can be fast in computation.",
    "local": "用最小二乘估计代替M估计。虽然M估计对支持域内的异常点具有较强的鲁棒性，但最小二乘法计算速度较快。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "smallWinSize",
    "local": "小型WinSize"
  },
  {
    "origin": "int cv::optflow::RLOFOpticalFlowParameter::smallWinSize",
    "local": "int cv:：optflow:：RLOFOpticalFlowParameter:：smallWinSize"
  },
  {
    "origin": "Minimal window size of the support region. This parameter is only used if supportRegionType is SR_CROSS.",
    "local": "支持区域的最小窗口大小。仅当supportRegionType为SR\\u CROSS时才使用此参数。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "solverType",
    "local": "解算器类型"
  },
  {
    "origin": "cv::optflow::RLOFOpticalFlowParameter::solverType",
    "local": "cv：：optflow：：rlofopticalflowparameter：：solvertype"
  },
  {
    "origin": "Variable specifies the iterative refinement strategy. Please consider citing",
    "local": "变量指定迭代优化策略。请考虑引用"
  },
  {
    "origin": "when using ST_BILINEAR.",
    "local": "当使用双线性时。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "supportRegionType",
    "local": "支持区域类型"
  },
  {
    "origin": "cv::optflow::RLOFOpticalFlowParameter::supportRegionType",
    "local": "cv:：optflow:：RLOFOpticalFlowParameter:：supportRegionType"
  },
  {
    "origin": "Variable specifies the support region shape extraction or shrinking strategy.",
    "local": "变量指定支撑区域形状提取或收缩策略。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "useGlobalMotionPrior",
    "local": "使用GlobalMotionPrior"
  },
  {
    "origin": "bool cv::optflow::RLOFOpticalFlowParameter::useGlobalMotionPrior",
    "local": "bool cv：：optflow：：rlofopticalflow参数：：useglobalmotionprior"
  },
  {
    "origin": "Use global motion prior initialisation has been introduced in",
    "local": "在中引入了使用全局运动优先初始化"
  },
  {
    "origin": ". It allows to be more accurate for long-range motion. The computational complexity is slightly increased by enabling the global motion prior initialisation.",
    "local": ". 它允许更精确的远程运动。通过启用全局运动预先初始化，计算复杂度略有增加。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "useIlluminationModel",
    "local": "使用照明模型"
  },
  {
    "origin": "bool cv::optflow::RLOFOpticalFlowParameter::useIlluminationModel",
    "local": "bool cv:：optflow:：RLOFOpticalFlowParameter:：useIlluminationModel"
  },
  {
    "origin": "Use the Gennert and Negahdaripour illumination model instead of the intensity brigthness constraint. (proposed in",
    "local": "使用Gennert和Negahdaripour照明模型代替强度-亮度约束(提出于"
  },
  {
    "origin": ") This model is defined as follow:",
    "local": ")该模型定义如下："
  },
  {
    "origin": "\\[ I(\\mathbf{x},t) + m \\cdot I(\\mathbf{x},t) + c = I(\\mathbf{x},t+1) \\]",
    "local": "\\\\[I（\\mathbf{x}，t）+m\\cdot I（\\mathbf{x}，t）+c=I（\\mathbf{x}，t+1）\\]"
  },
  {
    "origin": "and contains with m and c a multiplicative and additive term which makes the estimate more robust against illumination changes. The computational complexity is increased by enabling the illumination model.",
    "local": "并且在m和c中包含一个乘法和加法项，使得估计对光照变化更为鲁棒。通过启用光照模型，增加了计算复杂度。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "useInitialFlow",
    "local": "使用初始流"
  },
  {
    "origin": "bool cv::optflow::RLOFOpticalFlowParameter::useInitialFlow",
    "local": "bool cv:：optflow:：RLOFOptical lFlowParameter:：useInitialFlow"
  },
  {
    "origin": "Use next point list as initial values. A good intialization can imporve the algortihm accuracy and reduce the runtime by a faster convergence of the iteration refinement.",
    "local": "使用下一个点列表作为初始值。良好的初始化可以通过加快迭代求精的收敛速度，提高算法的精度，减少运行时间。"
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": "此类的文档是从以下文件生成的："
  },
  {
    "origin": "opencv2/optflow/",
    "local": "打开CV2/optflow/"
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:48 for OpenCV by",
    "local": "于2021年4月2日星期五11:36:48为OpenCV生成"
  }
]