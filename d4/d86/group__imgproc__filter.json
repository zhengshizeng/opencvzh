[
  {
    "origin": "OpenCV: Image Filtering",
    "local": "OpenCV:图像过滤"
  },
  {
    "origin": "OpenCV",
    "local": "打开CV"
  },
  {
    "origin": "Open Source Computer Vision",
    "local": "开源计算机视觉"
  },
  {
    "origin": "Enumerations",
    "local": "枚举"
  },
  {
    "origin": "Functions",
    "local": "功能"
  },
  {
    "origin": "Image Filtering",
    "local": "图像滤波"
  },
  {
    "origin": "Enumerations",
    "local": "枚举"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "shape of the structuring element",
    "local": "结构元素的形状"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "}",
    "local": "}"
  },
  {
    "origin": "type of morphological operation",
    "local": "形态操作类型"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "{",
    "local": "{"
  },
  {
    "origin": "= -1 }",
    "local": "= -1 }"
  },
  {
    "origin": "Functions",
    "local": "功能"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int d, double sigmaColor, double sigmaSpace, int borderType=",
    "local": "dst，int d，双sigmaColor，双sigmaSpace，int borderType="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Applies the bilateral filter to an image.",
    "local": "对图像应用双边滤波器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "ksize,",
    "local": "氧气，"
  },
  {
    "origin": "anchor=",
    "local": "锚="
  },
  {
    "origin": "(-1,-1), int borderType=",
    "local": "（-1，-1），int borderType="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Blurs an image using the normalized box filter.",
    "local": "使用规范化的长方体过滤器模糊图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int ddepth,",
    "local": "dst，内部深度，"
  },
  {
    "origin": "ksize,",
    "local": "氧气，"
  },
  {
    "origin": "anchor=",
    "local": "锚="
  },
  {
    "origin": "(-1,-1), bool",
    "local": "（-1，-1），布尔"
  },
  {
    "origin": "=true, int borderType=",
    "local": "=真，int borderType="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Blurs an image using the box filter.",
    "local": "使用长方体过滤器模糊图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int maxlevel, int borderType=",
    "local": "dst，int max level，int borderType="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Constructs the Gaussian pyramid for an image.",
    "local": "为图像构造高斯金字塔。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "kernel,",
    "local": "内核，"
  },
  {
    "origin": "anchor=",
    "local": "锚="
  },
  {
    "origin": "(-1,-1), int iterations=1, int borderType=",
    "local": "（-1，-1），int iterations=1，int borderType="
  },
  {
    "origin": ", const",
    "local": "，常量"
  },
  {
    "origin": "&amp;borderValue=",
    "local": "&amp；边界值="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Dilates an image by using a specific structuring element.",
    "local": "通过使用特定的结构元素来扩展图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "kernel,",
    "local": "内核，"
  },
  {
    "origin": "anchor=",
    "local": "锚="
  },
  {
    "origin": "(-1,-1), int iterations=1, int borderType=",
    "local": "（-1，-1），int iterations=1，int borderType="
  },
  {
    "origin": ", const",
    "local": "，常量"
  },
  {
    "origin": "&amp;borderValue=",
    "local": "&amp；边界值="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Erodes an image by using a specific structuring element.",
    "local": "使用特定的结构元素侵蚀图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int ddepth,",
    "local": "dst，内部深度，"
  },
  {
    "origin": "kernel,",
    "local": "内核，"
  },
  {
    "origin": "anchor=",
    "local": "锚="
  },
  {
    "origin": "(-1,-1), double delta=0, int borderType=",
    "local": "（-1，-1），双增量=0，int borderType="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Convolves an image with the kernel.",
    "local": "将图像与内核卷积。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst,",
    "local": "夏令时，"
  },
  {
    "origin": "ksize, double sigmaX, double sigmaY=0, int borderType=",
    "local": "ksize，double sigmaX，double sigmaY=0，int borderType="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Blurs an image using a Gaussian filter.",
    "local": "使用高斯滤波器模糊图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "kx,",
    "local": "kx公司，"
  },
  {
    "origin": "ky, int dx, int dy, int ksize, bool",
    "local": "ky，int dx，int dy，int ksize，bool"
  },
  {
    "origin": "=false, int ktype=",
    "local": "=false，int k类型="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Returns filter coefficients for computing spatial image derivatives.",
    "local": "返回用于计算空间图像导数的过滤器系数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "ksize, double sigma, double theta, double lambd, double gamma, double psi=",
    "local": "ksize，双西格玛，双θ，双λ，双伽马，双psi="
  },
  {
    "origin": "*0.5, int ktype=",
    "local": "*0.5，int k类型="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Returns Gabor filter coefficients.",
    "local": "返回Gabor滤波器系数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(int ksize, double sigma, int ktype=",
    "local": "（int sexy，双西格玛，int ktype）="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Returns Gaussian filter coefficients.",
    "local": "返回高斯滤波器系数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "(int shape,",
    "local": "（int形状，"
  },
  {
    "origin": "ksize,",
    "local": "氧气，"
  },
  {
    "origin": "anchor=",
    "local": "锚="
  },
  {
    "origin": "(-1,-1))",
    "local": "(-1,-1))"
  },
  {
    "origin": "Returns a structuring element of the specified size and shape for morphological operations.",
    "local": "返回用于形态学运算的指定大小和形状的结构元素。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int ddepth, int ksize=1, double scale=1, double delta=0, int borderType=",
    "local": "dst，int ddepth，int ksize=1，双刻度=1，双增量=0，int borderType="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the Laplacian of an image.",
    "local": "计算图像的拉普拉斯函数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int ksize)",
    "local": "（即int ksize）"
  },
  {
    "origin": "Blurs an image using the median filter.",
    "local": "使用中值滤波器模糊图像。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "returns \"magic\" border value for erosion and dilation. It is automatically transformed to",
    "local": "返回侵蚀和扩张的“魔法”边界值。它会自动转换为"
  },
  {
    "origin": "(-DBL_MAX) for dilation.",
    "local": "（-DBL\\u MAX）用于扩张。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int op,",
    "local": "dst，内部操作，"
  },
  {
    "origin": "kernel,",
    "local": "内核，"
  },
  {
    "origin": "anchor=",
    "local": "锚="
  },
  {
    "origin": "(-1,-1), int iterations=1, int borderType=",
    "local": "（-1，-1），int iterations=1，int borderType="
  },
  {
    "origin": ", const",
    "local": "，常量"
  },
  {
    "origin": "&amp;borderValue=",
    "local": "&amp；边界值="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Performs advanced morphological transformations.",
    "local": "执行高级形态变换。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, const",
    "local": "夏令时，常量"
  },
  {
    "origin": "&amp;dstsize=",
    "local": "&安培dscize公司="
  },
  {
    "origin": "(), int borderType=",
    "local": "（），int borderType="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Blurs an image and downsamples it.",
    "local": "模糊图像并对其进行下采样。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "termcrit=",
    "local": "特姆克里特="
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "+",
    "local": "+"
  },
  {
    "origin": ", 5, 1))",
    "local": ", 5, 1))"
  },
  {
    "origin": "Performs initial step of meanshift segmentation of an image.",
    "local": "执行图像meanshift分割的初始步骤。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, const",
    "local": "夏令时，常量"
  },
  {
    "origin": "&amp;dstsize=",
    "local": "&安培dscize公司="
  },
  {
    "origin": "(), int borderType=",
    "local": "（），int borderType="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Upsamples an image and then blurs it.",
    "local": "向上采样图像，然后使其模糊。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int ddepth, int dx, int dy, double scale=1, double delta=0, int borderType=",
    "local": "dst，int ddepth，int dx，int dy，双刻度=1，双增量=0，int borderType="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the first x- or y- image derivative using Scharr operator.",
    "local": "使用Scharr算子计算第一个x或y图像导数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int ddepth,",
    "local": "dst，内部深度，"
  },
  {
    "origin": "kernelX,",
    "local": "克内尔克斯，"
  },
  {
    "origin": "kernelY,",
    "local": "克内利，"
  },
  {
    "origin": "anchor=",
    "local": "锚="
  },
  {
    "origin": "(-1,-1), double delta=0, int borderType=",
    "local": "（-1，-1），双增量=0，int borderType="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Applies a separable linear filter to an image.",
    "local": "对图像应用可分离线性滤波器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int ddepth, int dx, int dy, int ksize=3, double scale=1, double delta=0, int borderType=",
    "local": "dst，int ddepth，int dx，int dy，int ksize=3，双刻度=1，双增量=0，int borderType="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the first, second, third, or mixed image derivatives using an extended Sobel operator.",
    "local": "使用扩展的Sobel运算符计算第一、第二、第三或混合图像导数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dx,",
    "local": "dx公司，"
  },
  {
    "origin": "dy, int ksize=3, int borderType=",
    "local": "无氧=3，无边界型="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the first order image derivative in both x and y using a Sobel operator.",
    "local": "使用Sobel运算符计算x和y上的一阶图像导数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src,",
    "local": "src公司，"
  },
  {
    "origin": "dst, int ddepth,",
    "local": "dst，内部深度，"
  },
  {
    "origin": "ksize,",
    "local": "氧气，"
  },
  {
    "origin": "anchor=",
    "local": "锚="
  },
  {
    "origin": "(-1, -1), bool",
    "local": "（-1，-1），布尔"
  },
  {
    "origin": "=true, int borderType=",
    "local": "=真，int borderType="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the normalized sum of squares of the pixel values overlapping the filter.",
    "local": "计算与过滤器重叠的像素值的标准化平方和。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Detailed Description",
    "local": "详细说明"
  },
  {
    "origin": "Functions and classes described in this section are used to perform various linear or non-linear filtering operations on 2D images (represented as",
    "local": "本节中描述的函数和类用于对2D图像执行各种线性或非线性滤波操作（表示为"
  },
  {
    "origin": "'s). It means that for each pixel location \\((x,y)\\) in the source image (normally, rectangular), its neighborhood is considered and used to compute the response. In case of a linear filter, it is a weighted sum of pixel values. In case of morphological operations, it is the minimum or maximum values, and so on. The computed response is stored in the destination image at the same location \\((x,y)\\). It means that the output image will be of the same size as the input image. Normally, the functions support multi-channel arrays, in which case every channel is processed independently. Therefore, the output image will also have the same number of channels as the input one.",
    "local": "的）。这意味着对于源图像（通常为矩形）中的每个像素位置\\（（x，y）\\），其邻域被考虑并用于计算响应。对于线性滤波器，它是像素值的加权和。在形态学运算中，它是最小值或最大值，依此类推。计算出的响应存储在目标图像的相同位置\\（（x，y）\\）。这意味着输出图像的大小将与输入图像的大小相同。通常，这些函数支持多通道阵列，在这种情况下，每个通道都是独立处理的。因此，输出图像也将具有与输入图像相同数量的通道。"
  },
  {
    "origin": "Another common feature of the functions and classes described in this section is that, unlike simple arithmetic functions, they need to extrapolate values of some non-existing pixels. For example, if you want to smooth an image using a Gaussian \\(3 \\times 3\\) filter, then, when processing the left-most pixels in each row, you need pixels to the left of them, that is, outside of the image. You can let these pixels be the same as the left-most image pixels (\"replicated border\" extrapolation method), or assume that all the non-existing pixels are zeros (\"constant border\" extrapolation method), and so on. OpenCV enables you to specify the extrapolation method. For details, see",
    "local": "本节中描述的函数和类的另一个共同特征是，与简单的算术函数不同，它们需要外推一些不存在的像素的值。例如，如果要使用高斯（3乘以3）滤波器平滑图像，则在处理每行中最左侧的像素时，需要位于其左侧的像素，即图像外部的像素。您可以让这些像素与最左边的图像像素相同（“复制边界”外推方法），或者假设所有不存在的像素都是零（“恒定边界”外推方法），依此类推。OpenCV允许您指定外推方法。有关详细信息，请参阅"
  },
  {
    "origin": "Depth combinations",
    "local": "深度组合"
  },
  {
    "origin": "Input depth (",
    "local": "输入深度("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Output depth (ddepth)",
    "local": "输出深度（深度）"
  },
  {
    "origin": "CV_8U",
    "local": "CV\\ 8件"
  },
  {
    "origin": "-1/CV_16S/CV_32F/CV_64F",
    "local": "-1/CV\\ U 16S/CV\\ U 32F/CV\\ U 64F"
  },
  {
    "origin": "CV_16U/CV_16S",
    "local": "CV\\ U 16U/CV\\ U 16S"
  },
  {
    "origin": "-1/CV_32F/CV_64F",
    "local": "-1/CV\\ 32F/CV\\ 64F"
  },
  {
    "origin": "CV_32F",
    "local": "CV\\ U 32F型"
  },
  {
    "origin": "-1/CV_32F/CV_64F",
    "local": "-1/CV\\ 32F/CV\\ 64F"
  },
  {
    "origin": "CV_64F",
    "local": "CV\\ U 64F型"
  },
  {
    "origin": "-1/CV_64F",
    "local": "-1/CV\\ 64F"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "when ddepth=-1, the output image will have the same depth as the source.",
    "local": "当ddepth=-1时，输出图像的深度将与源图像的深度相同。"
  },
  {
    "origin": "Enumeration Type Documentation",
    "local": "枚举类型文档"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "MorphShapes",
    "local": "变形形状"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "shape of the structuring element",
    "local": "结构元素的形状"
  },
  {
    "origin": "Enumerator",
    "local": "枚举器"
  },
  {
    "origin": "MORPH_RECT",
    "local": "变形"
  },
  {
    "origin": "Python: cv.MORPH_RECT",
    "local": "Python:cv.MORPH\\u RECT"
  },
  {
    "origin": "a rectangular structuring element:",
    "local": "矩形结构元素："
  },
  {
    "origin": "\\[E_{ij}=1\\]",
    "local": "\\\\[E{ij}=1\\]"
  },
  {
    "origin": "MORPH_CROSS",
    "local": "变形十字"
  },
  {
    "origin": "Python: cv.MORPH_CROSS",
    "local": "Python:cv.MORPH\\u交叉"
  },
  {
    "origin": "a cross-shaped structuring element:",
    "local": "十字形结构元素："
  },
  {
    "origin": "\\[E_{ij} = \\begin{cases} 1 &amp; \\texttt{if } {i=\\texttt{anchor.y } {or } {j=\\texttt{anchor.x}}} \\\\0 &amp; \\texttt{otherwise} \\end{cases}\\]",
    "local": "\\[E{ij}=\\begin{cases}1&amp\\texttt{if}{i=\\texttt{anchor.y}{或}{j=\\texttt{anchor.x}}}\\\\0&amp\\texttt{otherwise}\\end{cases}\\]"
  },
  {
    "origin": "MORPH_ELLIPSE",
    "local": "变形椭圆"
  },
  {
    "origin": "Python: cv.MORPH_ELLIPSE",
    "local": "Python:cv.MORPH\\u椭圆"
  },
  {
    "origin": "an elliptic structuring element, that is, a filled ellipse inscribed into the rectangle Rect(0, 0, esize.width, 0.esize.height)",
    "local": "一个椭圆结构元素，即一个内接在矩形矩形中的填充椭圆（0，0，esize.width，0.esize.height）"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "MorphTypes",
    "local": "变形类型"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "type of morphological operation",
    "local": "形态操作类型"
  },
  {
    "origin": "Enumerator",
    "local": "枚举器"
  },
  {
    "origin": "MORPH_ERODE",
    "local": "变形腐蚀"
  },
  {
    "origin": "Python: cv.MORPH_ERODE",
    "local": "Python:cv.MORPH\\u侵蚀"
  },
  {
    "origin": "see",
    "local": "看见"
  },
  {
    "origin": "MORPH_DILATE",
    "local": "变形/扩张"
  },
  {
    "origin": "Python: cv.MORPH_DILATE",
    "local": "Python:cv.MORPH\\u扩张"
  },
  {
    "origin": "see",
    "local": "看见"
  },
  {
    "origin": "MORPH_OPEN",
    "local": "变形打开"
  },
  {
    "origin": "Python: cv.MORPH_OPEN",
    "local": "Python:cv.MORPH\\u打开"
  },
  {
    "origin": "an opening operation",
    "local": "开放手术"
  },
  {
    "origin": "\\[\\texttt{dst} = \\mathrm{open} ( \\texttt{src} , \\texttt{element} )= \\mathrm{dilate} ( \\mathrm{erode} ( \\texttt{src} , \\texttt{element} ))\\]",
    "local": "\\\\[\\texttt{dst}=\\mathrm{open}（\\texttt{src}、\\texttt{element}）=\\mathrm{deplicate}（\\mathrm{corlose}（\\texttt{src}、\\texttt{element}））\\]"
  },
  {
    "origin": "MORPH_CLOSE",
    "local": "变形关闭"
  },
  {
    "origin": "Python: cv.MORPH_CLOSE",
    "local": "Python:cv.MORPH\\u关闭"
  },
  {
    "origin": "a closing operation",
    "local": "关闭操作"
  },
  {
    "origin": "\\[\\texttt{dst} = \\mathrm{close} ( \\texttt{src} , \\texttt{element} )= \\mathrm{erode} ( \\mathrm{dilate} ( \\texttt{src} , \\texttt{element} ))\\]",
    "local": "\\\\[\\texttt{dst}=\\mathrm{close}（\\texttt{src}、\\texttt{element}）=\\mathrm{econse}（\\mathrm{deplate}（\\texttt{src}、\\texttt{element}））\\]"
  },
  {
    "origin": "MORPH_GRADIENT",
    "local": "变形梯度"
  },
  {
    "origin": "Python: cv.MORPH_GRADIENT",
    "local": "Python:cv.MORPH\\u渐变"
  },
  {
    "origin": "a morphological gradient",
    "local": "形态梯度"
  },
  {
    "origin": "\\[\\texttt{dst} = \\mathrm{morph\\_grad} ( \\texttt{src} , \\texttt{element} )= \\mathrm{dilate} ( \\texttt{src} , \\texttt{element} )- \\mathrm{erode} ( \\texttt{src} , \\texttt{element} )\\]",
    "local": "\\\\[\\texttt{dst}=\\mathrm{morph\\\\u grad}（\\texttt{src}、\\texttt{element}）=\\mathrm{deplate}（\\texttt{src}、\\texttt{element}）-\\mathrm{econose}（\\texttsrc}、\\texttt{element}）\\]"
  },
  {
    "origin": "MORPH_TOPHAT",
    "local": "变形顶帽"
  },
  {
    "origin": "Python: cv.MORPH_TOPHAT",
    "local": "蟒蛇：cv.MORPH\\u TOPHAT"
  },
  {
    "origin": "\"top hat\"",
    "local": "“礼帽”"
  },
  {
    "origin": "\\[\\texttt{dst} = \\mathrm{tophat} ( \\texttt{src} , \\texttt{element} )= \\texttt{src} - \\mathrm{open} ( \\texttt{src} , \\texttt{element} )\\]",
    "local": "\\\\textte{dst}=\\mathrm{tophat}\\textte{src}、\\textte{element}\\textte{element}\\textte{src}\\mathrm{open}（\\textte{src}\\textte{element}\\"
  },
  {
    "origin": "MORPH_BLACKHAT",
    "local": "变形黑帽"
  },
  {
    "origin": "Python: cv.MORPH_BLACKHAT",
    "local": "蟒蛇：cv.MORPH\\u BLACKHAT"
  },
  {
    "origin": "\"black hat\"",
    "local": "“黑帽子”"
  },
  {
    "origin": "\\[\\texttt{dst} = \\mathrm{blackhat} ( \\texttt{src} , \\texttt{element} )= \\mathrm{close} ( \\texttt{src} , \\texttt{element} )- \\texttt{src}\\]",
    "local": "\\textt{dst}=\\mathrm{blackhat}（\\textt{src}、\\textt{element}）=\\mathrm{close}（\\textt{src}、\\textt{element}\\textt{src}]"
  },
  {
    "origin": "MORPH_HITMISS",
    "local": "变形-u命中"
  },
  {
    "origin": "Python: cv.MORPH_HITMISS",
    "local": "蟒蛇：cv.MORPH\\u HITMISS"
  },
  {
    "origin": "\"hit or miss\" .- Only supported for CV_8UC1 binary images. A tutorial can be found in the documentation",
    "local": "“命中或未命中”。-仅支持CV8uc1二进制图像。教程可以在文档中找到"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "SpecialFilter",
    "local": "特殊过滤器"
  },
  {
    "origin": "enum",
    "local": "枚举"
  },
  {
    "origin": "Enumerator",
    "local": "枚举器"
  },
  {
    "origin": "FILTER_SCHARR",
    "local": "过滤器"
  },
  {
    "origin": "Python: cv.FILTER_SCHARR",
    "local": "Python:cv.FILTER\\u SCHARR"
  },
  {
    "origin": "Function Documentation",
    "local": "功能文档"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "bilateralFilter()",
    "local": "双边滤波器（）"
  },
  {
    "origin": "void cv::bilateralFilter",
    "local": "void cv:：双边过滤器"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "d",
    "local": "d"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "sigmaColor",
    "local": "西格玛颜色"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "sigmaSpace",
    "local": "西格玛空间"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.bilateralFilter(",
    "local": "cv.双边过滤器("
  },
  {
    "origin": "src, d, sigmaColor, sigmaSpace[, dst[, borderType]]",
    "local": "心脏，d，sigmaColor，sigmaSpace[，dst[，borderType]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Applies the bilateral filter to an image.",
    "local": "对图像应用双边滤波器。"
  },
  {
    "origin": "The function applies bilateral filtering to the input image, as described in",
    "local": "该函数对输入图像应用双边滤波，如中所述"
  },
  {
    "origin": "http://www.dai.ed.ac.uk/CVonline/LOCAL_COPIES/MANDUCHI1/Bilateral_Filtering.html",
    "local": "http://www.dai.ed.ac.uk/CVonline/LOCAL_COPIES/MANDUCHI1/Bilateral_Filtering.html"
  },
  {
    "origin": "bilateralFilter can reduce unwanted noise very well while keeping edges fairly sharp. However, it is very slow compared to most filters.",
    "local": "双边滤波器可以减少不必要的噪音非常好，同时保持边缘相当尖锐。但是，与大多数过滤器相比，它的速度非常慢。"
  },
  {
    "origin": "Sigma values",
    "local": "西格玛值"
  },
  {
    "origin": ": For simplicity, you can set the 2 sigma values to be the same. If they are small (&lt; 10), the filter will not have much effect, whereas if they are large (&gt; 150), they will have a very strong effect, making the image look \"cartoonish\".",
    "local": "：为简单起见，您可以将2西格玛值设置为相同。如果它们很小（&lt；10） ，过滤器将不会有太大的影响，而如果它们很大（&gt；150），它们将产生非常强烈的效果，使图像看起来“卡通化”。"
  },
  {
    "origin": "Filter size",
    "local": "过滤器尺寸"
  },
  {
    "origin": ": Large filters (d &gt; 5) are very slow, so it is recommended to use d=5 for real-time applications, and perhaps d=9 for offline applications that need heavy noise filtering.",
    "local": "：大型过滤器（d&gt；5） 速度非常慢，因此建议在实时应用程序中使用d=5，在需要大量噪声过滤的脱机应用程序中使用d=9。"
  },
  {
    "origin": "This filter does not work inplace.",
    "local": "这个过滤器不能就地工作。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "Source 8-bit or floating-point, 1-channel or 3-channel image.",
    "local": "源8位或浮点、1通道或3通道图像。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "Destination image of the same size and type as src .",
    "local": "与src大小和类型相同的目标图像。"
  },
  {
    "origin": "d",
    "local": "d"
  },
  {
    "origin": "Diameter of each pixel neighborhood that is used during filtering. If it is non-positive, it is computed from sigmaSpace.",
    "local": "过滤期间使用的每个像素邻域的直径。如果为非正，则从sigmaSpace计算。"
  },
  {
    "origin": "sigmaColor",
    "local": "西格玛颜色"
  },
  {
    "origin": "Filter sigma in the color space. A larger value of the parameter means that farther colors within the pixel neighborhood (see sigmaSpace) will be mixed together, resulting in larger areas of semi-equal color.",
    "local": "在颜色空间中过滤sigma。该参数的值越大，意味着像素邻域（请参见sigmaSpace）中的更多颜色将混合在一起，从而产生更大的半等色区域。"
  },
  {
    "origin": "sigmaSpace",
    "local": "西格玛空间"
  },
  {
    "origin": "Filter sigma in the coordinate space. A larger value of the parameter means that farther pixels will influence each other as long as their colors are close enough (see sigmaColor ). When d&gt;0, it specifies the neighborhood size regardless of sigmaSpace. Otherwise, d is proportional to sigmaSpace.",
    "local": "在坐标空间中过滤sigma。该参数的值越大，意味着越远的像素将相互影响，只要它们的颜色足够接近（参见sigmaColor）。当d&gt；0，它指定邻域大小，而不考虑sigmaSpace。否则，d与sigmaSpace成正比。"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "border mode used to extrapolate pixels outside of the image, see",
    "local": "用于外推图像外部像素的边框模式，请参见"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "blur()",
    "local": "模糊（）"
  },
  {
    "origin": "void cv::blur",
    "local": "void cv：：模糊"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "ksize",
    "local": "K尺寸"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "anchor",
    "local": "锚"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.blur(",
    "local": "cv模糊("
  },
  {
    "origin": "src, ksize[, dst[, anchor[, borderType]]]",
    "local": "src，ksize[，dst[，anchor[，borderType]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Blurs an image using the normalized box filter.",
    "local": "使用规范化的长方体过滤器模糊图像。"
  },
  {
    "origin": "The function smooths an image using the kernel:",
    "local": "函数使用内核平滑图像："
  },
  {
    "origin": "\\[\\texttt{K} = \\frac{1}{\\texttt{ksize.width*ksize.height}} \\begin{bmatrix} 1 &amp; 1 &amp; 1 &amp; \\cdots &amp; 1 &amp; 1 \\\\ 1 &amp; 1 &amp; 1 &amp; \\cdots &amp; 1 &amp; 1 \\\\ \\hdotsfor{6} \\\\ 1 &amp; 1 &amp; 1 &amp; \\cdots &amp; 1 &amp; 1 \\\\ \\end{bmatrix}\\]",
    "local": "\\[\\texttt{K}=\\frac{1}{\\texttt{ksize.width*ksize.height}}\\begin{bmatrix}1&amp；1和；1和\\CDOT和；1和；1\\\\1和；1和；1和\\CDOT和；1和；1\\\\\\hdots{6}\\\\1&amp；1和；1和\\CDOT和；1和；1\\\\\\结束{bmatrix}\\]"
  },
  {
    "origin": "The call",
    "local": "电话"
  },
  {
    "origin": "is equivalent to",
    "local": "相当于"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input image; it can have any number of channels, which are processed independently, but the depth should be CV_8U, CV_16U, CV_16S, CV_32F or CV_64F.",
    "local": "输入图像；它可以有任意数量的通道，这些通道是独立处理的，但深度应为CV泳8U、CV泳16U、CV泳16S、CV泳32F或CV泳64F。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output image of the same size and type as src.",
    "local": "输出与src大小和类型相同的图像。"
  },
  {
    "origin": "ksize",
    "local": "K尺寸"
  },
  {
    "origin": "blurring kernel size.",
    "local": "模糊的内核大小。"
  },
  {
    "origin": "anchor",
    "local": "锚"
  },
  {
    "origin": "anchor point; default value Point(-1,-1) means that the anchor is at the kernel center.",
    "local": "锚点；默认值点（-1，-1）表示锚点位于内核中心。"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "border mode used to extrapolate pixels outside of the image, see",
    "local": "用于外推图像外部像素的边框模式，请参见"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "is not supported.",
    "local": "不支持。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "boxFilter()",
    "local": "boxFilter（）"
  },
  {
    "origin": "void cv::boxFilter",
    "local": "void cv:：boxFilter"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ddepth",
    "local": "深度"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "ksize",
    "local": "K尺寸"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "anchor",
    "local": "锚"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "normalize",
    "local": "正常化"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.boxFilter(",
    "local": "cv.boxFilter过滤器("
  },
  {
    "origin": "src, ddepth, ksize[, dst[, anchor[, normalize[, borderType]]]]",
    "local": "src，ddepth，ksize[，dst[，anchor[，normalize[，borderType]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Blurs an image using the box filter.",
    "local": "使用长方体过滤器模糊图像。"
  },
  {
    "origin": "The function smooths an image using the kernel:",
    "local": "函数使用内核平滑图像："
  },
  {
    "origin": "\\[\\texttt{K} = \\alpha \\begin{bmatrix} 1 &amp; 1 &amp; 1 &amp; \\cdots &amp; 1 &amp; 1 \\\\ 1 &amp; 1 &amp; 1 &amp; \\cdots &amp; 1 &amp; 1 \\\\ \\hdotsfor{6} \\\\ 1 &amp; 1 &amp; 1 &amp; \\cdots &amp; 1 &amp; 1 \\end{bmatrix}\\]",
    "local": "\\[\\texttt{K}=\\alpha\\begin{bmatrix}1&amp；1和；1和\\CDOT和；1和；1\\\\1和；1和；1和\\CDOT和；1和；1\\\\\\hdots{6}\\\\1&amp；1和；1和\\CDOT和；1和；1\\end{bmatrix}\\]"
  },
  {
    "origin": "where",
    "local": "哪里"
  },
  {
    "origin": "\\[\\alpha = \\begin{cases} \\frac{1}{\\texttt{ksize.width*ksize.height}} &amp; \\texttt{when } \\texttt{normalize=true} \\\\1 &amp; \\texttt{otherwise}\\end{cases}\\]",
    "local": "\\[\\alpha=\\begin{cases}\\frac{1}{\\texttt{ksize.width*ksize.height}}&amp\\texttt{when}\\texttt{normalize=true}\\\\1&amp\\texttt{otherwise}\\end{cases}\\]"
  },
  {
    "origin": "Unnormalized box filter is useful for computing various integral characteristics over each pixel neighborhood, such as covariance matrices of image derivatives (used in dense optical flow algorithms, and so on). If you need to compute pixel sums over variable-size windows, use",
    "local": "非标准化盒滤波器用于计算每个像素邻域上的各种积分特性，例如图像导数的协方差矩阵（用于密集光流算法等）。如果需要计算可变大小窗口上的像素和，请使用"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input image.",
    "local": "输入图像。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output image of the same size and type as src.",
    "local": "输出与src大小和类型相同的图像。"
  },
  {
    "origin": "ddepth",
    "local": "深度"
  },
  {
    "origin": "the output image depth (-1 to use",
    "local": "输出图像深度（-1）"
  },
  {
    "origin": ").",
    "local": ")."
  },
  {
    "origin": "ksize",
    "local": "K尺寸"
  },
  {
    "origin": "blurring kernel size.",
    "local": "模糊的内核大小。"
  },
  {
    "origin": "anchor",
    "local": "锚"
  },
  {
    "origin": "anchor point; default value Point(-1,-1) means that the anchor is at the kernel center.",
    "local": "锚点；默认值点（-1，-1）表示锚点位于内核中心。"
  },
  {
    "origin": "normalize",
    "local": "正常化"
  },
  {
    "origin": "flag, specifying whether the kernel is normalized by its area or not.",
    "local": "标志，指定内核是否按其区域进行规范化。"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "border mode used to extrapolate pixels outside of the image, see",
    "local": "用于外推图像外部像素的边框模式，请参见"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "is not supported.",
    "local": "不支持。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "buildPyramid()",
    "local": "buildPyramid（）"
  },
  {
    "origin": "void cv::buildPyramid",
    "local": "void cv:：buildPyramid无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "maxlevel",
    "local": "最大电平"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Constructs the Gaussian pyramid for an image.",
    "local": "为图像构造高斯金字塔。"
  },
  {
    "origin": "The function constructs a vector of images and builds the Gaussian pyramid by recursively applying pyrDown to the previously built pyramid layers, starting from",
    "local": "该函数构造一个图像向量，并通过递归地将pyrDown应用到先前构建的金字塔层来构建高斯金字塔，从"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "Source image. Check pyrDown for the list of supported types.",
    "local": "源图像。检查支持类型的列表。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "Destination vector of maxlevel+1 images of the same type as src. dst[0] will be the same as src. dst[1] is the next pyramid layer, a smoothed and down-sized src, and so on.",
    "local": "与src类型相同的maxlevel+1图像的目标向量。dst[0]将与src相同。dst[1]是下一个金字塔层，一个平滑的和缩小的src，以此类推。"
  },
  {
    "origin": "maxlevel",
    "local": "最大电平"
  },
  {
    "origin": "0-based index of the last (the smallest) pyramid layer. It must be non-negative.",
    "local": "最后（最小）金字塔层的基于0的索引。它必须是非负的。"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "Pixel extrapolation method, see",
    "local": "像素外推方法，参见"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "isn't supported)",
    "local": "（不支持）"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "dilate()",
    "local": "扩张（）"
  },
  {
    "origin": "void cv::dilate",
    "local": "无效cv：：扩张"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "kernel",
    "local": "内核"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "anchor",
    "local": "锚"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "iterations",
    "local": "迭代"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "borderValue",
    "local": "边界值"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.dilate(",
    "local": "cv.扩张("
  },
  {
    "origin": "src, kernel[, dst[, anchor[, iterations[, borderType[, borderValue]]]]]",
    "local": "src、kernel[、dst[、anchor[、iterations[、borderType[、borderValue]]]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Dilates an image by using a specific structuring element.",
    "local": "通过使用特定的结构元素来扩展图像。"
  },
  {
    "origin": "The function dilates the source image using the specified structuring element that determines the shape of a pixel neighborhood over which the maximum is taken:",
    "local": "该函数使用指定的结构元素来扩展源图像，该结构元素确定取最大值的像素邻域的形状："
  },
  {
    "origin": "\\[\\texttt{dst} (x,y) = \\max _{(x',y'): \\, \\texttt{element} (x',y') \\ne0 } \\texttt{src} (x+x',y+y')\\]",
    "local": "\\[texttt{dst}（x，y）=\\ max{（x，y'）：\\，\\ texttt{element}（x，y'）\\ ne0}\\ texttt{src}（x+x，y+y'）\\"
  },
  {
    "origin": "The function supports the in-place mode. Dilation can be applied several ( iterations ) times. In case of multi-channel images, each channel is processed independently.",
    "local": "该功能支持就地模式。膨胀可以应用多次（迭代）。在多通道图像的情况下，每个通道被独立地处理。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input image; the number of channels can be arbitrary, but the depth should be one of CV_8U, CV_16U, CV_16S, CV_32F or CV_64F.",
    "local": "输入图像；地震道的数量可以是任意的，但深度应为CV泳8U、CV泳16U、CV泳16S、CV泳32F或CV泳64F之一。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output image of the same size and type as src.",
    "local": "输出与src大小和类型相同的图像。"
  },
  {
    "origin": "kernel",
    "local": "内核"
  },
  {
    "origin": "structuring element used for dilation; if elemenat=Mat(), a 3 x 3 rectangular structuring element is used. Kernel can be created using",
    "local": "用于扩张的结构元素；如果elemenat=Mat（），则使用3 x 3矩形结构元素。内核可以使用"
  },
  {
    "origin": "anchor",
    "local": "锚"
  },
  {
    "origin": "position of the anchor within the element; default value (-1, -1) means that the anchor is at the element center.",
    "local": "锚在构件内的位置；默认值（-1，-1）表示锚点位于元素中心。"
  },
  {
    "origin": "iterations",
    "local": "迭代"
  },
  {
    "origin": "number of times dilation is applied.",
    "local": "应用扩张的次数。"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "pixel extrapolation method, see",
    "local": "像素外推方法，参见"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "is not suported.",
    "local": "不支持。"
  },
  {
    "origin": "borderValue",
    "local": "边界值"
  },
  {
    "origin": "border value in case of a constant border",
    "local": "如果边界为常量，则为border值"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "erode()",
    "local": "侵蚀（）"
  },
  {
    "origin": "void cv::erode",
    "local": "空洞cv：：侵蚀"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "kernel",
    "local": "内核"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "anchor",
    "local": "锚"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "iterations",
    "local": "迭代"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "borderValue",
    "local": "边界值"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.erode(",
    "local": "侵蚀("
  },
  {
    "origin": "src, kernel[, dst[, anchor[, iterations[, borderType[, borderValue]]]]]",
    "local": "src、kernel[、dst[、anchor[、iterations[、borderType[、borderValue]]]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Erodes an image by using a specific structuring element.",
    "local": "使用特定的结构元素侵蚀图像。"
  },
  {
    "origin": "The function erodes the source image using the specified structuring element that determines the shape of a pixel neighborhood over which the minimum is taken:",
    "local": "该函数使用指定的结构元素侵蚀源图像，该结构元素确定像素邻域的形状，在该邻域上取最小值："
  },
  {
    "origin": "\\[\\texttt{dst} (x,y) = \\min _{(x',y'): \\, \\texttt{element} (x',y') \\ne0 } \\texttt{src} (x+x',y+y')\\]",
    "local": "\\[texttt{dst}（x，y）=\\ min{（x，y'）：\\，\\ texttt{element}（x，y'）\\ ne0}\\ texttt{src}（x+x，y+y'）\\"
  },
  {
    "origin": "The function supports the in-place mode. Erosion can be applied several ( iterations ) times. In case of multi-channel images, each channel is processed independently.",
    "local": "该功能支持就地模式。侵蚀可以应用多次（迭代）。在多通道图像的情况下，每个通道被独立地处理。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input image; the number of channels can be arbitrary, but the depth should be one of CV_8U, CV_16U, CV_16S, CV_32F or CV_64F.",
    "local": "输入图像；地震道的数量可以是任意的，但深度应为CV泳8U、CV泳16U、CV泳16S、CV泳32F或CV泳64F之一。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output image of the same size and type as src.",
    "local": "输出与src大小和类型相同的图像。"
  },
  {
    "origin": "kernel",
    "local": "内核"
  },
  {
    "origin": "structuring element used for erosion; if",
    "local": "用于侵蚀的结构元素；如果"
  },
  {
    "origin": ", a",
    "local": "，一个"
  },
  {
    "origin": "rectangular structuring element is used. Kernel can be created using",
    "local": "使用矩形结构元素。内核可以使用"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "anchor",
    "local": "锚"
  },
  {
    "origin": "position of the anchor within the element; default value (-1, -1) means that the anchor is at the element center.",
    "local": "锚在构件内的位置；默认值（-1，-1）表示锚点位于元素中心。"
  },
  {
    "origin": "iterations",
    "local": "迭代"
  },
  {
    "origin": "number of times erosion is applied.",
    "local": "侵蚀次数。"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "pixel extrapolation method, see",
    "local": "像素外推方法，参见"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "is not supported.",
    "local": "不支持。"
  },
  {
    "origin": "borderValue",
    "local": "边界值"
  },
  {
    "origin": "border value in case of a constant border",
    "local": "如果边界为常量，则为border值"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "filter2D()",
    "local": "过滤器2d（）"
  },
  {
    "origin": "void cv::filter2D",
    "local": "无效cv:：filter2D"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ddepth",
    "local": "深度"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "kernel",
    "local": "内核"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "anchor",
    "local": "锚"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "delta",
    "local": "三角洲"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.filter2D(",
    "local": "cv.过滤器2D("
  },
  {
    "origin": "src, ddepth, kernel[, dst[, anchor[, delta[, borderType]]]]",
    "local": "src，ddepth，kernel[，dst[，anchor[，delta[，borderType]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Convolves an image with the kernel.",
    "local": "将图像与内核卷积。"
  },
  {
    "origin": "The function applies an arbitrary linear filter to an image. In-place operation is supported. When the aperture is partially outside the image, the function interpolates outlier pixel values according to the specified border mode.",
    "local": "该函数对图像应用任意线性滤波器。支持就地操作。当光圈部分位于图像外部时，该函数根据指定的边界模式对离群像素值进行插值。"
  },
  {
    "origin": "The function does actually compute correlation, not the convolution:",
    "local": "函数实际上计算的是相关性，而不是卷积："
  },
  {
    "origin": "\\[\\texttt{dst} (x,y) = \\sum _{ \\substack{0\\leq x' &lt; \\texttt{kernel.cols}\\\\{0\\leq y' &lt; \\texttt{kernel.rows}}}} \\texttt{kernel} (x',y')* \\texttt{src} (x+x'- \\texttt{anchor.x} ,y+y'- \\texttt{anchor.y} )\\]",
    "local": "\\[texttt{dst}（x，y）=\\ sum \\ subspack{0 \\ leq x'&lt；\\ ntexttt{kernel.cols}\\\\ 0 \\\\ leq和'&lt；\\ ntexttt{kernel.rows}}}\\ texttt{kernel}（x，y'）*\\ texttt{src}（x+x'-\\ texttt{anchor.x}，y+y'-\\ texttt{anchor.y}）\\"
  },
  {
    "origin": "That is, the kernel is not mirrored around the anchor point. If you need a real convolution, flip the kernel using",
    "local": "也就是说，内核没有围绕锚点进行镜像。如果需要真正的卷积，可以使用"
  },
  {
    "origin": "and set the new anchor to",
    "local": "把新锚定在"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "The function uses the DFT-based algorithm in case of sufficiently large kernels (~",
    "local": "在核足够大的情况下，函数使用基于DFT的算法(~"
  },
  {
    "origin": "or larger) and the direct algorithm for small kernels.",
    "local": "或更大）和小内核的直接算法。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input image.",
    "local": "输入图像。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output image of the same size and the same number of channels as src.",
    "local": "输出与src大小和通道数相同的图像。"
  },
  {
    "origin": "ddepth",
    "local": "深度"
  },
  {
    "origin": "desired depth of the destination image, see",
    "local": "目标图像的所需深度，请参见"
  },
  {
    "origin": "kernel",
    "local": "内核"
  },
  {
    "origin": "convolution kernel (or rather a correlation kernel), a single-channel floating point matrix; if you want to apply different kernels to different channels, split the image into separate color planes using split and process them individually.",
    "local": "卷积核（或者说相关核），单通道浮点矩阵；如果要将不同的内核应用于不同的通道，请使用“拆分”将图像拆分为不同的颜色平面，然后分别进行处理。"
  },
  {
    "origin": "anchor",
    "local": "锚"
  },
  {
    "origin": "anchor of the kernel that indicates the relative position of a filtered point within the kernel; the anchor should lie within the kernel; default value (-1,-1) means that the anchor is at the kernel center.",
    "local": "表示过滤点在内核中的相对位置的内核锚；锚应位于内核内；默认值（-1，-1）表示锚点位于内核中心。"
  },
  {
    "origin": "delta",
    "local": "三角洲"
  },
  {
    "origin": "optional value added to the filtered pixels before storing them in dst.",
    "local": "在将过滤后的像素存储到dst之前添加到像素上的可选值。"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "pixel extrapolation method, see",
    "local": "像素外推方法，参见"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "is not supported.",
    "local": "不支持。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "GaussianBlur()",
    "local": "高斯模糊（）"
  },
  {
    "origin": "void cv::GaussianBlur",
    "local": "空心cv：：高斯蓝"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "ksize",
    "local": "K尺寸"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "sigmaX",
    "local": "西格马克斯"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "sigmaY",
    "local": "西格梅"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.GaussianBlur(",
    "local": "GaussianBlur简历("
  },
  {
    "origin": "src, ksize, sigmaX[, dst[, sigmaY[, borderType]]]",
    "local": "src，ksize，sigmaX[，dst[，sigmaY[，borderType]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Blurs an image using a Gaussian filter.",
    "local": "使用高斯滤波器模糊图像。"
  },
  {
    "origin": "The function convolves the source image with the specified Gaussian kernel. In-place filtering is supported.",
    "local": "该函数用指定的高斯核卷积源图像。支持就地过滤。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input image; the image can have any number of channels, which are processed independently, but the depth should be CV_8U, CV_16U, CV_16S, CV_32F or CV_64F.",
    "local": "输入图像；图像可以有任意数量的通道，这些通道是独立处理的，但深度应为CV泷8U、CV泷16U、CV泷16S、CV泷32F或CV泷64F。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output image of the same size and type as src.",
    "local": "输出与src大小和类型相同的图像。"
  },
  {
    "origin": "ksize",
    "local": "K尺寸"
  },
  {
    "origin": "Gaussian kernel size. ksize.width and ksize.height can differ but they both must be positive and odd. Or, they can be zero's and then they are computed from sigma.",
    "local": "高斯核大小。ksize.width和ksize.height可以不同，但它们都必须是正数和奇数。或者，它们可以是零，然后根据sigma计算。"
  },
  {
    "origin": "sigmaX",
    "local": "西格马克斯"
  },
  {
    "origin": "Gaussian kernel standard deviation in X direction.",
    "local": "X方向的高斯核标准差。"
  },
  {
    "origin": "sigmaY",
    "local": "西格梅"
  },
  {
    "origin": "Gaussian kernel standard deviation in Y direction; if sigmaY is zero, it is set to be equal to sigmaX, if both sigmas are zeros, they are computed from ksize.width and ksize.height, respectively (see",
    "local": "Y方向高斯核标准差；如果sigmaY为零，则设置为等于sigmaX；如果两个sigma都为零，则分别从ksize.width和ksize.height计算它们（请参见"
  },
  {
    "origin": "for details); to fully control the result regardless of possible future modifications of all this semantics, it is recommended to specify all of ksize, sigmaX, and sigmaY.",
    "local": "详细信息）；为了完全控制结果，不管将来是否可能修改所有这些语义，建议指定ksize、sigmaX和sigmaY。"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "pixel extrapolation method, see",
    "local": "像素外推方法，参见"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "is not supported.",
    "local": "不支持。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getDerivKernels()",
    "local": "getDerivKernels（）"
  },
  {
    "origin": "void cv::getDerivKernels",
    "local": "void cv:：getDerivKernels"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "kx",
    "local": "kx公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "ky",
    "local": "肯塔基州"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "dx",
    "local": "dx公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "dy",
    "local": "戴"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ksize",
    "local": "K尺寸"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "normalize",
    "local": "正常化"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ktype",
    "local": "K型"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "kx, ky",
    "local": "kx，肯塔基州"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.getDerivKernels(",
    "local": "玉米粒("
  },
  {
    "origin": "dx, dy, ksize[, kx[, ky[, normalize[, ktype]]]]",
    "local": "dx，2，ksize[，kx[，ky[，normalize[，ktype]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Returns filter coefficients for computing spatial image derivatives.",
    "local": "返回用于计算空间图像导数的过滤器系数。"
  },
  {
    "origin": "The function computes and returns the filter coefficients for spatial image derivatives. When",
    "local": "该函数计算并返回空间图像导数的滤波器系数。什么时候？"
  },
  {
    "origin": ", the Scharr \\(3 \\times 3\\) kernels are generated (see",
    "local": "，生成Scharr（3乘以3）内核（参见"
  },
  {
    "origin": "). Otherwise, Sobel kernels are generated (see",
    "local": "). 否则，将生成Sobel内核（参见"
  },
  {
    "origin": "). The filters are normally passed to",
    "local": "). 过滤器通常通过"
  },
  {
    "origin": "or to",
    "local": "或者"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "kx",
    "local": "kx公司"
  },
  {
    "origin": "Output matrix of row filter coefficients. It has the type ktype .",
    "local": "行滤波器系数的输出矩阵。它的类型是ktype。"
  },
  {
    "origin": "ky",
    "local": "肯塔基州"
  },
  {
    "origin": "Output matrix of column filter coefficients. It has the type ktype .",
    "local": "列滤波器系数的输出矩阵。它的类型是ktype。"
  },
  {
    "origin": "dx",
    "local": "dx公司"
  },
  {
    "origin": "Derivative order in respect of x.",
    "local": "关于x的导数阶。"
  },
  {
    "origin": "dy",
    "local": "戴"
  },
  {
    "origin": "Derivative order in respect of y.",
    "local": "关于y的导数阶。"
  },
  {
    "origin": "ksize",
    "local": "K尺寸"
  },
  {
    "origin": "Aperture size. It can be FILTER_SCHARR, 1, 3, 5, or 7.",
    "local": "光圈大小。它可以是FILTER\\u SCHARR、1、3、5或7。"
  },
  {
    "origin": "normalize",
    "local": "正常化"
  },
  {
    "origin": "Flag indicating whether to normalize (scale down) the filter coefficients or not. Theoretically, the coefficients should have the denominator \\(=2^{ksize*2-dx-dy-2}\\). If you are going to filter floating-point images, you are likely to use the normalized kernels. But if you compute derivatives of an 8-bit image, store the results in a 16-bit image, and wish to preserve all the fractional bits, you may want to set normalize=false .",
    "local": "指示是否规范化（缩小）滤波器系数的标志。理论上，系数应该有分母\\（=2^{ksize*2-dx-dy-2}\\）。如果要过滤浮点图像，可能需要使用规范化内核。但是，如果您计算8位图像的导数，将结果存储在16位图像中，并且希望保留所有分数位，则可能需要将normalize设置为false。"
  },
  {
    "origin": "ktype",
    "local": "K型"
  },
  {
    "origin": "Type of filter coefficients. It can be CV_32f or CV_64F .",
    "local": "滤波器系数的类型。它可以是CV\\ 32f或CV\\ 64F。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getGaborKernel()",
    "local": "getGaborKernel（）"
  },
  {
    "origin": "cv::getGaborKernel",
    "local": "简历：getGaborKernel"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "ksize",
    "local": "K尺寸"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "sigma",
    "local": "西格玛"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "theta",
    "local": "θ"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "lambd",
    "local": "羔羊"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "gamma",
    "local": "伽马"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "psi",
    "local": "磅/平方英寸"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ktype",
    "local": "K型"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.getGaborKernel(",
    "local": "盖博克内尔简历("
  },
  {
    "origin": "ksize, sigma, theta, lambd, gamma[, psi[, ktype]]",
    "local": "ksize，sigma，theta，lambd，gamma[，psi[，ype]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Returns Gabor filter coefficients.",
    "local": "返回Gabor滤波器系数。"
  },
  {
    "origin": "For more details about gabor filter equations and parameters, see:",
    "local": "有关gabor滤波器方程和参数的详细信息，请参阅："
  },
  {
    "origin": "Gabor Filter",
    "local": "贾伯滤波器"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "ksize",
    "local": "K尺寸"
  },
  {
    "origin": "Size of the filter returned.",
    "local": "返回的筛选器的大小。"
  },
  {
    "origin": "sigma",
    "local": "西格玛"
  },
  {
    "origin": "Standard deviation of the gaussian envelope.",
    "local": "高斯包络的标准差。"
  },
  {
    "origin": "theta",
    "local": "θ"
  },
  {
    "origin": "Orientation of the normal to the parallel stripes of a Gabor function.",
    "local": "垂直于Gabor函数平行条纹的方向。"
  },
  {
    "origin": "lambd",
    "local": "羔羊"
  },
  {
    "origin": "Wavelength of the sinusoidal factor.",
    "local": "正弦因子的波长。"
  },
  {
    "origin": "gamma",
    "local": "伽马"
  },
  {
    "origin": "Spatial aspect ratio.",
    "local": "空间纵横比。"
  },
  {
    "origin": "psi",
    "local": "磅/平方英寸"
  },
  {
    "origin": "Phase offset.",
    "local": "相位偏移。"
  },
  {
    "origin": "ktype",
    "local": "K型"
  },
  {
    "origin": "Type of filter coefficients. It can be CV_32F or CV_64F .",
    "local": "滤波器系数的类型。它可以是CV\\ 32F或CV\\ 64F。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getGaussianKernel()",
    "local": "getGaussianKernel（）"
  },
  {
    "origin": "cv::getGaussianKernel",
    "local": "CV：：Getgaussiankernel"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ksize",
    "local": "K尺寸"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "sigma",
    "local": "西格玛"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ktype",
    "local": "K型"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.getGaussianKernel(",
    "local": "CV.Getgaussiankernel（"
  },
  {
    "origin": "ksize, sigma[, ktype]",
    "local": "酸，sigma[，ktype]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Returns Gaussian filter coefficients.",
    "local": "返回高斯滤波器系数。"
  },
  {
    "origin": "The function computes and returns the \\(\\texttt{ksize} \\times 1\\) matrix of Gaussian filter coefficients:",
    "local": "函数计算并返回高斯滤波器系数的\\（\\texttt{ksize}\\乘以1\\）矩阵："
  },
  {
    "origin": "\\[G_i= \\alpha *e^{-(i-( \\texttt{ksize} -1)/2)^2/(2* \\texttt{sigma}^2)},\\]",
    "local": "\\\\[G\\u i=\\alpha*e^{-（i-（\\texttt{ksize}-1）/2）^2/（2*\\texttt{sigma}^2）}，\\]"
  },
  {
    "origin": "where \\(i=0..\\texttt{ksize}-1\\) and \\(\\alpha\\) is the scale factor chosen so that \\(\\sum_i G_i=1\\).",
    "local": "其中\\（i=0..\\texttt{ksize}-1\\）和\\（\\alpha\\）是选择的比例因子，以便\\（\\sum\\u i G\\u i=1\\）。"
  },
  {
    "origin": "Two of such generated kernels can be passed to sepFilter2D. Those functions automatically recognize smoothing kernels (a symmetrical kernel with sum of weights equal to 1) and handle them accordingly. You may also use the higher-level GaussianBlur.",
    "local": "其中两个生成的内核可以传递给sepFilter2D。这些函数会自动识别平滑核（权重和等于1的对称核）并进行相应处理。你也可以使用更高级的高斯模糊。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "ksize",
    "local": "K尺寸"
  },
  {
    "origin": "Aperture size. It should be odd ( \\(\\texttt{ksize} \\mod 2 = 1\\) ) and positive.",
    "local": "光圈大小。它应该是奇数（\\（\\texttt{ksize}\\mod 2=1\\）和正数。"
  },
  {
    "origin": "sigma",
    "local": "西格玛"
  },
  {
    "origin": "Gaussian standard deviation. If it is non-positive, it is computed from ksize as",
    "local": "高斯标准差。如果为非正，则从ksize计算为"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "ktype",
    "local": "K型"
  },
  {
    "origin": "Type of filter coefficients. It can be CV_32F or CV_64F .",
    "local": "滤波器系数的类型。它可以是CV\\ 32F或CV\\ 64F。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getStructuringElement()",
    "local": "getStructuringElement（）"
  },
  {
    "origin": "cv::getStructuringElement",
    "local": "cv：：getStructuringElement"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "shape",
    "local": "形状"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "ksize",
    "local": "K尺寸"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "anchor",
    "local": "锚"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.getStructuringElement(",
    "local": "简历getStructuringElement("
  },
  {
    "origin": "shape, ksize[, anchor]",
    "local": "形状，ksize[，锚定]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Returns a structuring element of the specified size and shape for morphological operations.",
    "local": "返回用于形态学运算的指定大小和形状的结构元素。"
  },
  {
    "origin": "The function constructs and returns the structuring element that can be further passed to",
    "local": "函数构造并返回可进一步传递给的结构元素"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "or",
    "local": "或"
  },
  {
    "origin": ". But you can also construct an arbitrary binary mask yourself and use it as the structuring element.",
    "local": ". 但是你也可以自己构造一个任意的二进制掩码，并将其用作结构元素。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "shape",
    "local": "形状"
  },
  {
    "origin": "Element shape that could be one of",
    "local": "元素形状可能是"
  },
  {
    "origin": "ksize",
    "local": "K尺寸"
  },
  {
    "origin": "Size of the structuring element.",
    "local": "结构元素的大小。"
  },
  {
    "origin": "anchor",
    "local": "锚"
  },
  {
    "origin": "Anchor position within the element. The default value \\((-1, -1)\\) means that the anchor is at the center. Note that only the shape of a cross-shaped element depends on the anchor position. In other cases the anchor just regulates how much the result of the morphological operation is shifted.",
    "local": "元素内的锚定位置。默认值\\（（-1，-1）\\）表示锚点位于中心。请注意，只有十字形元素的形状取决于锚定位置。在其他情况下，锚定只调节形态学运算结果的偏移量。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "Laplacian()",
    "local": "拉普拉斯（）"
  },
  {
    "origin": "void cv::Laplacian",
    "local": "void cv：：拉普拉斯"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ddepth",
    "local": "深度"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ksize",
    "local": "K尺寸"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "scale",
    "local": "规模"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "delta",
    "local": "三角洲"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.Laplacian(",
    "local": "拉普拉斯简历("
  },
  {
    "origin": "src, ddepth[, dst[, ksize[, scale[, delta[, borderType]]]]]",
    "local": "src，ddepth[，dst[，ksize[，scale[，delta[，borderType]]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the Laplacian of an image.",
    "local": "计算图像的拉普拉斯函数。"
  },
  {
    "origin": "The function calculates the Laplacian of the source image by adding up the second x and y derivatives calculated using the Sobel operator:",
    "local": "该函数通过将使用Sobel运算符计算的第二个x和y导数相加来计算源图像的拉普拉斯函数："
  },
  {
    "origin": "\\[\\texttt{dst} = \\Delta \\texttt{src} = \\frac{\\partial^2 \\texttt{src}}{\\partial x^2} + \\frac{\\partial^2 \\texttt{src}}{\\partial y^2}\\]",
    "local": "\\[\\texttt{dst}=\\Delta\\texttt{src}=\\frac{\\partial^2\\texttt{src}}{\\partial x^2}+\\frac{\\partial^2\\texttt{src}}{\\partial y^2}\\]"
  },
  {
    "origin": "This is done when",
    "local": "这是在"
  },
  {
    "origin": ". When",
    "local": ". 什么时候？"
  },
  {
    "origin": ", the Laplacian is computed by filtering the image with the following \\(3 \\times 3\\) aperture:",
    "local": "，通过使用以下（3乘以3）光圈过滤图像来计算拉普拉斯函数："
  },
  {
    "origin": "\\[\\vecthreethree {0}{1}{0}{1}{-4}{1}{0}{1}{0}\\]",
    "local": "\\\\[\\vecthreethree{0}{1}{0}{1}{1}{4}{1}{0}{1}{0}\\]"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "Source image.",
    "local": "源图像。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "Destination image of the same size and the same number of channels as src .",
    "local": "与src大小和通道数相同的目标图像。"
  },
  {
    "origin": "ddepth",
    "local": "深度"
  },
  {
    "origin": "Desired depth of the destination image.",
    "local": "目标图像的所需深度。"
  },
  {
    "origin": "ksize",
    "local": "K尺寸"
  },
  {
    "origin": "Aperture size used to compute the second-derivative filters. See",
    "local": "用于计算二阶导数滤波器的孔径大小。看到了吗"
  },
  {
    "origin": "for details. The size must be positive and odd.",
    "local": "详情。大小必须是正数和奇数。"
  },
  {
    "origin": "scale",
    "local": "规模"
  },
  {
    "origin": "Optional scale factor for the computed Laplacian values. By default, no scaling is applied. See",
    "local": "计算的拉普拉斯值的可选比例因子。默认情况下，不应用缩放。看到了吗"
  },
  {
    "origin": "for details.",
    "local": "详情。"
  },
  {
    "origin": "delta",
    "local": "三角洲"
  },
  {
    "origin": "Optional delta value that is added to the results prior to storing them in dst .",
    "local": "在将结果存储到dst之前添加到结果中的可选增量值。"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "Pixel extrapolation method, see",
    "local": "像素外推方法，参见"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "is not supported.",
    "local": "不支持。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "medianBlur()",
    "local": "medianBlur（）"
  },
  {
    "origin": "void cv::medianBlur",
    "local": "无效cv：：medianBlur"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ksize",
    "local": "K尺寸"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.medianBlur(",
    "local": "medianBlur简历("
  },
  {
    "origin": "src, ksize[, dst]",
    "local": "心脏，ksize[，dst]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Blurs an image using the median filter.",
    "local": "使用中值滤波器模糊图像。"
  },
  {
    "origin": "The function smoothes an image using the median filter with the \\(\\texttt{ksize} \\times \\texttt{ksize}\\) aperture. Each channel of a multi-channel image is processed independently. In-place operation is supported.",
    "local": "该函数使用带\\（\\texttt{ksize}\\times\\texttt{ksize}\\）光圈的中值滤波器平滑图像。多通道图像的每个通道都是独立处理的。支持就地操作。"
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "The median filter uses",
    "local": "中值滤波器使用"
  },
  {
    "origin": "internally to cope with border pixels, see",
    "local": "内部处理边界像素，请参见"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input 1-, 3-, or 4-channel image; when ksize is 3 or 5, the image depth should be CV_8U, CV_16U, or CV_32F, for larger aperture sizes, it can only be CV_8U.",
    "local": "输入1、3或4通道图像；当ksize为3或5时，图像深度应为CVſ8U、CVſ16U或CVſ32F，对于较大的光圈尺寸，只能为CVſ8U。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "destination array of the same size and type as src.",
    "local": "与src大小和类型相同的目标数组。"
  },
  {
    "origin": "ksize",
    "local": "K尺寸"
  },
  {
    "origin": "aperture linear size; it must be odd and greater than 1, for example: 3, 5, 7 ...",
    "local": "孔径线性尺寸；它必须是奇数并且大于1，例如：3，5，7。。。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "morphologyDefaultBorderValue()",
    "local": "morphologyDefaultBorderValue（）"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "cv::morphologyDefaultBorderValue",
    "local": "cv：：morphologyDefaultBorderValue"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "inline",
    "local": "内联"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "returns \"magic\" border value for erosion and dilation. It is automatically transformed to",
    "local": "返回侵蚀和扩张的“魔法”边界值。它会自动转换为"
  },
  {
    "origin": "(-DBL_MAX) for dilation.",
    "local": "（-DBL\\u MAX）用于扩张。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "morphologyEx()",
    "local": "形态学（）"
  },
  {
    "origin": "void cv::morphologyEx",
    "local": "空cv：：形态"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "op",
    "local": "op公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "kernel",
    "local": "内核"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "anchor",
    "local": "锚"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "iterations",
    "local": "迭代"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "borderValue",
    "local": "边界值"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.morphologyEx(",
    "local": "形态变异("
  },
  {
    "origin": "src, op, kernel[, dst[, anchor[, iterations[, borderType[, borderValue]]]]]",
    "local": "src，op，kernel[，dst[，anchor[，iterations[，borderType[，borderValue]]]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Performs advanced morphological transformations.",
    "local": "执行高级形态变换。"
  },
  {
    "origin": "The function",
    "local": "函数"
  },
  {
    "origin": "can perform advanced morphological transformations using an erosion and dilation as basic operations.",
    "local": "可以使用侵蚀和扩张作为基本操作来执行高级形态变换。"
  },
  {
    "origin": "Any of the operations can be done in-place. In case of multi-channel images, each channel is processed independently.",
    "local": "任何操作都可以在原地完成。在多通道图像的情况下，每个通道被独立地处理。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "Source image. The number of channels can be arbitrary. The depth should be one of CV_8U, CV_16U, CV_16S, CV_32F or CV_64F.",
    "local": "源图像。通道的数量可以是任意的。深度应为CV_8U、CV_16U、CV_16S、CV_32F或CV_64F之一。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "Destination image of the same size and type as source image.",
    "local": "与源图像大小和类型相同的目标图像。"
  },
  {
    "origin": "op",
    "local": "op公司"
  },
  {
    "origin": "Type of a morphological operation, see",
    "local": "形态学运算的类型，请参见"
  },
  {
    "origin": "kernel",
    "local": "内核"
  },
  {
    "origin": "Structuring element. It can be created using",
    "local": "结构元素。可以使用"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "anchor",
    "local": "锚"
  },
  {
    "origin": "Anchor position with the kernel. Negative values mean that the anchor is at the kernel center.",
    "local": "用内核定位。负值表示锚点位于内核中心。"
  },
  {
    "origin": "iterations",
    "local": "迭代"
  },
  {
    "origin": "Number of times erosion and dilation are applied.",
    "local": "应用腐蚀和膨胀的次数。"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "Pixel extrapolation method, see",
    "local": "像素外推方法，参见"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "is not supported.",
    "local": "不支持。"
  },
  {
    "origin": "borderValue",
    "local": "边界值"
  },
  {
    "origin": "Border value in case of a constant border. The default value has a special meaning.",
    "local": "如果边界为常量，则为Border值。默认值具有特殊含义。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Note",
    "local": "注意"
  },
  {
    "origin": "The number of iterations is the number of times erosion or dilatation operation will be applied. For instance, an opening operation (",
    "local": "迭代次数是应用侵蚀或膨胀操作的次数。例如，打开操作("
  },
  {
    "origin": ") with two iterations is equivalent to apply successively: erode -&gt; erode -&gt; dilate -&gt; dilate (and not erode -&gt; dilate -&gt; erode -&gt; dilate).",
    "local": ")两次迭代相当于连续应用：侵蚀-&gt；侵蚀-&gt；扩张-&gt；扩张（不侵蚀-&gt；扩张-&gt；侵蚀-&gt；扩张）。"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "pyrDown()",
    "local": "pyrDown（）"
  },
  {
    "origin": "void cv::pyrDown",
    "local": "无效cv：：向下"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "dstsize",
    "local": "DST大小"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.pyrDown(",
    "local": "cv.pyrDown公司("
  },
  {
    "origin": "src[, dst[, dstsize[, borderType]]]",
    "local": "心脏[，dst[，dstsize[，borderType]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Blurs an image and downsamples it.",
    "local": "模糊图像并对其进行下采样。"
  },
  {
    "origin": "By default, size of the output image is computed as",
    "local": "默认情况下，输出图像的大小计算为"
  },
  {
    "origin": ", but in any case, the following conditions should be satisfied:",
    "local": "但在任何情况下，应满足以下条件："
  },
  {
    "origin": "\\[\\begin{array}{l} | \\texttt{dstsize.width} *2-src.cols| \\leq 2 \\\\ | \\texttt{dstsize.height} *2-src.rows| \\leq 2 \\end{array}\\]",
    "local": "\\[\\begin{array}{l}|\\texttt{dstsize.width}*2-src.cols |\\leq 2\\\\|\\texttt{dstsize.height}*2-src.rows |\\leq 2\\end{array}\\]"
  },
  {
    "origin": "The function performs the downsampling step of the Gaussian pyramid construction. First, it convolves the source image with the kernel:",
    "local": "该函数执行高斯金字塔构造的下采样步骤。首先，它将源映像与内核卷积："
  },
  {
    "origin": "\\[\\frac{1}{256} \\begin{bmatrix} 1 &amp; 4 &amp; 6 &amp; 4 &amp; 1 \\\\ 4 &amp; 16 &amp; 24 &amp; 16 &amp; 4 \\\\ 6 &amp; 24 &amp; 36 &amp; 24 &amp; 6 \\\\ 4 &amp; 16 &amp; 24 &amp; 16 &amp; 4 \\\\ 1 &amp; 4 &amp; 6 &amp; 4 &amp; 1 \\end{bmatrix}\\]",
    "local": "\\\\frac{1}{256}\\开始{bmatrix}1&amp；4&amp；6和；4&amp；1\\\\\\ 4和；16&amp；24小时；16&amp；4\\\\\\6和；24小时；36&amp；24小时；6\\\\\\4和；16&amp；24小时；16&amp；4\\\\\\1和；4&amp；6和；4&amp；1\\end{bmatrix}]"
  },
  {
    "origin": "Then, it downsamples the image by rejecting even rows and columns.",
    "local": "然后，它通过拒绝偶数行和偶数列对图像进行降采样。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input image.",
    "local": "输入图像。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output image; it has the specified size and the same type as src.",
    "local": "输出图像；它具有指定的大小和与src相同的类型。"
  },
  {
    "origin": "dstsize",
    "local": "DST大小"
  },
  {
    "origin": "size of the output image.",
    "local": "输出图像的大小。"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "Pixel extrapolation method, see",
    "local": "像素外推方法，参见"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "isn't supported)",
    "local": "（不支持）"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "pyrMeanShiftFiltering()",
    "local": "pyrMeanShiftFiltering（）"
  },
  {
    "origin": "void cv::pyrMeanShiftFiltering",
    "local": "无效cv：：pyrMeanShiftFiltering"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "sp",
    "local": "服务提供商"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "sr",
    "local": "锶"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "maxLevel",
    "local": "最大电平"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "termcrit",
    "local": "特姆克里特"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.pyrMeanShiftFiltering(",
    "local": "cv.Pyref过滤("
  },
  {
    "origin": "src, sp, sr[, dst[, maxLevel[, termcrit]]]",
    "local": "心脏，sp，sr[，dst[，maxLevel[，thermcrit]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Performs initial step of meanshift segmentation of an image.",
    "local": "执行图像meanshift分割的初始步骤。"
  },
  {
    "origin": "The function implements the filtering stage of meanshift segmentation, that is, the output of the function is the filtered \"posterized\" image with color gradients and fine-grain texture flattened. At every pixel (X,Y) of the input image (or down-sized input image, see below) the function executes meanshift iterations, that is, the pixel (X,Y) neighborhood in the joint space-color hyperspace is considered:",
    "local": "该函数实现了meanshift分割的滤波阶段，即输出经过滤波的具有颜色梯度和细粒度纹理平坦的“后处理”图像。在输入图像（或缩小的输入图像，见下文）的每个像素（X，Y）处，函数执行meanshift迭代，即，考虑联合空间颜色超空间中的像素（X，Y）邻域："
  },
  {
    "origin": "\\[(x,y): X- \\texttt{sp} \\le x \\le X+ \\texttt{sp} , Y- \\texttt{sp} \\le y \\le Y+ \\texttt{sp} , ||(R,G,B)-(r,g,b)|| \\le \\texttt{sr}\\]",
    "local": "\\[（x，y）：x-\\ texttt{sp}\\ lex \\ lex+\\ texttt{sp}，y-\\ texttt{sp}\\ le \\ ley+\\ texttt{sp}，||（r，g，b）-（r，g，b）||\\ le \\ texttt{sr}\\]"
  },
  {
    "origin": "where (R,G,B) and (r,g,b) are the vectors of color components at (X,Y) and (x,y), respectively (though, the algorithm does not depend on the color space used, so any 3-component color space can be used instead). Over the neighborhood the average spatial value (X',Y') and average color vector (R',G',B') are found and they act as the neighborhood center on the next iteration:",
    "local": "其中（R，G，B）和（R，G，B）分别是（X，Y）和（X，Y）处颜色分量的向量（尽管算法不依赖于所使用的颜色空间，因此可以使用任何3分量颜色空间）。在邻域上，找到平均空间值（X'，Y'）和平均颜色向量（R'，G'，B'），它们在下一次迭代中充当邻域中心："
  },
  {
    "origin": "\\[(X,Y)~(X',Y'), (R,G,B)~(R',G',B').\\]",
    "local": "\\[（X，Y）~（X'，Y'），（R，G，B）~（R'，G'，B'）.\\]"
  },
  {
    "origin": "After the iterations over, the color components of the initial pixel (that is, the pixel from where the iterations started) are set to the final value (average color at the last iteration):",
    "local": "迭代结束后，初始像素（即迭代开始的像素）的颜色分量设置为最终值（上一次迭代的平均颜色）："
  },
  {
    "origin": "\\[I(X,Y) &lt;- (R*,G*,B*)\\]",
    "local": "\\[I（X，Y）&lt；-(R*，G*，B*）\\]"
  },
  {
    "origin": "When maxLevel &gt; 0, the gaussian pyramid of maxLevel+1 levels is built, and the above procedure is run on the smallest layer first. After that, the results are propagated to the larger layer and the iterations are run again only on those pixels where the layer colors differ by more than sr from the lower-resolution layer of the pyramid. That makes boundaries of color regions sharper. Note that the results will be actually different from the ones obtained by running the meanshift procedure on the whole original image (i.e. when maxLevel==0).",
    "local": "当maxLevel&gt；0，建立maxLevel+1层的高斯金字塔，并首先在最小层上运行上述过程。之后，结果将传播到较大的层，并且仅在层颜色与金字塔的较低分辨率层相差大于sr的像素上再次运行迭代。这使得颜色区域的边界更加清晰。请注意，结果实际上与在整个原始图像上运行meanshift过程（即当maxLevel==0时）获得的结果不同。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "The source 8-bit, 3-channel image.",
    "local": "源8位，3通道图像。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "The destination image of the same format and the same size as the source.",
    "local": "与源图像格式和大小相同的目标图像。"
  },
  {
    "origin": "sp",
    "local": "服务提供商"
  },
  {
    "origin": "The spatial window radius.",
    "local": "空间窗口半径。"
  },
  {
    "origin": "sr",
    "local": "锶"
  },
  {
    "origin": "The color window radius.",
    "local": "颜色窗口半径。"
  },
  {
    "origin": "maxLevel",
    "local": "最大电平"
  },
  {
    "origin": "Maximum level of the pyramid for the segmentation.",
    "local": "用于分割的金字塔的最大级别。"
  },
  {
    "origin": "termcrit",
    "local": "特姆克里特"
  },
  {
    "origin": "Termination criteria: when to stop meanshift iterations.",
    "local": "终止条件：何时停止meanshift迭代。"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "pyrUp()",
    "local": "pyrUp（）"
  },
  {
    "origin": "void cv::pyrUp",
    "local": "无效cv:：pyrUp"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "const",
    "local": "常数"
  },
  {
    "origin": "&amp;",
    "local": "&amp；"
  },
  {
    "origin": "dstsize",
    "local": "DST大小"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.pyrUp(",
    "local": "cv.pyrUp公司("
  },
  {
    "origin": "src[, dst[, dstsize[, borderType]]]",
    "local": "心脏[，dst[，dstsize[，borderType]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Upsamples an image and then blurs it.",
    "local": "向上采样图像，然后使其模糊。"
  },
  {
    "origin": "By default, size of the output image is computed as",
    "local": "默认情况下，输出图像的大小计算为"
  },
  {
    "origin": ", but in any case, the following conditions should be satisfied:",
    "local": "但在任何情况下，应满足以下条件："
  },
  {
    "origin": "\\[\\begin{array}{l} | \\texttt{dstsize.width} -src.cols*2| \\leq ( \\texttt{dstsize.width} \\mod 2) \\\\ | \\texttt{dstsize.height} -src.rows*2| \\leq ( \\texttt{dstsize.height} \\mod 2) \\end{array}\\]",
    "local": "\\[\\begin{array}{l}|\\texttt{dstsize.width}-src.cols*2 |\\leq（\\texttt{dstsize.width}\\mod 2）\\\\\\texttt{dstsize.height}-src.rows*2 |\\leq（\\texttt{dstsize.height}\\mod 2）\\end{array}\\]"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input image.",
    "local": "输入图像。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output image. It has the specified size and the same type as src .",
    "local": "输出图像。它具有指定的大小和与src相同的类型。"
  },
  {
    "origin": "dstsize",
    "local": "DST大小"
  },
  {
    "origin": "size of the output image.",
    "local": "输出图像的大小。"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "Pixel extrapolation method, see",
    "local": "像素外推方法，参见"
  },
  {
    "origin": "(only",
    "local": "（仅限"
  },
  {
    "origin": "is supported)",
    "local": "（支持）"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ", and",
    "local": "，和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "Scharr()",
    "local": "沙尔（）"
  },
  {
    "origin": "void cv::Scharr",
    "local": "空cv：：沙尔"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ddepth",
    "local": "深度"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "dx",
    "local": "dx公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "dy",
    "local": "戴"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "scale",
    "local": "规模"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "delta",
    "local": "三角洲"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.Scharr(",
    "local": "沙尔简历("
  },
  {
    "origin": "src, ddepth, dx, dy[, dst[, scale[, delta[, borderType]]]]",
    "local": "src，ddepth，dx，dy[，dst[，scale[，delta[，borderType]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the first x- or y- image derivative using Scharr operator.",
    "local": "使用Scharr算子计算第一个x或y图像导数。"
  },
  {
    "origin": "The function computes the first x- or y- spatial image derivative using the Scharr operator. The call",
    "local": "该函数使用Scharr运算符计算第一个x或y空间图像导数。电话"
  },
  {
    "origin": "\\[\\texttt{Scharr(src, dst, ddepth, dx, dy, scale, delta, borderType)}\\]",
    "local": "\\[\\texttt{Scharr（src，dst，ddepth，dx，dy，scale，delta，borderType）}\\]"
  },
  {
    "origin": "is equivalent to",
    "local": "相当于"
  },
  {
    "origin": "\\[\\texttt{Sobel(src, dst, ddepth, dx, dy, FILTER_SCHARR, scale, delta, borderType)} .\\]",
    "local": "\\[\\texttt{Sobel（src，dst，ddepth，dx，dy，FILTER\\u SCHARR，scale，delta，borderType）}.\\]"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input image.",
    "local": "输入图像。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output image of the same size and the same number of channels as src.",
    "local": "输出与src大小和通道数相同的图像。"
  },
  {
    "origin": "ddepth",
    "local": "深度"
  },
  {
    "origin": "output image depth, see",
    "local": "输出图像深度，请参见"
  },
  {
    "origin": "dx",
    "local": "dx公司"
  },
  {
    "origin": "order of the derivative x.",
    "local": "导数x的阶。"
  },
  {
    "origin": "dy",
    "local": "戴"
  },
  {
    "origin": "order of the derivative y.",
    "local": "导数y的阶数。"
  },
  {
    "origin": "scale",
    "local": "规模"
  },
  {
    "origin": "optional scale factor for the computed derivative values; by default, no scaling is applied (see",
    "local": "计算的导数值的可选比例因子；默认情况下，不应用缩放（请参见"
  },
  {
    "origin": "for details).",
    "local": "详细信息）。"
  },
  {
    "origin": "delta",
    "local": "三角洲"
  },
  {
    "origin": "optional delta value that is added to the results prior to storing them in dst.",
    "local": "在将结果存储到dst之前添加到结果中的可选增量值。"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "pixel extrapolation method, see",
    "local": "像素外推方法，参见"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "is not supported.",
    "local": "不支持。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "sepFilter2D()",
    "local": "sepFilter2D（）"
  },
  {
    "origin": "void cv::sepFilter2D",
    "local": "void cv:：sepFilter2D"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ddepth",
    "local": "深度"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "kernelX",
    "local": "果仁"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "kernelY",
    "local": "克内利"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "anchor",
    "local": "锚"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "delta",
    "local": "三角洲"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.sepFilter2D(",
    "local": "cv.sepFilter2D型("
  },
  {
    "origin": "src, ddepth, kernelX, kernelY[, dst[, anchor[, delta[, borderType]]]]",
    "local": "src，ddepth，kernelX，kernelY[，dst[，anchor[，delta[，borderType]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Applies a separable linear filter to an image.",
    "local": "对图像应用可分离线性滤波器。"
  },
  {
    "origin": "The function applies a separable linear filter to the image. That is, first, every row of src is filtered with the 1D kernel kernelX. Then, every column of the result is filtered with the 1D kernel kernelY. The final result shifted by delta is stored in dst .",
    "local": "该函数对图像应用可分离线性滤波器。也就是说，首先，用1D内核kernelX过滤src的每一行。然后用一维核函数对结果的每一列进行核滤波。最终结果被delta移位存储在dst中。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "Source image.",
    "local": "源图像。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "Destination image of the same size and the same number of channels as src .",
    "local": "与src大小和通道数相同的目标图像。"
  },
  {
    "origin": "ddepth",
    "local": "深度"
  },
  {
    "origin": "Destination image depth, see",
    "local": "目标图像深度，请参见"
  },
  {
    "origin": "kernelX",
    "local": "果仁"
  },
  {
    "origin": "Coefficients for filtering each row.",
    "local": "用于过滤每行的系数。"
  },
  {
    "origin": "kernelY",
    "local": "克内利"
  },
  {
    "origin": "Coefficients for filtering each column.",
    "local": "过滤每列的系数。"
  },
  {
    "origin": "anchor",
    "local": "锚"
  },
  {
    "origin": "Anchor position within the kernel. The default value \\((-1,-1)\\) means that the anchor is at the kernel center.",
    "local": "内核中的锚定位置。默认值\\（（-1，-1）\\）表示锚点位于内核中心。"
  },
  {
    "origin": "delta",
    "local": "三角洲"
  },
  {
    "origin": "Value added to the filtered results before storing them.",
    "local": "在存储过滤结果之前添加到过滤结果的值。"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "Pixel extrapolation method, see",
    "local": "像素外推方法，参见"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "is not supported.",
    "local": "不支持。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "Sobel()",
    "local": "索贝尔（）"
  },
  {
    "origin": "void cv::Sobel",
    "local": "空cv：：Sobel"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ddepth",
    "local": "深度"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "dx",
    "local": "dx公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "dy",
    "local": "戴"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ksize",
    "local": "K尺寸"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "scale",
    "local": "规模"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "delta",
    "local": "三角洲"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.Sobel(",
    "local": "索贝尔简历("
  },
  {
    "origin": "src, ddepth, dx, dy[, dst[, ksize[, scale[, delta[, borderType]]]]]",
    "local": "src，ddepth，dx，dy[，dst[，ksize[，scale[，delta[，borderType]]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the first, second, third, or mixed image derivatives using an extended Sobel operator.",
    "local": "使用扩展的Sobel运算符计算第一、第二、第三或混合图像导数。"
  },
  {
    "origin": "In all cases except one, the \\(\\texttt{ksize} \\times \\texttt{ksize}\\) separable kernel is used to calculate the derivative. When \\(\\texttt{ksize = 1}\\), the \\(3 \\times 1\\) or \\(1 \\times 3\\) kernel is used (that is, no Gaussian smoothing is done).",
    "local": "在除一种情况外的所有情况下，都使用\\（\\texttt{ksize}\\times\\texttt{ksize}\\）可分离内核来计算导数。当\\（\\texttt{ksize=1}\\）时，使用\\（3乘以1\\）或\\（1乘以3\\）内核（即，不进行高斯平滑）。"
  },
  {
    "origin": "can only be used for the first or the second x- or y- derivatives.",
    "local": "只能用于第一个或第二个x-或y-导数。"
  },
  {
    "origin": "There is also the special value",
    "local": "还有一个特殊的价值"
  },
  {
    "origin": "that corresponds to the \\(3\\times3\\) Scharr filter that may give more accurate results than the \\(3\\times3\\) Sobel. The Scharr aperture is",
    "local": "它对应于\\（3\\times3\\）Scharr过滤器，该过滤器可能提供比\\（3\\times3\\）Sobel更准确的结果。夏尔光圈是"
  },
  {
    "origin": "\\[\\vecthreethree{-3}{0}{3}{-10}{0}{10}{-3}{0}{3}\\]",
    "local": "\\\\[\\vecthreethree{-3}{0}{3}{-10}{0}{10}{-3}{0}{3}\\]"
  },
  {
    "origin": "for the x-derivative, or transposed for the y-derivative.",
    "local": "对于x-导数，或者对于y-导数进行转置。"
  },
  {
    "origin": "The function calculates an image derivative by convolving the image with the appropriate kernel:",
    "local": "该函数通过将图像与适当的核进行卷积来计算图像导数："
  },
  {
    "origin": "\\[\\texttt{dst} = \\frac{\\partial^{xorder+yorder} \\texttt{src}}{\\partial x^{xorder} \\partial y^{yorder}}\\]",
    "local": "\\[\\texttt{dst}=\\frac{\\partial^{xorder+yorder}\\texttt{src}}{\\partial x^{xorder}\\partial y^{yorder}\\]"
  },
  {
    "origin": "The Sobel operators combine Gaussian smoothing and differentiation, so the result is more or less resistant to the noise. Most often, the function is called with ( xorder = 1, yorder = 0, ksize = 3) or ( xorder = 0, yorder = 1, ksize = 3) to calculate the first x- or y- image derivative. The first case corresponds to a kernel of:",
    "local": "Sobel算子将高斯平滑和微分相结合，使得结果或多或少具有抗噪声能力。最常见的情况是，用（xorder=1，yorder=0，ksize=3）或（xorder=0，yorder=1，ksize=3）调用函数来计算第一个x或y图像导数。第一种情况对应于以下内核："
  },
  {
    "origin": "\\[\\vecthreethree{-1}{0}{1}{-2}{0}{2}{-1}{0}{1}\\]",
    "local": "\\\\[\\vecthreethree{-1}{0}{1}{-2}{0}{2}{-1}{0}{1}\\]"
  },
  {
    "origin": "The second case corresponds to a kernel of:",
    "local": "第二种情况对应于内核："
  },
  {
    "origin": "\\[\\vecthreethree{-1}{-2}{-1}{0}{0}{0}{1}{2}{1}\\]",
    "local": "\\\\[\\vecthreethree{-1}{-2}{-1}{0}{0}{0}{1}{2}{1}\\]"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input image.",
    "local": "输入图像。"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output image of the same size and the same number of channels as src .",
    "local": "输出与src大小和通道数相同的图像。"
  },
  {
    "origin": "ddepth",
    "local": "深度"
  },
  {
    "origin": "output image depth, see",
    "local": "输出图像深度，请参见"
  },
  {
    "origin": "; in the case of 8-bit input images it will result in truncated derivatives.",
    "local": "; 在8位输入图像的情况下，它将导致截断导数。"
  },
  {
    "origin": "dx",
    "local": "dx公司"
  },
  {
    "origin": "order of the derivative x.",
    "local": "导数x的阶。"
  },
  {
    "origin": "dy",
    "local": "戴"
  },
  {
    "origin": "order of the derivative y.",
    "local": "导数y的阶数。"
  },
  {
    "origin": "ksize",
    "local": "K尺寸"
  },
  {
    "origin": "size of the extended Sobel kernel; it must be 1, 3, 5, or 7.",
    "local": "扩展Sobel核的大小；它必须是1、3、5或7。"
  },
  {
    "origin": "scale",
    "local": "规模"
  },
  {
    "origin": "optional scale factor for the computed derivative values; by default, no scaling is applied (see",
    "local": "计算的导数值的可选比例因子；默认情况下，不应用缩放（请参见"
  },
  {
    "origin": "for details).",
    "local": "详细信息）。"
  },
  {
    "origin": "delta",
    "local": "三角洲"
  },
  {
    "origin": "optional delta value that is added to the results prior to storing them in dst.",
    "local": "在将结果存储到dst之前添加到结果中的可选增量值。"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "pixel extrapolation method, see",
    "local": "像素外推方法，参见"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "is not supported.",
    "local": "不支持。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "Examples:",
    "local": "示例："
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "spatialGradient()",
    "local": "空间梯度（）"
  },
  {
    "origin": "void cv::spatialGradient",
    "local": "void cv:：空间渐变"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dx",
    "local": "dx公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dy",
    "local": "戴"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ksize",
    "local": "K尺寸"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dx, dy",
    "local": "dx，dy公司"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.spatialGradient(",
    "local": "cv.空间梯度("
  },
  {
    "origin": "src[, dx[, dy[, ksize[, borderType]]]]",
    "local": "src[，dx[，dy[，oxygen[，borderType]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the first order image derivative in both x and y using a Sobel operator.",
    "local": "使用Sobel运算符计算x和y上的一阶图像导数。"
  },
  {
    "origin": "Equivalent to calling:",
    "local": "相当于呼叫："
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input image.",
    "local": "输入图像。"
  },
  {
    "origin": "dx",
    "local": "dx公司"
  },
  {
    "origin": "output image with first-order derivative in x.",
    "local": "以x的一阶导数输出图像。"
  },
  {
    "origin": "dy",
    "local": "戴"
  },
  {
    "origin": "output image with first-order derivative in y.",
    "local": "输出y方向一阶导数的图像。"
  },
  {
    "origin": "ksize",
    "local": "K尺寸"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "pixel extrapolation method, see",
    "local": "像素外推方法，参见"
  },
  {
    "origin": ". Only",
    "local": ". 仅限"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": "are supported.",
    "local": "支持。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "sqrBoxFilter()",
    "local": "sqrBoxFilter（）"
  },
  {
    "origin": "void cv::sqrBoxFilter",
    "local": "void cv:：sqrBoxFilter无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ddepth",
    "local": "深度"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "ksize",
    "local": "K尺寸"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "anchor",
    "local": "锚"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "bool",
    "local": "布尔"
  },
  {
    "origin": "normalize",
    "local": "正常化"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.sqrBoxFilter(",
    "local": "cv.sqrBoxFilter过滤器("
  },
  {
    "origin": "src, ddepth, ksize[, dst[, anchor[, normalize[, borderType]]]]",
    "local": "src，ddepth，ksize[，dst[，anchor[，normalize[，borderType]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Calculates the normalized sum of squares of the pixel values overlapping the filter.",
    "local": "计算与过滤器重叠的像素值的标准化平方和。"
  },
  {
    "origin": "For every pixel \\( (x, y) \\) in the source image, the function calculates the sum of squares of those neighboring pixel values which overlap the filter placed over the pixel \\( (x, y) \\).",
    "local": "对于源图像中的每个像素\\（（x，y）\\），该函数计算与放置在像素\\（（x，y）\\）上的过滤器重叠的相邻像素值的平方和。"
  },
  {
    "origin": "The unnormalized square box filter can be useful in computing local image statistics such as the the local variance and standard deviation around the neighborhood of a pixel.",
    "local": "非标准化方盒滤波器可用于计算局部图像统计信息，如像素邻域的局部方差和标准差。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "src",
    "local": "src公司"
  },
  {
    "origin": "input image",
    "local": "输入图像"
  },
  {
    "origin": "dst",
    "local": "夏令时"
  },
  {
    "origin": "output image of the same size and type as _src",
    "local": "输出与\\u src大小和类型相同的图像"
  },
  {
    "origin": "ddepth",
    "local": "深度"
  },
  {
    "origin": "the output image depth (-1 to use",
    "local": "输出图像深度（-1）"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "ksize",
    "local": "K尺寸"
  },
  {
    "origin": "kernel size",
    "local": "内核大小"
  },
  {
    "origin": "anchor",
    "local": "锚"
  },
  {
    "origin": "kernel anchor point. The default value of Point(-1, -1) denotes that the anchor is at the kernel center.",
    "local": "内核锚定点。点（-1，-1）的默认值表示锚点位于内核中心。"
  },
  {
    "origin": "normalize",
    "local": "正常化"
  },
  {
    "origin": "flag, specifying whether the kernel is to be normalized by it's area or not.",
    "local": "标志，指定内核是否按其区域进行规范化。"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "border mode used to extrapolate pixels outside of the image, see",
    "local": "用于外推图像外部像素的边框模式，请参见"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "is not supported.",
    "local": "不支持。"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:40 for OpenCV by",
    "local": "于2021年4月2日星期五11:36:40为OpenCV生成"
  }
]