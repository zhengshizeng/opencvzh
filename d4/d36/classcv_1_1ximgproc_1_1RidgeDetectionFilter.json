[
  {
    "origin": "OpenCV: cv::ximgproc::RidgeDetectionFilter Class Reference",
    "local": "OpenCV:cv:：ximgproc:：RidgeDetectionFilter类引用"
  },
  {
    "origin": "OpenCV",
    "local": "打开CV"
  },
  {
    "origin": "Open Source Computer Vision",
    "local": "开源计算机视觉"
  },
  {
    "origin": "Public Member Functions",
    "local": "公共成员职能"
  },
  {
    "origin": "Static Public Member Functions",
    "local": "静态公共成员函数"
  },
  {
    "origin": "List of all members",
    "local": "所有成员的列表"
  },
  {
    "origin": "cv::ximgproc::RidgeDetectionFilter Class Reference",
    "local": "cv:：ximgproc:：RidgeDetectionFilter类引用"
  },
  {
    "origin": "abstract",
    "local": "摘要"
  },
  {
    "origin": "»",
    "local": "»"
  },
  {
    "origin": "Applies Ridge Detection Filter to an input image. Implements Ridge detection similar to the one in",
    "local": "对输入图像应用脊线检测滤波器。实现类似于中的脊线检测"
  },
  {
    "origin": "Mathematica",
    "local": "数学"
  },
  {
    "origin": "using the eigen values from the Hessian Matrix of the input image using Sobel Derivatives. Additional refinement can be done using Skeletonization and Binarization. Adapted from",
    "local": "利用Sobel导数从输入图像的Hessian矩阵中提取特征值。可以使用骨架化和二值化进行额外的细化。改编自"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Inheritance diagram for cv::ximgproc::RidgeDetectionFilter:",
    "local": "cv:：ximgproc:：RidgeDetectionFilter的继承关系图："
  },
  {
    "origin": "Public Member Functions",
    "local": "公共成员职能"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "_img,",
    "local": "img公司，"
  },
  {
    "origin": "Apply Ridge detection filter on input image.",
    "local": "对输入图像应用脊线检测滤波器。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Public Member Functions inherited from",
    "local": "公共成员函数继承自"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "virtual",
    "local": "事实上的"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "()",
    "local": "()"
  },
  {
    "origin": "Clears the algorithm state.",
    "local": "清除算法状态。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual bool",
    "local": "虚拟布尔"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "Returns true if the",
    "local": "如果"
  },
  {
    "origin": "is empty (e.g. in the very beginning or after unsuccessful read.",
    "local": "为空（例如，在最开始或读取失败后）。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual",
    "local": "事实上的"
  },
  {
    "origin": "() const",
    "local": "（）常数"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;fn)",
    "local": "&amp；（fn）"
  },
  {
    "origin": "Reads algorithm parameters from a file storage.",
    "local": "从文件存储器中读取算法参数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;filename) const",
    "local": "&amp；文件名）常量"
  },
  {
    "origin": "virtual void",
    "local": "虚空"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;fs) const",
    "local": "&amp；（f） 常数"
  },
  {
    "origin": "Stores algorithm parameters in a file storage.",
    "local": "将算法参数存储在文件存储器中。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; &amp;fs, const",
    "local": "&gt；gt；amp；fs，常数"
  },
  {
    "origin": "&amp;name=",
    "local": "&amp；姓名="
  },
  {
    "origin": "()) const",
    "local": "（））常数"
  },
  {
    "origin": "simplified API for language bindings This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": "语言绑定的简化API这是一个重载的成员函数，为方便起见提供。它与上述函数的区别仅在于它接受的参数。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Static Public Member Functions",
    "local": "静态公共成员函数"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt;",
    "local": "&燃气轮机；"
  },
  {
    "origin": "(int ddepth=",
    "local": "（内部深度）="
  },
  {
    "origin": ", int dx=1, int dy=1, int ksize=3, int out_dtype=",
    "local": "，int dx=1，int dy=1，int ksize=3，int\\u dtype="
  },
  {
    "origin": ", double scale=1, double delta=0, int borderType=",
    "local": "，双比例=1，双增量=0，int borderType="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Create pointer to the Ridge detection filter.",
    "local": "创建指向脊线检测过滤器的指针。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Static Public Member Functions inherited from",
    "local": "继承自的静态公共成员函数"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": "&lt_Tp&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;filename, const",
    "local": "&amp；文件名，常量"
  },
  {
    "origin": "&amp;objname=",
    "local": "&amp；对象名="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Loads algorithm from the file.",
    "local": "从文件加载算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": "&lt_Tp&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;strModel, const",
    "local": "&amp；strModel，常量"
  },
  {
    "origin": "&amp;objname=",
    "local": "&amp；对象名="
  },
  {
    "origin": "())",
    "local": "())"
  },
  {
    "origin": "Loads algorithm from a String.",
    "local": "从字符串加载算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": "模板&lt；类型名称\\u Tp&gt；"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt; _Tp &gt;",
    "local": "&lt_Tp&gt；"
  },
  {
    "origin": "(const",
    "local": "常数"
  },
  {
    "origin": "&amp;fn)",
    "local": "&amp；（fn）"
  },
  {
    "origin": "Reads algorithm from the file node.",
    "local": "从文件节点读取算法。"
  },
  {
    "origin": "More...",
    "local": "更多。。。"
  },
  {
    "origin": "Additional Inherited Members",
    "local": "其他继承成员"
  },
  {
    "origin": "Protected Member Functions inherited from",
    "local": "继承自的受保护成员函数"
  },
  {
    "origin": "void",
    "local": "无效"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "&amp;fs) const",
    "local": "&amp；（f） 常数"
  },
  {
    "origin": "Detailed Description",
    "local": "详细说明"
  },
  {
    "origin": "Applies Ridge Detection Filter to an input image. Implements Ridge detection similar to the one in",
    "local": "对输入图像应用脊线检测滤波器。实现类似于中的脊线检测"
  },
  {
    "origin": "Mathematica",
    "local": "数学"
  },
  {
    "origin": "using the eigen values from the Hessian Matrix of the input image using Sobel Derivatives. Additional refinement can be done using Skeletonization and Binarization. Adapted from",
    "local": "利用Sobel导数从输入图像的Hessian矩阵中提取特征值。可以使用骨架化和二值化进行额外的细化。改编自"
  },
  {
    "origin": "and",
    "local": "和"
  },
  {
    "origin": ".",
    "local": "."
  },
  {
    "origin": "Member Function Documentation",
    "local": "成员功能文档"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "create()",
    "local": "创建（）"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "&lt;",
    "local": "&lt；"
  },
  {
    "origin": "&gt; cv::ximgproc::RidgeDetectionFilter::create",
    "local": "&燃气轮机；cv:：ximgproc:：RidgeDetectionFilter:：创建"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ddepth",
    "local": "深度"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "dx",
    "local": "dx公司"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "dy",
    "local": "戴"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "ksize",
    "local": "K尺寸"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "out_dtype",
    "local": "输出数据类型"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "scale",
    "local": "规模"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "double",
    "local": "双重的"
  },
  {
    "origin": "delta",
    "local": "三角洲"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "int",
    "local": "内景"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "static",
    "local": "静止的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "retval",
    "local": "复述"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.ximgproc.RidgeDetectionFilter_create(",
    "local": "cv.ximgproc.RidgeDetectionFilter\\u创建("
  },
  {
    "origin": "[, ddepth[, dx[, dy[, ksize[, out_dtype[, scale[, delta[, borderType]]]]]]]]",
    "local": "[，ddepth[，dx[，dy[，ksize[，out\\u dtype[，scale[，delta[，borderType]]]]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Create pointer to the Ridge detection filter.",
    "local": "创建指向脊线检测过滤器的指针。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "ddepth",
    "local": "深度"
  },
  {
    "origin": "Specifies output image depth. Defualt is CV_32FC1",
    "local": "指定输出图像深度。默认值为CV\\ U 32FC1"
  },
  {
    "origin": "dx",
    "local": "dx公司"
  },
  {
    "origin": "dy",
    "local": "戴"
  },
  {
    "origin": "ksize",
    "local": "K尺寸"
  },
  {
    "origin": "out_dtype",
    "local": "输出数据类型"
  },
  {
    "origin": "Converted format for output, default is CV_8UC1",
    "local": "转换后的输出格式，默认为cv8uc1"
  },
  {
    "origin": "scale",
    "local": "规模"
  },
  {
    "origin": "delta",
    "local": "三角洲"
  },
  {
    "origin": "borderType",
    "local": "桌子"
  },
  {
    "origin": "Pixel extrapolation method, default is BORDER_DEFAULT",
    "local": "像素外推方法，默认为BORDER\\u default"
  },
  {
    "origin": "See also",
    "local": "另请参见"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": ".( for additional refinement)",
    "local": "（用于进一步细化）"
  },
  {
    "origin": "◆",
    "local": "◆"
  },
  {
    "origin": "getRidgeFilteredImage()",
    "local": "getRidgeFilteredImage（）"
  },
  {
    "origin": "virtual void cv::ximgproc::RidgeDetectionFilter::getRidgeFilteredImage",
    "local": "虚拟void cv:：ximgproc:：RidgeDetectionFilter:：getRidgeFilteredImage"
  },
  {
    "origin": "(",
    "local": "("
  },
  {
    "origin": "_img",
    "local": "伊姆格"
  },
  {
    "origin": ",",
    "local": ","
  },
  {
    "origin": "out",
    "local": "外面的"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "pure virtual",
    "local": "纯虚拟的"
  },
  {
    "origin": "Python:",
    "local": "蟒蛇："
  },
  {
    "origin": "out",
    "local": "外面的"
  },
  {
    "origin": "=",
    "local": "="
  },
  {
    "origin": "cv.ximgproc_RidgeDetectionFilter.getRidgeFilteredImage(",
    "local": "cv.ximgproc RidgeDetectionFilter.getRidgeFilteredImage("
  },
  {
    "origin": "_img[, out]",
    "local": "img[输出]"
  },
  {
    "origin": ")",
    "local": ")"
  },
  {
    "origin": "Apply Ridge detection filter on input image.",
    "local": "对输入图像应用脊线检测滤波器。"
  },
  {
    "origin": "Parameters",
    "local": "参数"
  },
  {
    "origin": "_img",
    "local": "伊姆格"
  },
  {
    "origin": "InputArray as supported by Sobel. img can be 1-Channel or 3-Channels.",
    "local": "Sobel支持的InputArray。img可以是单通道或三通道。"
  },
  {
    "origin": "out",
    "local": "外面的"
  },
  {
    "origin": "OutputAray of structure as RidgeDetectionFilter::ddepth. Output image with ridges.",
    "local": "作为RidgeDetectionFilter:：ddepth输出结构的数组。输出带脊线的图像。"
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": "此类的文档是从以下文件生成的："
  },
  {
    "origin": "opencv2/ximgproc/",
    "local": "opencv2/ximgproc/"
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:49 for OpenCV by",
    "local": "于2021年4月2日星期五11:36:49为OpenCV生成"
  }
]