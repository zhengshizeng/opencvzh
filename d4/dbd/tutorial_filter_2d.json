[
  {
    "origin": "OpenCV: Making your own linear filters!",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Making your own linear filters!",
    "local": ""
  },
  {
    "origin": "Prev Tutorial:",
    "local": ""
  },
  {
    "origin": "Next Tutorial:",
    "local": ""
  },
  {
    "origin": "Original author",
    "local": ""
  },
  {
    "origin": "Ana Huam√°n",
    "local": ""
  },
  {
    "origin": "Compatibility",
    "local": ""
  },
  {
    "origin": "OpenCV &gt;= 3.0",
    "local": ""
  },
  {
    "origin": "Goal",
    "local": ""
  },
  {
    "origin": "In this tutorial you will learn how to:",
    "local": ""
  },
  {
    "origin": "Use the OpenCV function",
    "local": ""
  },
  {
    "origin": "to create your own linear filters.",
    "local": ""
  },
  {
    "origin": "Theory",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "The explanation below belongs to the book",
    "local": ""
  },
  {
    "origin": "Learning OpenCV",
    "local": ""
  },
  {
    "origin": "by Bradski and Kaehler.",
    "local": ""
  },
  {
    "origin": "Correlation",
    "local": ""
  },
  {
    "origin": "In a very general sense, correlation is an operation between every part of an image and an operator (kernel).",
    "local": ""
  },
  {
    "origin": "What is a kernel?",
    "local": ""
  },
  {
    "origin": "A kernel is essentially a fixed size array of numerical coefficients along with an",
    "local": ""
  },
  {
    "origin": "anchor point",
    "local": ""
  },
  {
    "origin": "in that array, which is typically located at the center.",
    "local": ""
  },
  {
    "origin": "How does correlation with a kernel work?",
    "local": ""
  },
  {
    "origin": "Assume you want to know the resulting value of a particular location in the image. The value of the correlation is calculated in the following way:",
    "local": ""
  },
  {
    "origin": "Place the kernel anchor on top of a determined pixel, with the rest of the kernel overlaying the corresponding local pixels in the image.",
    "local": ""
  },
  {
    "origin": "Multiply the kernel coefficients by the corresponding image pixel values and sum the result.",
    "local": ""
  },
  {
    "origin": "Place the result to the location of the",
    "local": ""
  },
  {
    "origin": "anchor",
    "local": ""
  },
  {
    "origin": "in the input image.",
    "local": ""
  },
  {
    "origin": "Repeat the process for all pixels by scanning the kernel over the entire image.",
    "local": ""
  },
  {
    "origin": "Expressing the procedure above in the form of an equation we would have:",
    "local": ""
  },
  {
    "origin": "\\[H(x,y) = \\sum_{i=0}^{M_{i} - 1} \\sum_{j=0}^{M_{j}-1} I(x+i - a_{i}, y + j - a_{j})K(i,j)\\]",
    "local": ""
  },
  {
    "origin": "Fortunately, OpenCV provides you with the function",
    "local": ""
  },
  {
    "origin": "so you do not have to code all these operations.",
    "local": ""
  },
  {
    "origin": "What does this program do?",
    "local": ""
  },
  {
    "origin": "Loads an image",
    "local": ""
  },
  {
    "origin": "Performs a",
    "local": ""
  },
  {
    "origin": "normalized box filter",
    "local": ""
  },
  {
    "origin": ". For instance, for a kernel of size \\(size = 3\\), the kernel would be:",
    "local": ""
  },
  {
    "origin": "\\[K = \\dfrac{1}{3 \\cdot 3} \\begin{bmatrix} 1 &amp; 1 &amp; 1 \\\\ 1 &amp; 1 &amp; 1 \\\\ 1 &amp; 1 &amp; 1 \\end{bmatrix}\\]",
    "local": ""
  },
  {
    "origin": "The program will perform the filter operation with kernels of sizes 3, 5, 7, 9 and 11.",
    "local": ""
  },
  {
    "origin": "The filter output (with each kernel) will be shown during 500 milliseconds",
    "local": ""
  },
  {
    "origin": "Code",
    "local": ""
  },
  {
    "origin": "The tutorial code's is shown in the lines below.",
    "local": ""
  },
  {
    "origin": "C++",
    "local": ""
  },
  {
    "origin": "You can also download it from",
    "local": ""
  },
  {
    "origin": "here",
    "local": ""
  },
  {
    "origin": "Java",
    "local": ""
  },
  {
    "origin": "You can also download it from",
    "local": ""
  },
  {
    "origin": "here",
    "local": ""
  },
  {
    "origin": "Python",
    "local": ""
  },
  {
    "origin": "You can also download it from",
    "local": ""
  },
  {
    "origin": "here",
    "local": ""
  },
  {
    "origin": "Explanation",
    "local": ""
  },
  {
    "origin": "Load an image",
    "local": ""
  },
  {
    "origin": "C++",
    "local": ""
  },
  {
    "origin": "Java",
    "local": ""
  },
  {
    "origin": "Python",
    "local": ""
  },
  {
    "origin": "Initialize the arguments",
    "local": ""
  },
  {
    "origin": "C++",
    "local": ""
  },
  {
    "origin": "Java",
    "local": ""
  },
  {
    "origin": "Python",
    "local": ""
  },
  {
    "origin": "Loop",
    "local": ""
  },
  {
    "origin": "Perform an infinite loop updating the kernel size and applying our linear filter to the input image. Let's analyze that more in detail:",
    "local": ""
  },
  {
    "origin": "First we define the kernel our filter is going to use. Here it is:",
    "local": ""
  },
  {
    "origin": "C++",
    "local": ""
  },
  {
    "origin": "Java",
    "local": ""
  },
  {
    "origin": "Python",
    "local": ""
  },
  {
    "origin": "The first line is to update the",
    "local": ""
  },
  {
    "origin": "kernel_size",
    "local": ""
  },
  {
    "origin": "to odd values in the range: \\([3,11]\\). The second line actually builds the kernel by setting its value to a matrix filled with \\(1&#39;s\\) and normalizing it by dividing it between the number of elements.",
    "local": ""
  },
  {
    "origin": "After setting the kernel, we can generate the filter by using the function",
    "local": ""
  },
  {
    "origin": ":",
    "local": ""
  },
  {
    "origin": "C++",
    "local": ""
  },
  {
    "origin": "Java",
    "local": ""
  },
  {
    "origin": "Python",
    "local": ""
  },
  {
    "origin": "The arguments denote:",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ": Source image",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ": Destination image",
    "local": ""
  },
  {
    "origin": "ddepth",
    "local": ""
  },
  {
    "origin": ": The depth of",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ". A negative value (such as \\(-1\\)) indicates that the depth is the same as the source.",
    "local": ""
  },
  {
    "origin": "kernel",
    "local": ""
  },
  {
    "origin": ": The kernel to be scanned through the image",
    "local": ""
  },
  {
    "origin": "anchor",
    "local": ""
  },
  {
    "origin": ": The position of the anchor relative to its kernel. The location",
    "local": ""
  },
  {
    "origin": "Point(-1, -1)",
    "local": ""
  },
  {
    "origin": "indicates the center by default.",
    "local": ""
  },
  {
    "origin": "delta",
    "local": ""
  },
  {
    "origin": ": A value to be added to each pixel during the correlation. By default it is \\(0\\)",
    "local": ""
  },
  {
    "origin": "BORDER_DEFAULT",
    "local": ""
  },
  {
    "origin": ": We let this value by default (more details in the following tutorial)",
    "local": ""
  },
  {
    "origin": "Our program will effectuate a",
    "local": ""
  },
  {
    "origin": "while",
    "local": ""
  },
  {
    "origin": "loop, each 500 ms the kernel size of our filter will be updated in the range indicated.",
    "local": ""
  },
  {
    "origin": "Results",
    "local": ""
  },
  {
    "origin": "After compiling the code above, you can execute it giving as argument the path of an image. The result should be a window that shows an image blurred by a normalized filter. Each 0.5 seconds the kernel size should change, as can be seen in the series of snapshots below:",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:35 for OpenCV by &#160;",
    "local": ""
  }
]