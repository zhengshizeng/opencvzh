[
  {
    "origin": "OpenCV: Template Matching",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Template Matching",
    "local": ""
  },
  {
    "origin": "Goals",
    "local": ""
  },
  {
    "origin": "In this chapter, you will learn",
    "local": ""
  },
  {
    "origin": "To find objects in an image using Template Matching",
    "local": ""
  },
  {
    "origin": "You will see these functions :",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Theory",
    "local": ""
  },
  {
    "origin": "Template Matching is a method for searching and finding the location of a template image in a larger image. OpenCV comes with a function",
    "local": ""
  },
  {
    "origin": "for this purpose. It simply slides the template image over the input image (as in 2D convolution) and compares the template and patch of input image under the template image. Several comparison methods are implemented in OpenCV. (You can check docs for more details). It returns a grayscale image, where each pixel denotes how much does the neighbourhood of that pixel match with template.",
    "local": ""
  },
  {
    "origin": "If input image is of size (WxH) and template image is of size (wxh), output image will have a size of (W-w+1, H-h+1). Once you got the result, you can use",
    "local": ""
  },
  {
    "origin": "function to find where is the maximum/minimum value. Take it as the top-left corner of rectangle and take (w,h) as width and height of the rectangle. That rectangle is your region of template.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "If you are using",
    "local": ""
  },
  {
    "origin": "as comparison method, minimum value gives the best match.",
    "local": ""
  },
  {
    "origin": "Template Matching in OpenCV",
    "local": ""
  },
  {
    "origin": "Here, as an example, we will search for Messi's face in his photo. So I created a template as below:",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "We will try all the comparison methods so that we can see how their results look like:",
    "local": ""
  },
  {
    "origin": "See the results below:",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "You can see that the result using",
    "local": ""
  },
  {
    "origin": "is not good as we expected.",
    "local": ""
  },
  {
    "origin": "Template Matching with Multiple Objects",
    "local": ""
  },
  {
    "origin": "In the previous section, we searched image for Messi's face, which occurs only once in the image. Suppose you are searching for an object which has multiple occurrences,",
    "local": ""
  },
  {
    "origin": "won't give you all the locations. In that case, we will use thresholding. So in this example, we will use a screenshot of the famous game",
    "local": ""
  },
  {
    "origin": "Mario",
    "local": ""
  },
  {
    "origin": "and we will find the coins in it.",
    "local": ""
  },
  {
    "origin": "Result:",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "Additional Resources",
    "local": ""
  },
  {
    "origin": "Exercises",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:37 for OpenCV by &#160;",
    "local": ""
  }
]