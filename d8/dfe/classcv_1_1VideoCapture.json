[
  {
    "origin": "OpenCV: cv::VideoCapture Class Reference",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions",
    "local": ""
  },
  {
    "origin": "Protected Attributes",
    "local": ""
  },
  {
    "origin": "Friends",
    "local": ""
  },
  {
    "origin": "List of all members",
    "local": ""
  },
  {
    "origin": "cv::VideoCapture Class Reference",
    "local": ""
  },
  {
    "origin": "Class for video capturing from video files, image sequences or cameras.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Default constructor.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename, int apiPreference=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Opens a video file or a capturing device or an IP video stream for video capturing with API Preference.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename, int apiPreference, const std::vector&lt; int &gt; &amp;params)",
    "local": ""
  },
  {
    "origin": "Opens a video file or a capturing device or an IP video stream for video capturing with API Preference and parameters.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int index, int apiPreference=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Opens a camera for video capturing.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int index, int apiPreference, const std::vector&lt; int &gt; &amp;params)",
    "local": ""
  },
  {
    "origin": "Opens a camera for video capturing with API Preference and parameters.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Default destructor.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual double",
    "local": ""
  },
  {
    "origin": "(int propId) const",
    "local": ""
  },
  {
    "origin": "Returns the specified",
    "local": ""
  },
  {
    "origin": "property.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Returns used backend API name.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "query if exception mode is active",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual bool",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Grabs the next frame from video file or capturing device.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual bool",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Returns true if video capturing has been initialized already.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual bool",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename, int apiPreference=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Opens a video file or a capturing device or an IP video stream for video capturing.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual bool",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename, int apiPreference, const std::vector&lt; int &gt; &amp;params)",
    "local": ""
  },
  {
    "origin": "Opens a camera for video capturing.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual bool",
    "local": ""
  },
  {
    "origin": "(int index, int apiPreference=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Opens a camera for video capturing.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual bool",
    "local": ""
  },
  {
    "origin": "(int index, int apiPreference, const std::vector&lt; int &gt; &amp;params)",
    "local": ""
  },
  {
    "origin": "Returns true if video capturing has been initialized already.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;image)",
    "local": ""
  },
  {
    "origin": "Stream operator to read the next video frame.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;image)",
    "local": ""
  },
  {
    "origin": "virtual bool",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image)",
    "local": ""
  },
  {
    "origin": "Grabs, decodes and returns the next video frame.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Closes video file or capturing device.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual bool",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image, int flag=0)",
    "local": ""
  },
  {
    "origin": "Decodes and returns the grabbed video frame.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual bool",
    "local": ""
  },
  {
    "origin": "(int propId, double value)",
    "local": ""
  },
  {
    "origin": "Sets a property in the",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(bool enable)",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions",
    "local": ""
  },
  {
    "origin": "static bool",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;streams, std::vector&lt; int &gt; &amp;readyIndex,",
    "local": ""
  },
  {
    "origin": "timeoutNs=0)",
    "local": ""
  },
  {
    "origin": "Wait for ready frames from",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Protected Attributes",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "&lt; IVideoCapture &gt;",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "Friends",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Class for video capturing from video files, image sequences or cameras.",
    "local": ""
  },
  {
    "origin": "The class provides C++ API for capturing video from cameras or for reading video files and image sequences.",
    "local": ""
  },
  {
    "origin": "Here is how the class can be used:",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "In",
    "local": ""
  },
  {
    "origin": "the black-box structure",
    "local": ""
  },
  {
    "origin": "is used instead of VideoCapture.",
    "local": ""
  },
  {
    "origin": "(C++) A basic sample on using the VideoCapture interface can be found at",
    "local": ""
  },
  {
    "origin": "(Python) A basic sample on using the VideoCapture interface can be found at",
    "local": ""
  },
  {
    "origin": "(Python) A multi threaded video processing sample can be found at",
    "local": ""
  },
  {
    "origin": "(Python) VideoCapture sample showcasing some features of the Video4Linux2 backend",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Constructor &amp; Destructor Documentation",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "VideoCapture()",
    "local": ""
  },
  {
    "origin": "[1/5]",
    "local": ""
  },
  {
    "origin": "cv::VideoCapture::VideoCapture",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "&lt;VideoCapture object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;VideoCapture object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture(",
    "local": ""
  },
  {
    "origin": "filename[, apiPreference]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;VideoCapture object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture(",
    "local": ""
  },
  {
    "origin": "filename, apiPreference, params",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;VideoCapture object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture(",
    "local": ""
  },
  {
    "origin": "index[, apiPreference]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;VideoCapture object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture(",
    "local": ""
  },
  {
    "origin": "index, apiPreference, params",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Default constructor.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "In",
    "local": ""
  },
  {
    "origin": ", when you finished working with video, release CvCapture structure with cvReleaseCapture(), or use Ptr&lt;CvCapture&gt; that calls cvReleaseCapture() automatically in the destructor.",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "VideoCapture()",
    "local": ""
  },
  {
    "origin": "[2/5]",
    "local": ""
  },
  {
    "origin": "cv::VideoCapture::VideoCapture",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "filename",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "apiPreference",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "explicit",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "&lt;VideoCapture object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;VideoCapture object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture(",
    "local": ""
  },
  {
    "origin": "filename[, apiPreference]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;VideoCapture object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture(",
    "local": ""
  },
  {
    "origin": "filename, apiPreference, params",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;VideoCapture object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture(",
    "local": ""
  },
  {
    "origin": "index[, apiPreference]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;VideoCapture object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture(",
    "local": ""
  },
  {
    "origin": "index, apiPreference, params",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Opens a video file or a capturing device or an IP video stream for video capturing with API Preference.",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "filename",
    "local": ""
  },
  {
    "origin": "it can be:",
    "local": ""
  },
  {
    "origin": "name of video file (eg.",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "or image sequence (eg.",
    "local": ""
  },
  {
    "origin": ", which will read samples like",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "or URL of video stream (eg.",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "or GStreamer pipeline string in gst-launch tool format in case if GStreamer is used as backend Note that each video stream or IP camera feed has its own URL scheme. Please refer to the documentation of source stream to know the right URL.",
    "local": ""
  },
  {
    "origin": "apiPreference",
    "local": ""
  },
  {
    "origin": "preferred Capture API backends to use. Can be used to enforce a specific reader implementation if multiple are available: e.g.",
    "local": ""
  },
  {
    "origin": "or",
    "local": ""
  },
  {
    "origin": "or",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "VideoCapture()",
    "local": ""
  },
  {
    "origin": "[3/5]",
    "local": ""
  },
  {
    "origin": "cv::VideoCapture::VideoCapture",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "filename",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "apiPreference",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const std::vector&lt; int &gt; &amp;",
    "local": ""
  },
  {
    "origin": "params",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "explicit",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "&lt;VideoCapture object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;VideoCapture object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture(",
    "local": ""
  },
  {
    "origin": "filename[, apiPreference]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;VideoCapture object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture(",
    "local": ""
  },
  {
    "origin": "filename, apiPreference, params",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;VideoCapture object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture(",
    "local": ""
  },
  {
    "origin": "index[, apiPreference]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;VideoCapture object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture(",
    "local": ""
  },
  {
    "origin": "index, apiPreference, params",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Opens a video file or a capturing device or an IP video stream for video capturing with API Preference and parameters.",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. The",
    "local": ""
  },
  {
    "origin": "parameter allows to specify extra parameters encoded as pairs",
    "local": ""
  },
  {
    "origin": ". See",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "VideoCapture()",
    "local": ""
  },
  {
    "origin": "[4/5]",
    "local": ""
  },
  {
    "origin": "cv::VideoCapture::VideoCapture",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "index",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "apiPreference",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "explicit",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "&lt;VideoCapture object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;VideoCapture object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture(",
    "local": ""
  },
  {
    "origin": "filename[, apiPreference]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;VideoCapture object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture(",
    "local": ""
  },
  {
    "origin": "filename, apiPreference, params",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;VideoCapture object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture(",
    "local": ""
  },
  {
    "origin": "index[, apiPreference]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;VideoCapture object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture(",
    "local": ""
  },
  {
    "origin": "index, apiPreference, params",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Opens a camera for video capturing.",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "index",
    "local": ""
  },
  {
    "origin": "apiPreference",
    "local": ""
  },
  {
    "origin": "preferred Capture API backends to use. Can be used to enforce a specific reader implementation if multiple are available: e.g.",
    "local": ""
  },
  {
    "origin": "or",
    "local": ""
  },
  {
    "origin": "or",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "VideoCapture()",
    "local": ""
  },
  {
    "origin": "[5/5]",
    "local": ""
  },
  {
    "origin": "cv::VideoCapture::VideoCapture",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "index",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "apiPreference",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const std::vector&lt; int &gt; &amp;",
    "local": ""
  },
  {
    "origin": "params",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "explicit",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "&lt;VideoCapture object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;VideoCapture object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture(",
    "local": ""
  },
  {
    "origin": "filename[, apiPreference]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;VideoCapture object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture(",
    "local": ""
  },
  {
    "origin": "filename, apiPreference, params",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;VideoCapture object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture(",
    "local": ""
  },
  {
    "origin": "index[, apiPreference]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;VideoCapture object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture(",
    "local": ""
  },
  {
    "origin": "index, apiPreference, params",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Opens a camera for video capturing with API Preference and parameters.",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. The",
    "local": ""
  },
  {
    "origin": "parameter allows to specify extra parameters encoded as pairs",
    "local": ""
  },
  {
    "origin": ". See",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "~VideoCapture()",
    "local": ""
  },
  {
    "origin": "virtual cv::VideoCapture::~VideoCapture",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Default destructor.",
    "local": ""
  },
  {
    "origin": "The method first calls",
    "local": ""
  },
  {
    "origin": "to close the already opened file or camera.",
    "local": ""
  },
  {
    "origin": "Member Function Documentation",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "get()",
    "local": ""
  },
  {
    "origin": "virtual double cv::VideoCapture::get",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "propId",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture.get(",
    "local": ""
  },
  {
    "origin": "propId",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns the specified",
    "local": ""
  },
  {
    "origin": "property.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "propId",
    "local": ""
  },
  {
    "origin": "Property identifier from",
    "local": ""
  },
  {
    "origin": "(eg.",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", ...) or one from",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "Value for the specified property. Value 0 is returned when querying a property that is not supported by the backend used by the",
    "local": ""
  },
  {
    "origin": "instance.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Reading / writing properties involves many layers. Some unexpected result might happens along this chain.",
    "local": ""
  },
  {
    "origin": "The returned value might be different from what really used by the device or it could be encoded using device dependent rules (eg. steps or percentage). Effective behaviour depends from device driver and API Backend",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "getBackendName()",
    "local": ""
  },
  {
    "origin": "cv::VideoCapture::getBackendName",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture.getBackendName(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns used backend API name.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Stream should be opened.",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "getExceptionMode()",
    "local": ""
  },
  {
    "origin": "bool cv::VideoCapture::getExceptionMode",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture.getExceptionMode(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "query if exception mode is active",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "grab()",
    "local": ""
  },
  {
    "origin": "virtual bool cv::VideoCapture::grab",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture.grab(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Grabs the next frame from video file or capturing device.",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "(non-zero) in the case of success.",
    "local": ""
  },
  {
    "origin": "The method/function grabs the next frame from video file or camera and returns true (non-zero) in the case of success.",
    "local": ""
  },
  {
    "origin": "The primary use of the function is in multi-camera environments, especially when the cameras do not have hardware synchronization. That is, you call",
    "local": ""
  },
  {
    "origin": "for each camera and after that call the slower method",
    "local": ""
  },
  {
    "origin": "to decode and get frame from each camera. This way the overhead on demosaicing or motion jpeg decompression etc. is eliminated and the retrieved frames from different cameras will be closer in time.",
    "local": ""
  },
  {
    "origin": "Also, when a connected camera is multi-head (for example, a stereo camera or a Kinect device), the correct way of retrieving data from it is to call",
    "local": ""
  },
  {
    "origin": "first and then call",
    "local": ""
  },
  {
    "origin": "one or more times with different values of the channel parameter.",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "isOpened()",
    "local": ""
  },
  {
    "origin": "virtual bool cv::VideoCapture::isOpened",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture.isOpened(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns true if video capturing has been initialized already.",
    "local": ""
  },
  {
    "origin": "If the previous call to",
    "local": ""
  },
  {
    "origin": "constructor or",
    "local": ""
  },
  {
    "origin": "succeeded, the method returns true.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "open()",
    "local": ""
  },
  {
    "origin": "[1/4]",
    "local": ""
  },
  {
    "origin": "virtual bool cv::VideoCapture::open",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "filename",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "apiPreference",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture.open(",
    "local": ""
  },
  {
    "origin": "filename[, apiPreference]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture.open(",
    "local": ""
  },
  {
    "origin": "filename, apiPreference, params",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture.open(",
    "local": ""
  },
  {
    "origin": "index[, apiPreference]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture.open(",
    "local": ""
  },
  {
    "origin": "index, apiPreference, params",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Opens a video file or a capturing device or an IP video stream for video capturing.",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Parameters are same as the constructor",
    "local": ""
  },
  {
    "origin": "(const String&amp; filename, int apiPreference = CAP_ANY)",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "if the file has been successfully opened",
    "local": ""
  },
  {
    "origin": "The method first calls",
    "local": ""
  },
  {
    "origin": "to close the already opened file or camera.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", and",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "open()",
    "local": ""
  },
  {
    "origin": "[2/4]",
    "local": ""
  },
  {
    "origin": "virtual bool cv::VideoCapture::open",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "filename",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "apiPreference",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const std::vector&lt; int &gt; &amp;",
    "local": ""
  },
  {
    "origin": "params",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture.open(",
    "local": ""
  },
  {
    "origin": "filename[, apiPreference]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture.open(",
    "local": ""
  },
  {
    "origin": "filename, apiPreference, params",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture.open(",
    "local": ""
  },
  {
    "origin": "index[, apiPreference]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture.open(",
    "local": ""
  },
  {
    "origin": "index, apiPreference, params",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Opens a camera for video capturing.",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "The",
    "local": ""
  },
  {
    "origin": "parameter allows to specify extra parameters encoded as pairs",
    "local": ""
  },
  {
    "origin": ". See",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "if the file has been successfully opened",
    "local": ""
  },
  {
    "origin": "The method first calls",
    "local": ""
  },
  {
    "origin": "to close the already opened file or camera.",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "open()",
    "local": ""
  },
  {
    "origin": "[3/4]",
    "local": ""
  },
  {
    "origin": "virtual bool cv::VideoCapture::open",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "index",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "apiPreference",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture.open(",
    "local": ""
  },
  {
    "origin": "filename[, apiPreference]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture.open(",
    "local": ""
  },
  {
    "origin": "filename, apiPreference, params",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture.open(",
    "local": ""
  },
  {
    "origin": "index[, apiPreference]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture.open(",
    "local": ""
  },
  {
    "origin": "index, apiPreference, params",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Opens a camera for video capturing.",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "Parameters are same as the constructor",
    "local": ""
  },
  {
    "origin": "(int index, int apiPreference = CAP_ANY)",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "if the camera has been successfully opened.",
    "local": ""
  },
  {
    "origin": "The method first calls",
    "local": ""
  },
  {
    "origin": "to close the already opened file or camera.",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "open()",
    "local": ""
  },
  {
    "origin": "[4/4]",
    "local": ""
  },
  {
    "origin": "virtual bool cv::VideoCapture::open",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "index",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "apiPreference",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const std::vector&lt; int &gt; &amp;",
    "local": ""
  },
  {
    "origin": "params",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture.open(",
    "local": ""
  },
  {
    "origin": "filename[, apiPreference]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture.open(",
    "local": ""
  },
  {
    "origin": "filename, apiPreference, params",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture.open(",
    "local": ""
  },
  {
    "origin": "index[, apiPreference]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture.open(",
    "local": ""
  },
  {
    "origin": "index, apiPreference, params",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns true if video capturing has been initialized already.",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "The",
    "local": ""
  },
  {
    "origin": "parameter allows to specify extra parameters encoded as pairs",
    "local": ""
  },
  {
    "origin": ". See",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "if the camera has been successfully opened.",
    "local": ""
  },
  {
    "origin": "The method first calls",
    "local": ""
  },
  {
    "origin": "to close the already opened file or camera.",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "operator&gt;&gt;()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "&amp; cv::VideoCapture::operator&gt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Stream operator to read the next video frame.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "operator&gt;&gt;()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "&amp; cv::VideoCapture::operator&gt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "read()",
    "local": ""
  },
  {
    "origin": "virtual bool cv::VideoCapture::read",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval, image",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture.read(",
    "local": ""
  },
  {
    "origin": "[, image]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Grabs, decodes and returns the next video frame.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "[out]",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "the video frame is returned here. If no frames has been grabbed the image will be empty.",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "if no frames has been grabbed",
    "local": ""
  },
  {
    "origin": "The method/function combines",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "in one call. This is the most convenient method for reading video files or capturing data from decode and returns the just grabbed frame. If no frames has been grabbed (camera has been disconnected, or there are no more frames in video file), the method returns false and the function returns empty image (with cv::Mat, test it with",
    "local": ""
  },
  {
    "origin": ").",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "In",
    "local": ""
  },
  {
    "origin": ", functions cvRetrieveFrame() and cv.RetrieveFrame() return image stored inside the video capturing structure. It is not allowed to modify or release the image! You can copy the frame using cvCloneImage and then do whatever you want with the copy.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "release()",
    "local": ""
  },
  {
    "origin": "virtual void cv::VideoCapture::release",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture.release(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Closes video file or capturing device.",
    "local": ""
  },
  {
    "origin": "The method is automatically called by subsequent",
    "local": ""
  },
  {
    "origin": "and by",
    "local": ""
  },
  {
    "origin": "destructor.",
    "local": ""
  },
  {
    "origin": "The C function also deallocates memory and clears *capture pointer.",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "retrieve()",
    "local": ""
  },
  {
    "origin": "virtual bool cv::VideoCapture::retrieve",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "flag",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval, image",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture.retrieve(",
    "local": ""
  },
  {
    "origin": "[, image[, flag]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Decodes and returns the grabbed video frame.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "[out]",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "the video frame is returned here. If no frames has been grabbed the image will be empty.",
    "local": ""
  },
  {
    "origin": "flag",
    "local": ""
  },
  {
    "origin": "it could be a frame index or a driver specific flag",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "if no frames has been grabbed",
    "local": ""
  },
  {
    "origin": "The method decodes and returns the just grabbed frame. If no frames has been grabbed (camera has been disconnected, or there are no more frames in video file), the method returns false and the function returns an empty image (with cv::Mat, test it with",
    "local": ""
  },
  {
    "origin": ").",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "In",
    "local": ""
  },
  {
    "origin": ", functions cvRetrieveFrame() and cv.RetrieveFrame() return image stored inside the video capturing structure. It is not allowed to modify or release the image! You can copy the frame using cvCloneImage and then do whatever you want with the copy.",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "set()",
    "local": ""
  },
  {
    "origin": "virtual bool cv::VideoCapture::set",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "propId",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "double",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture.set(",
    "local": ""
  },
  {
    "origin": "propId, value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Sets a property in the",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "propId",
    "local": ""
  },
  {
    "origin": "Property identifier from",
    "local": ""
  },
  {
    "origin": "(eg.",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", ...) or one from",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": "Value of the property.",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "if the property is supported by backend used by the",
    "local": ""
  },
  {
    "origin": "instance.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Even if it returns",
    "local": ""
  },
  {
    "origin": "this doesn't ensure that the property value has been accepted by the capture device. See note in",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "setExceptionMode()",
    "local": ""
  },
  {
    "origin": "void cv::VideoCapture::setExceptionMode",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "enable",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.VideoCapture.setExceptionMode(",
    "local": ""
  },
  {
    "origin": "enable",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Switches exceptions mode",
    "local": ""
  },
  {
    "origin": "methods raise exceptions if not successful instead of returning an error code",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "waitAny()",
    "local": ""
  },
  {
    "origin": "static bool cv::VideoCapture::waitAny",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "streams",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "std::vector&lt; int &gt; &amp;",
    "local": ""
  },
  {
    "origin": "readyIndex",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "timeoutNs",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Wait for ready frames from",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "streams",
    "local": ""
  },
  {
    "origin": "input video streams",
    "local": ""
  },
  {
    "origin": "readyIndex",
    "local": ""
  },
  {
    "origin": "stream indexes with grabbed frames (ready to use .",
    "local": ""
  },
  {
    "origin": "to fetch actual frame)",
    "local": ""
  },
  {
    "origin": "timeoutNs",
    "local": ""
  },
  {
    "origin": "number of nanoseconds (0 - infinite)",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "if streamReady is not empty",
    "local": ""
  },
  {
    "origin": "Exceptions",
    "local": ""
  },
  {
    "origin": "Exception on stream errors (check .",
    "local": ""
  },
  {
    "origin": "to filter out malformed streams) or",
    "local": ""
  },
  {
    "origin": "type is not supported",
    "local": ""
  },
  {
    "origin": "The primary use of the function is in multi-camera environments. The method fills the ready state vector, grabs video frame, if camera is ready.",
    "local": ""
  },
  {
    "origin": "After this call use",
    "local": ""
  },
  {
    "origin": "to decode and fetch frame data.",
    "local": ""
  },
  {
    "origin": "Friends And Related Function Documentation",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "internal::VideoCapturePrivateAccessor",
    "local": ""
  },
  {
    "origin": "friend class internal::VideoCapturePrivateAccessor",
    "local": ""
  },
  {
    "origin": "friend",
    "local": ""
  },
  {
    "origin": "Member Data Documentation",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "cap",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; cv::VideoCapture::cap",
    "local": ""
  },
  {
    "origin": "protected",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "icap",
    "local": ""
  },
  {
    "origin": "&lt;IVideoCapture&gt; cv::VideoCapture::icap",
    "local": ""
  },
  {
    "origin": "protected",
    "local": ""
  },
  {
    "origin": "â—†",
    "local": ""
  },
  {
    "origin": "throwOnFail",
    "local": ""
  },
  {
    "origin": "bool cv::VideoCapture::throwOnFail",
    "local": ""
  },
  {
    "origin": "protected",
    "local": ""
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": ""
  },
  {
    "origin": "opencv2/",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:43 for OpenCV by",
    "local": ""
  }
]