[
  {
    "origin": "OpenCV: cv::kinfu::KinFu Class Reference",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions",
    "local": ""
  },
  {
    "origin": "List of all members",
    "local": ""
  },
  {
    "origin": "cv::kinfu::KinFu Class Reference",
    "local": ""
  },
  {
    "origin": "abstract",
    "local": ""
  },
  {
    "origin": "KinectFusion implementation.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "points,",
    "local": ""
  },
  {
    "origin": "Gets points and normals of current 3d mesh.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "points,",
    "local": ""
  },
  {
    "origin": "Calculates normals for given points.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "Get current parameters.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "Gets points of current 3d mesh.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual const",
    "local": ""
  },
  {
    "origin": "Get current pose in voxel space.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image, const",
    "local": ""
  },
  {
    "origin": "&amp;cameraPose=",
    "local": ""
  },
  {
    "origin": "Renders a volume into an image.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual void",
    "local": ""
  },
  {
    "origin": "Resets the algorithm.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual bool",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "Process next depth frame.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;_params)",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "KinectFusion implementation.",
    "local": ""
  },
  {
    "origin": "This class implements a 3d reconstruction algorithm described in",
    "local": ""
  },
  {
    "origin": "paper.",
    "local": ""
  },
  {
    "origin": "It takes a sequence of depth images taken from depth sensor (or any depth images source such as stereo camera matching algorithm or even raymarching renderer). The output can be obtained as a vector of points and their normals or can be Phong-rendered from given camera pose.",
    "local": ""
  },
  {
    "origin": "An internal representation of a model is a voxel cuboid that keeps TSDF values which are a sort of distances to the surface (for details read the",
    "local": ""
  },
  {
    "origin": "article about TSDF). There is no interface to that representation yet.",
    "local": ""
  },
  {
    "origin": "uses OpenCL acceleration automatically if available. To enable or disable it explicitly use",
    "local": ""
  },
  {
    "origin": "or",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "This implementation is based on",
    "local": ""
  },
  {
    "origin": "kinfu-remake",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Note that the KinectFusion algorithm was patented and its use may be restricted by the list of patents mentioned in",
    "local": ""
  },
  {
    "origin": "file in this module directory.",
    "local": ""
  },
  {
    "origin": "That's why you need to set the OPENCV_ENABLE_NONFREE option in CMake to use KinectFusion.",
    "local": ""
  },
  {
    "origin": "Constructor &amp; Destructor Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "~KinFu()",
    "local": ""
  },
  {
    "origin": "virtual cv::kinfu::KinFu::~KinFu",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "Member Function Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "create()",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; cv::kinfu::KinFu::create",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "_params",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.kinfu.KinFu_create(",
    "local": ""
  },
  {
    "origin": "_params",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getCloud()",
    "local": ""
  },
  {
    "origin": "virtual void cv::kinfu::KinFu::getCloud",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "points",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "normals",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "points, normals",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.kinfu_KinFu.getCloud(",
    "local": ""
  },
  {
    "origin": "[, points[, normals]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Gets points and normals of current 3d mesh.",
    "local": ""
  },
  {
    "origin": "The order of normals corresponds to order of points. The order of points is undefined.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "points",
    "local": ""
  },
  {
    "origin": "vector of points which are 4-float vectors",
    "local": ""
  },
  {
    "origin": "normals",
    "local": ""
  },
  {
    "origin": "vector of normals which are 4-float vectors",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getNormals()",
    "local": ""
  },
  {
    "origin": "virtual void cv::kinfu::KinFu::getNormals",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "points",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "normals",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "normals",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.kinfu_KinFu.getNormals(",
    "local": ""
  },
  {
    "origin": "points[, normals]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Calculates normals for given points.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "points",
    "local": ""
  },
  {
    "origin": "input vector of points which are 4-float vectors",
    "local": ""
  },
  {
    "origin": "normals",
    "local": ""
  },
  {
    "origin": "output vector of corresponding normals which are 4-float vectors",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getParams()",
    "local": ""
  },
  {
    "origin": "virtual const",
    "local": ""
  },
  {
    "origin": "&amp; cv::kinfu::KinFu::getParams",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Get current parameters.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getPoints()",
    "local": ""
  },
  {
    "origin": "virtual void cv::kinfu::KinFu::getPoints",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "points",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "points",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.kinfu_KinFu.getPoints(",
    "local": ""
  },
  {
    "origin": "[, points]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Gets points of current 3d mesh.",
    "local": ""
  },
  {
    "origin": "The order of points is undefined.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "points",
    "local": ""
  },
  {
    "origin": "vector of points which are 4-float vectors",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getPose()",
    "local": ""
  },
  {
    "origin": "virtual const",
    "local": ""
  },
  {
    "origin": "cv::kinfu::KinFu::getPose",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Get current pose in voxel space.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "render()",
    "local": ""
  },
  {
    "origin": "virtual void cv::kinfu::KinFu::render",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "cameraPose",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.kinfu_KinFu.render(",
    "local": ""
  },
  {
    "origin": "[, image[, cameraPose]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Renders a volume into an image.",
    "local": ""
  },
  {
    "origin": "Renders a 0-surface of TSDF using Phong shading into a CV_8UC4",
    "local": ""
  },
  {
    "origin": ". Light pose is fixed in",
    "local": ""
  },
  {
    "origin": "params.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "resulting image",
    "local": ""
  },
  {
    "origin": "cameraPose",
    "local": ""
  },
  {
    "origin": "pose of camera to render from. If empty then render from current pose which is a last frame camera pose.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "reset()",
    "local": ""
  },
  {
    "origin": "virtual void cv::kinfu::KinFu::reset",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.kinfu_KinFu.reset(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Resets the algorithm.",
    "local": ""
  },
  {
    "origin": "Clears current model and resets a pose.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "update()",
    "local": ""
  },
  {
    "origin": "virtual bool cv::kinfu::KinFu::update",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "depth",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.kinfu_KinFu.update(",
    "local": ""
  },
  {
    "origin": "depth",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Process next depth frame.",
    "local": ""
  },
  {
    "origin": "Integrates depth into voxel space with respect to its ICP-calculated pose. Input image is converted to CV_32F internally if has another type.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "depth",
    "local": ""
  },
  {
    "origin": "one-channel image which size and depth scale is described in algorithm's parameters",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "true if succeeded to align new frame with current scene, false if opposite",
    "local": ""
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": ""
  },
  {
    "origin": "opencv2/rgbd/",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:47 for OpenCV by",
    "local": ""
  }
]