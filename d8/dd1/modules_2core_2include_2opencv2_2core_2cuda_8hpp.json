[
  {
    "origin": "OpenCV: opencv2/core/cuda.hpp File Reference",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Namespaces",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "cuda.hpp File Reference",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "for use with CUDA streams.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class providing functionality for querying the specified GPU properties.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Base storage class for GPU memory with reference counting.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class with reference counting wrapping special memory type allocation functions from CUDA.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "This class encapsulates a queue of asynchronous calls.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Class providing a set of static methods to check what NVIDIA* card architecture the CUDA module was built for.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Namespaces",
    "local": ""
  },
  {
    "origin": "\"black box\" representation of the file storage associated with a file on disk.",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= 13,",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= 20,",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= 21,",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= 30,",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= FEATURE_SET_COMPUTE_11,",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= FEATURE_SET_COMPUTE_12,",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= FEATURE_SET_COMPUTE_13,",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= FEATURE_SET_COMPUTE_30,",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= FEATURE_SET_COMPUTE_35",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "Enumeration providing CUDA computing features.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "(InputArray _src, OutputArray _dst, Stream &amp;stream=Stream::Null())",
    "local": ""
  },
  {
    "origin": "Converts an array to half precision floating number.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int rows, int cols, int type, OutputArray arr)",
    "local": ""
  },
  {
    "origin": "Creates a continuous matrix.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(FeatureSet feature_set)",
    "local": ""
  },
  {
    "origin": "checks whether current device supports the given feature",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int rows, int cols, int type, OutputArray arr)",
    "local": ""
  },
  {
    "origin": "Ensures that the size of a matrix is big enough and the matrix has a proper type.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Returns the number of installed CUDA-enabled devices.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Returns the current device index set by",
    "local": ""
  },
  {
    "origin": "or initialized by default.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int device)",
    "local": ""
  },
  {
    "origin": "(int device)",
    "local": ""
  },
  {
    "origin": "(Mat &amp;m)",
    "local": ""
  },
  {
    "origin": "Page-locks the memory of matrix and maps it for the device(s).",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Explicitly destroys and cleans up all resources associated with the current device in the current process.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int deviceId, size_t stackSize, int stackCount)",
    "local": ""
  },
  {
    "origin": "(bool on)",
    "local": ""
  },
  {
    "origin": "management (must be called before",
    "local": ""
  },
  {
    "origin": "creation)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int device)",
    "local": ""
  },
  {
    "origin": "Sets a device and initializes it for the current thread.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(Mat &amp;m)",
    "local": ""
  },
  {
    "origin": "Unmaps the memory of matrix and makes it pageable again.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:33 for OpenCV by &#160;",
    "local": ""
  }
]