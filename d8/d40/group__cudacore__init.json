[
  {
    "origin": "OpenCV: Initialization and Information",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "Initialization and Information",
    "local": ""
  },
  {
    "origin": "»",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Class providing functionality for querying the specified GPU properties.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Class providing a set of static methods to check what NVIDIA* card architecture the CUDA module was built for.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "= 13,",
    "local": ""
  },
  {
    "origin": "= 20,",
    "local": ""
  },
  {
    "origin": "= 21,",
    "local": ""
  },
  {
    "origin": "= 30,",
    "local": ""
  },
  {
    "origin": "= FEATURE_SET_COMPUTE_11,",
    "local": ""
  },
  {
    "origin": "= FEATURE_SET_COMPUTE_12,",
    "local": ""
  },
  {
    "origin": "= FEATURE_SET_COMPUTE_13,",
    "local": ""
  },
  {
    "origin": "= FEATURE_SET_COMPUTE_30,",
    "local": ""
  },
  {
    "origin": "= FEATURE_SET_COMPUTE_35",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "Enumeration providing CUDA computing features.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "_src,",
    "local": ""
  },
  {
    "origin": "_dst,",
    "local": ""
  },
  {
    "origin": "&amp;stream=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Converts an array to half precision floating number.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "feature_set)",
    "local": ""
  },
  {
    "origin": "checks whether current device supports the given feature",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Returns the number of installed CUDA-enabled devices.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Returns the current device index set by",
    "local": ""
  },
  {
    "origin": "or initialized by default.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(int device)",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(int device)",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Explicitly destroys and cleans up all resources associated with the current device in the current process.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(int device)",
    "local": ""
  },
  {
    "origin": "Sets a device and initializes it for the current thread.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Enumeration Type Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "FeatureSet",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "Enumeration providing CUDA computing features.",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "FEATURE_SET_COMPUTE_10",
    "local": ""
  },
  {
    "origin": "Python: cv.cuda.FEATURE_SET_COMPUTE_10",
    "local": ""
  },
  {
    "origin": "FEATURE_SET_COMPUTE_11",
    "local": ""
  },
  {
    "origin": "Python: cv.cuda.FEATURE_SET_COMPUTE_11",
    "local": ""
  },
  {
    "origin": "FEATURE_SET_COMPUTE_12",
    "local": ""
  },
  {
    "origin": "Python: cv.cuda.FEATURE_SET_COMPUTE_12",
    "local": ""
  },
  {
    "origin": "FEATURE_SET_COMPUTE_13",
    "local": ""
  },
  {
    "origin": "Python: cv.cuda.FEATURE_SET_COMPUTE_13",
    "local": ""
  },
  {
    "origin": "FEATURE_SET_COMPUTE_20",
    "local": ""
  },
  {
    "origin": "Python: cv.cuda.FEATURE_SET_COMPUTE_20",
    "local": ""
  },
  {
    "origin": "FEATURE_SET_COMPUTE_21",
    "local": ""
  },
  {
    "origin": "Python: cv.cuda.FEATURE_SET_COMPUTE_21",
    "local": ""
  },
  {
    "origin": "FEATURE_SET_COMPUTE_30",
    "local": ""
  },
  {
    "origin": "Python: cv.cuda.FEATURE_SET_COMPUTE_30",
    "local": ""
  },
  {
    "origin": "FEATURE_SET_COMPUTE_32",
    "local": ""
  },
  {
    "origin": "Python: cv.cuda.FEATURE_SET_COMPUTE_32",
    "local": ""
  },
  {
    "origin": "FEATURE_SET_COMPUTE_35",
    "local": ""
  },
  {
    "origin": "Python: cv.cuda.FEATURE_SET_COMPUTE_35",
    "local": ""
  },
  {
    "origin": "FEATURE_SET_COMPUTE_50",
    "local": ""
  },
  {
    "origin": "Python: cv.cuda.FEATURE_SET_COMPUTE_50",
    "local": ""
  },
  {
    "origin": "GLOBAL_ATOMICS",
    "local": ""
  },
  {
    "origin": "Python: cv.cuda.GLOBAL_ATOMICS",
    "local": ""
  },
  {
    "origin": "SHARED_ATOMICS",
    "local": ""
  },
  {
    "origin": "Python: cv.cuda.SHARED_ATOMICS",
    "local": ""
  },
  {
    "origin": "NATIVE_DOUBLE",
    "local": ""
  },
  {
    "origin": "Python: cv.cuda.NATIVE_DOUBLE",
    "local": ""
  },
  {
    "origin": "WARP_SHUFFLE_FUNCTIONS",
    "local": ""
  },
  {
    "origin": "Python: cv.cuda.WARP_SHUFFLE_FUNCTIONS",
    "local": ""
  },
  {
    "origin": "DYNAMIC_PARALLELISM",
    "local": ""
  },
  {
    "origin": "Python: cv.cuda.DYNAMIC_PARALLELISM",
    "local": ""
  },
  {
    "origin": "Function Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "convertFp16()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::convertFp16",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "_src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "_dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Converts an array to half precision floating number.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "_src",
    "local": ""
  },
  {
    "origin": "input array.",
    "local": ""
  },
  {
    "origin": "_dst",
    "local": ""
  },
  {
    "origin": "output array.",
    "local": ""
  },
  {
    "origin": "stream",
    "local": ""
  },
  {
    "origin": "for the asynchronous version.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "deviceSupports()",
    "local": ""
  },
  {
    "origin": "bool cv::cuda::deviceSupports",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "feature_set",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "checks whether current device supports the given feature",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getCudaEnabledDeviceCount()",
    "local": ""
  },
  {
    "origin": "int cv::cuda::getCudaEnabledDeviceCount",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cuda.getCudaEnabledDeviceCount(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns the number of installed CUDA-enabled devices.",
    "local": ""
  },
  {
    "origin": "Use this function before any other CUDA functions calls. If OpenCV is compiled without CUDA support, this function returns 0. If the CUDA driver is not installed, or is incompatible, this function returns -1.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "getDevice()",
    "local": ""
  },
  {
    "origin": "int cv::cuda::getDevice",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cuda.getDevice(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns the current device index set by",
    "local": ""
  },
  {
    "origin": "or initialized by default.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "printCudaDeviceInfo()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::printCudaDeviceInfo",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "device",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cuda.printCudaDeviceInfo(",
    "local": ""
  },
  {
    "origin": "device",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "printShortCudaDeviceInfo()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::printShortCudaDeviceInfo",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "device",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cuda.printShortCudaDeviceInfo(",
    "local": ""
  },
  {
    "origin": "device",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "resetDevice()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::resetDevice",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cuda.resetDevice(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Explicitly destroys and cleans up all resources associated with the current device in the current process.",
    "local": ""
  },
  {
    "origin": "Any subsequent API call to this device will reinitialize the device.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "setDevice()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::setDevice",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "device",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cuda.setDevice(",
    "local": ""
  },
  {
    "origin": "device",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Sets a device and initializes it for the current thread.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "device",
    "local": ""
  },
  {
    "origin": "If the call of this function is omitted, a default device is initialized at the fist CUDA usage.",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:40 for OpenCV by",
    "local": ""
  }
]