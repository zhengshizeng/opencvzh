[
  {
    "origin": "OpenCV: cv::freetype::FreeType2 Class Reference",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "List of all members",
    "local": ""
  },
  {
    "origin": "cv::freetype::FreeType2 Class Reference",
    "local": ""
  },
  {
    "origin": "abstract",
    "local": ""
  },
  {
    "origin": "Inheritance diagram for cv::freetype::FreeType2:",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "Calculates the width and height of a text string.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "Load font data.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img, const",
    "local": ""
  },
  {
    "origin": "&amp;text,",
    "local": ""
  },
  {
    "origin": "org, int fontHeight,",
    "local": ""
  },
  {
    "origin": "Draws a text string.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Set Split Number from Bezier-curve to line.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&#160;Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Clears the algorithm state.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Returns true if the",
    "local": ""
  },
  {
    "origin": "is empty (e.g. in the very beginning or after unsuccessful read.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;fn)",
    "local": ""
  },
  {
    "origin": "Reads algorithm parameters from a file storage.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename) const",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;fs) const",
    "local": ""
  },
  {
    "origin": "Stores algorithm parameters in a file storage.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;fs, const",
    "local": ""
  },
  {
    "origin": "&amp;name=",
    "local": ""
  },
  {
    "origin": "()) const",
    "local": ""
  },
  {
    "origin": "simplified API for language bindings This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Additional Inherited Members",
    "local": ""
  },
  {
    "origin": "&#160;Static Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename, const",
    "local": ""
  },
  {
    "origin": "&amp;objname=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Loads algorithm from the file.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;strModel, const",
    "local": ""
  },
  {
    "origin": "&amp;objname=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Loads algorithm from a String.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;fn)",
    "local": ""
  },
  {
    "origin": "Reads algorithm from the file node.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&#160;Protected Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;fs) const",
    "local": ""
  },
  {
    "origin": "Member Function Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "getTextSize()",
    "local": ""
  },
  {
    "origin": "virtual",
    "local": ""
  },
  {
    "origin": "cv::freetype::FreeType2::getTextSize",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "text",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "fontHeight",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "baseLine",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Calculates the width and height of a text string.",
    "local": ""
  },
  {
    "origin": "The function getTextSize calculates and returns the approximate size of a box that contains the specified text. That is, the following code renders some text, the tight box surrounding it, and the baseline: :",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "text",
    "local": ""
  },
  {
    "origin": "Input text string.",
    "local": ""
  },
  {
    "origin": "fontHeight",
    "local": ""
  },
  {
    "origin": "Drawing font size by pixel unit.",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": "Thickness of lines used to render the text. See putText for details.",
    "local": ""
  },
  {
    "origin": "[out]",
    "local": ""
  },
  {
    "origin": "baseLine",
    "local": ""
  },
  {
    "origin": "y-coordinate of the baseline relative to the bottom-most text point.",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "The size of a box that contains the specified text.",
    "local": ""
  },
  {
    "origin": "See also",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "loadFontData()",
    "local": ""
  },
  {
    "origin": "virtual void cv::freetype::FreeType2::loadFontData",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "fontFileName",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "id",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Load font data.",
    "local": ""
  },
  {
    "origin": "The function loadFontData loads font data.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "fontFileName",
    "local": ""
  },
  {
    "origin": "FontFile Name",
    "local": ""
  },
  {
    "origin": "id",
    "local": ""
  },
  {
    "origin": "face_index to select a font faces in a single file.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "putText()",
    "local": ""
  },
  {
    "origin": "virtual void cv::freetype::FreeType2::putText",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "text",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "org",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "fontHeight",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "line_type",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bottomLeftOrigin",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Draws a text string.",
    "local": ""
  },
  {
    "origin": "The function putText renders the specified text string in the image. Symbols that cannot be rendered using the specified font are replaced by \"Tofu\" or non-drawn.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "img",
    "local": ""
  },
  {
    "origin": "Image. (Only 8UC3 image is supported.)",
    "local": ""
  },
  {
    "origin": "text",
    "local": ""
  },
  {
    "origin": "Text string to be drawn.",
    "local": ""
  },
  {
    "origin": "org",
    "local": ""
  },
  {
    "origin": "Bottom-left/Top-left corner of the text string in the image.",
    "local": ""
  },
  {
    "origin": "fontHeight",
    "local": ""
  },
  {
    "origin": "Drawing font size by pixel unit.",
    "local": ""
  },
  {
    "origin": "color",
    "local": ""
  },
  {
    "origin": "Text color.",
    "local": ""
  },
  {
    "origin": "thickness",
    "local": ""
  },
  {
    "origin": "Thickness of the lines used to draw a text when negative, the glyph is filled. Otherwise, the glyph is drawn with this thickness.",
    "local": ""
  },
  {
    "origin": "line_type",
    "local": ""
  },
  {
    "origin": "Line type. See the line for details.",
    "local": ""
  },
  {
    "origin": "bottomLeftOrigin",
    "local": ""
  },
  {
    "origin": "When true, the image data origin is at the bottom-left corner. Otherwise, it is at the top-left corner.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "setSplitNumber()",
    "local": ""
  },
  {
    "origin": "virtual void cv::freetype::FreeType2::setSplitNumber",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "num",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "pure virtual",
    "local": ""
  },
  {
    "origin": "Set Split Number from Bezier-curve to line.",
    "local": ""
  },
  {
    "origin": "The function setSplitNumber set the number of split points from bezier-curve to line. If you want to draw large glyph, large is better. If you want to draw small glyph, small is better.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "num",
    "local": ""
  },
  {
    "origin": "number of split points from bezier-curve to line",
    "local": ""
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": ""
  },
  {
    "origin": "opencv2/",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:47 for OpenCV by &#160;",
    "local": ""
  }
]