[
  {
    "origin": "OpenCV: Hough Line Transform",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Hough Line Transform",
    "local": ""
  },
  {
    "origin": "Prev Tutorial:",
    "local": ""
  },
  {
    "origin": "Next Tutorial:",
    "local": ""
  },
  {
    "origin": "Original author",
    "local": ""
  },
  {
    "origin": "Ana Huam√°n",
    "local": ""
  },
  {
    "origin": "Compatibility",
    "local": ""
  },
  {
    "origin": "OpenCV &gt;= 3.0",
    "local": ""
  },
  {
    "origin": "Goal",
    "local": ""
  },
  {
    "origin": "In this tutorial you will learn how to:",
    "local": ""
  },
  {
    "origin": "Use the OpenCV functions",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "to detect lines in an image.",
    "local": ""
  },
  {
    "origin": "Theory",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "The explanation below belongs to the book",
    "local": ""
  },
  {
    "origin": "Learning OpenCV",
    "local": ""
  },
  {
    "origin": "by Bradski and Kaehler.",
    "local": ""
  },
  {
    "origin": "Hough Line Transform",
    "local": ""
  },
  {
    "origin": "The Hough Line Transform is a transform used to detect straight lines.",
    "local": ""
  },
  {
    "origin": "To apply the Transform, first an edge detection pre-processing is desirable.",
    "local": ""
  },
  {
    "origin": "How does it work?",
    "local": ""
  },
  {
    "origin": "As you know, a line in the image space can be expressed with two variables. For example:",
    "local": ""
  },
  {
    "origin": "In the",
    "local": ""
  },
  {
    "origin": "Cartesian coordinate system:",
    "local": ""
  },
  {
    "origin": "Parameters: \\((m,b)\\).",
    "local": ""
  },
  {
    "origin": "In the",
    "local": ""
  },
  {
    "origin": "Polar coordinate system:",
    "local": ""
  },
  {
    "origin": "Parameters: \\((r,\\theta)\\)",
    "local": ""
  },
  {
    "origin": "For Hough Transforms, we will express lines in the",
    "local": ""
  },
  {
    "origin": "Polar system",
    "local": ""
  },
  {
    "origin": ". Hence, a line equation can be written as:",
    "local": ""
  },
  {
    "origin": "\\[y = \\left ( -\\dfrac{\\cos \\theta}{\\sin \\theta} \\right ) x + \\left ( \\dfrac{r}{\\sin \\theta} \\right )\\]",
    "local": ""
  },
  {
    "origin": "Arranging the terms: \\(r = x \\cos \\theta + y \\sin \\theta\\)",
    "local": ""
  },
  {
    "origin": "In general for each point \\((x_{0}, y_{0})\\), we can define the family of lines that goes through that point as:",
    "local": ""
  },
  {
    "origin": "\\[r_{\\theta} = x_{0} \\cdot \\cos \\theta + y_{0} \\cdot \\sin \\theta\\]",
    "local": ""
  },
  {
    "origin": "Meaning that each pair \\((r_{\\theta},\\theta)\\) represents each line that passes by \\((x_{0}, y_{0})\\).",
    "local": ""
  },
  {
    "origin": "If for a given \\((x_{0}, y_{0})\\) we plot the family of lines that goes through it, we get a sinusoid. For instance, for \\(x_{0} = 8\\) and \\(y_{0} = 6\\) we get the following plot (in a plane \\(\\theta\\) - \\(r\\)):",
    "local": ""
  },
  {
    "origin": "We consider only points such that \\(r &gt; 0\\) and \\(0&lt; \\theta &lt; 2 \\pi\\).",
    "local": ""
  },
  {
    "origin": "We can do the same operation above for all the points in an image. If the curves of two different points intersect in the plane \\(\\theta\\) - \\(r\\), that means that both points belong to a same line. For instance, following with the example above and drawing the plot for two more points: \\(x_{1} = 4\\), \\(y_{1} = 9\\) and \\(x_{2} = 12\\), \\(y_{2} = 3\\), we get:",
    "local": ""
  },
  {
    "origin": "The three plots intersect in one single point \\((0.925, 9.6)\\), these coordinates are the parameters ( \\(\\theta, r\\)) or the line in which \\((x_{0}, y_{0})\\), \\((x_{1}, y_{1})\\) and \\((x_{2}, y_{2})\\) lay.",
    "local": ""
  },
  {
    "origin": "What does all the stuff above mean? It means that in general, a line can be",
    "local": ""
  },
  {
    "origin": "detected",
    "local": ""
  },
  {
    "origin": "by finding the number of intersections between curves.The more curves intersecting means that the line represented by that intersection have more points. In general, we can define a",
    "local": ""
  },
  {
    "origin": "threshold",
    "local": ""
  },
  {
    "origin": "of the minimum number of intersections needed to",
    "local": ""
  },
  {
    "origin": "detect",
    "local": ""
  },
  {
    "origin": "a line.",
    "local": ""
  },
  {
    "origin": "This is what the Hough Line Transform does. It keeps track of the intersection between curves of every point in the image. If the number of intersections is above some",
    "local": ""
  },
  {
    "origin": "threshold",
    "local": ""
  },
  {
    "origin": ", then it declares it as a line with the parameters \\((\\theta, r_{\\theta})\\) of the intersection point.",
    "local": ""
  },
  {
    "origin": "Standard and Probabilistic Hough Line Transform",
    "local": ""
  },
  {
    "origin": "OpenCV implements two kind of Hough Line Transforms:",
    "local": ""
  },
  {
    "origin": "a.",
    "local": ""
  },
  {
    "origin": "The Standard Hough Transform",
    "local": ""
  },
  {
    "origin": "It consists in pretty much what we just explained in the previous section. It gives you as result a vector of couples \\((\\theta, r_{\\theta})\\)",
    "local": ""
  },
  {
    "origin": "In OpenCV it is implemented with the function",
    "local": ""
  },
  {
    "origin": "b.",
    "local": ""
  },
  {
    "origin": "The Probabilistic Hough Line Transform",
    "local": ""
  },
  {
    "origin": "A more efficient implementation of the Hough Line Transform. It gives as output the extremes of the detected lines \\((x_{0}, y_{0}, x_{1}, y_{1})\\)",
    "local": ""
  },
  {
    "origin": "In OpenCV it is implemented with the function",
    "local": ""
  },
  {
    "origin": "What does this program do?",
    "local": ""
  },
  {
    "origin": "Loads an image",
    "local": ""
  },
  {
    "origin": "Applies a",
    "local": ""
  },
  {
    "origin": "Standard Hough Line Transform",
    "local": ""
  },
  {
    "origin": "and a",
    "local": ""
  },
  {
    "origin": "Probabilistic Line Transform",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Display the original image and the detected line in three windows.",
    "local": ""
  },
  {
    "origin": "Code",
    "local": ""
  },
  {
    "origin": "C++",
    "local": ""
  },
  {
    "origin": "The sample code that we will explain can be downloaded from",
    "local": ""
  },
  {
    "origin": "here",
    "local": ""
  },
  {
    "origin": ". A slightly fancier version (which shows both Hough standard and probabilistic with trackbars for changing the threshold values) can be found",
    "local": ""
  },
  {
    "origin": "here",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Java",
    "local": ""
  },
  {
    "origin": "The sample code that we will explain can be downloaded from",
    "local": ""
  },
  {
    "origin": "here",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Python",
    "local": ""
  },
  {
    "origin": "The sample code that we will explain can be downloaded from",
    "local": ""
  },
  {
    "origin": "here",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Explanation",
    "local": ""
  },
  {
    "origin": "Load an image:",
    "local": ""
  },
  {
    "origin": "C++",
    "local": ""
  },
  {
    "origin": "Java",
    "local": ""
  },
  {
    "origin": "Python",
    "local": ""
  },
  {
    "origin": "Detect the edges of the image by using a Canny detector:",
    "local": ""
  },
  {
    "origin": "C++",
    "local": ""
  },
  {
    "origin": "Java",
    "local": ""
  },
  {
    "origin": "Python",
    "local": ""
  },
  {
    "origin": "Now we will apply the Hough Line Transform. We will explain how to use both OpenCV functions available for this purpose.",
    "local": ""
  },
  {
    "origin": "Standard Hough Line Transform:",
    "local": ""
  },
  {
    "origin": "First, you apply the Transform:",
    "local": ""
  },
  {
    "origin": "C++",
    "local": ""
  },
  {
    "origin": "Java",
    "local": ""
  },
  {
    "origin": "Python",
    "local": ""
  },
  {
    "origin": "with the following arguments:",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ": Output of the edge detector. It should be a grayscale image (although in fact it is a binary one)",
    "local": ""
  },
  {
    "origin": "lines",
    "local": ""
  },
  {
    "origin": ": A vector that will store the parameters \\((r,\\theta)\\) of the detected lines",
    "local": ""
  },
  {
    "origin": "rho",
    "local": ""
  },
  {
    "origin": ": The resolution of the parameter \\(r\\) in pixels. We use",
    "local": ""
  },
  {
    "origin": "pixel.",
    "local": ""
  },
  {
    "origin": "theta",
    "local": ""
  },
  {
    "origin": ": The resolution of the parameter \\(\\theta\\) in radians. We use",
    "local": ""
  },
  {
    "origin": "1 degree",
    "local": ""
  },
  {
    "origin": "(CV_PI/180)",
    "local": ""
  },
  {
    "origin": "threshold",
    "local": ""
  },
  {
    "origin": ": The minimum number of intersections to \"*detect*\" a line",
    "local": ""
  },
  {
    "origin": "srn",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "stn",
    "local": ""
  },
  {
    "origin": ": Default parameters to zero. Check OpenCV reference for more info.",
    "local": ""
  },
  {
    "origin": "And then you display the result by drawing the lines.",
    "local": ""
  },
  {
    "origin": "C++",
    "local": ""
  },
  {
    "origin": "Java",
    "local": ""
  },
  {
    "origin": "Python",
    "local": ""
  },
  {
    "origin": "Probabilistic Hough Line Transform",
    "local": ""
  },
  {
    "origin": "First you apply the transform:",
    "local": ""
  },
  {
    "origin": "C++",
    "local": ""
  },
  {
    "origin": "Java",
    "local": ""
  },
  {
    "origin": "Python",
    "local": ""
  },
  {
    "origin": "with the arguments:",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ": Output of the edge detector. It should be a grayscale image (although in fact it is a binary one)",
    "local": ""
  },
  {
    "origin": "lines",
    "local": ""
  },
  {
    "origin": ": A vector that will store the parameters \\((x_{start}, y_{start}, x_{end}, y_{end})\\) of the detected lines",
    "local": ""
  },
  {
    "origin": "rho",
    "local": ""
  },
  {
    "origin": ": The resolution of the parameter \\(r\\) in pixels. We use",
    "local": ""
  },
  {
    "origin": "pixel.",
    "local": ""
  },
  {
    "origin": "theta",
    "local": ""
  },
  {
    "origin": ": The resolution of the parameter \\(\\theta\\) in radians. We use",
    "local": ""
  },
  {
    "origin": "1 degree",
    "local": ""
  },
  {
    "origin": "(CV_PI/180)",
    "local": ""
  },
  {
    "origin": "threshold",
    "local": ""
  },
  {
    "origin": ": The minimum number of intersections to \"*detect*\" a line",
    "local": ""
  },
  {
    "origin": "minLineLength",
    "local": ""
  },
  {
    "origin": ": The minimum number of points that can form a line. Lines with less than this number of points are disregarded.",
    "local": ""
  },
  {
    "origin": "maxLineGap",
    "local": ""
  },
  {
    "origin": ": The maximum gap between two points to be considered in the same line.",
    "local": ""
  },
  {
    "origin": "And then you display the result by drawing the lines.",
    "local": ""
  },
  {
    "origin": "C++",
    "local": ""
  },
  {
    "origin": "Java",
    "local": ""
  },
  {
    "origin": "Python",
    "local": ""
  },
  {
    "origin": "Display the original image and the detected lines:",
    "local": ""
  },
  {
    "origin": "C++",
    "local": ""
  },
  {
    "origin": "Java",
    "local": ""
  },
  {
    "origin": "Python",
    "local": ""
  },
  {
    "origin": "Wait until the user exits the program",
    "local": ""
  },
  {
    "origin": "C++",
    "local": ""
  },
  {
    "origin": "Java",
    "local": ""
  },
  {
    "origin": "Python",
    "local": ""
  },
  {
    "origin": "Result",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "The results below are obtained using the slightly fancier version we mentioned in the",
    "local": ""
  },
  {
    "origin": "Code",
    "local": ""
  },
  {
    "origin": "section. It still implements the same stuff as above, only adding the Trackbar for the Threshold.",
    "local": ""
  },
  {
    "origin": "Using an input image such as a",
    "local": ""
  },
  {
    "origin": "sudoku image",
    "local": ""
  },
  {
    "origin": ". We get the following result by using the Standard Hough Line Transform:",
    "local": ""
  },
  {
    "origin": "And by using the Probabilistic Hough Line Transform:",
    "local": ""
  },
  {
    "origin": "You may observe that the number of lines detected vary while you change the",
    "local": ""
  },
  {
    "origin": "threshold",
    "local": ""
  },
  {
    "origin": ". The explanation is sort of evident: If you establish a higher threshold, fewer lines will be detected (since you will need more points to declare a line detected).",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:35 for OpenCV by &#160;",
    "local": ""
  }
]