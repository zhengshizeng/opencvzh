[
  {
    "origin": "OpenCV: Data Structures",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "Data Structures",
    "local": ""
  },
  {
    "origin": "»",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "for use with CUDA streams.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "struct",
    "local": ""
  },
  {
    "origin": "Class that enables getting cudaEvent_t from",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "struct",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Base storage class for GPU memory with reference counting.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Class with reference counting wrapping special memory type allocation functions from CUDA.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "This class encapsulates a queue of asynchronous calls.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "struct",
    "local": ""
  },
  {
    "origin": "Class that enables getting cudaStream_t from",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(int rows, int cols, int type,",
    "local": ""
  },
  {
    "origin": "arr)",
    "local": ""
  },
  {
    "origin": "Creates a continuous matrix.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(int rows, int cols, int type,",
    "local": ""
  },
  {
    "origin": "arr)",
    "local": ""
  },
  {
    "origin": "Ensures that the size of a matrix is big enough and the matrix has a proper type.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;m)",
    "local": ""
  },
  {
    "origin": "Page-locks the memory of matrix and maps it for the device(s).",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(int deviceId, size_t stackSize, int stackCount)",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(bool on)",
    "local": ""
  },
  {
    "origin": "management (must be called before",
    "local": ""
  },
  {
    "origin": "creation)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;m)",
    "local": ""
  },
  {
    "origin": "Unmaps the memory of matrix and makes it pageable again.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Function Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "createContinuous()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::createContinuous",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "rows",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "cols",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "type",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "arr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "arr",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cuda.createContinuous(",
    "local": ""
  },
  {
    "origin": "rows, cols, type[, arr]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Creates a continuous matrix.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "rows",
    "local": ""
  },
  {
    "origin": "Row count.",
    "local": ""
  },
  {
    "origin": "cols",
    "local": ""
  },
  {
    "origin": "Column count.",
    "local": ""
  },
  {
    "origin": "type",
    "local": ""
  },
  {
    "origin": "Type of the matrix.",
    "local": ""
  },
  {
    "origin": "arr",
    "local": ""
  },
  {
    "origin": "Destination matrix. This parameter changes only if it has a proper type and area ( \\(\\texttt{rows} \\times \\texttt{cols}\\) ).",
    "local": ""
  },
  {
    "origin": "Matrix is called continuous if its elements are stored continuously, that is, without gaps at the end of each row.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "ensureSizeIsEnough()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::ensureSizeIsEnough",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "rows",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "cols",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "type",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "arr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "arr",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cuda.ensureSizeIsEnough(",
    "local": ""
  },
  {
    "origin": "rows, cols, type[, arr]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Ensures that the size of a matrix is big enough and the matrix has a proper type.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "rows",
    "local": ""
  },
  {
    "origin": "Minimum desired number of rows.",
    "local": ""
  },
  {
    "origin": "cols",
    "local": ""
  },
  {
    "origin": "Minimum desired number of columns.",
    "local": ""
  },
  {
    "origin": "type",
    "local": ""
  },
  {
    "origin": "Desired matrix type.",
    "local": ""
  },
  {
    "origin": "arr",
    "local": ""
  },
  {
    "origin": "Destination matrix.",
    "local": ""
  },
  {
    "origin": "The function does not reallocate memory if the matrix has proper attributes already.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "registerPageLocked()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::registerPageLocked",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cuda.registerPageLocked(",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Page-locks the memory of matrix and maps it for the device(s).",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": "Input matrix.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "setBufferPoolConfig()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::setBufferPoolConfig",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "deviceId",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "size_t",
    "local": ""
  },
  {
    "origin": "stackSize",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "stackCount",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cuda.setBufferPoolConfig(",
    "local": ""
  },
  {
    "origin": "deviceId, stackSize, stackCount",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "setBufferPoolUsage()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::setBufferPoolUsage",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "on",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cuda.setBufferPoolUsage(",
    "local": ""
  },
  {
    "origin": "on",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "management (must be called before",
    "local": ""
  },
  {
    "origin": "creation)",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "unregisterPageLocked()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::unregisterPageLocked",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cuda.unregisterPageLocked(",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Unmaps the memory of matrix and makes it pageable again.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": "Input matrix.",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:40 for OpenCV by",
    "local": ""
  }
]