[
  {
    "origin": "OpenCV: cv::cuda::Stream Class Reference",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Public Types",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions",
    "local": ""
  },
  {
    "origin": "Friends",
    "local": ""
  },
  {
    "origin": "List of all members",
    "local": ""
  },
  {
    "origin": "cv::cuda::Stream Class Reference",
    "local": ""
  },
  {
    "origin": "»",
    "local": ""
  },
  {
    "origin": "»",
    "local": ""
  },
  {
    "origin": "This class encapsulates a queue of asynchronous calls.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Public Types",
    "local": ""
  },
  {
    "origin": "typedef void(*",
    "local": ""
  },
  {
    "origin": ") (int status, void *userData)",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "creates a new asynchronous stream",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;allocator)",
    "local": ""
  },
  {
    "origin": "creates a new asynchronous stream with custom allocator",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const size_t cudaFlags)",
    "local": ""
  },
  {
    "origin": "creates a new",
    "local": ""
  },
  {
    "origin": "using the cudaFlags argument to determine the behaviors of the stream",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void *",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "return Pointer to CUDA stream",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "callback, void *userData)",
    "local": ""
  },
  {
    "origin": "Adds a callback to be called on the host after all currently enqueued items in the stream have completed.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "returns true if stream object is not default (!= 0)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Returns true if the current stream queue is finished. Otherwise, it returns false.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;event)",
    "local": ""
  },
  {
    "origin": "Makes a compute stream wait on an event.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Blocks the current CPU thread until all operations in the stream are complete.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "return",
    "local": ""
  },
  {
    "origin": "object for default CUDA stream",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Friends",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "struct",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "This class encapsulates a queue of asynchronous calls.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Currently, you may face problems if an operation is enqueued twice with different data. Some functions use the constant GPU memory, and next call may update the memory before the previous one has been finished. But calling different operations asynchronously is safe because each operation has its own constant buffer. Memory copy/upload/download/set operations to the buffers you hold are also safe.",
    "local": ""
  },
  {
    "origin": "The",
    "local": ""
  },
  {
    "origin": "class is not thread-safe. Please use different",
    "local": ""
  },
  {
    "origin": "objects for different CPU threads.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "By default all CUDA routines are launched in",
    "local": ""
  },
  {
    "origin": "object, if the stream is not specified by user. In multi-threading environment the stream objects must be passed explicitly (see previous note).",
    "local": ""
  },
  {
    "origin": "Member Typedef Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "StreamCallback",
    "local": ""
  },
  {
    "origin": "typedef void(* cv::cuda::Stream::StreamCallback) (int status, void *userData)",
    "local": ""
  },
  {
    "origin": "Constructor &amp; Destructor Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "Stream()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "cv::cuda::Stream::Stream",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "&lt;cuda_Stream object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cuda_Stream(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;cuda_Stream object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cuda_Stream(",
    "local": ""
  },
  {
    "origin": "allocator",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;cuda_Stream object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cuda_Stream(",
    "local": ""
  },
  {
    "origin": "cudaFlags",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "creates a new asynchronous stream",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "Stream()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "cv::cuda::Stream::Stream",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;",
    "local": ""
  },
  {
    "origin": "allocator",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "&lt;cuda_Stream object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cuda_Stream(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;cuda_Stream object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cuda_Stream(",
    "local": ""
  },
  {
    "origin": "allocator",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;cuda_Stream object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cuda_Stream(",
    "local": ""
  },
  {
    "origin": "cudaFlags",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "creates a new asynchronous stream with custom allocator",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "Stream()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "cv::cuda::Stream::Stream",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const size_t",
    "local": ""
  },
  {
    "origin": "cudaFlags",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "&lt;cuda_Stream object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cuda_Stream(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;cuda_Stream object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cuda_Stream(",
    "local": ""
  },
  {
    "origin": "allocator",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&lt;cuda_Stream object&gt;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cuda_Stream(",
    "local": ""
  },
  {
    "origin": "cudaFlags",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "creates a new",
    "local": ""
  },
  {
    "origin": "using the cudaFlags argument to determine the behaviors of the stream",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "The cudaFlags parameter is passed to the underlying api cudaStreamCreateWithFlags() and supports the same parameter values.",
    "local": ""
  },
  {
    "origin": "Member Function Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "cudaPtr()",
    "local": ""
  },
  {
    "origin": "void* cv::cuda::Stream::cudaPtr",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cuda_Stream.cudaPtr(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "return Pointer to CUDA stream",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "enqueueHostCallback()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::Stream::enqueueHostCallback",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "callback",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "void *",
    "local": ""
  },
  {
    "origin": "userData",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Adds a callback to be called on the host after all currently enqueued items in the stream have completed.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Callbacks must not make any CUDA API calls. Callbacks must not perform any synchronization that may depend on outstanding device work or other callbacks that are not mandated to run earlier. Callbacks without a mandated order (in independent streams) execute in undefined order and may be serialized.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "Null()",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&amp; cv::cuda::Stream::Null",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cuda.Stream_Null(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "return",
    "local": ""
  },
  {
    "origin": "object for default CUDA stream",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "operator bool_type()",
    "local": ""
  },
  {
    "origin": "cv::cuda::Stream::operator bool_type",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns true if stream object is not default (!= 0)",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "queryIfComplete()",
    "local": ""
  },
  {
    "origin": "bool cv::cuda::Stream::queryIfComplete",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cuda_Stream.queryIfComplete(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns true if the current stream queue is finished. Otherwise, it returns false.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "waitEvent()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::Stream::waitEvent",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "event",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cuda_Stream.waitEvent(",
    "local": ""
  },
  {
    "origin": "event",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Makes a compute stream wait on an event.",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "waitForCompletion()",
    "local": ""
  },
  {
    "origin": "void cv::cuda::Stream::waitForCompletion",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "None",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.cuda_Stream.waitForCompletion(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Blocks the current CPU thread until all operations in the stream are complete.",
    "local": ""
  },
  {
    "origin": "Friends And Related Function Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "BufferPool",
    "local": ""
  },
  {
    "origin": "friend class",
    "local": ""
  },
  {
    "origin": "friend",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "DefaultDeviceInitializer",
    "local": ""
  },
  {
    "origin": "friend class DefaultDeviceInitializer",
    "local": ""
  },
  {
    "origin": "friend",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "StreamAccessor",
    "local": ""
  },
  {
    "origin": "friend struct",
    "local": ""
  },
  {
    "origin": "friend",
    "local": ""
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": ""
  },
  {
    "origin": "opencv2/core/",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:44 for OpenCV by",
    "local": ""
  }
]