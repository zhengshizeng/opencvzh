[
  {
    "origin": "OpenCV: cv::dnn Namespace Reference",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Namespaces",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Typedefs",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "cv::dnn Namespace Reference",
    "local": ""
  },
  {
    "origin": "Namespaces",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Derivatives of this class encapsulates functions of certain backends.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Derivatives of this class wraps",
    "local": ""
  },
  {
    "origin": "for different backends and targets.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "This class represents high-level API for classification models.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "This class represents high-level API for object detection networks.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Detection output layer.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "This class implements name-value dictionary, values are instances of",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "This struct stores the scalar value (or array) of one of the following type: double,",
    "local": ""
  },
  {
    "origin": "or int64.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Element wise operation on inputs.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Bilinear resize layer from",
    "local": ""
  },
  {
    "origin": "https://github.com/cdmh/deeplab-public-ver2",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "This class represents high-level API for keypoints models.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "This interface class allows to build new Layers - are building blocks of networks.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Layer factory allows to create instances of registered layers.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "This class provides all data needed to initialize layer.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "LSTM recurrent layer.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "This class is presented high-level API for neural networks.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "This class allows to create and manipulate comprehensive artificial neural networks.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "\\( L_p \\) - normalization layer.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Adds extra values for specific axes.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Resize input 4-dimensional blob by nearest neighbor or bilinear strategy.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Classical recurrent layer.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "This class represents high-level API for segmentation models.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Base class for text detection networks.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "This class represents high-level API for text detection DL networks compatible with DB model.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "This class represents high-level API for text detection DL networks compatible with EAST model.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "This class represents high-level API for text recognition networks.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Typedefs",
    "local": ""
  },
  {
    "origin": "typedef std::map&lt; std::string, std::vector&lt;",
    "local": ""
  },
  {
    "origin": "Register layer types of DNN model.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "Enum of computation backends supported by layers.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "Enum of target devices for computations.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image, double scalefactor=1.0, const",
    "local": ""
  },
  {
    "origin": "&amp;size=",
    "local": ""
  },
  {
    "origin": "(), const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "(), bool swapRB=false, bool crop=false, int ddepth=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Creates 4-dimensional blob from image. Optionally resizes and crops",
    "local": ""
  },
  {
    "origin": "from center, subtract",
    "local": ""
  },
  {
    "origin": "values, scales values by",
    "local": ""
  },
  {
    "origin": ", swap Blue and Red channels.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image,",
    "local": ""
  },
  {
    "origin": "blob, double scalefactor=1.0, const",
    "local": ""
  },
  {
    "origin": "&amp;size=",
    "local": ""
  },
  {
    "origin": "(), const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "(), bool swapRB=false, bool crop=false, int ddepth=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Creates 4-dimensional blob from image.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "images, double scalefactor=1.0,",
    "local": ""
  },
  {
    "origin": "size=",
    "local": ""
  },
  {
    "origin": "(), const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "(), bool swapRB=false, bool crop=false, int ddepth=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Creates 4-dimensional blob from series of images. Optionally resizes and crops",
    "local": ""
  },
  {
    "origin": "from center, subtract",
    "local": ""
  },
  {
    "origin": "values, scales values by",
    "local": ""
  },
  {
    "origin": ", swap Blue and Red channels.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "images,",
    "local": ""
  },
  {
    "origin": "blob, double scalefactor=1.0,",
    "local": ""
  },
  {
    "origin": "size=",
    "local": ""
  },
  {
    "origin": "(), const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "(), bool swapRB=false, bool crop=false, int ddepth=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Creates 4-dimensional blob from series of images.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;a, const",
    "local": ""
  },
  {
    "origin": "&amp;b)",
    "local": ""
  },
  {
    "origin": "(bool isDiagnosticsMode)",
    "local": ""
  },
  {
    "origin": "Enables detailed logging of the DNN model loading with CV DNN API.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "std::vector&lt; std::pair&lt;",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "std::vector&lt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "be)",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Returns Inference Engine internal backend API.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Returns Inference Engine CPU type.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Returns Inference Engine VPU type.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;m, int n, int cn)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;blob_,",
    "local": ""
  },
  {
    "origin": "images_)",
    "local": ""
  },
  {
    "origin": "Parse a 4D blob and output the images it contains as 2D arrays through a simpler data structure (std::vector&lt;cv::Mat&gt;).",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;inputShape, int startPos, int endPos)",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;bboxes, const std::vector&lt; float &gt; &amp;scores, const float score_threshold, const float nms_threshold, std::vector&lt; int &gt; &amp;indices, const float eta=1.f, const int top_k=0)",
    "local": ""
  },
  {
    "origin": "Performs non maximum suppression given boxes and corresponding scores.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;bboxes, const std::vector&lt; float &gt; &amp;scores, const float score_threshold, const float nms_threshold, std::vector&lt; int &gt; &amp;indices, const float eta=1.f, const int top_k=0)",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;bboxes, const std::vector&lt; float &gt; &amp;scores, const float score_threshold, const float nms_threshold, std::vector&lt; int &gt; &amp;indices, const float eta=1.f, const int top_k=0)",
    "local": ""
  },
  {
    "origin": "(int axis, int dims)",
    "local": ""
  },
  {
    "origin": "Converts axis from",
    "local": ""
  },
  {
    "origin": "(similar to Python's slice notation) to",
    "local": ""
  },
  {
    "origin": "range.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int axis, const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;r, int axisSize)",
    "local": ""
  },
  {
    "origin": "(std::ostream &amp;out, const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ", const",
    "local": ""
  },
  {
    "origin": "&amp;name=&quot;&quot;)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;model, const",
    "local": ""
  },
  {
    "origin": "&amp;config=&quot;&quot;, const",
    "local": ""
  },
  {
    "origin": "&amp;framework=&quot;&quot;)",
    "local": ""
  },
  {
    "origin": "Read deep learning network represented in one of the supported formats.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;framework, const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;bufferModel, const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;bufferConfig=std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt;())",
    "local": ""
  },
  {
    "origin": "Read deep learning network represented in one of the supported formats.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;prototxt, const",
    "local": ""
  },
  {
    "origin": "&amp;caffeModel=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Reads a network model stored in",
    "local": ""
  },
  {
    "origin": "Caffe",
    "local": ""
  },
  {
    "origin": "framework's format.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;bufferProto, const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;bufferModel=std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt;())",
    "local": ""
  },
  {
    "origin": "Reads a network model stored in Caffe model in memory.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const char *bufferProto, size_t lenProto, const char *bufferModel=NULL, size_t lenModel=0)",
    "local": ""
  },
  {
    "origin": "Reads a network model stored in Caffe model in memory.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;cfgFile, const",
    "local": ""
  },
  {
    "origin": "&amp;darknetModel=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Reads a network model stored in",
    "local": ""
  },
  {
    "origin": "Darknet",
    "local": ""
  },
  {
    "origin": "model files.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;bufferCfg, const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;bufferModel=std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt;())",
    "local": ""
  },
  {
    "origin": "Reads a network model stored in",
    "local": ""
  },
  {
    "origin": "Darknet",
    "local": ""
  },
  {
    "origin": "model files.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const char *bufferCfg, size_t lenCfg, const char *bufferModel=NULL, size_t lenModel=0)",
    "local": ""
  },
  {
    "origin": "Reads a network model stored in",
    "local": ""
  },
  {
    "origin": "Darknet",
    "local": ""
  },
  {
    "origin": "model files.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;xml, const",
    "local": ""
  },
  {
    "origin": "&amp;bin)",
    "local": ""
  },
  {
    "origin": "Load a network from Intel's",
    "local": ""
  },
  {
    "origin": "Optimizer intermediate representation.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;bufferModelConfig, const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;bufferWeights)",
    "local": ""
  },
  {
    "origin": "Load a network from Intel's",
    "local": ""
  },
  {
    "origin": "Optimizer intermediate representation.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*bufferModelConfigPtr, size_t bufferModelConfigSize, const",
    "local": ""
  },
  {
    "origin": "*bufferWeightsPtr, size_t bufferWeightsSize)",
    "local": ""
  },
  {
    "origin": "Load a network from Intel's",
    "local": ""
  },
  {
    "origin": "Optimizer intermediate representation.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;onnxFile)",
    "local": ""
  },
  {
    "origin": "Reads a network model",
    "local": ""
  },
  {
    "origin": "ONNX",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const char *buffer, size_t sizeBuffer)",
    "local": ""
  },
  {
    "origin": "Reads a network model from",
    "local": ""
  },
  {
    "origin": "ONNX",
    "local": ""
  },
  {
    "origin": "in-memory buffer.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;buffer)",
    "local": ""
  },
  {
    "origin": "Reads a network model from",
    "local": ""
  },
  {
    "origin": "ONNX",
    "local": ""
  },
  {
    "origin": "in-memory buffer.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;model, const",
    "local": ""
  },
  {
    "origin": "&amp;config=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Reads a network model stored in",
    "local": ""
  },
  {
    "origin": "TensorFlow",
    "local": ""
  },
  {
    "origin": "framework's format.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;bufferModel, const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;bufferConfig=std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt;())",
    "local": ""
  },
  {
    "origin": "Reads a network model stored in",
    "local": ""
  },
  {
    "origin": "TensorFlow",
    "local": ""
  },
  {
    "origin": "framework's format.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const char *bufferModel, size_t lenModel, const char *bufferConfig=NULL, size_t lenConfig=0)",
    "local": ""
  },
  {
    "origin": "Reads a network model stored in",
    "local": ""
  },
  {
    "origin": "TensorFlow",
    "local": ""
  },
  {
    "origin": "framework's format.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;model, bool isBinary=true, bool evaluate=true)",
    "local": ""
  },
  {
    "origin": "Reads a network model stored in",
    "local": ""
  },
  {
    "origin": "Torch7",
    "local": ""
  },
  {
    "origin": "framework's format.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;path)",
    "local": ""
  },
  {
    "origin": "Creates blob from .pb file.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;filename, bool isBinary=true)",
    "local": ""
  },
  {
    "origin": "Loads blob which was serialized as torch.Tensor object of Torch7 framework.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Release a HDDL plugin.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Release a Myriad device (binded by OpenCV).",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;newBackendType)",
    "local": ""
  },
  {
    "origin": "Specify Inference Engine internal backend API.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const int *dims, const int n)",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;mat)",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;sz)",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;mat)",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(int a0, int a1=-1, int a2=-1, int a3=-1)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;src, const",
    "local": ""
  },
  {
    "origin": "&amp;dst, const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;layersTypes=std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt;())",
    "local": ""
  },
  {
    "origin": "Convert all weights of Caffe network to half precision floating point.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;m, const",
    "local": ""
  },
  {
    "origin": "&amp;r0)",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;m, const",
    "local": ""
  },
  {
    "origin": "&amp;r0, const",
    "local": ""
  },
  {
    "origin": "&amp;r1)",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;m, const",
    "local": ""
  },
  {
    "origin": "&amp;r0, const",
    "local": ""
  },
  {
    "origin": "&amp;r1, const",
    "local": ""
  },
  {
    "origin": "&amp;r2)",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;m, const",
    "local": ""
  },
  {
    "origin": "&amp;r0, const",
    "local": ""
  },
  {
    "origin": "&amp;r1, const",
    "local": ""
  },
  {
    "origin": "&amp;r2, const",
    "local": ""
  },
  {
    "origin": "&amp;r3)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ", const",
    "local": ""
  },
  {
    "origin": "&amp;name=&quot;&quot;)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ", int start=-1, int end=-1)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;model, const",
    "local": ""
  },
  {
    "origin": "&amp;output)",
    "local": ""
  },
  {
    "origin": "Create a text representation for a binary network stored in protocol buffer format.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Function Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "concat()",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::dnn::concat",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "getInferenceEngineBackendType()",
    "local": ""
  },
  {
    "origin": "cv::dnn::getInferenceEngineBackendType",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns Inference Engine internal backend API.",
    "local": ""
  },
  {
    "origin": "See values of",
    "local": ""
  },
  {
    "origin": "macros.",
    "local": ""
  },
  {
    "origin": "Default value is controlled through",
    "local": ""
  },
  {
    "origin": "runtime parameter (environment variable).",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "getInferenceEngineCPUType()",
    "local": ""
  },
  {
    "origin": "cv::dnn::getInferenceEngineCPUType",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns Inference Engine CPU type.",
    "local": ""
  },
  {
    "origin": "Specify OpenVINO plugin: CPU or ARM.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "getInferenceEngineVPUType()",
    "local": ""
  },
  {
    "origin": "cv::dnn::getInferenceEngineVPUType",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns Inference Engine VPU type.",
    "local": ""
  },
  {
    "origin": "See values of",
    "local": ""
  },
  {
    "origin": "macros.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "getPlane()",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::dnn::getPlane",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "cn",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "isAllOnes()",
    "local": ""
  },
  {
    "origin": "static bool cv::dnn::isAllOnes",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "inputShape",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "startPos",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "endPos",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "normalize_axis()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "static int cv::dnn::normalize_axis",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "axis",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dims",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Converts axis from",
    "local": ""
  },
  {
    "origin": "(similar to Python's slice notation) to",
    "local": ""
  },
  {
    "origin": "range.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "normalize_axis()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "static int cv::dnn::normalize_axis",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "axis",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "shape",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "normalize_axis_range()",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::dnn::normalize_axis_range",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "r",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "axisSize",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator",
    "local": ""
  },
  {
    "origin": "<",
    "local": ""
  },
  {
    "origin": "static std::ostream&amp; cv::dnn::operator&lt;&lt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "out",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "shape",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "print()",
    "local": ""
  },
  {
    "origin": "static void cv::dnn::print",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "shape",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "name",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "releaseHDDLPlugin()",
    "local": ""
  },
  {
    "origin": "void cv::dnn::releaseHDDLPlugin",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Release a HDDL plugin.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "resetMyriadDevice()",
    "local": ""
  },
  {
    "origin": "void cv::dnn::resetMyriadDevice",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Release a Myriad device (binded by OpenCV).",
    "local": ""
  },
  {
    "origin": "Single Myriad device cannot be shared across multiple processes which uses Inference Engine's Myriad plugin.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "setInferenceEngineBackendType()",
    "local": ""
  },
  {
    "origin": "cv::dnn::setInferenceEngineBackendType",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "newBackendType",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Specify Inference Engine internal backend API.",
    "local": ""
  },
  {
    "origin": "See values of",
    "local": ""
  },
  {
    "origin": "macros.",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "previous value of internal backend API",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "shape()",
    "local": ""
  },
  {
    "origin": "[1/5]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::dnn::shape",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "dims",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "shape()",
    "local": ""
  },
  {
    "origin": "[2/5]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::dnn::shape",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "mat",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "shape()",
    "local": ""
  },
  {
    "origin": "[3/5]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::dnn::shape",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "sz",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "shape()",
    "local": ""
  },
  {
    "origin": "[4/5]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::dnn::shape",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "mat",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "shape()",
    "local": ""
  },
  {
    "origin": "[5/5]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::dnn::shape",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "a1",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "a2",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "a3",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "slice()",
    "local": ""
  },
  {
    "origin": "[1/4]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::dnn::slice",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "r0",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "slice()",
    "local": ""
  },
  {
    "origin": "[2/4]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::dnn::slice",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "r0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "r1",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "slice()",
    "local": ""
  },
  {
    "origin": "[3/4]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::dnn::slice",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "r0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "r1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "r2",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "slice()",
    "local": ""
  },
  {
    "origin": "[4/4]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "cv::dnn::slice",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "r0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "r1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "r2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "r3",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "toString()",
    "local": ""
  },
  {
    "origin": "static std::string cv::dnn::toString",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "shape",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "name",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "total()",
    "local": ""
  },
  {
    "origin": "static int cv::dnn::total",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "shape",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "start",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "end",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:47 for OpenCV by &#160;",
    "local": ""
  }
]