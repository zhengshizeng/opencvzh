[
  {
    "origin": "OpenCV: Seamless Cloning",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "Seamless Cloning",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "seamlessClone algorithm flags",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "mask,",
    "local": ""
  },
  {
    "origin": "dst, float red_mul=1.0f, float green_mul=1.0f, float blue_mul=1.0f)",
    "local": ""
  },
  {
    "origin": "Given an original color image, two differently colored versions of this image can be mixed seamlessly.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "mask,",
    "local": ""
  },
  {
    "origin": "dst, float alpha=0.2f, float beta=0.4f)",
    "local": ""
  },
  {
    "origin": "Applying an appropriate non-linear transformation to the gradient field inside the selection and then integrating back with a Poisson solver, modifies locally the apparent illumination of an image.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "dst,",
    "local": ""
  },
  {
    "origin": "mask,",
    "local": ""
  },
  {
    "origin": "p,",
    "local": ""
  },
  {
    "origin": "blend, int flags)",
    "local": ""
  },
  {
    "origin": "Image editing tasks concern either global changes (color/intensity corrections, filters, deformations) or local changes concerned to a selection. Here we are interested in achieving local changes, ones that are restricted to a region manually selected (ROI), in a seamless and effortless manner. The extent of the changes ranges from slight distortions to complete replacement by novel content",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src,",
    "local": ""
  },
  {
    "origin": "mask,",
    "local": ""
  },
  {
    "origin": "dst, float low_threshold=30, float high_threshold=45, int kernel_size=3)",
    "local": ""
  },
  {
    "origin": "By retaining only the gradients at edge locations, before integrating with the Poisson solver, one washes out the texture of the selected region, giving its contents a flat aspect. Here Canny Edge Detector is used.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Useful links:",
    "local": ""
  },
  {
    "origin": "https://www.learnopencv.com/seamless-cloning-using-opencv-python-cpp",
    "local": ""
  },
  {
    "origin": "Enumeration Type Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "anonymous enum",
    "local": ""
  },
  {
    "origin": "anonymous enum",
    "local": ""
  },
  {
    "origin": "seamlessClone algorithm flags",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "NORMAL_CLONE",
    "local": ""
  },
  {
    "origin": "Python: cv.NORMAL_CLONE",
    "local": ""
  },
  {
    "origin": "The power of the method is fully expressed when inserting objects with complex outlines into a new background",
    "local": ""
  },
  {
    "origin": "MIXED_CLONE",
    "local": ""
  },
  {
    "origin": "Python: cv.MIXED_CLONE",
    "local": ""
  },
  {
    "origin": "The classic method, color-based selection and alpha masking might be time consuming and often leaves an undesirable halo. Seamless cloning, even averaged with the original image, is not effective. Mixed seamless cloning based on a loose selection proves effective.",
    "local": ""
  },
  {
    "origin": "MONOCHROME_TRANSFER",
    "local": ""
  },
  {
    "origin": "Python: cv.MONOCHROME_TRANSFER",
    "local": ""
  },
  {
    "origin": "Monochrome transfer allows the user to easily replace certain features of one object by alternative features.",
    "local": ""
  },
  {
    "origin": "Function Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "colorChange()",
    "local": ""
  },
  {
    "origin": "void cv::colorChange",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "red_mul",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "green_mul",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "blue_mul",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.colorChange(",
    "local": ""
  },
  {
    "origin": "src, mask[, dst[, red_mul[, green_mul[, blue_mul]]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Given an original color image, two differently colored versions of this image can be mixed seamlessly.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Input 8-bit 3-channel image.",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "Input 8-bit 1 or 3-channel image.",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "Output image with the same size and type as src .",
    "local": ""
  },
  {
    "origin": "red_mul",
    "local": ""
  },
  {
    "origin": "R-channel multiply factor.",
    "local": ""
  },
  {
    "origin": "green_mul",
    "local": ""
  },
  {
    "origin": "G-channel multiply factor.",
    "local": ""
  },
  {
    "origin": "blue_mul",
    "local": ""
  },
  {
    "origin": "B-channel multiply factor.",
    "local": ""
  },
  {
    "origin": "Multiplication factor is between .5 to 2.5.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "illuminationChange()",
    "local": ""
  },
  {
    "origin": "void cv::illuminationChange",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "alpha",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "beta",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.illuminationChange(",
    "local": ""
  },
  {
    "origin": "src, mask[, dst[, alpha[, beta]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Applying an appropriate non-linear transformation to the gradient field inside the selection and then integrating back with a Poisson solver, modifies locally the apparent illumination of an image.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Input 8-bit 3-channel image.",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "Input 8-bit 1 or 3-channel image.",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "Output image with the same size and type as src.",
    "local": ""
  },
  {
    "origin": "alpha",
    "local": ""
  },
  {
    "origin": "beta",
    "local": ""
  },
  {
    "origin": "This is useful to highlight under-exposed foreground objects or to reduce specular reflections.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "seamlessClone()",
    "local": ""
  },
  {
    "origin": "void cv::seamlessClone",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "p",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "blend",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "flags",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "blend",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.seamlessClone(",
    "local": ""
  },
  {
    "origin": "src, dst, mask, p, flags[, blend]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Image editing tasks concern either global changes (color/intensity corrections, filters, deformations) or local changes concerned to a selection. Here we are interested in achieving local changes, ones that are restricted to a region manually selected (ROI), in a seamless and effortless manner. The extent of the changes ranges from slight distortions to complete replacement by novel content",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Input 8-bit 3-channel image.",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "Input 8-bit 3-channel image.",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "Input 8-bit 1 or 3-channel image.",
    "local": ""
  },
  {
    "origin": "p",
    "local": ""
  },
  {
    "origin": "Point in dst image where object is placed.",
    "local": ""
  },
  {
    "origin": "blend",
    "local": ""
  },
  {
    "origin": "Output image with the same size and type as dst.",
    "local": ""
  },
  {
    "origin": "flags",
    "local": ""
  },
  {
    "origin": "Cloning method that could be",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "or",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "textureFlattening()",
    "local": ""
  },
  {
    "origin": "void cv::textureFlattening",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "low_threshold",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "high_threshold",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "kernel_size",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.textureFlattening(",
    "local": ""
  },
  {
    "origin": "src, mask[, dst[, low_threshold[, high_threshold[, kernel_size]]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "By retaining only the gradients at edge locations, before integrating with the Poisson solver, one washes out the texture of the selected region, giving its contents a flat aspect. Here Canny Edge Detector is used.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "src",
    "local": ""
  },
  {
    "origin": "Input 8-bit 3-channel image.",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "Input 8-bit 1 or 3-channel image.",
    "local": ""
  },
  {
    "origin": "dst",
    "local": ""
  },
  {
    "origin": "Output image with the same size and type as src.",
    "local": ""
  },
  {
    "origin": "low_threshold",
    "local": ""
  },
  {
    "origin": "Range from 0 to 100.",
    "local": ""
  },
  {
    "origin": "high_threshold",
    "local": ""
  },
  {
    "origin": "kernel_size",
    "local": ""
  },
  {
    "origin": "The size of the Sobel kernel to be used.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "The algorithm assumes that the color of the source image is close to that of the destination. This assumption means that when the colors don't match, the source image color gets tinted toward the color of the destination image.",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:41 for OpenCV by",
    "local": ""
  }
]