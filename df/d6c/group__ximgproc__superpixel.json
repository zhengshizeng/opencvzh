[
  {
    "origin": "OpenCV: Superpixels",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "Superpixels",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Class implementing the LSC (Linear Spectral Clustering) superpixels algorithm described in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Class implementing the SEEDS (Superpixels Extracted via Energy-Driven Sampling) superpixels algorithm described in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "class",
    "local": ""
  },
  {
    "origin": "Class implementing the SLIC (Simple Linear Iterative Clustering) superpixels algorithm described in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image, int region_size=10, float ratio=0.075f)",
    "local": ""
  },
  {
    "origin": "Class implementing the LSC (Linear Spectral Clustering) superpixels.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(int image_width, int image_height, int image_channels, int num_superpixels, int num_levels, int prior=2, int histogram_bins=5, bool double_step=false)",
    "local": ""
  },
  {
    "origin": "Initializes a",
    "local": ""
  },
  {
    "origin": "object.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image, int algorithm=",
    "local": ""
  },
  {
    "origin": ", int region_size=10, float ruler=10.0f)",
    "local": ""
  },
  {
    "origin": "Initialize a",
    "local": ""
  },
  {
    "origin": "object.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Enumeration Type Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "SLICType",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "SLIC",
    "local": ""
  },
  {
    "origin": "Python: cv.ximgproc.SLIC",
    "local": ""
  },
  {
    "origin": "SLICO",
    "local": ""
  },
  {
    "origin": "Python: cv.ximgproc.SLICO",
    "local": ""
  },
  {
    "origin": "MSLIC",
    "local": ""
  },
  {
    "origin": "Python: cv.ximgproc.MSLIC",
    "local": ""
  },
  {
    "origin": "Function Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "createSuperpixelLSC()",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; cv::ximgproc::createSuperpixelLSC",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "region_size",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "ratio",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.ximgproc.createSuperpixelLSC(",
    "local": ""
  },
  {
    "origin": "image[, region_size[, ratio]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Class implementing the LSC (Linear Spectral Clustering) superpixels.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "Image to segment",
    "local": ""
  },
  {
    "origin": "region_size",
    "local": ""
  },
  {
    "origin": "Chooses an average superpixel size measured in pixels",
    "local": ""
  },
  {
    "origin": "ratio",
    "local": ""
  },
  {
    "origin": "Chooses the enforcement of superpixel compactness factor of superpixel",
    "local": ""
  },
  {
    "origin": "The function initializes a",
    "local": ""
  },
  {
    "origin": "object for the input image. It sets the parameters of superpixel algorithm, which are: region_size and ruler. It preallocate some buffers for future computing iterations over the given image. An example of LSC is ilustrated in the following picture. For enanched results it is recommended for color images to preprocess image with little gaussian blur with a small 3 x 3 kernel and additional conversion into CieLAB color space.",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "createSuperpixelSEEDS()",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; cv::ximgproc::createSuperpixelSEEDS",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "image_width",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "image_height",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "image_channels",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "num_superpixels",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "num_levels",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "prior",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "histogram_bins",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "bool",
    "local": ""
  },
  {
    "origin": "double_step",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.ximgproc.createSuperpixelSEEDS(",
    "local": ""
  },
  {
    "origin": "image_width, image_height, image_channels, num_superpixels, num_levels[, prior[, histogram_bins[, double_step]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Initializes a",
    "local": ""
  },
  {
    "origin": "object.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "image_width",
    "local": ""
  },
  {
    "origin": "Image width.",
    "local": ""
  },
  {
    "origin": "image_height",
    "local": ""
  },
  {
    "origin": "Image height.",
    "local": ""
  },
  {
    "origin": "image_channels",
    "local": ""
  },
  {
    "origin": "Number of channels of the image.",
    "local": ""
  },
  {
    "origin": "num_superpixels",
    "local": ""
  },
  {
    "origin": "Desired number of superpixels. Note that the actual number may be smaller due to restrictions (depending on the image size and num_levels). Use getNumberOfSuperpixels() to get the actual number.",
    "local": ""
  },
  {
    "origin": "num_levels",
    "local": ""
  },
  {
    "origin": "Number of block levels. The more levels, the more accurate is the segmentation, but needs more memory and CPU time.",
    "local": ""
  },
  {
    "origin": "prior",
    "local": ""
  },
  {
    "origin": "enable 3x3 shape smoothing term if &gt;0. A larger value leads to smoother shapes. prior must be in the range [0, 5].",
    "local": ""
  },
  {
    "origin": "histogram_bins",
    "local": ""
  },
  {
    "origin": "Number of histogram bins.",
    "local": ""
  },
  {
    "origin": "double_step",
    "local": ""
  },
  {
    "origin": "If true, iterate each block level twice for higher accuracy.",
    "local": ""
  },
  {
    "origin": "The function initializes a",
    "local": ""
  },
  {
    "origin": "object for the input image. It stores the parameters of the image: image_width, image_height and image_channels. It also sets the parameters of the SEEDS superpixel algorithm, which are: num_superpixels, num_levels, use_prior, histogram_bins and double_step.",
    "local": ""
  },
  {
    "origin": "The number of levels in num_levels defines the amount of block levels that the algorithm use in the optimization. The initialization is a grid, in which the superpixels are equally distributed through the width and the height of the image. The larger blocks correspond to the superpixel size, and the levels with smaller blocks are formed by dividing the larger blocks into 2 x 2 blocks of pixels, recursively until the smaller block level. An example of initialization of 4 block levels is illustrated in the following figure.",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "createSuperpixelSLIC()",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "&gt; cv::ximgproc::createSuperpixelSLIC",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "algorithm",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "region_size",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "float",
    "local": ""
  },
  {
    "origin": "ruler",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "retval",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.ximgproc.createSuperpixelSLIC(",
    "local": ""
  },
  {
    "origin": "image[, algorithm[, region_size[, ruler]]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Initialize a",
    "local": ""
  },
  {
    "origin": "object.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "Image to segment",
    "local": ""
  },
  {
    "origin": "algorithm",
    "local": ""
  },
  {
    "origin": "Chooses the algorithm variant to use: SLIC segments image using a desired region_size, and in addition SLICO will optimize using adaptive compactness factor, while MSLIC will optimize using manifold methods resulting in more content-sensitive superpixels.",
    "local": ""
  },
  {
    "origin": "region_size",
    "local": ""
  },
  {
    "origin": "Chooses an average superpixel size measured in pixels",
    "local": ""
  },
  {
    "origin": "ruler",
    "local": ""
  },
  {
    "origin": "Chooses the enforcement of superpixel smoothness factor of superpixel",
    "local": ""
  },
  {
    "origin": "The function initializes a",
    "local": ""
  },
  {
    "origin": "object for the input image. It sets the parameters of choosed superpixel algorithm, which are: region_size and ruler. It preallocate some buffers for future computing iterations over the given image. For enanched results it is recommended for color images to preprocess image with little gaussian blur using a small 3 x 3 kernel and additional conversion into CieLAB color space. An example of SLIC versus SLICO and MSLIC is ilustrated in the following picture.",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:42 for OpenCV by",
    "local": ""
  }
]