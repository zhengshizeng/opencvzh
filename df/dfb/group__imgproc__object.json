[
  {
    "origin": "OpenCV: Object Detection",
    "local": ""
  },
  {
    "origin": "OpenCV",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "Object Detection",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "type of the template matching operation",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image,",
    "local": ""
  },
  {
    "origin": "templ,",
    "local": ""
  },
  {
    "origin": "result, int method,",
    "local": ""
  },
  {
    "origin": "mask=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Compares a template against overlapped image regions.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "Enumeration Type Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "TemplateMatchModes",
    "local": ""
  },
  {
    "origin": "enum",
    "local": ""
  },
  {
    "origin": "type of the template matching operation",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "TM_SQDIFF",
    "local": ""
  },
  {
    "origin": "Python: cv.TM_SQDIFF",
    "local": ""
  },
  {
    "origin": "\\[R(x,y)= \\sum _{x',y'} (T(x',y')-I(x+x',y+y'))^2\\]",
    "local": ""
  },
  {
    "origin": "with mask:",
    "local": ""
  },
  {
    "origin": "\\[R(x,y)= \\sum _{x',y'} \\left( (T(x',y')-I(x+x',y+y')) \\cdot M(x',y') \\right)^2\\]",
    "local": ""
  },
  {
    "origin": "TM_SQDIFF_NORMED",
    "local": ""
  },
  {
    "origin": "Python: cv.TM_SQDIFF_NORMED",
    "local": ""
  },
  {
    "origin": "\\[R(x,y)= \\frac{\\sum_{x',y'} (T(x',y')-I(x+x',y+y'))^2}{\\sqrt{\\sum_{ x',y'}T(x',y')^2 \\cdot \\sum_{x',y'} I(x+x',y+y')^2}}\\]",
    "local": ""
  },
  {
    "origin": "with mask:",
    "local": ""
  },
  {
    "origin": "\\[R(x,y)= \\frac{\\sum _{x',y'} \\left( (T(x',y')-I(x+x',y+y')) \\cdot M(x',y') \\right)^2}{\\sqrt{\\sum_{x',y'} \\left( T(x',y') \\cdot M(x',y') \\right)^2 \\cdot \\sum_{x',y'} \\left( I(x+x',y+y') \\cdot M(x',y') \\right)^2}}\\]",
    "local": ""
  },
  {
    "origin": "TM_CCORR",
    "local": ""
  },
  {
    "origin": "Python: cv.TM_CCORR",
    "local": ""
  },
  {
    "origin": "\\[R(x,y)= \\sum _{x',y'} (T(x',y') \\cdot I(x+x',y+y'))\\]",
    "local": ""
  },
  {
    "origin": "with mask:",
    "local": ""
  },
  {
    "origin": "\\[R(x,y)= \\sum _{x',y'} (T(x',y') \\cdot I(x+x',y+y') \\cdot M(x',y') ^2)\\]",
    "local": ""
  },
  {
    "origin": "TM_CCORR_NORMED",
    "local": ""
  },
  {
    "origin": "Python: cv.TM_CCORR_NORMED",
    "local": ""
  },
  {
    "origin": "\\[R(x,y)= \\frac{\\sum_{x',y'} (T(x',y') \\cdot I(x+x',y+y'))}{\\sqrt{ \\sum_{x',y'}T(x',y')^2 \\cdot \\sum_{x',y'} I(x+x',y+y')^2}}\\]",
    "local": ""
  },
  {
    "origin": "with mask:",
    "local": ""
  },
  {
    "origin": "\\[R(x,y)= \\frac{\\sum_{x',y'} (T(x',y') \\cdot I(x+x',y+y') \\cdot M(x',y')^2)}{\\sqrt{\\sum_{x',y'} \\left( T(x',y') \\cdot M(x',y') \\right)^2 \\cdot \\sum_{x',y'} \\left( I(x+x',y+y') \\cdot M(x',y') \\right)^2}}\\]",
    "local": ""
  },
  {
    "origin": "TM_CCOEFF",
    "local": ""
  },
  {
    "origin": "Python: cv.TM_CCOEFF",
    "local": ""
  },
  {
    "origin": "\\[R(x,y)= \\sum _{x',y'} (T'(x',y') \\cdot I'(x+x',y+y'))\\]",
    "local": ""
  },
  {
    "origin": "where",
    "local": ""
  },
  {
    "origin": "\\[\\begin{array}{l} T'(x',y')=T(x',y') - 1/(w \\cdot h) \\cdot \\sum _{ x'',y''} T(x'',y'') \\\\ I'(x+x',y+y')=I(x+x',y+y') - 1/(w \\cdot h) \\cdot \\sum _{x'',y''} I(x+x'',y+y'') \\end{array}\\]",
    "local": ""
  },
  {
    "origin": "with mask:",
    "local": ""
  },
  {
    "origin": "\\[\\begin{array}{l} T'(x',y')=M(x',y') \\cdot \\left( T(x',y') - \\frac{1}{\\sum _{x'',y''} M(x'',y'')} \\cdot \\sum _{x'',y''} (T(x'',y'') \\cdot M(x'',y'')) \\right) \\\\ I'(x+x',y+y')=M(x',y') \\cdot \\left( I(x+x',y+y') - \\frac{1}{\\sum _{x'',y''} M(x'',y'')} \\cdot \\sum _{x'',y''} (I(x+x'',y+y'') \\cdot M(x'',y'')) \\right) \\end{array} \\]",
    "local": ""
  },
  {
    "origin": "TM_CCOEFF_NORMED",
    "local": ""
  },
  {
    "origin": "Python: cv.TM_CCOEFF_NORMED",
    "local": ""
  },
  {
    "origin": "\\[R(x,y)= \\frac{ \\sum_{x',y'} (T'(x',y') \\cdot I'(x+x',y+y')) }{ \\sqrt{\\sum_{x',y'}T'(x',y')^2 \\cdot \\sum_{x',y'} I'(x+x',y+y')^2} }\\]",
    "local": ""
  },
  {
    "origin": "Function Documentation",
    "local": ""
  },
  {
    "origin": "◆",
    "local": ""
  },
  {
    "origin": "matchTemplate()",
    "local": ""
  },
  {
    "origin": "void cv::matchTemplate",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "templ",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "result",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "method",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Python:",
    "local": ""
  },
  {
    "origin": "result",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "cv.matchTemplate(",
    "local": ""
  },
  {
    "origin": "image, templ, method[, result[, mask]]",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Compares a template against overlapped image regions.",
    "local": ""
  },
  {
    "origin": "The function slides through image , compares the overlapped patches of size \\(w \\times h\\) against templ using the specified method and stores the comparison results in result .",
    "local": ""
  },
  {
    "origin": "describes the formulae for the available comparison methods ( \\(I\\) denotes image, \\(T\\) template, \\(R\\) result, \\(M\\) the optional mask ). The summation is done over template and/or the image patch: \\(x' = 0...w-1, y' = 0...h-1\\)",
    "local": ""
  },
  {
    "origin": "After the function finishes the comparison, the best matches can be found as global minimums (when",
    "local": ""
  },
  {
    "origin": "was used) or maximums (when",
    "local": ""
  },
  {
    "origin": "or",
    "local": ""
  },
  {
    "origin": "was used) using the",
    "local": ""
  },
  {
    "origin": "function. In case of a color image, template summation in the numerator and each sum in the denominator is done over all of the channels and separate mean values are used for each channel. That is, the function can take a color template and a color image. The result will still be a single-channel image, which is easier to analyze.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "image",
    "local": ""
  },
  {
    "origin": "Image where the search is running. It must be 8-bit or 32-bit floating-point.",
    "local": ""
  },
  {
    "origin": "templ",
    "local": ""
  },
  {
    "origin": "Searched template. It must be not greater than the source image and have the same data type.",
    "local": ""
  },
  {
    "origin": "result",
    "local": ""
  },
  {
    "origin": "Map of comparison results. It must be single-channel 32-bit floating-point. If image is \\(W \\times H\\) and templ is \\(w \\times h\\) , then result is \\((W-w+1) \\times (H-h+1)\\) .",
    "local": ""
  },
  {
    "origin": "method",
    "local": ""
  },
  {
    "origin": "Parameter specifying the comparison method, see",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "Optional mask. It must have the same size as templ. It must either have the same number of channels as template or only one channel, which is then used for all template and image channels. If the data type is",
    "local": ""
  },
  {
    "origin": ", the mask is interpreted as a binary mask, meaning only elements where mask is nonzero are used and are kept unchanged independent of the actual mask value (weight equals 1). For data tpye",
    "local": ""
  },
  {
    "origin": ", the mask values are used as weights. The exact formulas are documented in",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:40 for OpenCV by",
    "local": ""
  }
]