[
  {
    "origin": "OpenCV: Universal intrinsics",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Modules",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Typedefs",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "Variables",
    "local": ""
  },
  {
    "origin": "Universal intrinsics",
    "local": ""
  },
  {
    "origin": "&raquo;",
    "local": ""
  },
  {
    "origin": "Modules",
    "local": ""
  },
  {
    "origin": "Classes",
    "local": ""
  },
  {
    "origin": "Typedefs",
    "local": ""
  },
  {
    "origin": "typedef v_float32x16&#160;",
    "local": ""
  },
  {
    "origin": "Maximum available vector register capacity 32-bit floating point values (single precision)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt; float, 16 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Sixteen 32-bit floating point values (single precision)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt; float, 4 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Four 32-bit floating point values (single precision)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt; float, 8 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Eight 32-bit floating point values (single precision)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef v_float64x8&#160;",
    "local": ""
  },
  {
    "origin": "Maximum available vector register capacity 64-bit floating point values (double precision)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt; double, 2 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Two 64-bit floating point values (double precision)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt; double, 4 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Four 64-bit floating point values (double precision)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt; double, 8 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Eight 64-bit floating point values (double precision)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef v_int16x32&#160;",
    "local": ""
  },
  {
    "origin": "Maximum available vector register capacity 16-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt; short, 16 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Sixteen 16-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt; short, 32 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Thirty two 16-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt; short, 8 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Eight 16-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef v_int32x16&#160;",
    "local": ""
  },
  {
    "origin": "Maximum available vector register capacity 32-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt; int, 16 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Sixteen 32-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt; int, 4 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Four 32-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt; int, 8 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Eight 32-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef v_int64x8&#160;",
    "local": ""
  },
  {
    "origin": "Maximum available vector register capacity 64-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 2 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Two 64-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 4 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Four 64-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 8 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Eight 64-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef v_int8x64&#160;",
    "local": ""
  },
  {
    "origin": "Maximum available vector register capacity 8-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 16 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Sixteen 8-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 32 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Thirty two 8-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 64 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Sixty four 8-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef v_uint16x32&#160;",
    "local": ""
  },
  {
    "origin": "Maximum available vector register capacity 16-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 16 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Sixteen 16-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 32 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Thirty two 16-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 8 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Eight 16-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef v_uint32x16&#160;",
    "local": ""
  },
  {
    "origin": "Maximum available vector register capacity 32-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt; unsigned, 16 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Sixteen 32-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt; unsigned, 4 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Four 32-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt; unsigned, 8 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Eight 32-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef v_uint64x8&#160;",
    "local": ""
  },
  {
    "origin": "Maximum available vector register capacity 64-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 2 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Two 64-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 4 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Four 64-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 8 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Eight 64-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef v_uint8x64&#160;",
    "local": ""
  },
  {
    "origin": "Maximum available vector register capacity 8-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 16 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Sixteen 8-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 32 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Thirty two 8-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 64 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "Sixty four 8-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Enumerations",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= 16,",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= simd512_width",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "Functions",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Bitwise AND.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Not equal comparison.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Multiply values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Add values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Subtract values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Divide values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Less-than comparison.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, int imm)",
    "local": ""
  },
  {
    "origin": "Bitwise shift left.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Less-than or equal comparison.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Equal comparison.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Greater-than comparison.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Greater-than or equal comparison.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, int imm)",
    "local": ""
  },
  {
    "origin": "Bitwise shift right.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Bitwise XOR.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Bitwise OR.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Bitwise NOT.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp,",
    "local": ""
  },
  {
    "origin": "(const _Tp *ptr)",
    "local": ""
  },
  {
    "origin": "Load 256-bit length register contents from memory.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp,",
    "local": ""
  },
  {
    "origin": "(const _Tp *ptr)",
    "local": ""
  },
  {
    "origin": "Load register contents from memory (aligned)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::w_type,",
    "local": ""
  },
  {
    "origin": "/sizeof(typename",
    "local": ""
  },
  {
    "origin": "(const _Tp *ptr)",
    "local": ""
  },
  {
    "origin": "Load register contents from memory with double expand.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&lt; float,",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::q_type,",
    "local": ""
  },
  {
    "origin": "/sizeof(typename",
    "local": ""
  },
  {
    "origin": "(const _Tp *ptr)",
    "local": ""
  },
  {
    "origin": "Load register contents from memory with quad expand.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp,",
    "local": ""
  },
  {
    "origin": "(const _Tp *loptr, const _Tp *hiptr)",
    "local": ""
  },
  {
    "origin": "Load register contents from two memory blocks.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp,",
    "local": ""
  },
  {
    "origin": "(const _Tp *ptr)",
    "local": ""
  },
  {
    "origin": "Load 128-bits of data to lower part (high part is undefined).",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp,",
    "local": ""
  },
  {
    "origin": "(const _Tp *ptr)",
    "local": ""
  },
  {
    "origin": "Load 512-bit length register contents from memory.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp,",
    "local": ""
  },
  {
    "origin": "(const _Tp *ptr)",
    "local": ""
  },
  {
    "origin": "Load register contents from memory (aligned)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::w_type,",
    "local": ""
  },
  {
    "origin": "/sizeof(typename",
    "local": ""
  },
  {
    "origin": "(const _Tp *ptr)",
    "local": ""
  },
  {
    "origin": "Load register contents from memory with double expand.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&lt; float,",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::q_type,",
    "local": ""
  },
  {
    "origin": "/sizeof(typename",
    "local": ""
  },
  {
    "origin": "(const _Tp *ptr)",
    "local": ""
  },
  {
    "origin": "Load register contents from memory with quad expand.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp,",
    "local": ""
  },
  {
    "origin": "(const _Tp *loptr, const _Tp *hiptr)",
    "local": ""
  },
  {
    "origin": "Load register contents from two memory blocks.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp,",
    "local": ""
  },
  {
    "origin": "(const _Tp *ptr)",
    "local": ""
  },
  {
    "origin": "Load 256-bits of data to lower part (high part is undefined).",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Absolute value of elements.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Absolute difference.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; float, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; float, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; double, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; double, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Saturating absolute difference.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Add values without saturation.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int i, typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Broadcast i-th element of vector.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; float, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Ceil elements.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; int, n *2 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; double, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Check if all packed values are less than zero.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Check if any of packed values is less than zero.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Combine vector from last elements of two vectors.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Combine vector from first elements of two vectors.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Convert to float.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; float, n *2 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; double, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Convert lower half to float.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; float, n *2 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; double, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; double, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Convert to float.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; double, n/2 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Convert lower half to double.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; float, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Convert lower half to double.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Convert to double.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Convert to double high part of vector.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; float, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Convert to double high part of vector.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::w_type, n/2 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Dot product of elements.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::w_type, n/2 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b, const",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::w_type, n/2 &gt; &amp;c)",
    "local": ""
  },
  {
    "origin": "Dot product of elements.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::q_type, n/4 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Dot product of elements and expand.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::q_type, n/4 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b, const",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::q_type, n/4 &gt; &amp;c)",
    "local": ""
  },
  {
    "origin": "Dot product of elements.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; double, n/2 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; double, n/2 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;b, const",
    "local": ""
  },
  {
    "origin": "&lt; double, n/2 &gt; &amp;c)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::q_type, n/4 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Fast Dot product of elements and expand.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::q_type, n/4 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b, const",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::q_type, n/4 &gt; &amp;c)",
    "local": ""
  },
  {
    "origin": "Fast Dot product of elements.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; double, n/2 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; double, n/2 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;b, const",
    "local": ""
  },
  {
    "origin": "&lt; double, n/2 &gt; &amp;c)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::w_type, n/2 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Fast Dot product of elements.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::w_type, n/2 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b, const",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::w_type, n/2 &gt; &amp;c)",
    "local": ""
  },
  {
    "origin": "Fast Dot product of elements.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a,",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::w_type, n/2 &gt; &amp;b0,",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::w_type, n/2 &gt; &amp;b1)",
    "local": ""
  },
  {
    "origin": "Expand values to the wider pack type.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::w_type, n/2 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Expand higher values to the wider pack type.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::w_type, n/2 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Expand lower values to the wider pack type.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int s, typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Vector extract.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int s, typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;v)",
    "local": ""
  },
  {
    "origin": "Vector extract.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; float, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Floor elements.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; int, n *2 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; double, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;c)",
    "local": ""
  },
  {
    "origin": "Multiply and add.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;vec)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;vec)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Inversed square root.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp,",
    "local": ""
  },
  {
    "origin": "(const _Tp *ptr)",
    "local": ""
  },
  {
    "origin": "Load register contents from memory.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp,",
    "local": ""
  },
  {
    "origin": "(const _Tp *ptr)",
    "local": ""
  },
  {
    "origin": "Load register contents from memory (aligned)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const _Tp *ptr,",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a,",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Load and deinterleave (2 channels)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const _Tp *ptr,",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a,",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b,",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;c)",
    "local": ""
  },
  {
    "origin": "Load and deinterleave (3 channels)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const _Tp *ptr,",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a,",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b,",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;c,",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;d)",
    "local": ""
  },
  {
    "origin": "Load and deinterleave (4 channels)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::w_type,",
    "local": ""
  },
  {
    "origin": "/sizeof(typename",
    "local": ""
  },
  {
    "origin": "(const _Tp *ptr)",
    "local": ""
  },
  {
    "origin": "Load register contents from memory with double expand.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&lt; float,",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::q_type,",
    "local": ""
  },
  {
    "origin": "/sizeof(typename",
    "local": ""
  },
  {
    "origin": "(const _Tp *ptr)",
    "local": ""
  },
  {
    "origin": "Load register contents from memory with quad expand.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp,",
    "local": ""
  },
  {
    "origin": "(const _Tp *loptr, const _Tp *hiptr)",
    "local": ""
  },
  {
    "origin": "Load register contents from two memory blocks.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp,",
    "local": ""
  },
  {
    "origin": "(const _Tp *ptr)",
    "local": ""
  },
  {
    "origin": "Load 64-bits of data to lower part (high part is undefined).",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp,",
    "local": ""
  },
  {
    "origin": "(const _Tp *tab, const int *idx)",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(const int *tab, const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;idx)",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(const unsigned *tab, const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;idx)",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(const float *tab, const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;idx)",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; double, n/2 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const double *tab, const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;idx)",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(const float *tab, const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;idx,",
    "local": ""
  },
  {
    "origin": "&lt; float, n &gt; &amp;x,",
    "local": ""
  },
  {
    "origin": "&lt; float, n &gt; &amp;y)",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(const double *tab, const",
    "local": ""
  },
  {
    "origin": "&lt; int, n *2 &gt; &amp;idx,",
    "local": ""
  },
  {
    "origin": "&lt; double, n &gt; &amp;x,",
    "local": ""
  },
  {
    "origin": "&lt; double, n &gt; &amp;y)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp,",
    "local": ""
  },
  {
    "origin": "(const _Tp *tab, const int *idx)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp,",
    "local": ""
  },
  {
    "origin": "(const _Tp *tab, const int *idx)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Magnitude.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; float, n &gt; &amp;v, const",
    "local": ""
  },
  {
    "origin": "&lt; float, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; float, n &gt; &amp;b, const",
    "local": ""
  },
  {
    "origin": "&lt; float, n &gt; &amp;c, const",
    "local": ""
  },
  {
    "origin": "&lt; float, n &gt; &amp;d)",
    "local": ""
  },
  {
    "origin": "Matrix multiplication.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; float, n &gt; &amp;v, const",
    "local": ""
  },
  {
    "origin": "&lt; float, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; float, n &gt; &amp;b, const",
    "local": ""
  },
  {
    "origin": "&lt; float, n &gt; &amp;c, const",
    "local": ""
  },
  {
    "origin": "&lt; float, n &gt; &amp;d)",
    "local": ""
  },
  {
    "origin": "Matrix multiplication and add.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Choose max values for each pair.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Choose min values for each pair.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b,",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::w_type, n/2 &gt; &amp;c,",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::w_type, n/2 &gt; &amp;d)",
    "local": ""
  },
  {
    "origin": "Multiply and expand.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Multiply and extract high part.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Multiply values without saturation.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;c)",
    "local": ""
  },
  {
    "origin": "A synonym for v_fma.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; float, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; double, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "*ptr, const",
    "local": ""
  },
  {
    "origin": "&lt; float, n &gt; &amp;v)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;vec)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Count the 1 bits in the vector lanes and return result as corresponding unsigned type.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b,",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;low,",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;high)",
    "local": ""
  },
  {
    "origin": "Combine two vectors from lower and higher parts of two other vectors.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Find one max value.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Find one min value.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Sum absolute differences of values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Sum packed values.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; float, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; float, n &gt; &amp;b, const",
    "local": ""
  },
  {
    "origin": "&lt; float, n &gt; &amp;c, const",
    "local": ""
  },
  {
    "origin": "&lt; float, n &gt; &amp;d)",
    "local": ""
  },
  {
    "origin": "Sums all elements of each input vector, returns the vector of sums.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Vector reverse order.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int imm, typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "template&lt;int imm, typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Element shift left among vector.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int imm, typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Element shift right among vector.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int imm, typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; float, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Round elements.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; int, n *2 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; double, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; double, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; int, n *2 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; double, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Get first negative lane index.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;mask, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Per-element select (blend operation)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Get negative values mask.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Square of the magnitude.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Square root of elements.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(_Tp *ptr, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Store data to memory.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(_Tp *ptr, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a,",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(_Tp *ptr, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Store data to memory (aligned)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(_Tp *ptr, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a,",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(_Tp *ptr, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(_Tp *ptr, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Store data to memory (higher half)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(_Tp *ptr, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b,",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Interleave and store (2 channels)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(_Tp *ptr, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;c,",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Interleave and store (3 channels)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(_Tp *ptr, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;c, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;d,",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Interleave and store (4 channels)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(_Tp *ptr, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Store data to memory (lower half)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Subtract values without saturation.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a0, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a1, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a2, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a3,",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b0,",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b1,",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b2,",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b3)",
    "local": ""
  },
  {
    "origin": "Transpose 4x4 matrix.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; float, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Truncate elements.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; int, n *2 &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; double, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a0, const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;a1,",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b0,",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;b1)",
    "local": ""
  },
  {
    "origin": "Interleave two vectors.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "SIMD processing state cleanup call.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Variables",
    "local": ""
  },
  {
    "origin": "[]",
    "local": ""
  },
  {
    "origin": "Wide init with value",
    "local": ""
  },
  {
    "origin": "Create maximum available capacity vector with elements set to a specific value",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "(short v)",
    "local": ""
  },
  {
    "origin": "(int v)",
    "local": ""
  },
  {
    "origin": "(unsigned v)",
    "local": ""
  },
  {
    "origin": "(float v)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v)",
    "local": ""
  },
  {
    "origin": "(double v)",
    "local": ""
  },
  {
    "origin": "Wide init with zero",
    "local": ""
  },
  {
    "origin": "Create maximum available capacity vector with elements set to zero",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Wide load from memory",
    "local": ""
  },
  {
    "origin": "Load maximum available capacity register contents from memory",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr)",
    "local": ""
  },
  {
    "origin": "(const short *ptr)",
    "local": ""
  },
  {
    "origin": "(const int *ptr)",
    "local": ""
  },
  {
    "origin": "(const unsigned *ptr)",
    "local": ""
  },
  {
    "origin": "(const float *ptr)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr)",
    "local": ""
  },
  {
    "origin": "(const double *ptr)",
    "local": ""
  },
  {
    "origin": "Wide load from memory(aligned)",
    "local": ""
  },
  {
    "origin": "Load maximum available capacity register contents from memory(aligned)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr)",
    "local": ""
  },
  {
    "origin": "(const short *ptr)",
    "local": ""
  },
  {
    "origin": "(const int *ptr)",
    "local": ""
  },
  {
    "origin": "(const unsigned *ptr)",
    "local": ""
  },
  {
    "origin": "(const float *ptr)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr)",
    "local": ""
  },
  {
    "origin": "(const double *ptr)",
    "local": ""
  },
  {
    "origin": "Wide load lower half from memory",
    "local": ""
  },
  {
    "origin": "Load lower half of maximum available capacity register from memory",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr)",
    "local": ""
  },
  {
    "origin": "(const short *ptr)",
    "local": ""
  },
  {
    "origin": "(const int *ptr)",
    "local": ""
  },
  {
    "origin": "(const unsigned *ptr)",
    "local": ""
  },
  {
    "origin": "(const float *ptr)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr)",
    "local": ""
  },
  {
    "origin": "(const double *ptr)",
    "local": ""
  },
  {
    "origin": "Wide load halfs from memory",
    "local": ""
  },
  {
    "origin": "Load maximum available capacity register contents from two memory blocks",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr0, const",
    "local": ""
  },
  {
    "origin": "*ptr1)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr0, const",
    "local": ""
  },
  {
    "origin": "*ptr1)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr0, const",
    "local": ""
  },
  {
    "origin": "*ptr1)",
    "local": ""
  },
  {
    "origin": "(const short *ptr0, const short *ptr1)",
    "local": ""
  },
  {
    "origin": "(const int *ptr0, const int *ptr1)",
    "local": ""
  },
  {
    "origin": "(const unsigned *ptr0, const unsigned *ptr1)",
    "local": ""
  },
  {
    "origin": "(const float *ptr0, const float *ptr1)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr0, const",
    "local": ""
  },
  {
    "origin": "*ptr1)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr0, const",
    "local": ""
  },
  {
    "origin": "*ptr1)",
    "local": ""
  },
  {
    "origin": "(const double *ptr0, const double *ptr1)",
    "local": ""
  },
  {
    "origin": "Wide LUT of elements",
    "local": ""
  },
  {
    "origin": "Load maximum available capacity register contents with array elements by provided indexes",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr, const int *idx)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr, const int *idx)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr, const int *idx)",
    "local": ""
  },
  {
    "origin": "(const short *ptr, const int *idx)",
    "local": ""
  },
  {
    "origin": "(const int *ptr, const int *idx)",
    "local": ""
  },
  {
    "origin": "(const unsigned *ptr, const int *idx)",
    "local": ""
  },
  {
    "origin": "(const float *ptr, const int *idx)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr, const int *idx)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr, const int *idx)",
    "local": ""
  },
  {
    "origin": "(const double *ptr, const int *idx)",
    "local": ""
  },
  {
    "origin": "Wide LUT of element pairs",
    "local": ""
  },
  {
    "origin": "Load maximum available capacity register contents with array element pairs by provided indexes",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr, const int *idx)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr, const int *idx)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr, const int *idx)",
    "local": ""
  },
  {
    "origin": "(const short *ptr, const int *idx)",
    "local": ""
  },
  {
    "origin": "(const int *ptr, const int *idx)",
    "local": ""
  },
  {
    "origin": "(const unsigned *ptr, const int *idx)",
    "local": ""
  },
  {
    "origin": "(const float *ptr, const int *idx)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr, const int *idx)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr, const int *idx)",
    "local": ""
  },
  {
    "origin": "(const double *ptr, const int *idx)",
    "local": ""
  },
  {
    "origin": "Wide LUT of element quads",
    "local": ""
  },
  {
    "origin": "Load maximum available capacity register contents with array element quads by provided indexes",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr, const int *idx)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr, const int *idx)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr, const int *idx)",
    "local": ""
  },
  {
    "origin": "(const short *ptr, const int *idx)",
    "local": ""
  },
  {
    "origin": "(const int *ptr, const int *idx)",
    "local": ""
  },
  {
    "origin": "(const unsigned *ptr, const int *idx)",
    "local": ""
  },
  {
    "origin": "(const float *ptr, const int *idx)",
    "local": ""
  },
  {
    "origin": "Wide load with double expansion",
    "local": ""
  },
  {
    "origin": "Load maximum available capacity register contents from memory with double expand",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr)",
    "local": ""
  },
  {
    "origin": "(const short *ptr)",
    "local": ""
  },
  {
    "origin": "(const int *ptr)",
    "local": ""
  },
  {
    "origin": "(const unsigned *ptr)",
    "local": ""
  },
  {
    "origin": "(const float16_t *ptr)",
    "local": ""
  },
  {
    "origin": "Wide load with quad expansion",
    "local": ""
  },
  {
    "origin": "Load maximum available capacity register contents from memory with quad expand",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ptr)",
    "local": ""
  },
  {
    "origin": "Init with zero",
    "local": ""
  },
  {
    "origin": "Create new vector with zero elements",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Init with value",
    "local": ""
  },
  {
    "origin": "Create new vector with elements set to a specific value",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val)",
    "local": ""
  },
  {
    "origin": "(short val)",
    "local": ""
  },
  {
    "origin": "(unsigned val)",
    "local": ""
  },
  {
    "origin": "(int val)",
    "local": ""
  },
  {
    "origin": "(float val)",
    "local": ""
  },
  {
    "origin": "(double val)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val)",
    "local": ""
  },
  {
    "origin": "(short val)",
    "local": ""
  },
  {
    "origin": "(unsigned val)",
    "local": ""
  },
  {
    "origin": "(int val)",
    "local": ""
  },
  {
    "origin": "(float val)",
    "local": ""
  },
  {
    "origin": "(double val)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val)",
    "local": ""
  },
  {
    "origin": "(short val)",
    "local": ""
  },
  {
    "origin": "(unsigned val)",
    "local": ""
  },
  {
    "origin": "(int val)",
    "local": ""
  },
  {
    "origin": "(float val)",
    "local": ""
  },
  {
    "origin": "(double val)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val)",
    "local": ""
  },
  {
    "origin": "Reinterpret",
    "local": ""
  },
  {
    "origin": "Convert vector to different type without modifying underlying data.",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp0 , int n0&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n0 *sizeof(_Tp0)/sizeof(",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp0, n0 &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp0 , int n0&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n0 *sizeof(_Tp0)/sizeof(",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp0, n0 &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp0 , int n0&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n0 *sizeof(_Tp0)/sizeof(",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp0, n0 &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp0 , int n0&gt;",
    "local": ""
  },
  {
    "origin": "&lt; short, n0 *sizeof(_Tp0)/sizeof(short)&gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp0, n0 &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp0 , int n0&gt;",
    "local": ""
  },
  {
    "origin": "&lt; unsigned, n0 *sizeof(_Tp0)/sizeof(unsigned)&gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp0, n0 &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp0 , int n0&gt;",
    "local": ""
  },
  {
    "origin": "&lt; int, n0 *sizeof(_Tp0)/sizeof(int)&gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp0, n0 &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp0 , int n0&gt;",
    "local": ""
  },
  {
    "origin": "&lt; float, n0 *sizeof(_Tp0)/sizeof(float)&gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp0, n0 &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp0 , int n0&gt;",
    "local": ""
  },
  {
    "origin": "&lt; double, n0 *sizeof(_Tp0)/sizeof(double)&gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp0, n0 &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp0 , int n0&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n0 *sizeof(_Tp0)/sizeof(",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp0, n0 &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp0 , int n0&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n0 *sizeof(_Tp0)/sizeof(",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp0, n0 &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Left shift",
    "local": ""
  },
  {
    "origin": "Shift left",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; short, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; unsigned, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Right shift",
    "local": ""
  },
  {
    "origin": "Shift right",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; short, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; unsigned, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Rounding shift",
    "local": ""
  },
  {
    "origin": "Rounding shift right",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; short, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; unsigned, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Pack",
    "local": ""
  },
  {
    "origin": "Pack values from two vectors to one",
    "local": ""
  },
  {
    "origin": "Return vector type have twice more elements than input vector types. Variant with",
    "local": ""
  },
  {
    "origin": "u",
    "local": ""
  },
  {
    "origin": "suffix also converts to corresponding unsigned type.",
    "local": ""
  },
  {
    "origin": "pack: for 16-, 32- and 64-bit integer input types",
    "local": ""
  },
  {
    "origin": "pack_u: for 16- and 32-bit signed integer input types",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "All variants except 64-bit use saturation.",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 2 *n &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 2 *n &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; short, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; short, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 2 *n &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; unsigned, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; unsigned, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; short, 2 *n &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; unsigned, 2 *n &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; int, 2 *n &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 2 *n &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; short, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; short, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 2 *n &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Pack with rounding shift",
    "local": ""
  },
  {
    "origin": "Pack values from two vectors to one with rounding shift",
    "local": ""
  },
  {
    "origin": "Values from the input vectors will be shifted right by",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": "bits with rounding, converted to narrower type and returned in the result vector. Variant with",
    "local": ""
  },
  {
    "origin": "u",
    "local": ""
  },
  {
    "origin": "suffix converts to unsigned type.",
    "local": ""
  },
  {
    "origin": "pack: for 16-, 32- and 64-bit integer input types",
    "local": ""
  },
  {
    "origin": "pack_u: for 16- and 32-bit signed integer input types",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "All variants except 64-bit use saturation.",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 2 *n &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 2 *n &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; short, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; short, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 2 *n &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; unsigned, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; unsigned, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; short, 2 *n &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; unsigned, 2 *n &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; int, 2 *n &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 2 *n &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; short, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; short, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 2 *n &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "Pack and store",
    "local": ""
  },
  {
    "origin": "Store values from the input vector into memory with pack",
    "local": ""
  },
  {
    "origin": "Values will be stored into memory with conversion to narrower type. Variant with",
    "local": ""
  },
  {
    "origin": "u",
    "local": ""
  },
  {
    "origin": "suffix converts to corresponding unsigned type.",
    "local": ""
  },
  {
    "origin": "pack: for 16-, 32- and 64-bit integer input types",
    "local": ""
  },
  {
    "origin": "pack_u: for 16- and 32-bit signed integer input types",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "All variants except 64-bit use saturation.",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "*ptr, const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "*ptr, const",
    "local": ""
  },
  {
    "origin": "&lt; short, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "*ptr, const",
    "local": ""
  },
  {
    "origin": "&lt; unsigned, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(short *ptr, const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(unsigned *ptr, const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(int *ptr, const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "*ptr, const",
    "local": ""
  },
  {
    "origin": "&lt; short, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "*ptr, const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Pack and store with rounding shift",
    "local": ""
  },
  {
    "origin": "Store values from the input vector into memory with pack",
    "local": ""
  },
  {
    "origin": "Values will be shifted",
    "local": ""
  },
  {
    "origin": "n",
    "local": ""
  },
  {
    "origin": "bits right with rounding, converted to narrower type and stored into memory. Variant with",
    "local": ""
  },
  {
    "origin": "u",
    "local": ""
  },
  {
    "origin": "suffix converts to unsigned type.",
    "local": ""
  },
  {
    "origin": "pack: for 16-, 32- and 64-bit integer input types",
    "local": ""
  },
  {
    "origin": "pack_u: for 16- and 32-bit signed integer input types",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "All variants except 64-bit use saturation.",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "*ptr, const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "*ptr, const",
    "local": ""
  },
  {
    "origin": "&lt; short, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "*ptr, const",
    "local": ""
  },
  {
    "origin": "&lt; unsigned, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "(short *ptr, const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "(unsigned *ptr, const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "(int *ptr, const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "*ptr, const",
    "local": ""
  },
  {
    "origin": "&lt; short, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "*ptr, const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;a)",
    "local": ""
  },
  {
    "origin": "Pack boolean values",
    "local": ""
  },
  {
    "origin": "Pack boolean values from multiple vectors to one unsigned 8-bit integer vector",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Must provide valid boolean values to guarantee same result for all architectures.",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 2 *n &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;b)",
    "local": ""
  },
  {
    "origin": "! For 16-bit boolean values",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 4 *n &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; unsigned, n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt; unsigned, n &gt; &amp;b, const",
    "local": ""
  },
  {
    "origin": "&lt; unsigned, n &gt; &amp;c, const",
    "local": ""
  },
  {
    "origin": "&lt; unsigned, n &gt; &amp;d)",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 8 *n &gt;&#160;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;a, const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;b, const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;c, const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;d, const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;e, const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;f, const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;g, const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;h)",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "\"Universal intrinsics\" is a types and functions set intended to simplify vectorization of code on different platforms. Currently a few different SIMD extensions on different architectures are supported. 128 bit registers of various types support is implemented for a wide range of architectures including x86(",
    "local": ""
  },
  {
    "origin": "SSE/SSE2/SSE4.2",
    "local": ""
  },
  {
    "origin": "), ARM(",
    "local": ""
  },
  {
    "origin": "NEON",
    "local": ""
  },
  {
    "origin": "), PowerPC(",
    "local": ""
  },
  {
    "origin": "VSX",
    "local": ""
  },
  {
    "origin": "), MIPS(",
    "local": ""
  },
  {
    "origin": "MSA",
    "local": ""
  },
  {
    "origin": "). 256 bit long registers are supported on x86(",
    "local": ""
  },
  {
    "origin": "AVX2",
    "local": ""
  },
  {
    "origin": ") and 512 bit long registers are supported on x86(",
    "local": ""
  },
  {
    "origin": "AVX512",
    "local": ""
  },
  {
    "origin": "). In case when there is no SIMD extension available during compilation, fallback C++ implementation of intrinsics will be chosen and code will work as expected although it could be slower.",
    "local": ""
  },
  {
    "origin": "Types",
    "local": ""
  },
  {
    "origin": "There are several types representing packed values vector registers, each type is implemented as a structure based on a one SIMD register.",
    "local": ""
  },
  {
    "origin": "cv::v_uint8 and cv::v_int8: 8-bit integer values (unsigned/signed) - char",
    "local": ""
  },
  {
    "origin": "cv::v_uint16 and cv::v_int16: 16-bit integer values (unsigned/signed) - short",
    "local": ""
  },
  {
    "origin": "cv::v_uint32 and cv::v_int32: 32-bit integer values (unsigned/signed) - int",
    "local": ""
  },
  {
    "origin": "cv::v_uint64 and cv::v_int64: 64-bit integer values (unsigned/signed) - int64",
    "local": ""
  },
  {
    "origin": "cv::v_float32: 32-bit floating point values (signed) - float",
    "local": ""
  },
  {
    "origin": "cv::v_float64: 64-bit floating point values (signed) - double",
    "local": ""
  },
  {
    "origin": "Exact bit length(and value quantity) of listed types is compile time deduced and depends on architecture SIMD capabilities chosen as available during compilation of the library. All the types contains",
    "local": ""
  },
  {
    "origin": "nlanes",
    "local": ""
  },
  {
    "origin": "enumeration to check for exact value quantity of the type.",
    "local": ""
  },
  {
    "origin": "In case the exact bit length of the type is important it is possible to use specific fixed length register types.",
    "local": ""
  },
  {
    "origin": "There are several types representing 128-bit registers.",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": ": sixteen 8-bit integer values (unsigned/signed) - char",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": ": eight 16-bit integer values (unsigned/signed) - short",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": ": four 32-bit integer values (unsigned/signed) - int",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": ": two 64-bit integer values (unsigned/signed) - int64",
    "local": ""
  },
  {
    "origin": ": four 32-bit floating point values (signed) - float",
    "local": ""
  },
  {
    "origin": ": two 64-bit floating point values (signed) - double",
    "local": ""
  },
  {
    "origin": "There are several types representing 256-bit registers.",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": ": thirty two 8-bit integer values (unsigned/signed) - char",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": ": sixteen 16-bit integer values (unsigned/signed) - short",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": ": eight 32-bit integer values (unsigned/signed) - int",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": ": four 64-bit integer values (unsigned/signed) - int64",
    "local": ""
  },
  {
    "origin": ": eight 32-bit floating point values (signed) - float",
    "local": ""
  },
  {
    "origin": ": four 64-bit floating point values (signed) - double",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "256 bit registers at the moment implemented for AVX2 SIMD extension only, if you want to use this type directly, don't forget to check the CV_SIMD256 preprocessor definition:",
    "local": ""
  },
  {
    "origin": "There are several types representing 512-bit registers.",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": ": sixty four 8-bit integer values (unsigned/signed) - char",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": ": thirty two 16-bit integer values (unsigned/signed) - short",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": ": sixteen 32-bit integer values (unsigned/signed) - int",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": ": eight 64-bit integer values (unsigned/signed) - int64",
    "local": ""
  },
  {
    "origin": ": sixteen 32-bit floating point values (signed) - float",
    "local": ""
  },
  {
    "origin": ": eight 64-bit floating point values (signed) - double",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "512 bit registers at the moment implemented for AVX512 SIMD extension only, if you want to use this type directly, don't forget to check the CV_SIMD512 preprocessor definition.",
    "local": ""
  },
  {
    "origin": "is not implemented in NEON variant, if you want to use this type, don't forget to check the CV_SIMD128_64F preprocessor definition.",
    "local": ""
  },
  {
    "origin": "Load and store operations",
    "local": ""
  },
  {
    "origin": "These operations allow to set contents of the register explicitly or by loading it from some memory block and to save contents of the register to memory block.",
    "local": ""
  },
  {
    "origin": "There are variable size register load operations that provide result of maximum available size depending on chosen platform capabilities.",
    "local": ""
  },
  {
    "origin": "Constructors:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Other create methods: vx_setall_s8, vx_setall_u8, ..., vx_setzero_u8, vx_setzero_s8, ...",
    "local": ""
  },
  {
    "origin": "Memory load operations: vx_load, vx_load_aligned, vx_load_low, vx_load_halves,",
    "local": ""
  },
  {
    "origin": "Memory operations with expansion of values: vx_load_expand, vx_load_expand_q",
    "local": ""
  },
  {
    "origin": "Also there are fixed size register load/store operations.",
    "local": ""
  },
  {
    "origin": "For 128 bit registers",
    "local": ""
  },
  {
    "origin": "Constructors:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", ...",
    "local": ""
  },
  {
    "origin": "Other create methods:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", ...,",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", ...",
    "local": ""
  },
  {
    "origin": "Memory load operations:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Memory operations with expansion of values:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "For 256 bit registers(check CV_SIMD256 preprocessor definition)",
    "local": ""
  },
  {
    "origin": "Constructors:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", ...",
    "local": ""
  },
  {
    "origin": "Other create methods:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", ...,",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", ...",
    "local": ""
  },
  {
    "origin": "Memory load operations:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Memory operations with expansion of values:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "For 512 bit registers(check CV_SIMD512 preprocessor definition)",
    "local": ""
  },
  {
    "origin": "Constructors:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", ...",
    "local": ""
  },
  {
    "origin": "Other create methods:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", ...,",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", ...",
    "local": ""
  },
  {
    "origin": "Memory load operations:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Memory operations with expansion of values:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Store to memory operations are similar across different platform capabilities:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Value reordering",
    "local": ""
  },
  {
    "origin": "These operations allow to reorder or recombine elements in one or multiple vectors.",
    "local": ""
  },
  {
    "origin": "Interleave, deinterleave (2, 3 and 4 channels):",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Expand:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Pack:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Recombine:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Reverse:",
    "local": ""
  },
  {
    "origin": "Extract:",
    "local": ""
  },
  {
    "origin": "Arithmetic, bitwise and comparison operations",
    "local": ""
  },
  {
    "origin": "Element-wise binary and unary operations.",
    "local": ""
  },
  {
    "origin": "Arithmetics:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Non-saturating arithmetics:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Bitwise shifts:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Bitwise logic:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Comparison:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "min/max:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Reduce and mask",
    "local": ""
  },
  {
    "origin": "Most of these operations return only one value.",
    "local": ""
  },
  {
    "origin": "Reduce:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Mask:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Other math",
    "local": ""
  },
  {
    "origin": "Some frequent operations:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Absolute values:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Conversions",
    "local": ""
  },
  {
    "origin": "Different type conversions and casts:",
    "local": ""
  },
  {
    "origin": "Rounding:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "To float:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Reinterpret:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ", ...",
    "local": ""
  },
  {
    "origin": "Matrix operations",
    "local": ""
  },
  {
    "origin": "In these operations vectors represent matrix rows/columns:",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "Usability",
    "local": ""
  },
  {
    "origin": "Most operations are implemented only for some subset of the available types, following matrices shows the applicability of different operations to the types.",
    "local": ""
  },
  {
    "origin": "Regular integers:",
    "local": ""
  },
  {
    "origin": "Operations\\Types",
    "local": ""
  },
  {
    "origin": "uint 16",
    "local": ""
  },
  {
    "origin": "int 16",
    "local": ""
  },
  {
    "origin": "load, store",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "interleave",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "expand",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "expand_low",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "expand_high",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "expand_q",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "add, sub",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "add_wrap, sub_wrap",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "mul_wrap",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "mul",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "mul_expand",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "compare",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "shift",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "dotprod",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "dotprod_fast",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "dotprod_expand",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "dotprod_expand_fast",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "logical",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "min, max",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "absdiff",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "absdiffs",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "reduce",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "pack",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "pack_u",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "pack_b",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "unpack",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "extract",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "rotate (lanes)",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "cvt_flt32",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "cvt_flt64",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "transpose4x4",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "reverse",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "extract_n",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "broadcast_element",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "Big integers:",
    "local": ""
  },
  {
    "origin": "Operations\\Types",
    "local": ""
  },
  {
    "origin": "load, store",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "add, sub",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "shift",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "logical",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "reverse",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "extract",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "rotate (lanes)",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "cvt_flt64",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "extract_n",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "Floating point:",
    "local": ""
  },
  {
    "origin": "Operations\\Types",
    "local": ""
  },
  {
    "origin": "load, store",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "interleave",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "add, sub",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "mul",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "div",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "compare",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "min, max",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "absdiff",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "reduce",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "unpack",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "cvt_flt32",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "cvt_flt64",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "sqrt, abs",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "float math",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "transpose4x4",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "extract",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "rotate (lanes)",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "reverse",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "extract_n",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "broadcast_element",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": "Typedef Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_float32",
    "local": ""
  },
  {
    "origin": "typedef v_float32x16",
    "local": ""
  },
  {
    "origin": "Maximum available vector register capacity 32-bit floating point values (single precision)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_float32x16",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;float, 16&gt;",
    "local": ""
  },
  {
    "origin": "Sixteen 32-bit floating point values (single precision)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_float32x4",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;float, 4&gt;",
    "local": ""
  },
  {
    "origin": "Four 32-bit floating point values (single precision)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_float32x8",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;float, 8&gt;",
    "local": ""
  },
  {
    "origin": "Eight 32-bit floating point values (single precision)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_float64",
    "local": ""
  },
  {
    "origin": "typedef v_float64x8",
    "local": ""
  },
  {
    "origin": "Maximum available vector register capacity 64-bit floating point values (double precision)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_float64x2",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;double, 2&gt;",
    "local": ""
  },
  {
    "origin": "Two 64-bit floating point values (double precision)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_float64x4",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;double, 4&gt;",
    "local": ""
  },
  {
    "origin": "Four 64-bit floating point values (double precision)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_float64x8",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;double, 8&gt;",
    "local": ""
  },
  {
    "origin": "Eight 64-bit floating point values (double precision)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_int16",
    "local": ""
  },
  {
    "origin": "typedef v_int16x32",
    "local": ""
  },
  {
    "origin": "Maximum available vector register capacity 16-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_int16x16",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;short, 16&gt;",
    "local": ""
  },
  {
    "origin": "Sixteen 16-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_int16x32",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;short, 32&gt;",
    "local": ""
  },
  {
    "origin": "Thirty two 16-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_int16x8",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;short, 8&gt;",
    "local": ""
  },
  {
    "origin": "Eight 16-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_int32",
    "local": ""
  },
  {
    "origin": "typedef v_int32x16",
    "local": ""
  },
  {
    "origin": "Maximum available vector register capacity 32-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_int32x16",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;int, 16&gt;",
    "local": ""
  },
  {
    "origin": "Sixteen 32-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_int32x4",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;int, 4&gt;",
    "local": ""
  },
  {
    "origin": "Four 32-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_int32x8",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;int, 8&gt;",
    "local": ""
  },
  {
    "origin": "Eight 32-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_int64",
    "local": ""
  },
  {
    "origin": "typedef v_int64x8",
    "local": ""
  },
  {
    "origin": "Maximum available vector register capacity 64-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_int64x2",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 2&gt;",
    "local": ""
  },
  {
    "origin": "Two 64-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_int64x4",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 4&gt;",
    "local": ""
  },
  {
    "origin": "Four 64-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_int64x8",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 8&gt;",
    "local": ""
  },
  {
    "origin": "Eight 64-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_int8",
    "local": ""
  },
  {
    "origin": "typedef v_int8x64",
    "local": ""
  },
  {
    "origin": "Maximum available vector register capacity 8-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_int8x16",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 16&gt;",
    "local": ""
  },
  {
    "origin": "Sixteen 8-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_int8x32",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 32&gt;",
    "local": ""
  },
  {
    "origin": "Thirty two 8-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_int8x64",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 64&gt;",
    "local": ""
  },
  {
    "origin": "Sixty four 8-bit signed integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_uint16",
    "local": ""
  },
  {
    "origin": "typedef v_uint16x32",
    "local": ""
  },
  {
    "origin": "Maximum available vector register capacity 16-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_uint16x16",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 16&gt;",
    "local": ""
  },
  {
    "origin": "Sixteen 16-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_uint16x32",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 32&gt;",
    "local": ""
  },
  {
    "origin": "Thirty two 16-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_uint16x8",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 8&gt;",
    "local": ""
  },
  {
    "origin": "Eight 16-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_uint32",
    "local": ""
  },
  {
    "origin": "typedef v_uint32x16",
    "local": ""
  },
  {
    "origin": "Maximum available vector register capacity 32-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_uint32x16",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;unsigned, 16&gt;",
    "local": ""
  },
  {
    "origin": "Sixteen 32-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_uint32x4",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;unsigned, 4&gt;",
    "local": ""
  },
  {
    "origin": "Four 32-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_uint32x8",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;unsigned, 8&gt;",
    "local": ""
  },
  {
    "origin": "Eight 32-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_uint64",
    "local": ""
  },
  {
    "origin": "typedef v_uint64x8",
    "local": ""
  },
  {
    "origin": "Maximum available vector register capacity 64-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_uint64x2",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 2&gt;",
    "local": ""
  },
  {
    "origin": "Two 64-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_uint64x4",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 4&gt;",
    "local": ""
  },
  {
    "origin": "Four 64-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_uint64x8",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 8&gt;",
    "local": ""
  },
  {
    "origin": "Eight 64-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_uint8",
    "local": ""
  },
  {
    "origin": "typedef v_uint8x64",
    "local": ""
  },
  {
    "origin": "Maximum available vector register capacity 8-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_uint8x16",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 16&gt;",
    "local": ""
  },
  {
    "origin": "Sixteen 8-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_uint8x32",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 32&gt;",
    "local": ""
  },
  {
    "origin": "Thirty two 8-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_uint8x64",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 64&gt;",
    "local": ""
  },
  {
    "origin": "Sixty four 8-bit unsigned integer values.",
    "local": ""
  },
  {
    "origin": "Enumeration Type Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "anonymous enum",
    "local": ""
  },
  {
    "origin": "anonymous enum",
    "local": ""
  },
  {
    "origin": "Enumerator",
    "local": ""
  },
  {
    "origin": "simd128_width&#160;",
    "local": ""
  },
  {
    "origin": "simd256_width&#160;",
    "local": ""
  },
  {
    "origin": "simd512_width&#160;",
    "local": ""
  },
  {
    "origin": "Function Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator &()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::operator&amp;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Bitwise AND.",
    "local": ""
  },
  {
    "origin": "Only for integer types.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator &=()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt;&amp; cv::operator&amp;=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator!=()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::operator!=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Not equal comparison.",
    "local": ""
  },
  {
    "origin": "For all types except 64-bit integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator*()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::operator*",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Multiply values.",
    "local": ""
  },
  {
    "origin": "For 16- and 32-bit integer types and floating types.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator*=()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt;&amp; cv::operator*=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator+()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::operator+",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Add values.",
    "local": ""
  },
  {
    "origin": "For all types.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator+=()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt;&amp; cv::operator+=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator-()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::operator-",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Subtract values.",
    "local": ""
  },
  {
    "origin": "For all types.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator-=()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt;&amp; cv::operator-=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator/()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::operator/",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Divide values.",
    "local": ""
  },
  {
    "origin": "For floating types only.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator/=()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt;&amp; cv::operator/=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::operator&lt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Less-than comparison.",
    "local": ""
  },
  {
    "origin": "For all types except 64-bit integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator",
    "local": ""
  },
  {
    "origin": "<",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::operator&lt;&lt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "imm",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Bitwise shift left.",
    "local": ""
  },
  {
    "origin": "For 16-, 32- and 64-bit integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::operator&lt;=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Less-than or equal comparison.",
    "local": ""
  },
  {
    "origin": "For all types except 64-bit integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator==()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::operator==",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Equal comparison.",
    "local": ""
  },
  {
    "origin": "For all types except 64-bit integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator>()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::operator&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Greater-than comparison.",
    "local": ""
  },
  {
    "origin": "For all types except 64-bit integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator>=()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::operator&gt;=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Greater-than or equal comparison.",
    "local": ""
  },
  {
    "origin": "For all types except 64-bit integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator>>()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::operator&gt;&gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "imm",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Bitwise shift right.",
    "local": ""
  },
  {
    "origin": "For 16-, 32- and 64-bit integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator^()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::operator^",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Bitwise XOR.",
    "local": ""
  },
  {
    "origin": "Only for integer types.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator^=()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt;&amp; cv::operator^=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator|()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::operator|",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Bitwise OR.",
    "local": ""
  },
  {
    "origin": "Only for integer types.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator|=()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt;&amp; cv::operator|=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator~()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::operator~",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Bitwise NOT.",
    "local": ""
  },
  {
    "origin": "Only for integer types.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v256_cleanup()",
    "local": ""
  },
  {
    "origin": "void cv::v256_cleanup",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v256_load()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp,",
    "local": ""
  },
  {
    "origin": "/ sizeof(_Tp)&gt; cv::v256_load",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Load 256-bit length register contents from memory.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": "pointer to memory block with data",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "register object",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Returned type will be detected from passed pointer type, for example uchar ==&gt;",
    "local": ""
  },
  {
    "origin": ", int ==&gt;",
    "local": ""
  },
  {
    "origin": ", etc.",
    "local": ""
  },
  {
    "origin": "Check CV_SIMD256 preprocessor definition prior to use. Use vx_load version to get maximum available register length result",
    "local": ""
  },
  {
    "origin": "Alignment requirement: if CV_STRONG_ALIGNMENT=1 then passed pointer must be aligned (",
    "local": ""
  },
  {
    "origin": "should be enough). Do not cast pointer types without runtime check for pointer alignment (like",
    "local": ""
  },
  {
    "origin": "=&gt;",
    "local": ""
  },
  {
    "origin": ").",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v256_load_aligned()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp,",
    "local": ""
  },
  {
    "origin": "/ sizeof(_Tp)&gt; cv::v256_load_aligned",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Load register contents from memory (aligned)",
    "local": ""
  },
  {
    "origin": "similar to",
    "local": ""
  },
  {
    "origin": ", but source memory block should be aligned (to 32-byte boundary in case of SIMD256, 64-byte - SIMD512, etc)",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Check CV_SIMD256 preprocessor definition prior to use. Use vx_load_aligned version to get maximum available register length result",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v256_load_expand()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt;typename",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;::w_type,",
    "local": ""
  },
  {
    "origin": "/ sizeof(typename",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;::w_type)&gt; cv::v256_load_expand",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Load register contents from memory with double expand.",
    "local": ""
  },
  {
    "origin": "Same as",
    "local": ""
  },
  {
    "origin": ", but result pack type will be 2x wider than memory type.",
    "local": ""
  },
  {
    "origin": "For 8-, 16-, 32-bit integer source types.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Check CV_SIMD256 preprocessor definition prior to use. Use vx_load_expand version to get maximum available register length result",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v256_load_expand()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "&lt;float,",
    "local": ""
  },
  {
    "origin": "/ sizeof(float)&gt; cv::v256_load_expand",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v256_load_expand_q()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt;typename",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;::q_type,",
    "local": ""
  },
  {
    "origin": "/ sizeof(typename",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;::q_type)&gt; cv::v256_load_expand_q",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Load register contents from memory with quad expand.",
    "local": ""
  },
  {
    "origin": "Same as",
    "local": ""
  },
  {
    "origin": ", but result type is 4 times wider than source.",
    "local": ""
  },
  {
    "origin": "For 8-bit integer source types.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Check CV_SIMD256 preprocessor definition prior to use. Use vx_load_expand_q version to get maximum available register length result",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v256_load_halves()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp,",
    "local": ""
  },
  {
    "origin": "/ sizeof(_Tp)&gt; cv::v256_load_halves",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "loptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hiptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Load register contents from two memory blocks.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "loptr",
    "local": ""
  },
  {
    "origin": "memory block containing data for first half (0..n/2)",
    "local": ""
  },
  {
    "origin": "hiptr",
    "local": ""
  },
  {
    "origin": "memory block containing data for second half (n/2..n)",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Check CV_SIMD256 preprocessor definition prior to use. Use vx_load_halves version to get maximum available register length result",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v256_load_low()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp,",
    "local": ""
  },
  {
    "origin": "/ sizeof(_Tp)&gt; cv::v256_load_low",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Load 128-bits of data to lower part (high part is undefined).",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": "memory block containing data for first half (0..n/2)",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Check CV_SIMD256 preprocessor definition prior to use. Use vx_load_low version to get maximum available register length result",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v256_setall_f32()",
    "local": ""
  },
  {
    "origin": "cv::v256_setall_f32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v256_setall_f64()",
    "local": ""
  },
  {
    "origin": "cv::v256_setall_f64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v256_setall_s16()",
    "local": ""
  },
  {
    "origin": "cv::v256_setall_s16",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v256_setall_s32()",
    "local": ""
  },
  {
    "origin": "cv::v256_setall_s32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v256_setall_s64()",
    "local": ""
  },
  {
    "origin": "cv::v256_setall_s64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v256_setall_s8()",
    "local": ""
  },
  {
    "origin": "cv::v256_setall_s8",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v256_setall_u16()",
    "local": ""
  },
  {
    "origin": "cv::v256_setall_u16",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v256_setall_u32()",
    "local": ""
  },
  {
    "origin": "cv::v256_setall_u32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v256_setall_u64()",
    "local": ""
  },
  {
    "origin": "cv::v256_setall_u64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v256_setall_u8()",
    "local": ""
  },
  {
    "origin": "cv::v256_setall_u8",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v256_setzero_f32()",
    "local": ""
  },
  {
    "origin": "cv::v256_setzero_f32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v256_setzero_f64()",
    "local": ""
  },
  {
    "origin": "cv::v256_setzero_f64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v256_setzero_s16()",
    "local": ""
  },
  {
    "origin": "cv::v256_setzero_s16",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v256_setzero_s32()",
    "local": ""
  },
  {
    "origin": "cv::v256_setzero_s32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v256_setzero_s64()",
    "local": ""
  },
  {
    "origin": "cv::v256_setzero_s64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v256_setzero_s8()",
    "local": ""
  },
  {
    "origin": "cv::v256_setzero_s8",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v256_setzero_u16()",
    "local": ""
  },
  {
    "origin": "cv::v256_setzero_u16",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v256_setzero_u32()",
    "local": ""
  },
  {
    "origin": "cv::v256_setzero_u32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v256_setzero_u64()",
    "local": ""
  },
  {
    "origin": "cv::v256_setzero_u64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v256_setzero_u8()",
    "local": ""
  },
  {
    "origin": "cv::v256_setzero_u8",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v512_cleanup()",
    "local": ""
  },
  {
    "origin": "void cv::v512_cleanup",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v512_load()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp,",
    "local": ""
  },
  {
    "origin": "/ sizeof(_Tp)&gt; cv::v512_load",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Load 512-bit length register contents from memory.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": "pointer to memory block with data",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "register object",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Returned type will be detected from passed pointer type, for example uchar ==&gt;",
    "local": ""
  },
  {
    "origin": ", int ==&gt;",
    "local": ""
  },
  {
    "origin": ", etc.",
    "local": ""
  },
  {
    "origin": "Check CV_SIMD512 preprocessor definition prior to use. Use vx_load version to get maximum available register length result",
    "local": ""
  },
  {
    "origin": "Alignment requirement: if CV_STRONG_ALIGNMENT=1 then passed pointer must be aligned (",
    "local": ""
  },
  {
    "origin": "should be enough). Do not cast pointer types without runtime check for pointer alignment (like",
    "local": ""
  },
  {
    "origin": "=&gt;",
    "local": ""
  },
  {
    "origin": ").",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v512_load_aligned()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp,",
    "local": ""
  },
  {
    "origin": "/ sizeof(_Tp)&gt; cv::v512_load_aligned",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Load register contents from memory (aligned)",
    "local": ""
  },
  {
    "origin": "similar to",
    "local": ""
  },
  {
    "origin": ", but source memory block should be aligned (to 64-byte boundary in case of SIMD512, etc)",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Check CV_SIMD512 preprocessor definition prior to use. Use vx_load_aligned version to get maximum available register length result",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v512_load_expand()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt;typename",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;::w_type,",
    "local": ""
  },
  {
    "origin": "/ sizeof(typename",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;::w_type)&gt; cv::v512_load_expand",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Load register contents from memory with double expand.",
    "local": ""
  },
  {
    "origin": "Same as",
    "local": ""
  },
  {
    "origin": ", but result pack type will be 2x wider than memory type.",
    "local": ""
  },
  {
    "origin": "For 8-, 16-, 32-bit integer source types.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Check CV_SIMD512 preprocessor definition prior to use. Use vx_load_expand version to get maximum available register length result",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v512_load_expand()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "&lt;float,",
    "local": ""
  },
  {
    "origin": "/ sizeof(float)&gt; cv::v512_load_expand",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v512_load_expand_q()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt;typename",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;::q_type,",
    "local": ""
  },
  {
    "origin": "/ sizeof(typename",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;::q_type)&gt; cv::v512_load_expand_q",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Load register contents from memory with quad expand.",
    "local": ""
  },
  {
    "origin": "Same as",
    "local": ""
  },
  {
    "origin": ", but result type is 4 times wider than source.",
    "local": ""
  },
  {
    "origin": "For 8-bit integer source types.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Check CV_SIMD512 preprocessor definition prior to use. Use vx_load_expand_q version to get maximum available register length result",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v512_load_halves()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp,",
    "local": ""
  },
  {
    "origin": "/ sizeof(_Tp)&gt; cv::v512_load_halves",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "loptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hiptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Load register contents from two memory blocks.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "loptr",
    "local": ""
  },
  {
    "origin": "memory block containing data for first half (0..n/2)",
    "local": ""
  },
  {
    "origin": "hiptr",
    "local": ""
  },
  {
    "origin": "memory block containing data for second half (n/2..n)",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Check CV_SIMD512 preprocessor definition prior to use. Use vx_load_halves version to get maximum available register length result",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v512_load_low()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp,",
    "local": ""
  },
  {
    "origin": "/ sizeof(_Tp)&gt; cv::v512_load_low",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Load 256-bits of data to lower part (high part is undefined).",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": "memory block containing data for first half (0..n/2)",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Check CV_SIMD512 preprocessor definition prior to use. Use vx_load_low version to get maximum available register length result",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v512_setall_f32()",
    "local": ""
  },
  {
    "origin": "cv::v512_setall_f32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v512_setall_f64()",
    "local": ""
  },
  {
    "origin": "cv::v512_setall_f64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v512_setall_s16()",
    "local": ""
  },
  {
    "origin": "cv::v512_setall_s16",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v512_setall_s32()",
    "local": ""
  },
  {
    "origin": "cv::v512_setall_s32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v512_setall_s64()",
    "local": ""
  },
  {
    "origin": "cv::v512_setall_s64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v512_setall_s8()",
    "local": ""
  },
  {
    "origin": "cv::v512_setall_s8",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v512_setall_u16()",
    "local": ""
  },
  {
    "origin": "cv::v512_setall_u16",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v512_setall_u32()",
    "local": ""
  },
  {
    "origin": "cv::v512_setall_u32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v512_setall_u64()",
    "local": ""
  },
  {
    "origin": "cv::v512_setall_u64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v512_setall_u8()",
    "local": ""
  },
  {
    "origin": "cv::v512_setall_u8",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v512_setzero_f32()",
    "local": ""
  },
  {
    "origin": "cv::v512_setzero_f32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v512_setzero_f64()",
    "local": ""
  },
  {
    "origin": "cv::v512_setzero_f64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v512_setzero_s16()",
    "local": ""
  },
  {
    "origin": "cv::v512_setzero_s16",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v512_setzero_s32()",
    "local": ""
  },
  {
    "origin": "cv::v512_setzero_s32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v512_setzero_s64()",
    "local": ""
  },
  {
    "origin": "cv::v512_setzero_s64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v512_setzero_s8()",
    "local": ""
  },
  {
    "origin": "cv::v512_setzero_s8",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v512_setzero_u16()",
    "local": ""
  },
  {
    "origin": "cv::v512_setzero_u16",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v512_setzero_u32()",
    "local": ""
  },
  {
    "origin": "cv::v512_setzero_u32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v512_setzero_u64()",
    "local": ""
  },
  {
    "origin": "cv::v512_setzero_u64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v512_setzero_u8()",
    "local": ""
  },
  {
    "origin": "cv::v512_setzero_u8",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_abs()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;::abs_type , n&gt; cv::v_abs",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Absolute value of elements.",
    "local": ""
  },
  {
    "origin": "Only for floating point types.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_absdiff()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;typename",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;::abs_type, n&gt; cv::v_absdiff",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Absolute difference.",
    "local": ""
  },
  {
    "origin": "Returns \\( |a - b| \\) converted to corresponding unsigned type. Example:",
    "local": ""
  },
  {
    "origin": "For 8-, 16-, 32-bit integer source types.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_absdiff()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;float, n&gt; cv::v_absdiff",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "For 32-bit floating point values",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_absdiff()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;double, n&gt; cv::v_absdiff",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "For 64-bit floating point values",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_absdiffs()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::v_absdiffs",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Saturating absolute difference.",
    "local": ""
  },
  {
    "origin": "Returns \\( saturate(|a - b|) \\) . For 8-, 16-bit signed integer source types.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_add_wrap()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp , n&gt; cv::v_add_wrap",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Add values without saturation.",
    "local": ""
  },
  {
    "origin": "For 8- and 16-bit integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_broadcast_element()",
    "local": ""
  },
  {
    "origin": "template&lt;int i, typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::v_broadcast_element",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Broadcast i-th element of vector.",
    "local": ""
  },
  {
    "origin": "Scheme:",
    "local": ""
  },
  {
    "origin": "Restriction: 0 &lt;= i &lt; nlanes Supported types: 32-bit integers and floats (s32/u32/f32)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_ceil()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;int, n&gt; cv::v_ceil",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Ceil elements.",
    "local": ""
  },
  {
    "origin": "Ceil each value. Input type is float vector ==&gt; output type is int vector.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Only for floating point types.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_ceil()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;int, n*2&gt; cv::v_ceil",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_check_all()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "bool cv::v_check_all",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Check if all packed values are less than zero.",
    "local": ""
  },
  {
    "origin": "Unsigned values will be casted to signed:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_check_any()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "bool cv::v_check_any",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Check if any of packed values is less than zero.",
    "local": ""
  },
  {
    "origin": "Unsigned values will be casted to signed:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_cleanup()",
    "local": ""
  },
  {
    "origin": "void cv::v_cleanup",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_combine_high()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::v_combine_high",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Combine vector from last elements of two vectors.",
    "local": ""
  },
  {
    "origin": "Scheme:",
    "local": ""
  },
  {
    "origin": "For all types except 64-bit.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_combine_low()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::v_combine_low",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Combine vector from first elements of two vectors.",
    "local": ""
  },
  {
    "origin": "Scheme:",
    "local": ""
  },
  {
    "origin": "For all types except 64-bit.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_cvt_f32()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;float, n&gt; cv::v_cvt_f32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Convert to float.",
    "local": ""
  },
  {
    "origin": "Supported input type is cv::v_int32.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_cvt_f32()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;float, n*2&gt; cv::v_cvt_f32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Convert lower half to float.",
    "local": ""
  },
  {
    "origin": "Supported input type is cv::v_float64.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_cvt_f32()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;float, n*2&gt; cv::v_cvt_f32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Convert to float.",
    "local": ""
  },
  {
    "origin": "Supported input type is cv::v_float64.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_cvt_f64()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;double, n/2&gt; cv::v_cvt_f64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Convert lower half to double.",
    "local": ""
  },
  {
    "origin": "Supported input type is cv::v_int32.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_cvt_f64()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;double, (n/2)&gt; cv::v_cvt_f64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Convert lower half to double.",
    "local": ""
  },
  {
    "origin": "Supported input type is cv::v_float32.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_cvt_f64()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;double, n&gt; cv::v_cvt_f64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Convert to double.",
    "local": ""
  },
  {
    "origin": "Supported input type is cv::v_int64.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_cvt_f64_high()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;double, (n/2)&gt; cv::v_cvt_f64_high",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Convert to double high part of vector.",
    "local": ""
  },
  {
    "origin": "Supported input type is cv::v_int32.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_cvt_f64_high()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;double, (n/2)&gt; cv::v_cvt_f64_high",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Convert to double high part of vector.",
    "local": ""
  },
  {
    "origin": "Supported input type is cv::v_float32.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_dotprod()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;typename",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;::w_type, n/2&gt; cv::v_dotprod",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Dot product of elements.",
    "local": ""
  },
  {
    "origin": "Multiply values in two registers and sum adjacent result pairs.",
    "local": ""
  },
  {
    "origin": "Scheme:",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_dotprod()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;typename",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;::w_type, n/2&gt; cv::v_dotprod",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::w_type, n/2 &gt; &amp;&#160;",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Dot product of elements.",
    "local": ""
  },
  {
    "origin": "Same as",
    "local": ""
  },
  {
    "origin": ", but add a third element to the sum of adjacent pairs. Scheme:",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_dotprod_expand()",
    "local": ""
  },
  {
    "origin": "[1/4]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;typename",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;::q_type, n/4&gt; cv::v_dotprod_expand",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Dot product of elements and expand.",
    "local": ""
  },
  {
    "origin": "Multiply values in two registers and expand the sum of adjacent result pairs.",
    "local": ""
  },
  {
    "origin": "Scheme:",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_dotprod_expand()",
    "local": ""
  },
  {
    "origin": "[2/4]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;typename",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;::q_type, n/4&gt; cv::v_dotprod_expand",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::q_type, n/4 &gt; &amp;&#160;",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Dot product of elements.",
    "local": ""
  },
  {
    "origin": "Same as",
    "local": ""
  },
  {
    "origin": ", but add a third element to the sum of adjacent pairs. Scheme:",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_dotprod_expand()",
    "local": ""
  },
  {
    "origin": "[3/4]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;double, n/2&gt; cv::v_dotprod_expand",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_dotprod_expand()",
    "local": ""
  },
  {
    "origin": "[4/4]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;double, n/2&gt; cv::v_dotprod_expand",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt; double, n/2 &gt; &amp;&#160;",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_dotprod_expand_fast()",
    "local": ""
  },
  {
    "origin": "[1/4]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;typename",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;::q_type, n/4&gt; cv::v_dotprod_expand_fast",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Fast Dot product of elements and expand.",
    "local": ""
  },
  {
    "origin": "Multiply values in two registers and expand the sum of adjacent result pairs.",
    "local": ""
  },
  {
    "origin": "Same as",
    "local": ""
  },
  {
    "origin": ", but it may perform unorder sum between result pairs in some platforms, this intrinsic can be used if the sum among all lanes is only matters and also it should be yielding better performance on the affected platforms.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_dotprod_expand_fast()",
    "local": ""
  },
  {
    "origin": "[2/4]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;typename",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;::q_type, n/4&gt; cv::v_dotprod_expand_fast",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::q_type, n/4 &gt; &amp;&#160;",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Fast Dot product of elements.",
    "local": ""
  },
  {
    "origin": "Same as",
    "local": ""
  },
  {
    "origin": ", but add a third element to the sum of adjacent pairs.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_dotprod_expand_fast()",
    "local": ""
  },
  {
    "origin": "[3/4]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;double, n/2&gt; cv::v_dotprod_expand_fast",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_dotprod_expand_fast()",
    "local": ""
  },
  {
    "origin": "[4/4]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;double, n/2&gt; cv::v_dotprod_expand_fast",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt; double, n/2 &gt; &amp;&#160;",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_dotprod_fast()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;typename",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;::w_type, n/2&gt; cv::v_dotprod_fast",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Fast Dot product of elements.",
    "local": ""
  },
  {
    "origin": "Same as",
    "local": ""
  },
  {
    "origin": ", but it may perform unorder sum between result pairs in some platforms, this intrinsic can be used if the sum among all lanes is only matters and also it should be yielding better performance on the affected platforms.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_dotprod_fast()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;typename",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;::w_type, n/2&gt; cv::v_dotprod_fast",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::w_type, n/2 &gt; &amp;&#160;",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Fast Dot product of elements.",
    "local": ""
  },
  {
    "origin": "Same as",
    "local": ""
  },
  {
    "origin": ", but add a third element to the sum of adjacent pairs.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_expand()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_expand",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::w_type, n/2 &gt; &amp;&#160;",
    "local": ""
  },
  {
    "origin": "b0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::w_type, n/2 &gt; &amp;&#160;",
    "local": ""
  },
  {
    "origin": "b1",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Expand values to the wider pack type.",
    "local": ""
  },
  {
    "origin": "Copy contents of register to two registers with 2x wider pack type. Scheme:",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_expand_high()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;typename",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;::w_type, n/2&gt; cv::v_expand_high",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Expand higher values to the wider pack type.",
    "local": ""
  },
  {
    "origin": "Same as",
    "local": ""
  },
  {
    "origin": ", but expand higher half of the vector instead.",
    "local": ""
  },
  {
    "origin": "Scheme:",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_expand_low()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;typename",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;::w_type, n/2&gt; cv::v_expand_low",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Expand lower values to the wider pack type.",
    "local": ""
  },
  {
    "origin": "Same as",
    "local": ""
  },
  {
    "origin": ", but return lower half of the vector.",
    "local": ""
  },
  {
    "origin": "Scheme:",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_extract()",
    "local": ""
  },
  {
    "origin": "template&lt;int s, typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::v_extract",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Vector extract.",
    "local": ""
  },
  {
    "origin": "Scheme:",
    "local": ""
  },
  {
    "origin": "Restriction: 0 &lt;= shift &lt; nlanes",
    "local": ""
  },
  {
    "origin": "Usage:",
    "local": ""
  },
  {
    "origin": "For all types.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_extract_n()",
    "local": ""
  },
  {
    "origin": "template&lt;int s, typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "_Tp cv::v_extract_n",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Vector extract.",
    "local": ""
  },
  {
    "origin": "Scheme: Return the s-th element of v. Restriction: 0 &lt;= s &lt; nlanes",
    "local": ""
  },
  {
    "origin": "Usage:",
    "local": ""
  },
  {
    "origin": "For all types.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_floor()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;int, n&gt; cv::v_floor",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Floor elements.",
    "local": ""
  },
  {
    "origin": "Floor each value. Input type is float vector ==&gt; output type is int vector.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Only for floating point types.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_floor()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;int, n*2&gt; cv::v_floor",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_fma()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::v_fma",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Multiply and add.",
    "local": ""
  },
  {
    "origin": "Returns \\( a*b + c \\) For floating point types and signed 32bit int only.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_interleave_pairs()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::v_interleave_pairs",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "vec",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_interleave_quads()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::v_interleave_quads",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "vec",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_invsqrt()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::v_invsqrt",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Inversed square root.",
    "local": ""
  },
  {
    "origin": "Returns \\( 1/sqrt(a) \\) For floating point types only.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_load()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp,",
    "local": ""
  },
  {
    "origin": "/ sizeof(_Tp)&gt; cv::v_load",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Load register contents from memory.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": "pointer to memory block with data",
    "local": ""
  },
  {
    "origin": "Returns",
    "local": ""
  },
  {
    "origin": "register object",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Returned type will be detected from passed pointer type, for example uchar ==&gt;",
    "local": ""
  },
  {
    "origin": ", int ==&gt;",
    "local": ""
  },
  {
    "origin": ", etc.",
    "local": ""
  },
  {
    "origin": "Use vx_load version to get maximum available register length result",
    "local": ""
  },
  {
    "origin": "Alignment requirement: if CV_STRONG_ALIGNMENT=1 then passed pointer must be aligned (",
    "local": ""
  },
  {
    "origin": "should be enough). Do not cast pointer types without runtime check for pointer alignment (like",
    "local": ""
  },
  {
    "origin": "=&gt;",
    "local": ""
  },
  {
    "origin": ").",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_load_aligned()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp,",
    "local": ""
  },
  {
    "origin": "/ sizeof(_Tp)&gt; cv::v_load_aligned",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Load register contents from memory (aligned)",
    "local": ""
  },
  {
    "origin": "similar to",
    "local": ""
  },
  {
    "origin": ", but source memory block should be aligned (to 16-byte boundary in case of SIMD128, 32-byte - SIMD256, etc)",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Use vx_load_aligned version to get maximum available register length result",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_load_deinterleave()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_load_deinterleave",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Load and deinterleave (2 channels)",
    "local": ""
  },
  {
    "origin": "Load data from memory deinterleave and store to 2 registers. Scheme:",
    "local": ""
  },
  {
    "origin": "For all types except 64-bit.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_load_deinterleave()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_load_deinterleave",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Load and deinterleave (3 channels)",
    "local": ""
  },
  {
    "origin": "Load data from memory deinterleave and store to 3 registers. Scheme:",
    "local": ""
  },
  {
    "origin": "For all types except 64-bit.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_load_deinterleave()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_load_deinterleave",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "d",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Load and deinterleave (4 channels)",
    "local": ""
  },
  {
    "origin": "Load data from memory deinterleave and store to 4 registers. Scheme:",
    "local": ""
  },
  {
    "origin": "For all types except 64-bit.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_load_expand()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt;typename",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;::w_type,",
    "local": ""
  },
  {
    "origin": "/ sizeof(typename",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;::w_type)&gt; cv::v_load_expand",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Load register contents from memory with double expand.",
    "local": ""
  },
  {
    "origin": "Same as",
    "local": ""
  },
  {
    "origin": ", but result pack type will be 2x wider than memory type.",
    "local": ""
  },
  {
    "origin": "For 8-, 16-, 32-bit integer source types.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Use vx_load_expand version to get maximum available register length result",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_load_expand()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "cv::v_load_expand",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_load_expand_q()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt;typename",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;::q_type,",
    "local": ""
  },
  {
    "origin": "/ sizeof(typename",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;::q_type)&gt; cv::v_load_expand_q",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Load register contents from memory with quad expand.",
    "local": ""
  },
  {
    "origin": "Same as",
    "local": ""
  },
  {
    "origin": ", but result type is 4 times wider than source.",
    "local": ""
  },
  {
    "origin": "For 8-bit integer source types.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Use vx_load_expand_q version to get maximum available register length result",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_load_halves()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp,",
    "local": ""
  },
  {
    "origin": "/ sizeof(_Tp)&gt; cv::v_load_halves",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "loptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "hiptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Load register contents from two memory blocks.",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "loptr",
    "local": ""
  },
  {
    "origin": "memory block containing data for first half (0..n/2)",
    "local": ""
  },
  {
    "origin": "hiptr",
    "local": ""
  },
  {
    "origin": "memory block containing data for second half (n/2..n)",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Use vx_load_halves version to get maximum available register length result",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_load_low()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp,",
    "local": ""
  },
  {
    "origin": "/ sizeof(_Tp)&gt; cv::v_load_low",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Load 64-bits of data to lower part (high part is undefined).",
    "local": ""
  },
  {
    "origin": "Parameters",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": "memory block containing data for first half (0..n/2)",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Use vx_load_low version to get maximum available register length result",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_lut()",
    "local": ""
  },
  {
    "origin": "[1/5]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp,",
    "local": ""
  },
  {
    "origin": "/ sizeof(_Tp)&gt; cv::v_lut",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "tab",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_lut()",
    "local": ""
  },
  {
    "origin": "[2/5]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;int, n&gt; cv::v_lut",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "tab",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_lut()",
    "local": ""
  },
  {
    "origin": "[3/5]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;unsigned, n&gt; cv::v_lut",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "tab",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_lut()",
    "local": ""
  },
  {
    "origin": "[4/5]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;float, n&gt; cv::v_lut",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "tab",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_lut()",
    "local": ""
  },
  {
    "origin": "[5/5]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;double, n/2&gt; cv::v_lut",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "tab",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_lut_deinterleave()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_lut_deinterleave",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "tab",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "y",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_lut_deinterleave()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_lut_deinterleave",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "tab",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt; int, n *2 &gt; &amp;&#160;",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "y",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_lut_pairs()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp,",
    "local": ""
  },
  {
    "origin": "/ sizeof(_Tp)&gt; cv::v_lut_pairs",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "tab",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_lut_quads()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp,",
    "local": ""
  },
  {
    "origin": "/ sizeof(_Tp)&gt; cv::v_lut_quads",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "tab",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_magnitude()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::v_magnitude",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Magnitude.",
    "local": ""
  },
  {
    "origin": "Returns \\( sqrt(a^2 + b^2) \\) For floating point types only.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_matmul()",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;float, n&gt; cv::v_matmul",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "d",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Matrix multiplication.",
    "local": ""
  },
  {
    "origin": "Scheme:",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_matmuladd()",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;float, n&gt; cv::v_matmuladd",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "d",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Matrix multiplication and add.",
    "local": ""
  },
  {
    "origin": "Scheme:",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_max()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::v_max",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Choose max values for each pair.",
    "local": ""
  },
  {
    "origin": "Scheme:",
    "local": ""
  },
  {
    "origin": "For all types except 64-bit integer.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_min()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::v_min",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Choose min values for each pair.",
    "local": ""
  },
  {
    "origin": "Scheme:",
    "local": ""
  },
  {
    "origin": "For all types except 64-bit integer.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_mul_expand()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_mul_expand",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::w_type, n/2 &gt; &amp;&#160;",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::w_type, n/2 &gt; &amp;&#160;",
    "local": ""
  },
  {
    "origin": "d",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Multiply and expand.",
    "local": ""
  },
  {
    "origin": "Multiply values two registers and store results in two registers with wider pack type. Scheme:",
    "local": ""
  },
  {
    "origin": "Example:",
    "local": ""
  },
  {
    "origin": "Implemented only for 16- and unsigned 32-bit source types (",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ").",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_mul_hi()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::v_mul_hi",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Multiply and extract high part.",
    "local": ""
  },
  {
    "origin": "Multiply values two registers and store high part of the results. Implemented only for 16-bit source types (",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "). Returns \\( a*b &gt;&gt; 16 \\)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_mul_wrap()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp , n&gt; cv::v_mul_wrap",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Multiply values without saturation.",
    "local": ""
  },
  {
    "origin": "For 8- and 16-bit integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_muladd()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::v_muladd",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "A synonym for v_fma.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_not_nan()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;float, n&gt; cv::v_not_nan",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_not_nan()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;double, n&gt; cv::v_not_nan",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_pack()",
    "local": ""
  },
  {
    "origin": "[1/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 2*n&gt; cv::v_pack",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_pack()",
    "local": ""
  },
  {
    "origin": "[2/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 2*n&gt; cv::v_pack",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_pack()",
    "local": ""
  },
  {
    "origin": "[3/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 2*n&gt; cv::v_pack",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_pack()",
    "local": ""
  },
  {
    "origin": "[4/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; short , 2*n&gt; cv::v_pack",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_pack()",
    "local": ""
  },
  {
    "origin": "[5/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; unsigned , 2*n&gt; cv::v_pack",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_pack()",
    "local": ""
  },
  {
    "origin": "[6/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; int , 2*n&gt; cv::v_pack",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_pack_b()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 2*n&gt; cv::v_pack_b",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "! For 16-bit boolean values",
    "local": ""
  },
  {
    "origin": "Scheme:",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_pack_b()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 4*n&gt; cv::v_pack_b",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "d",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. For 32-bit boolean values",
    "local": ""
  },
  {
    "origin": "Scheme:",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_pack_b()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 8*n&gt; cv::v_pack_b",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "d",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "e",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "f",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "g",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "h",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. For 64-bit boolean values",
    "local": ""
  },
  {
    "origin": "Scheme:",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_pack_store()",
    "local": ""
  },
  {
    "origin": "[1/7]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_pack_store",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_pack_store()",
    "local": ""
  },
  {
    "origin": "[2/7]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_pack_store",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_pack_store()",
    "local": ""
  },
  {
    "origin": "[3/7]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_pack_store",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_pack_store()",
    "local": ""
  },
  {
    "origin": "[4/7]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_pack_store",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_pack_store()",
    "local": ""
  },
  {
    "origin": "[5/7]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_pack_store",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_pack_store()",
    "local": ""
  },
  {
    "origin": "[6/7]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_pack_store",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_pack_store()",
    "local": ""
  },
  {
    "origin": "[7/7]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_pack_store",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_pack_triplets()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::v_pack_triplets",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "vec",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_pack_u()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 2*n&gt; cv::v_pack_u",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_pack_u()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 2*n&gt; cv::v_pack_u",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_pack_u_store()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_pack_u_store",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_pack_u_store()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_pack_u_store",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_popcount()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;typename",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;::abs_type, n&gt; cv::v_popcount",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Count the 1 bits in the vector lanes and return result as corresponding unsigned type.",
    "local": ""
  },
  {
    "origin": "Scheme:",
    "local": ""
  },
  {
    "origin": "For all integer types.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_recombine()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_recombine",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "low",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "high",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Combine two vectors from lower and higher parts of two other vectors.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_reduce_max()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "_Tp cv::v_reduce_max",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Find one max value.",
    "local": ""
  },
  {
    "origin": "Scheme:",
    "local": ""
  },
  {
    "origin": "For all types except 64-bit integer and 64-bit floating point types.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_reduce_min()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "_Tp cv::v_reduce_min",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Find one min value.",
    "local": ""
  },
  {
    "origin": "Scheme:",
    "local": ""
  },
  {
    "origin": "For all types except 64-bit integer and 64-bit floating point types.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_reduce_sad()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;::abs_type &gt;::sum_type cv::v_reduce_sad",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Sum absolute differences of values.",
    "local": ""
  },
  {
    "origin": "Scheme:",
    "local": ""
  },
  {
    "origin": "For all types except 64-bit types.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_reduce_sum()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;::sum_type cv::v_reduce_sum",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Sum packed values.",
    "local": ""
  },
  {
    "origin": "Scheme:",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_reduce_sum4()",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;float, n&gt; cv::v_reduce_sum4",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "d",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Sums all elements of each input vector, returns the vector of sums.",
    "local": ""
  },
  {
    "origin": "Scheme:",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_reinterpret_as_f32()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp0 , int n0&gt;",
    "local": ""
  },
  {
    "origin": "&lt; float , n0*sizeof(_Tp0)/sizeof( float )&gt; cv::v_reinterpret_as_f32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp0, n0 &gt; &amp;&#160;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_reinterpret_as_f64()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp0 , int n0&gt;",
    "local": ""
  },
  {
    "origin": "&lt; double , n0*sizeof(_Tp0)/sizeof( double )&gt; cv::v_reinterpret_as_f64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp0, n0 &gt; &amp;&#160;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_reinterpret_as_s16()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp0 , int n0&gt;",
    "local": ""
  },
  {
    "origin": "&lt; short , n0*sizeof(_Tp0)/sizeof( short )&gt; cv::v_reinterpret_as_s16",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp0, n0 &gt; &amp;&#160;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_reinterpret_as_s32()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp0 , int n0&gt;",
    "local": ""
  },
  {
    "origin": "&lt; int , n0*sizeof(_Tp0)/sizeof( int )&gt; cv::v_reinterpret_as_s32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp0, n0 &gt; &amp;&#160;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_reinterpret_as_s64()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp0 , int n0&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n0*sizeof(_Tp0)/sizeof(",
    "local": ""
  },
  {
    "origin": ")&gt; cv::v_reinterpret_as_s64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp0, n0 &gt; &amp;&#160;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_reinterpret_as_s8()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp0 , int n0&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n0*sizeof(_Tp0)/sizeof(",
    "local": ""
  },
  {
    "origin": ")&gt; cv::v_reinterpret_as_s8",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp0, n0 &gt; &amp;&#160;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_reinterpret_as_u16()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp0 , int n0&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n0*sizeof(_Tp0)/sizeof(",
    "local": ""
  },
  {
    "origin": ")&gt; cv::v_reinterpret_as_u16",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp0, n0 &gt; &amp;&#160;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_reinterpret_as_u32()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp0 , int n0&gt;",
    "local": ""
  },
  {
    "origin": "&lt; unsigned , n0*sizeof(_Tp0)/sizeof( unsigned )&gt; cv::v_reinterpret_as_u32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp0, n0 &gt; &amp;&#160;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_reinterpret_as_u64()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp0 , int n0&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n0*sizeof(_Tp0)/sizeof(",
    "local": ""
  },
  {
    "origin": ")&gt; cv::v_reinterpret_as_u64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp0, n0 &gt; &amp;&#160;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_reinterpret_as_u8()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp0 , int n0&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n0*sizeof(_Tp0)/sizeof(",
    "local": ""
  },
  {
    "origin": ")&gt; cv::v_reinterpret_as_u8",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp0, n0 &gt; &amp;&#160;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_reverse()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::v_reverse",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Vector reverse order.",
    "local": ""
  },
  {
    "origin": "Reverse the order of the vector Scheme:",
    "local": ""
  },
  {
    "origin": "For all types.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_rotate_left()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;int imm, typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::v_rotate_left",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_rotate_left()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;int imm, typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::v_rotate_left",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Element shift left among vector.",
    "local": ""
  },
  {
    "origin": "For all type",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_rotate_right()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;int imm, typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::v_rotate_right",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Element shift right among vector.",
    "local": ""
  },
  {
    "origin": "For all type",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_rotate_right()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;int imm, typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::v_rotate_right",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_round()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;int, n&gt; cv::v_round",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Round elements.",
    "local": ""
  },
  {
    "origin": "Rounds each value. Input type is float vector ==&gt; output type is int vector.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Only for floating point types.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_round()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;int, n*2&gt; cv::v_round",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_round()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;int, n*2&gt; cv::v_round",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_rshr()",
    "local": ""
  },
  {
    "origin": "[1/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n&gt; cv::v_rshr",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_rshr()",
    "local": ""
  },
  {
    "origin": "[2/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; short , n&gt; cv::v_rshr",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_rshr()",
    "local": ""
  },
  {
    "origin": "[3/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; unsigned , n&gt; cv::v_rshr",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_rshr()",
    "local": ""
  },
  {
    "origin": "[4/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; int , n&gt; cv::v_rshr",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_rshr()",
    "local": ""
  },
  {
    "origin": "[5/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n&gt; cv::v_rshr",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_rshr()",
    "local": ""
  },
  {
    "origin": "[6/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n&gt; cv::v_rshr",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_rshr_pack()",
    "local": ""
  },
  {
    "origin": "[1/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 2*n&gt; cv::v_rshr_pack",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_rshr_pack()",
    "local": ""
  },
  {
    "origin": "[2/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 2*n&gt; cv::v_rshr_pack",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_rshr_pack()",
    "local": ""
  },
  {
    "origin": "[3/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 2*n&gt; cv::v_rshr_pack",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_rshr_pack()",
    "local": ""
  },
  {
    "origin": "[4/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; short , 2*n&gt; cv::v_rshr_pack",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_rshr_pack()",
    "local": ""
  },
  {
    "origin": "[5/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; unsigned , 2*n&gt; cv::v_rshr_pack",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_rshr_pack()",
    "local": ""
  },
  {
    "origin": "[6/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; int , 2*n&gt; cv::v_rshr_pack",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_rshr_pack_store()",
    "local": ""
  },
  {
    "origin": "[1/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_rshr_pack_store",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_rshr_pack_store()",
    "local": ""
  },
  {
    "origin": "[2/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_rshr_pack_store",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_rshr_pack_store()",
    "local": ""
  },
  {
    "origin": "[3/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_rshr_pack_store",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_rshr_pack_store()",
    "local": ""
  },
  {
    "origin": "[4/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_rshr_pack_store",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_rshr_pack_store()",
    "local": ""
  },
  {
    "origin": "[5/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_rshr_pack_store",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_rshr_pack_store()",
    "local": ""
  },
  {
    "origin": "[6/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_rshr_pack_store",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_rshr_pack_u()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 2*n&gt; cv::v_rshr_pack_u",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_rshr_pack_u()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", 2*n&gt; cv::v_rshr_pack_u",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_rshr_pack_u_store()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_rshr_pack_u_store",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_rshr_pack_u_store()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_rshr_pack_u_store",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_scan_forward()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "int cv::v_scan_forward",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Get first negative lane index.",
    "local": ""
  },
  {
    "origin": "Returned value is an index of first negative lane (undefined for input of all positive values) Example:",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_select()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::v_select",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Per-element select (blend operation)",
    "local": ""
  },
  {
    "origin": "Return value will be built by combining values",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": "using the following scheme: result[i] = mask[i] ? a[i] : b[i];",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": ":",
    "local": ""
  },
  {
    "origin": "mask",
    "local": ""
  },
  {
    "origin": "element values are restricted to these values:",
    "local": ""
  },
  {
    "origin": "0: select element from",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": "0xff/0xffff/etc: select element from",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": "(fully compatible with bitwise-based operator)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_setall_f32()",
    "local": ""
  },
  {
    "origin": "cv::v_setall_f32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_setall_f64()",
    "local": ""
  },
  {
    "origin": "cv::v_setall_f64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_setall_s16()",
    "local": ""
  },
  {
    "origin": "cv::v_setall_s16",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_setall_s32()",
    "local": ""
  },
  {
    "origin": "cv::v_setall_s32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_setall_s64()",
    "local": ""
  },
  {
    "origin": "cv::v_setall_s64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_setall_s8()",
    "local": ""
  },
  {
    "origin": "cv::v_setall_s8",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_setall_u16()",
    "local": ""
  },
  {
    "origin": "cv::v_setall_u16",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_setall_u32()",
    "local": ""
  },
  {
    "origin": "cv::v_setall_u32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_setall_u64()",
    "local": ""
  },
  {
    "origin": "cv::v_setall_u64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_setall_u8()",
    "local": ""
  },
  {
    "origin": "cv::v_setall_u8",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "val",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_setzero_f32()",
    "local": ""
  },
  {
    "origin": "cv::v_setzero_f32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_setzero_f64()",
    "local": ""
  },
  {
    "origin": "cv::v_setzero_f64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_setzero_s16()",
    "local": ""
  },
  {
    "origin": "cv::v_setzero_s16",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_setzero_s32()",
    "local": ""
  },
  {
    "origin": "cv::v_setzero_s32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_setzero_s64()",
    "local": ""
  },
  {
    "origin": "cv::v_setzero_s64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_setzero_s8()",
    "local": ""
  },
  {
    "origin": "cv::v_setzero_s8",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_setzero_u16()",
    "local": ""
  },
  {
    "origin": "cv::v_setzero_u16",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_setzero_u32()",
    "local": ""
  },
  {
    "origin": "cv::v_setzero_u32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_setzero_u64()",
    "local": ""
  },
  {
    "origin": "cv::v_setzero_u64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_setzero_u8()",
    "local": ""
  },
  {
    "origin": "cv::v_setzero_u8",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_shl()",
    "local": ""
  },
  {
    "origin": "[1/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n&gt; cv::v_shl",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_shl()",
    "local": ""
  },
  {
    "origin": "[2/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; short , n&gt; cv::v_shl",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_shl()",
    "local": ""
  },
  {
    "origin": "[3/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; unsigned , n&gt; cv::v_shl",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_shl()",
    "local": ""
  },
  {
    "origin": "[4/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; int , n&gt; cv::v_shl",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_shl()",
    "local": ""
  },
  {
    "origin": "[5/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n&gt; cv::v_shl",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_shl()",
    "local": ""
  },
  {
    "origin": "[6/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n&gt; cv::v_shl",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_shr()",
    "local": ""
  },
  {
    "origin": "[1/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n&gt; cv::v_shr",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_shr()",
    "local": ""
  },
  {
    "origin": "[2/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; short , n&gt; cv::v_shr",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_shr()",
    "local": ""
  },
  {
    "origin": "[3/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; unsigned , n&gt; cv::v_shr",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_shr()",
    "local": ""
  },
  {
    "origin": "[4/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; int , n&gt; cv::v_shr",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_shr()",
    "local": ""
  },
  {
    "origin": "[5/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n&gt; cv::v_shr",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_shr()",
    "local": ""
  },
  {
    "origin": "[6/6]",
    "local": ""
  },
  {
    "origin": "template&lt;int shift, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": ", n&gt; cv::v_shr",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt;",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_signmask()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "int cv::v_signmask",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Get negative values mask.",
    "local": ""
  },
  {
    "origin": "v_signmask depends on a lane count heavily and therefore isn't universal enough",
    "local": ""
  },
  {
    "origin": "Returned value is a bit mask with bits set to 1 on places corresponding to negative packed values indexes. Example:",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_sqr_magnitude()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;_Tp, n&gt; cv::v_sqr_magnitude",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Square of the magnitude.",
    "local": ""
  },
  {
    "origin": "Returns \\( a^2 + b^2 \\) For floating point types only.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_sqrt()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp , n&gt; cv::v_sqrt",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Square root of elements.",
    "local": ""
  },
  {
    "origin": "Only for floating point types.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_store()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_store",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Store data to memory.",
    "local": ""
  },
  {
    "origin": "Store register contents to memory. Scheme:",
    "local": ""
  },
  {
    "origin": "Pointer can be unaligned.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_store()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_store",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_store_aligned()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_store_aligned",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Store data to memory (aligned)",
    "local": ""
  },
  {
    "origin": "Store register contents to memory. Scheme:",
    "local": ""
  },
  {
    "origin": "Pointer",
    "local": ""
  },
  {
    "origin": "should",
    "local": ""
  },
  {
    "origin": "be aligned by 16-byte boundary.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_store_aligned()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_store_aligned",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_store_aligned_nocache()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_store_aligned_nocache",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_store_high()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_store_high",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Store data to memory (higher half)",
    "local": ""
  },
  {
    "origin": "Store higher half of register contents to memory. Scheme:",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_store_interleave()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_store_interleave",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Interleave and store (2 channels)",
    "local": ""
  },
  {
    "origin": "Interleave and store data from 2 registers to memory. Scheme:",
    "local": ""
  },
  {
    "origin": "For all types except 64-bit.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_store_interleave()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_store_interleave",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Interleave and store (3 channels)",
    "local": ""
  },
  {
    "origin": "Interleave and store data from 3 registers to memory. Scheme:",
    "local": ""
  },
  {
    "origin": "For all types except 64-bit.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_store_interleave()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_store_interleave",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "c",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "d",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Interleave and store (4 channels)",
    "local": ""
  },
  {
    "origin": "Interleave and store data from 4 registers to memory. Scheme:",
    "local": ""
  },
  {
    "origin": "For all types except 64-bit.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_store_low()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_store_low",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Store data to memory (lower half)",
    "local": ""
  },
  {
    "origin": "Store lower half of register contents to memory. Scheme:",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_sub_wrap()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp , n&gt; cv::v_sub_wrap",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "b",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Subtract values without saturation.",
    "local": ""
  },
  {
    "origin": "For 8- and 16-bit integer values.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_transpose4x4()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_transpose4x4",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "a0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a3",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "b0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "b1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "b2",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "b3",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Transpose 4x4 matrix.",
    "local": ""
  },
  {
    "origin": "Scheme:",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_trunc()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;int, n&gt; cv::v_trunc",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Truncate elements.",
    "local": ""
  },
  {
    "origin": "Truncate each value. Input type is float vector ==&gt; output type is int vector.",
    "local": ""
  },
  {
    "origin": "Note",
    "local": ""
  },
  {
    "origin": "Only for floating point types.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_trunc()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt;int, n*2&gt; cv::v_trunc",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "v_zip()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "void cv::v_zip",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "a1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "b0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "b1",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Interleave two vectors.",
    "local": ""
  },
  {
    "origin": "Scheme:",
    "local": ""
  },
  {
    "origin": "For all types except 64-bit.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_cleanup()",
    "local": ""
  },
  {
    "origin": "void simd512::vx_cleanup",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "SIMD processing state cleanup call.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load()",
    "local": ""
  },
  {
    "origin": "[1/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load()",
    "local": ""
  },
  {
    "origin": "[2/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load()",
    "local": ""
  },
  {
    "origin": "[3/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load()",
    "local": ""
  },
  {
    "origin": "[4/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load()",
    "local": ""
  },
  {
    "origin": "[5/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load()",
    "local": ""
  },
  {
    "origin": "[6/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load()",
    "local": ""
  },
  {
    "origin": "[7/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load()",
    "local": ""
  },
  {
    "origin": "[8/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load()",
    "local": ""
  },
  {
    "origin": "[9/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load()",
    "local": ""
  },
  {
    "origin": "[10/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_aligned()",
    "local": ""
  },
  {
    "origin": "[1/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_aligned",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_aligned()",
    "local": ""
  },
  {
    "origin": "[2/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_aligned",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_aligned()",
    "local": ""
  },
  {
    "origin": "[3/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_aligned",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_aligned()",
    "local": ""
  },
  {
    "origin": "[4/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_aligned",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_aligned()",
    "local": ""
  },
  {
    "origin": "[5/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_aligned",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_aligned()",
    "local": ""
  },
  {
    "origin": "[6/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_aligned",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_aligned()",
    "local": ""
  },
  {
    "origin": "[7/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_aligned",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_aligned()",
    "local": ""
  },
  {
    "origin": "[8/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_aligned",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_aligned()",
    "local": ""
  },
  {
    "origin": "[9/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_aligned",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_aligned()",
    "local": ""
  },
  {
    "origin": "[10/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_aligned",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_expand()",
    "local": ""
  },
  {
    "origin": "[1/7]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_expand",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_expand()",
    "local": ""
  },
  {
    "origin": "[2/7]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_expand",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_expand()",
    "local": ""
  },
  {
    "origin": "[3/7]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_expand",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_expand()",
    "local": ""
  },
  {
    "origin": "[4/7]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_expand",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_expand()",
    "local": ""
  },
  {
    "origin": "[5/7]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_expand",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_expand()",
    "local": ""
  },
  {
    "origin": "[6/7]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_expand",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_expand()",
    "local": ""
  },
  {
    "origin": "[7/7]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_expand",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const float16_t *&#160;",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_expand_q()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_expand_q",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_expand_q()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_expand_q",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_halves()",
    "local": ""
  },
  {
    "origin": "[1/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_halves",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr1",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_halves()",
    "local": ""
  },
  {
    "origin": "[2/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_halves",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr1",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_halves()",
    "local": ""
  },
  {
    "origin": "[3/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_halves",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr1",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_halves()",
    "local": ""
  },
  {
    "origin": "[4/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_halves",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "ptr1",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_halves()",
    "local": ""
  },
  {
    "origin": "[5/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_halves",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "ptr1",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_halves()",
    "local": ""
  },
  {
    "origin": "[6/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_halves",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "ptr1",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_halves()",
    "local": ""
  },
  {
    "origin": "[7/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_halves",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "ptr1",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_halves()",
    "local": ""
  },
  {
    "origin": "[8/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_halves",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr1",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_halves()",
    "local": ""
  },
  {
    "origin": "[9/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_halves",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr1",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_halves()",
    "local": ""
  },
  {
    "origin": "[10/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_halves",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "ptr1",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_low()",
    "local": ""
  },
  {
    "origin": "[1/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_low",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_low()",
    "local": ""
  },
  {
    "origin": "[2/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_low",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_low()",
    "local": ""
  },
  {
    "origin": "[3/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_low",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_low()",
    "local": ""
  },
  {
    "origin": "[4/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_low",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_low()",
    "local": ""
  },
  {
    "origin": "[5/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_low",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_low()",
    "local": ""
  },
  {
    "origin": "[6/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_low",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_low()",
    "local": ""
  },
  {
    "origin": "[7/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_low",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_low()",
    "local": ""
  },
  {
    "origin": "[8/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_low",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_low()",
    "local": ""
  },
  {
    "origin": "[9/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_low",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_load_low()",
    "local": ""
  },
  {
    "origin": "[10/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_load_low",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_lut()",
    "local": ""
  },
  {
    "origin": "[1/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_lut",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_lut()",
    "local": ""
  },
  {
    "origin": "[2/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_lut",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_lut()",
    "local": ""
  },
  {
    "origin": "[3/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_lut",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_lut()",
    "local": ""
  },
  {
    "origin": "[4/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_lut",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_lut()",
    "local": ""
  },
  {
    "origin": "[5/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_lut",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_lut()",
    "local": ""
  },
  {
    "origin": "[6/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_lut",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_lut()",
    "local": ""
  },
  {
    "origin": "[7/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_lut",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_lut()",
    "local": ""
  },
  {
    "origin": "[8/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_lut",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_lut()",
    "local": ""
  },
  {
    "origin": "[9/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_lut",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_lut()",
    "local": ""
  },
  {
    "origin": "[10/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_lut",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_lut_pairs()",
    "local": ""
  },
  {
    "origin": "[1/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_lut_pairs",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_lut_pairs()",
    "local": ""
  },
  {
    "origin": "[2/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_lut_pairs",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_lut_pairs()",
    "local": ""
  },
  {
    "origin": "[3/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_lut_pairs",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_lut_pairs()",
    "local": ""
  },
  {
    "origin": "[4/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_lut_pairs",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_lut_pairs()",
    "local": ""
  },
  {
    "origin": "[5/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_lut_pairs",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_lut_pairs()",
    "local": ""
  },
  {
    "origin": "[6/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_lut_pairs",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_lut_pairs()",
    "local": ""
  },
  {
    "origin": "[7/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_lut_pairs",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_lut_pairs()",
    "local": ""
  },
  {
    "origin": "[8/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_lut_pairs",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_lut_pairs()",
    "local": ""
  },
  {
    "origin": "[9/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_lut_pairs",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_lut_pairs()",
    "local": ""
  },
  {
    "origin": "[10/10]",
    "local": ""
  },
  {
    "origin": "simd512::vx_lut_pairs",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_lut_quads()",
    "local": ""
  },
  {
    "origin": "[1/7]",
    "local": ""
  },
  {
    "origin": "simd512::vx_lut_quads",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_lut_quads()",
    "local": ""
  },
  {
    "origin": "[2/7]",
    "local": ""
  },
  {
    "origin": "simd512::vx_lut_quads",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_lut_quads()",
    "local": ""
  },
  {
    "origin": "[3/7]",
    "local": ""
  },
  {
    "origin": "simd512::vx_lut_quads",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_lut_quads()",
    "local": ""
  },
  {
    "origin": "[4/7]",
    "local": ""
  },
  {
    "origin": "simd512::vx_lut_quads",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_lut_quads()",
    "local": ""
  },
  {
    "origin": "[5/7]",
    "local": ""
  },
  {
    "origin": "simd512::vx_lut_quads",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_lut_quads()",
    "local": ""
  },
  {
    "origin": "[6/7]",
    "local": ""
  },
  {
    "origin": "simd512::vx_lut_quads",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_lut_quads()",
    "local": ""
  },
  {
    "origin": "[7/7]",
    "local": ""
  },
  {
    "origin": "simd512::vx_lut_quads",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "ptr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_setall_f32()",
    "local": ""
  },
  {
    "origin": "simd512::vx_setall_f32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_setall_f64()",
    "local": ""
  },
  {
    "origin": "simd512::vx_setall_f64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_setall_s16()",
    "local": ""
  },
  {
    "origin": "simd512::vx_setall_s16",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_setall_s32()",
    "local": ""
  },
  {
    "origin": "simd512::vx_setall_s32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_setall_s64()",
    "local": ""
  },
  {
    "origin": "simd512::vx_setall_s64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_setall_s8()",
    "local": ""
  },
  {
    "origin": "simd512::vx_setall_s8",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_setall_u16()",
    "local": ""
  },
  {
    "origin": "simd512::vx_setall_u16",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_setall_u32()",
    "local": ""
  },
  {
    "origin": "simd512::vx_setall_u32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_setall_u64()",
    "local": ""
  },
  {
    "origin": "simd512::vx_setall_u64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_setall_u8()",
    "local": ""
  },
  {
    "origin": "simd512::vx_setall_u8",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "v",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_setzero_f32()",
    "local": ""
  },
  {
    "origin": "simd512::vx_setzero_f32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_setzero_f64()",
    "local": ""
  },
  {
    "origin": "simd512::vx_setzero_f64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_setzero_s16()",
    "local": ""
  },
  {
    "origin": "simd512::vx_setzero_s16",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_setzero_s32()",
    "local": ""
  },
  {
    "origin": "simd512::vx_setzero_s32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_setzero_s64()",
    "local": ""
  },
  {
    "origin": "simd512::vx_setzero_s64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_setzero_s8()",
    "local": ""
  },
  {
    "origin": "simd512::vx_setzero_s8",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_setzero_u16()",
    "local": ""
  },
  {
    "origin": "simd512::vx_setzero_u16",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_setzero_u32()",
    "local": ""
  },
  {
    "origin": "simd512::vx_setzero_u32",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_setzero_u64()",
    "local": ""
  },
  {
    "origin": "simd512::vx_setzero_u64",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "vx_setzero_u8()",
    "local": ""
  },
  {
    "origin": "simd512::vx_setzero_u8",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "inline",
    "local": ""
  },
  {
    "origin": "Variable Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "popCountTable",
    "local": ""
  },
  {
    "origin": "const unsigned char cv::popCountTable[]",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Initial value:",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:40 for OpenCV by &#160;",
    "local": ""
  }
]