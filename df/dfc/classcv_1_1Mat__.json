[
  {
    "origin": "OpenCV: cv::Mat_&lt; _Tp &gt; Class Template Reference",
    "local": ""
  },
  {
    "origin": "Open Source Computer Vision",
    "local": ""
  },
  {
    "origin": "Public Types",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions",
    "local": ""
  },
  {
    "origin": "List of all members",
    "local": ""
  },
  {
    "origin": "cv::Mat_&lt; _Tp &gt; Class Template Reference",
    "local": ""
  },
  {
    "origin": "&raquo;",
    "local": ""
  },
  {
    "origin": "Template matrix class derived from",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Inheritance diagram for cv::Mat_&lt; _Tp &gt;:",
    "local": ""
  },
  {
    "origin": "Public Types",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&#160;Public Types inherited from",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= 0x42FF0000,",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= CV_MAT_CONT_FLAG,",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= CV_SUBMAT_FLAG",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "{",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= 0xFFFF0000,",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "= 0x00000FFF,",
    "local": ""
  },
  {
    "origin": "&#160;&#160;",
    "local": ""
  },
  {
    "origin": "}",
    "local": ""
  },
  {
    "origin": "Public Member Functions",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "default constructor",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int _rows, int _cols)",
    "local": ""
  },
  {
    "origin": "equivalent to Mat(_rows, _cols, DataType&lt;_Tp&gt;::type)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int _rows, int _cols, const _Tp &amp;value)",
    "local": ""
  },
  {
    "origin": "constructor that sets each matrix element to specified value",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "_size)",
    "local": ""
  },
  {
    "origin": "equivalent to Mat(_size, DataType&lt;_Tp&gt;::type)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "_size, const _Tp &amp;value)",
    "local": ""
  },
  {
    "origin": "constructor that sets each matrix element to specified value",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int _ndims, const int *_sizes)",
    "local": ""
  },
  {
    "origin": "n-dim array constructor",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int _ndims, const int *_sizes, const _Tp &amp;value)",
    "local": ""
  },
  {
    "origin": "n-dim array constructor that sets each matrix element to specified value",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;m)",
    "local": ""
  },
  {
    "origin": "copy/conversion constructor. If m is of different type, it's converted",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;m)",
    "local": ""
  },
  {
    "origin": "copy constructor",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int _rows, int _cols, _Tp *_data, size_t _step=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "constructs a matrix on top of user-allocated data. step is in bytes(!!!), regardless of the type",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int _ndims, const int *_sizes, _Tp *_data, const size_t *_steps=0)",
    "local": ""
  },
  {
    "origin": "constructs n-dim matrix on top of user-allocated data. steps are in bytes(!!!), regardless of the type",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;m, const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ", const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "selects a submatrix",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;m, const",
    "local": ""
  },
  {
    "origin": "&amp;roi)",
    "local": ""
  },
  {
    "origin": "selects a submatrix",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;m, const",
    "local": ""
  },
  {
    "origin": "*ranges)",
    "local": ""
  },
  {
    "origin": "selects a submatrix, n-dim version",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;m, const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;ranges)",
    "local": ""
  },
  {
    "origin": "selects a submatrix, n-dim version",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;e)",
    "local": ""
  },
  {
    "origin": "from a matrix expression",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt; _Tp &gt; &amp;vec, bool copyData=false)",
    "local": ""
  },
  {
    "origin": "makes a matrix out of",
    "local": ""
  },
  {
    "origin": ", std::vector,",
    "local": ""
  },
  {
    "origin": "or",
    "local": ""
  },
  {
    "origin": ". The matrix will have a single column",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": ", n &gt; &amp;vec, bool copyData=true)",
    "local": ""
  },
  {
    "origin": "template&lt;int m, int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": ", m, n &gt; &amp;mtx, bool copyData=true)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "&gt; &amp;pt, bool copyData=true)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "&gt; &amp;pt, bool copyData=true)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt; &amp;commaInitializer)",
    "local": ""
  },
  {
    "origin": "(std::initializer_list&lt; _Tp &gt; values)",
    "local": ""
  },
  {
    "origin": "(const std::initializer_list&lt; int &gt; sizes, const std::initializer_list&lt; _Tp &gt; values)",
    "local": ""
  },
  {
    "origin": "template&lt;std::size_t _Nm&gt;",
    "local": ""
  },
  {
    "origin": "(const std::array&lt; _Tp, _Nm &gt; &amp;arr, bool copyData=false)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;&amp;m)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;&amp;m)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;&amp;e)",
    "local": ""
  },
  {
    "origin": "(int dtop, int dbottom, int dleft, int dright)",
    "local": ""
  },
  {
    "origin": "some more overridden methods",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "iterators; they are smart enough to skip gaps in the end of rows",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "(int x) const",
    "local": ""
  },
  {
    "origin": "(int _rows, int _cols)",
    "local": ""
  },
  {
    "origin": "equivalent to Mat::create(_rows, _cols, DataType&lt;_Tp&gt;::type)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "_size)",
    "local": ""
  },
  {
    "origin": "equivalent to Mat::create(_size, DataType&lt;_Tp&gt;::type)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int _ndims, const int *_sizes)",
    "local": ""
  },
  {
    "origin": "equivalent to Mat::create(_ndims, _sizes, DatType&lt;_Tp&gt;::type)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;m) const",
    "local": ""
  },
  {
    "origin": "cross-product",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "(int d=0) const",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "overridden forms of",
    "local": ""
  },
  {
    "origin": "etc.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "template&lt;typename Functor &gt;",
    "local": ""
  },
  {
    "origin": "(const Functor &amp;operation)",
    "local": ""
  },
  {
    "origin": "template methods for for operation over all matrix elements.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename Functor &gt;",
    "local": ""
  },
  {
    "origin": "(const Functor &amp;operation) const",
    "local": ""
  },
  {
    "origin": "template&lt;typename T2 &gt;",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "data type conversion",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int m, int n&gt;",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "conversion to",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;std::size_t _Nm&gt;",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "conversion to array.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "conversion to vector.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "conversion to",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ", const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ") const",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;roi) const",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ranges) const",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;ranges) const",
    "local": ""
  },
  {
    "origin": "(const int *idx)",
    "local": ""
  },
  {
    "origin": "returns reference to the specified element",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const int *idx) const",
    "local": ""
  },
  {
    "origin": "returns read-only reference to the specified element",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;idx)",
    "local": ""
  },
  {
    "origin": "returns reference to the specified element",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;idx) const",
    "local": ""
  },
  {
    "origin": "returns read-only reference to the specified element",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int idx0)",
    "local": ""
  },
  {
    "origin": "returns reference to the specified element (1D case)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int idx0) const",
    "local": ""
  },
  {
    "origin": "returns read-only reference to the specified element (1D case)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns reference to the specified element (2D case)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ") const",
    "local": ""
  },
  {
    "origin": "returns read-only reference to the specified element (2D case)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int idx0, int idx1, int idx2)",
    "local": ""
  },
  {
    "origin": "returns reference to the specified element (3D case)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int idx0, int idx1, int idx2) const",
    "local": ""
  },
  {
    "origin": "returns read-only reference to the specified element (3D case)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "pt)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "pt) const",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;m)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;m)",
    "local": ""
  },
  {
    "origin": "(const _Tp &amp;s)",
    "local": ""
  },
  {
    "origin": "set all the elements to s.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;e)",
    "local": ""
  },
  {
    "origin": "assign a matrix expression",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;&amp;m)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;&amp;m)",
    "local": ""
  },
  {
    "origin": "(int y)",
    "local": ""
  },
  {
    "origin": "more convenient forms of row and element access operators",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int y) const",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "equivalent to",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int y) const",
    "local": ""
  },
  {
    "origin": "overridden forms of",
    "local": ""
  },
  {
    "origin": "etc.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int i=0) const",
    "local": ""
  },
  {
    "origin": "(int i=0) const",
    "local": ""
  },
  {
    "origin": "returns",
    "local": ""
  },
  {
    "origin": "/sizeof(_Tp)",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "&#160;Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "(int",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "(int",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ", const",
    "local": ""
  },
  {
    "origin": "&amp;s)",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ", const",
    "local": ""
  },
  {
    "origin": "&amp;s)",
    "local": ""
  },
  {
    "origin": "(int ndims, const int *sizes, int",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt; int &gt; &amp;sizes, int",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "(int ndims, const int *sizes, int",
    "local": ""
  },
  {
    "origin": ", const",
    "local": ""
  },
  {
    "origin": "&amp;s)",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt; int &gt; &amp;sizes, int",
    "local": ""
  },
  {
    "origin": ", const",
    "local": ""
  },
  {
    "origin": "&amp;s)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;m)",
    "local": ""
  },
  {
    "origin": "(int",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ", void *",
    "local": ""
  },
  {
    "origin": ", size_t",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ", void *",
    "local": ""
  },
  {
    "origin": ", size_t",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "(int ndims, const int *sizes, int",
    "local": ""
  },
  {
    "origin": ", void *",
    "local": ""
  },
  {
    "origin": ", const size_t *steps=0)",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt; int &gt; &amp;sizes, int",
    "local": ""
  },
  {
    "origin": ", void *",
    "local": ""
  },
  {
    "origin": ", const size_t *steps=0)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;m, const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": ", const",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;m, const",
    "local": ""
  },
  {
    "origin": "&amp;roi)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;m, const",
    "local": ""
  },
  {
    "origin": "*ranges)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;m, const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;ranges)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt; _Tp &gt; &amp;vec, bool copyData=false)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , typename = typename std::enable_if&lt;std::is_arithmetic&lt;_Tp&gt;::value&gt;::type&gt;",
    "local": ""
  },
  {
    "origin": "(const std::initializer_list&lt; _Tp &gt; list)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const std::initializer_list&lt; int &gt; sizes, const std::initializer_list&lt; _Tp &gt; list)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , size_t _Nm&gt;",
    "local": ""
  },
  {
    "origin": "(const std::array&lt; _Tp, _Nm &gt; &amp;arr, bool copyData=false)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, n &gt; &amp;vec, bool copyData=true)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int m, int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp, m, n &gt; &amp;mtx, bool copyData=true)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt; &amp;pt, bool copyData=true)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt; &amp;pt, bool copyData=true)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt; &amp;commaInitializer)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;m)",
    "local": ""
  },
  {
    "origin": "download data from GpuMat",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;&amp;m)",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "destructor - calls",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Increments the reference counter.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int dtop, int dbottom, int dleft, int dright)",
    "local": ""
  },
  {
    "origin": "Adjusts a submatrix size and position within the parent matrix.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;m, int",
    "local": ""
  },
  {
    "origin": "=-1) const",
    "local": ""
  },
  {
    "origin": "Provides a functional form of convertTo.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(int i0=0)",
    "local": ""
  },
  {
    "origin": "Returns a reference to the specified array element.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(int i0=0) const",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(int",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(int",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ") const",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(int i0, int i1, int i2)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(int i0, int i1, int i2) const",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const int *idx)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const int *idx) const",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;idx)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;idx) const",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "pt)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "pt) const",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Returns the matrix iterator and sets it to the first matrix element.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Returns the number of matrix channels.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int elemChannels, int",
    "local": ""
  },
  {
    "origin": "=-1, bool requireContinuous=true) const",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Creates a full copy of the array and the underlying data.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int x) const",
    "local": ""
  },
  {
    "origin": "Creates a matrix header for the specified matrix column.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int startcol, int endcol) const",
    "local": ""
  },
  {
    "origin": "Creates a matrix header for the specified column span.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;r) const",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "m, int rtype, double alpha=1, double beta=0) const",
    "local": ""
  },
  {
    "origin": "Converts an array to another data type with optional scaling.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;m)",
    "local": ""
  },
  {
    "origin": "internal use function; properly re-allocates _size, _step arrays",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "m) const",
    "local": ""
  },
  {
    "origin": "Copies the matrix to another one.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "m,",
    "local": ""
  },
  {
    "origin": "mask) const",
    "local": ""
  },
  {
    "origin": "(int",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Allocates new array data if needed.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "(int ndims, const int *sizes, int",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt; int &gt; &amp;sizes, int",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "m) const",
    "local": ""
  },
  {
    "origin": "Computes a cross-product of two 3-element vectors.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "internal use function, consider to use 'release' method instead; deallocates the matrix data",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Returns the depth of a matrix element.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int d=0) const",
    "local": ""
  },
  {
    "origin": "Extracts a diagonal from a matrix.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "m) const",
    "local": ""
  },
  {
    "origin": "Computes a dot-product of two vectors.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Returns the matrix element size in bytes.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Returns the size of each matrix element channel in bytes.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Returns true if the array has no elements.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Returns the matrix iterator and sets it to the after-last matrix element.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , typename Functor &gt;",
    "local": ""
  },
  {
    "origin": "(const Functor &amp;operation)",
    "local": ""
  },
  {
    "origin": "Runs the given functor over all matrix elements in parallel.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , typename Functor &gt;",
    "local": ""
  },
  {
    "origin": "(const Functor &amp;operation) const",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "accessFlags,",
    "local": ""
  },
  {
    "origin": "usageFlags=",
    "local": ""
  },
  {
    "origin": ") const",
    "local": ""
  },
  {
    "origin": "retrieve",
    "local": ""
  },
  {
    "origin": "from",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int method=",
    "local": ""
  },
  {
    "origin": ") const",
    "local": ""
  },
  {
    "origin": "Inverses a matrix.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Reports whether the matrix is continuous or not.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "returns true if the matrix is a submatrix of another matrix",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;wholeSize,",
    "local": ""
  },
  {
    "origin": "&amp;ofs) const",
    "local": ""
  },
  {
    "origin": "Locates the matrix header within a parent matrix.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "m, double scale=1) const",
    "local": ""
  },
  {
    "origin": "Performs an element-wise multiplication or division of the two matrices.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int m, int n&gt;",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , std::size_t _Nm&gt;",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": ") const",
    "local": ""
  },
  {
    "origin": "Extracts a rectangular submatrix.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;roi) const",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "*ranges) const",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "&gt; &amp;ranges) const",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;m)",
    "local": ""
  },
  {
    "origin": "assignment operators",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;expr)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;s)",
    "local": ""
  },
  {
    "origin": "Sets all or some of the array elements to the specified value.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "&amp;&amp;m)",
    "local": ""
  },
  {
    "origin": "(size_t nelems=1)",
    "local": ""
  },
  {
    "origin": "Removes elements from the bottom of the matrix.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int i0=0)",
    "local": ""
  },
  {
    "origin": "Returns a pointer to the specified matrix row.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "(int i0=0) const",
    "local": ""
  },
  {
    "origin": "(int",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "(int",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ") const",
    "local": ""
  },
  {
    "origin": "(int i0, int i1, int i2)",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "(int i0, int i1, int i2) const",
    "local": ""
  },
  {
    "origin": "(const int *idx)",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "(const int *idx) const",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;idx)",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;idx) const",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(int i0=0)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(int i0=0) const",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(int",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(int",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ") const",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(int i0, int i1, int i2)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(int i0, int i1, int i2) const",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const int *idx)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const int *idx) const",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;idx)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , int n&gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; int, n &gt; &amp;idx) const",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const _Tp &amp;elem)",
    "local": ""
  },
  {
    "origin": "Adds elements to the bottom of the matrix.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt; &amp;elem)",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(const std::vector&lt; _Tp &gt; &amp;elem)",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;m)",
    "local": ""
  },
  {
    "origin": "(const void *elem)",
    "local": ""
  },
  {
    "origin": "internal function",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "Decrements the reference counter and deallocates the matrix if needed.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(size_t sz)",
    "local": ""
  },
  {
    "origin": "Reserves space for the certain number of rows.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(size_t sz)",
    "local": ""
  },
  {
    "origin": "Reserves space for the certain number of bytes.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int cn, int",
    "local": ""
  },
  {
    "origin": "=0) const",
    "local": ""
  },
  {
    "origin": "Changes the shape and/or the number of channels of a 2D matrix without copying the data.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int cn, int newndims, const int *newsz) const",
    "local": ""
  },
  {
    "origin": "(int cn, const std::vector&lt; int &gt; &amp;newshape) const",
    "local": ""
  },
  {
    "origin": "(size_t sz)",
    "local": ""
  },
  {
    "origin": "Changes the number of matrix rows.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(size_t sz, const",
    "local": ""
  },
  {
    "origin": "&amp;s)",
    "local": ""
  },
  {
    "origin": "(int y) const",
    "local": ""
  },
  {
    "origin": "Creates a matrix header for the specified matrix row.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int startrow, int endrow) const",
    "local": ""
  },
  {
    "origin": "Creates a matrix header for the specified row span.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;r) const",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "value,",
    "local": ""
  },
  {
    "origin": "mask=",
    "local": ""
  },
  {
    "origin": "())",
    "local": ""
  },
  {
    "origin": "Sets all or some of the array elements to the specified value.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int i=0) const",
    "local": ""
  },
  {
    "origin": "Returns a normalized step.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Transposes a matrix.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Returns the total number of array elements.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "(int startDim, int endDim=INT_MAX) const",
    "local": ""
  },
  {
    "origin": "Returns the total number of array elements.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "() const",
    "local": ""
  },
  {
    "origin": "Returns the type of a matrix element.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "internal use method: updates the continuity flag",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "Static Public Member Functions",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(int",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(int",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(int _ndims, const int *_sizes)",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(int",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "overridden forms of",
    "local": ""
  },
  {
    "origin": "etc. Data type is omitted, of course",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(int _ndims, const int *_sizes)",
    "local": ""
  },
  {
    "origin": "&#160;Static Public Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(const",
    "local": ""
  },
  {
    "origin": "&amp;d)",
    "local": ""
  },
  {
    "origin": "creates a diagonal matrix",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(int",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns an identity matrix of the specified size and type.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "()",
    "local": ""
  },
  {
    "origin": "and the standard allocator",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(int",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns an array of all 1's of the specified size and type.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(int ndims, const int *sz, int",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "*",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(int",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Returns a zero array of the specified size and type.",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ", int",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "(int ndims, const int *sz, int",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Additional Inherited Members",
    "local": ""
  },
  {
    "origin": "&#160;Public Attributes inherited from",
    "local": ""
  },
  {
    "origin": "custom allocator",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "pointer to the data",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "helper fields used in locateROI and adjustROI",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "interaction with",
    "local": ""
  },
  {
    "origin": "More...",
    "local": ""
  },
  {
    "origin": "&#160;Protected Member Functions inherited from",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp , typename Functor &gt;",
    "local": ""
  },
  {
    "origin": "(const Functor &amp;operation)",
    "local": ""
  },
  {
    "origin": "Detailed Description",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "class cv::Mat_&lt; _Tp &gt;",
    "local": ""
  },
  {
    "origin": "Template matrix class derived from",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "The class",
    "local": ""
  },
  {
    "origin": "is a",
    "local": ""
  },
  {
    "origin": "thin",
    "local": ""
  },
  {
    "origin": "template wrapper on top of the",
    "local": ""
  },
  {
    "origin": "class. It does not have any extra data fields. Nor this class nor",
    "local": ""
  },
  {
    "origin": "has any virtual methods. Thus, references or pointers to these two classes can be freely but carefully converted one to another. For example:",
    "local": ""
  },
  {
    "origin": "While",
    "local": ""
  },
  {
    "origin": "is sufficient in most cases,",
    "local": ""
  },
  {
    "origin": "can be more convenient if you use a lot of element access operations and if you know matrix type at the compilation time. Note that",
    "local": ""
  },
  {
    "origin": "and",
    "local": ""
  },
  {
    "origin": "do absolutely the same and run at the same speed, but the latter is certainly shorter:",
    "local": ""
  },
  {
    "origin": "To use",
    "local": ""
  },
  {
    "origin": "for multi-channel images/matrices, pass",
    "local": ""
  },
  {
    "origin": "as a",
    "local": ""
  },
  {
    "origin": "parameter:",
    "local": ""
  },
  {
    "origin": "is fully compatible with C++11 range-based for loop. For example such loop can be used to safely apply look-up table:",
    "local": ""
  },
  {
    "origin": "Member Typedef Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "channel_type",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;::",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "const_iterator",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "iterator",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "typedef",
    "local": ""
  },
  {
    "origin": "&lt;_Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "value_type",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "typedef _Tp",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "Constructor &amp; Destructor Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Mat_()",
    "local": ""
  },
  {
    "origin": "[1/28]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "default constructor",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Mat_()",
    "local": ""
  },
  {
    "origin": "[2/28]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "_rows",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "_cols",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "equivalent to Mat(_rows, _cols, DataType&lt;_Tp&gt;::type)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Mat_()",
    "local": ""
  },
  {
    "origin": "[3/28]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "_rows",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "_cols",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "constructor that sets each matrix element to specified value",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Mat_()",
    "local": ""
  },
  {
    "origin": "[4/28]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "_size",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "explicit",
    "local": ""
  },
  {
    "origin": "equivalent to Mat(_size, DataType&lt;_Tp&gt;::type)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Mat_()",
    "local": ""
  },
  {
    "origin": "[5/28]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "_size",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "constructor that sets each matrix element to specified value",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Mat_()",
    "local": ""
  },
  {
    "origin": "[6/28]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "_ndims",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "_sizes",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "n-dim array constructor",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Mat_()",
    "local": ""
  },
  {
    "origin": "[7/28]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "_ndims",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "_sizes",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "value",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "n-dim array constructor that sets each matrix element to specified value",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Mat_()",
    "local": ""
  },
  {
    "origin": "[8/28]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "copy/conversion constructor. If m is of different type, it's converted",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Mat_()",
    "local": ""
  },
  {
    "origin": "[9/28]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "copy constructor",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Mat_()",
    "local": ""
  },
  {
    "origin": "[10/28]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "_rows",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "_cols",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "_data",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "_step",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "constructs a matrix on top of user-allocated data. step is in bytes(!!!), regardless of the type",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Mat_()",
    "local": ""
  },
  {
    "origin": "[11/28]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "_ndims",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "_sizes",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "_data",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "_steps",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "constructs n-dim matrix on top of user-allocated data. steps are in bytes(!!!), regardless of the type",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Mat_()",
    "local": ""
  },
  {
    "origin": "[12/28]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "rowRange",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "colRange",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "selects a submatrix",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Mat_()",
    "local": ""
  },
  {
    "origin": "[13/28]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "roi",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "selects a submatrix",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Mat_()",
    "local": ""
  },
  {
    "origin": "[14/28]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ranges",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "selects a submatrix, n-dim version",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Mat_()",
    "local": ""
  },
  {
    "origin": "[15/28]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "ranges",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "selects a submatrix, n-dim version",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Mat_()",
    "local": ""
  },
  {
    "origin": "[16/28]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "e",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "explicit",
    "local": ""
  },
  {
    "origin": "from a matrix expression",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Mat_()",
    "local": ""
  },
  {
    "origin": "[17/28]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "vec",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "copyData",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "explicit",
    "local": ""
  },
  {
    "origin": "makes a matrix out of",
    "local": ""
  },
  {
    "origin": ", std::vector,",
    "local": ""
  },
  {
    "origin": "or",
    "local": ""
  },
  {
    "origin": ". The matrix will have a single column",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Mat_()",
    "local": ""
  },
  {
    "origin": "[18/28]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "vec",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "copyData",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "explicit",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Mat_()",
    "local": ""
  },
  {
    "origin": "[19/28]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "template&lt;int m, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "mtx",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "copyData",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "explicit",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Mat_()",
    "local": ""
  },
  {
    "origin": "[20/28]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "pt",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "copyData",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "explicit",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Mat_()",
    "local": ""
  },
  {
    "origin": "[21/28]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "pt",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "copyData",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "explicit",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Mat_()",
    "local": ""
  },
  {
    "origin": "[22/28]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "commaInitializer",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "explicit",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Mat_()",
    "local": ""
  },
  {
    "origin": "[23/28]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "values",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Mat_()",
    "local": ""
  },
  {
    "origin": "[24/28]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "sizes",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "values",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "explicit",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Mat_()",
    "local": ""
  },
  {
    "origin": "[25/28]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "template&lt;std::size_t _Nm&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "arr",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "copyData",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "explicit",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Mat_()",
    "local": ""
  },
  {
    "origin": "[26/28]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Mat_()",
    "local": ""
  },
  {
    "origin": "[27/28]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "Mat_()",
    "local": ""
  },
  {
    "origin": "[28/28]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "e",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "Member Function Documentation",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "adjustROI()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::adjustROI",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "dtop",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dbottom",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dleft",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "dright",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "some more overridden methods",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "begin()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::begin",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "iterators; they are smart enough to skip gaps in the end of rows",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "begin()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::begin",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "channels()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::channels",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "clone()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::clone",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "col()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::col",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "x",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "create()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::create",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "_rows",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "_cols",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "equivalent to Mat::create(_rows, _cols, DataType&lt;_Tp&gt;::type)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "create()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::create",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "_size",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "equivalent to Mat::create(_size, DataType&lt;_Tp&gt;::type)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "create()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::create",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "_ndims",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "_sizes",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "equivalent to Mat::create(_ndims, _sizes, DatType&lt;_Tp&gt;::type)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "cross()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::cross",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "cross-product",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "depth()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::depth",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "diag()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::diag",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "d",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "elemSize()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "size_t",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::elemSize",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "overridden forms of",
    "local": ""
  },
  {
    "origin": "etc.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "elemSize1()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "size_t",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::elemSize1",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "end()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::end",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "end()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::end",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "eye()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::eye",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "rows",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "cols",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "eye()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::eye",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "size",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "forEach()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "template&lt;typename Functor &gt;",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::forEach",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "operation",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "template methods for for operation over all matrix elements.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "forEach()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "template&lt;typename Functor &gt;",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::forEach",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "operation",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ones()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::ones",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "rows",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "cols",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ones()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::ones",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "size",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "ones()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::ones",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "_ndims",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "_sizes",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator Mat_",
    "local": ""
  },
  {
    "origin": "< T2 >()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "template&lt;typename T2 &gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::operator",
    "local": ""
  },
  {
    "origin": "&lt; T2 &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "data type conversion",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator Matx",
    "local": ""
  },
  {
    "origin": "< typename DataType",
    "local": ""
  },
  {
    "origin": "< _Tp >::channel_type, m, n >()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "template&lt;int m, int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::operator",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": ", m, n &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "conversion to",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator std::array",
    "local": ""
  },
  {
    "origin": "< _Tp, _Nm >()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "template&lt;std::size_t _Nm&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::operator std::array&lt; _Tp, _Nm &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "conversion to array.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator std::vector",
    "local": ""
  },
  {
    "origin": "< _Tp >()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::operator std::vector&lt; _Tp &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "conversion to vector.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator Vec",
    "local": ""
  },
  {
    "origin": "< typename DataType",
    "local": ""
  },
  {
    "origin": "< _Tp >::channel_type, n >()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::operator",
    "local": ""
  },
  {
    "origin": "&lt; typename",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::",
    "local": ""
  },
  {
    "origin": ", n &gt;",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "conversion to",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator()()",
    "local": ""
  },
  {
    "origin": "[1/16]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::operator()",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "rowRange",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "colRange",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator()()",
    "local": ""
  },
  {
    "origin": "[2/16]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::operator()",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "roi",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator()()",
    "local": ""
  },
  {
    "origin": "[3/16]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::operator()",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "ranges",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator()()",
    "local": ""
  },
  {
    "origin": "[4/16]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::operator()",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const std::vector&lt;",
    "local": ""
  },
  {
    "origin": "ranges",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator()()",
    "local": ""
  },
  {
    "origin": "[5/16]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "_Tp&amp;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::operator()",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns reference to the specified element",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator()()",
    "local": ""
  },
  {
    "origin": "[6/16]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "const _Tp&amp;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::operator()",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns read-only reference to the specified element",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator()()",
    "local": ""
  },
  {
    "origin": "[7/16]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "_Tp&amp;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::operator()",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns reference to the specified element",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator()()",
    "local": ""
  },
  {
    "origin": "[8/16]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "template&lt;int n&gt;",
    "local": ""
  },
  {
    "origin": "const _Tp&amp;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::operator()",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "idx",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns read-only reference to the specified element",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator()()",
    "local": ""
  },
  {
    "origin": "[9/16]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "_Tp&amp;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::operator()",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "idx0",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns reference to the specified element (1D case)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator()()",
    "local": ""
  },
  {
    "origin": "[10/16]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "const _Tp&amp;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::operator()",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "idx0",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns read-only reference to the specified element (1D case)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator()()",
    "local": ""
  },
  {
    "origin": "[11/16]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "_Tp&amp;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::operator()",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "row",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "col",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns reference to the specified element (2D case)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator()()",
    "local": ""
  },
  {
    "origin": "[12/16]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "const _Tp&amp;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::operator()",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "row",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "col",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns read-only reference to the specified element (2D case)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator()()",
    "local": ""
  },
  {
    "origin": "[13/16]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "_Tp&amp;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::operator()",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "idx0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx2",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "returns reference to the specified element (3D case)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator()()",
    "local": ""
  },
  {
    "origin": "[14/16]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "const _Tp&amp;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::operator()",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "idx0",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx1",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "idx2",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns read-only reference to the specified element (3D case)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator()()",
    "local": ""
  },
  {
    "origin": "[15/16]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "_Tp&amp;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::operator()",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "pt",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator()()",
    "local": ""
  },
  {
    "origin": "[16/16]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "const _Tp&amp;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::operator()",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "pt",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator=()",
    "local": ""
  },
  {
    "origin": "[1/6]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::operator=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator=()",
    "local": ""
  },
  {
    "origin": "[2/6]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::operator=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator=()",
    "local": ""
  },
  {
    "origin": "[3/6]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::operator=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "s",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "set all the elements to s.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator=()",
    "local": ""
  },
  {
    "origin": "[4/6]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::operator=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "e",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "assign a matrix expression",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator=()",
    "local": ""
  },
  {
    "origin": "[5/6]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::operator=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator=()",
    "local": ""
  },
  {
    "origin": "[6/6]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&amp;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::operator=",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "m",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator[]()",
    "local": ""
  },
  {
    "origin": "[1/2]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "_Tp*",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::operator[]",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "y",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "more convenient forms of row and element access operators",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "operator[]()",
    "local": ""
  },
  {
    "origin": "[2/2]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "const _Tp*",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::operator[]",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "y",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "release()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "void",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::release",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "equivalent to",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "row()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::row",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "y",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "overridden forms of",
    "local": ""
  },
  {
    "origin": "etc.",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "step1()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "size_t",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::step1",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "i",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "stepT()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "size_t",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::stepT",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "i",
    "local": ""
  },
  {
    "origin": "=",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "returns",
    "local": ""
  },
  {
    "origin": "/sizeof(_Tp)",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "type()",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "int",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::type",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "const",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "zeros()",
    "local": ""
  },
  {
    "origin": "[1/3]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::zeros",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "rows",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "cols",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "overridden forms of",
    "local": ""
  },
  {
    "origin": "etc. Data type is omitted, of course",
    "local": ""
  },
  {
    "origin": "Examples:",
    "local": ""
  },
  {
    "origin": ".",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "zeros()",
    "local": ""
  },
  {
    "origin": "[2/3]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::zeros",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "size",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&#9670;&nbsp;",
    "local": ""
  },
  {
    "origin": "zeros()",
    "local": ""
  },
  {
    "origin": "[3/3]",
    "local": ""
  },
  {
    "origin": "template&lt;typename _Tp&gt;",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "&lt; _Tp &gt;::zeros",
    "local": ""
  },
  {
    "origin": "(",
    "local": ""
  },
  {
    "origin": "_ndims",
    "local": ""
  },
  {
    "origin": ",",
    "local": ""
  },
  {
    "origin": "_sizes",
    "local": ""
  },
  {
    "origin": ")",
    "local": ""
  },
  {
    "origin": "static",
    "local": ""
  },
  {
    "origin": "The documentation for this class was generated from the following file:",
    "local": ""
  },
  {
    "origin": "opencv2/core/",
    "local": ""
  },
  {
    "origin": "Generated on Fri Apr 2 2021 11:36:43 for OpenCV by &#160;",
    "local": ""
  }
]